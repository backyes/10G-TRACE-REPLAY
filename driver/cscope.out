cscope 15 $HOME/labwork/io_engine/driver -q 0000009358 0000977704
	@ixgbe.h

28 #i‚de‡
_IXGBE_H_


29 
	#_IXGBE_H_


	)

31 #i‚de‡
IXGBE_NO_LRO


32 
	~<√t/t˝.h
>

35 
	~<löux/pci.h
>

36 
	~<löux/√tdevi˚.h
>

37 
	~<löux/vmÆloc.h
>

39 #ifde‡
SIOCETHTOOL


40 
	~<löux/ëhtoﬁ.h
>

42 #ifde‡
NETIF_F_HW_VLAN_TX


43 
	~<löux/if_vœn.h
>

47 #i‡
deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

48 
	#IXGBE_DCA


	)

49 
	~<löux/dˇ.h
>

53 
	~"ixgbe_dcb.h
"

56 
	~"kcom∑t.h
"

58 #i‡
deföed
(
CONFIG_FCOE
Ë|| deföed(
CONFIG_FCOE_MODULE
)

59 
	#IXGBE_FCOE


	)

60 
	~"ixgbe_fc€.h
"

63 
	~"ixgbe_≠i.h
"

65 
	#PFX
 "ixgbe: "

	)

66 
	#DPRINTK
(
∆evñ
, 
kÀvñ
, 
fmt
, 
¨gs
...) \

67 (()((
NETIF_MSG_
##
∆evñ
 & 
ad≠ãr
->
msg_íabÀ
) && \

68 
	`¥ötk
(
KERN_
##
kÀvñ
 
PFX
 "%s: %s: " 
fmt
, 
ad≠ãr
->
√tdev
->
«me
, \

69 
__FUNCTION__
 , ## 
¨gs
)))

	)

73 
	#IXGBE_DEFAULT_TXD
 4096

	)

74 
	#IXGBE_MAX_TXD
 4096

	)

75 
	#IXGBE_MIN_TXD
 64

	)

77 
	#IXGBE_DEFAULT_RXD
 4096

	)

78 
	#IXGBE_MAX_RXD
 4096

	)

79 
	#IXGBE_MIN_RXD
 64

	)

81 
	#IXGBE_SUBWINDOW_BITS
 10

	)

82 
	#IXGBE_SUBWINDOW_SIZE
 (1 << 
IXGBE_SUBWINDOW_BITS
)

	)

83 
	#IXGBE_SUBWINDOW_MASK
 (
IXGBE_SUBWINDOW_SIZE
 - 1)

	)

84 
	#IXGBE_MAX_SUBWINDOWS
 (
IXGBE_MAX_TXD
 / 
IXGBE_SUBWINDOW_SIZE
)

	)

87 
	#IXGBE_DEFAULT_FCRTL
 0x10000

	)

88 
	#IXGBE_MIN_FCRTL
 0x40

	)

89 
	#IXGBE_MAX_FCRTL
 0x7FF80

	)

90 
	#IXGBE_DEFAULT_FCRTH
 0x20000

	)

91 
	#IXGBE_MIN_FCRTH
 0x600

	)

92 
	#IXGBE_MAX_FCRTH
 0x7FFF0

	)

93 
	#IXGBE_DEFAULT_FCPAUSE
 0xFFFF

	)

94 
	#IXGBE_MIN_FCPAUSE
 0

	)

95 
	#IXGBE_MAX_FCPAUSE
 0xFFFF

	)

98 
	#IXGBE_RXBUFFER_64
 64

	)

99 
	#IXGBE_RXBUFFER_128
 128

	)

100 
	#IXGBE_RXBUFFER_256
 256

	)

101 
	#IXGBE_RXBUFFER_2048
 2048

	)

102 
	#IXGBE_RXBUFFER_4096
 4096

	)

103 
	#IXGBE_RXBUFFER_8192
 8192

	)

104 
	#IXGBE_MAX_RXBUFFER
 16384

	)

106 
	#IXGBE_RX_HDR_SIZE
 
IXGBE_RXBUFFER_256


	)

108 
	#MAXIMUM_ETHERNET_VLAN_SIZE
 (
VLAN_ETH_FRAME_LEN
 + 
ETH_FCS_LEN
)

	)

110 #i‡
deföed
(
IXGBE_DCB
Ë|| deföed(
IXGBE_RSS
) || \

111 
	$deföed
(
IXGBE_VMDQ
)

112 
	#IXGBE_MQ


	)

116 
	#IXGBE_RX_BUFFER_WRITE
 16

	)

118 
	#IXGBE_TX_FLAGS_CSUM
 (
u32
)(1)

	)

119 
	#IXGBE_TX_FLAGS_VLAN
 (
u32
)(1 << 1)

	)

120 
	#IXGBE_TX_FLAGS_TSO
 (
u32
)(1 << 2)

	)

121 
	#IXGBE_TX_FLAGS_IPV4
 (
u32
)(1 << 3)

	)

122 
	#IXGBE_TX_FLAGS_FCOE
 (
u32
)(1 << 4)

	)

123 
	#IXGBE_TX_FLAGS_FSO
 (
u32
)(1 << 5)

	)

124 
	#IXGBE_TX_FLAGS_VLAN_MASK
 0xffff0000

	)

125 
	#IXGBE_TX_FLAGS_VLAN_PRIO_MASK
 0x0000e000

	)

126 
	#IXGBE_TX_FLAGS_VLAN_SHIFT
 16

	)

128 
	#IXGBE_MAX_RSC_INT_RATE
 162760

	)

130 #i‚de‡
IXGBE_NO_LRO


131 
	#IXGBE_LRO_MAX
 32

	)

132 
	#IXGBE_LRO_GLOBAL
 10

	)

134 
	sixgbe_Ão_°©s
 {

135 
u32
 
Êushed
;

136 
u32
 
cﬂl
;

137 
u32
 
ªcy˛ed
;

140 
	sixgbe_Ão_desc
 {

141 
hli°_node
 
Ão_node
;

142 
sk_buff
 *
skb
;

143 
u32
 
sour˚_ù
;

144 
u32
 
de°_ù
;

145 
u16
 
sour˚_p‹t
;

146 
u16
 
de°_p‹t
;

147 
u16
 
vœn_èg
;

148 
u16
 
Àn
;

149 
u32
 
√xt_£q
;

150 
u32
 
ack_£q
;

151 
u16
 
wödow
;

152 
u16
 
mss
;

153 
u16
 
›t_byãs
;

154 
u16
 
psh
:1;

155 
u32
 
tsvÆ
;

156 
u32
 
t£¸
;

157 
u32
 
≠≥nd_˙t
;

160 
	sixgbe_Ão_li°
 {

161 
hli°_hód
 
a˘ive
;

162 
hli°_hód
 
‰ì
;

163 
a˘ive_˙t
;

164 
ixgbe_Ão_°©s
 
°©s
;

170 
	sixgbe_tx_buf„r
 {

171 
time_°amp
;

172 
u16
 
Àngth
;

173 
u16
 
√xt_to_w©ch
;

176 
	sixgbe_rx_buf„r
 {

177 
u16
 
Àngth
;

180 
	sixgbe_queue_°©s
 {

181 
u64
 
∑ckës
;

182 
u64
 
byãs
;

185 
____ˇchñöe_Æig√d
 
ixgbe_rög
 {

186 *
desc
;

188 
ixgbe_tx_buf„r
 *
tx_buf„r_öfo
;

189 
ixgbe_rx_buf„r
 *
rx_buf„r_öfo
;

192 
ixgbe_ad≠ãr
 *
ad≠ãr
;

194 
u8
 
©r_ßm∂e_øã
;

195 
u8
 
©r_cou¡
;

196 
u16
 
cou¡
;

197 
u16
 
rx_buf_Àn
;

198 
u16
 
√xt_to_u£
;

199 
u16
 
√xt_to_˛ón
;

201 
u8
 
queue_ödex
;

203 
u16
 
hód
;

204 
u16
 
èû
;

206 
tŸÆ_byãs
;

207 
tŸÆ_∑ckës
;

209 #i‡
	`deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

211 
˝u
;

213 
u16
 
ªg_idx
;

218 
ixgbe_queue_°©s
 
°©s
;

219 
ªöô_°©e
;

220 
u64
 
rsc_cou¡
;

221 
size
;

222 
dma_addr_t
 
dma
;

225 
u16
 
queued
;

227 
u8
 *
wödow
[
IXGBE_MAX_SUBWINDOWS
];

228 
dma_addr_t
 
dma_wödow
[
IXGBE_MAX_SUBWINDOWS
];

229 
wödow_size
;

231 
•ölock_t
 
lock
;

232 
waô_queue_hód_t
 *
wq
;

233 
	}
};

235 
	eixgbe_rög_f_íum
 {

236 
	mRING_F_NONE
 = 0,

237 
	mRING_F_DCB
,

238 
	mRING_F_VMDQ
,

239 
	mRING_F_RXQ
,

240 
	mRING_F_TXQ
,

241 
	mRING_F_FDIR
,

242 
	mRING_F_ARRAY_SIZE


245 
	#IXGBE_MAX_DCB_INDICES
 8

	)

246 
	#IXGBE_MAX_RSS_INDICES
 16

	)

247 
	#IXGBE_MAX_VMDQ_INDICES
 64

	)

248 
	#IXGBE_MAX_FDIR_INDICES
 64

	)

249 
	sixgbe_rög_„©uª
 {

250 
	mödi˚s
;

251 
	mmask
;

254 
	#MAX_RX_QUEUES
 128

	)

255 
	#MAX_TX_QUEUES
 128

	)

257 
	#MAX_RX_PACKET_BUFFERS
 ((
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) \

258 ? 8 : 1)

	)

259 
	#MAX_TX_PACKET_BUFFERS
 
MAX_RX_PACKET_BUFFERS


	)

264 
	sixgbe_q_ve˘‹
 {

265 
ixgbe_ad≠ãr
 *
	mad≠ãr
;

266 
	mv_idx
;

269 #ifde‡
CONFIG_IXGBE_NAPI


270 
«pi_°ru˘
 
	m«pi
;

272 
DECLARE_BITMAP
(
rxr_idx
, 
MAX_RX_QUEUES
);

273 
DECLARE_BITMAP
(
txr_idx
, 
MAX_TX_QUEUES
);

274 
u8
 
	mrxr_cou¡
;

275 
u8
 
	mtxr_cou¡
;

276 
u8
 
	mtx_ôr
;

277 
u8
 
	mrx_ôr
;

278 
u32
 
	meôr
;

279 #i‚de‡
IXGBE_NO_LRO


280 
ixgbe_Ão_li°
 *
	mÃﬁi°
;

282 
	m«me
[
IFNAMSIZ
 + 9];

283 #i‚de‡
HAVE_NETDEV_NAPI_LIST


284 
√t_devi˚
 
	mpﬁl_dev
;

293 
	#EITR_INTS_PER_SEC_TO_REG
(
_eôr
) \

294 ((
_eôr
Ë? (1000000000 / ((_eôrË* 256)Ë: 8)

	)

295 
	#EITR_REG_TO_INTS_PER_SEC
 
EITR_INTS_PER_SEC_TO_REG


	)

297 
	#IXGBE_DESC_UNUSED
(
R
) \

298 ((((
R
)->
√xt_to_˛ón
 > (R)->
√xt_to_u£
Ë? 0 : (R)->
cou¡
) + \

299 (
R
)->
√xt_to_˛ón
 - (R)->
√xt_to_u£
 - 1)

	)

301 
	#IXGBE_RX_DESC_ADV
(
R
, 
i
) \

302 (&(((
ixgbe_adv_rx_desc
 *)((
R
).
desc
))[
i
]))

	)

303 
	#IXGBE_TX_DESC_ADV
(
R
, 
i
) \

304 (&(((
ixgbe_adv_tx_desc
 *)((
R
).
desc
))[
i
]))

	)

305 
	#IXGBE_TX_CTXTDESC_ADV
(
R
, 
i
) \

306 (&(((
ixgbe_adv_tx_c⁄ãxt_desc
 *)((
R
).
desc
))[
i
]))

	)

308 
	#IXGBE_MAX_JUMBO_FRAME_SIZE
 16128

	)

310 #ifde‡
IXGBE_TCP_TIMER


311 
	#TCP_TIMER_VECTOR
 1

	)

313 
	#TCP_TIMER_VECTOR
 0

	)

315 
	#OTHER_VECTOR
 1

	)

316 
	#NON_Q_VECTORS
 (
OTHER_VECTOR
 + 
TCP_TIMER_VECTOR
)

	)

318 
	#IXGBE_MAX_MSIX_VECTORS_82599
 64

	)

319 
	#IXGBE_MAX_MSIX_Q_VECTORS_82599
 64

	)

320 
	#IXGBE_MAX_MSIX_Q_VECTORS_82598
 16

	)

321 
	#IXGBE_MAX_MSIX_VECTORS_82598
 18

	)

329 
	#MAX_MSIX_Q_VECTORS
 
IXGBE_MAX_MSIX_Q_VECTORS_82599


	)

330 
	#MAX_MSIX_COUNT
 
IXGBE_MAX_MSIX_VECTORS_82599


	)

333 
	#MIN_MSIX_Q_VECTORS
 2

	)

336 
	#MIN_MSIX_Q_VECTORS
 1

	)

338 
	#MIN_MSIX_COUNT
 (
MIN_MSIX_Q_VECTORS
 + 
NON_Q_VECTORS
)

	)

341 
	sixgbe_ad≠ãr
 {

342 
timî_li°
 
	mw©chdog_timî
;

343 #ifde‡
NETIF_F_HW_VLAN_TX


344 
vœn_group
 *
	mvlgΩ
;

346 
	mbd_numbî
;

347 
w‹k_°ru˘
 
	mª£t_èsk
;

348 
ixgbe_q_ve˘‹
 *
	mq_ve˘‹
[
MAX_MSIX_Q_VECTORS
];

349 
ixgbe_dcb_c⁄fig
 
	mdcb_cfg
;

350 
ixgbe_dcb_c⁄fig
 
	mãmp_dcb_cfg
;

351 
u8
 
	mdcb_£t_bôm≠
;

352 
ixgbe_fc_mode
 
	mœ°_lfc_mode
;

354 
	mnuma_node
;

357 
u32
 
	môr_£âög
;

358 
u16
 
	meôr_low
;

359 
u16
 
	meôr_high
;

362 
ixgbe_rög
 *
	mtx_rög
;

363 
	mnum_tx_queues
;

364 
u64
 
	mª°¨t_queue
;

365 
u64
 
	mhw_csum_tx_good
;

366 
u64
 
	mlsc_öt
;

367 
u64
 
	mhw_tso_˘xt
;

368 
u64
 
	mhw_tso6_˘xt
;

369 
u32
 
	mtx_timeout_cou¡
;

370 
boﬁ
 
	mdëe˘_tx_hung
;

373 
ixgbe_rög
 *
	mrx_rög
;

374 
	mnum_rx_queues
;

375 
	mnum_rx_poﬁs
;

376 
	mnum_rx_queues_≥r_poﬁ
;

377 
u64
 
	mhw_csum_rx_îr‹
;

378 
u64
 
	mhw_rx_no_dma_ªsour˚s
;

379 
u64
 
	mhw_csum_rx_good
;

380 
u64
 
	mn⁄_e›_descs
;

381 #i‚de‡
CONFIG_IXGBE_NAPI


382 
u64
 
	mrx_dr›≥d_backlog
;

384 
	mnum_msix_ve˘‹s
;

385 
	mmax_msix_q_ve˘‹s
;

386 
ixgbe_rög_„©uª
 
	mrög_„©uª
[
RING_F_ARRAY_SIZE
];

387 
msix_íåy
 *
	mmsix_íåõs
;

388 #ifde‡
IXGBE_TCP_TIMER


389 
úqªtu∫_t
 (*
msix_h™dÀrs
[
MAX_MSIX_COUNT
])(
	múq
, *
	md©a
,

390 
±_ªgs
 *
	mªgs
);

393 
u32
 
	mÆloc_rx_∑ge_Áûed
;

394 
u32
 
	mÆloc_rx_buff_Áûed
;

399 
u32
 
	mÊags
;

400 
	#IXGBE_FLAG_RX_CSUM_ENABLED
 (
u32
)(1)

	)

401 
	#IXGBE_FLAG_MSI_CAPABLE
 (
u32
)(1 << 1)

	)

402 
	#IXGBE_FLAG_MSI_ENABLED
 (
u32
)(1 << 2)

	)

403 
	#IXGBE_FLAG_MSIX_CAPABLE
 (
u32
)(1 << 3)

	)

404 
	#IXGBE_FLAG_MSIX_ENABLED
 (
u32
)(1 << 4)

	)

405 #i‚de‡
IXGBE_NO_LLI


406 
	#IXGBE_FLAG_LLI_PUSH
 (
u32
)(1 << 5)

	)

408 
	#IXGBE_FLAG_RX_1BUF_CAPABLE
 (
u32
)(1 << 6)

	)

409 
	#IXGBE_FLAG_RX_PS_CAPABLE
 (
u32
)(1 << 7)

	)

410 
	#IXGBE_FLAG_RX_PS_ENABLED
 (
u32
)(1 << 8)

	)

411 
	#IXGBE_FLAG_IN_NETPOLL
 (
u32
)(1 << 9)

	)

412 
	#IXGBE_FLAG_DCA_ENABLED
 (
u32
)(1 << 10)

	)

413 
	#IXGBE_FLAG_DCA_CAPABLE
 (
u32
)(1 << 11)

	)

414 
	#IXGBE_FLAG_DCA_ENABLED_DATA
 (
u32
)(1 << 12)

	)

415 
	#IXGBE_FLAG_MQ_CAPABLE
 (
u32
)(1 << 13)

	)

416 
	#IXGBE_FLAG_DCB_ENABLED
 (
u32
)(1 << 14)

	)

417 
	#IXGBE_FLAG_DCB_CAPABLE
 (
u32
)(1 << 15)

	)

418 
	#IXGBE_FLAG_RSS_ENABLED
 (
u32
)(1 << 16)

	)

419 
	#IXGBE_FLAG_RSS_CAPABLE
 (
u32
)(1 << 17)

	)

420 
	#IXGBE_FLAG_VMDQ_CAPABLE
 (
u32
)(1 << 18)

	)

421 
	#IXGBE_FLAG_VMDQ_ENABLED
 (
u32
)(1 << 19)

	)

422 
	#IXGBE_FLAG_FAN_FAIL_CAPABLE
 (
u32
)(1 << 20)

	)

423 
	#IXGBE_FLAG_NEED_LINK_UPDATE
 (
u32
)(1 << 22)

	)

424 
	#IXGBE_FLAG_IN_WATCHDOG_TASK
 (
u32
)(1 << 23)

	)

425 
	#IXGBE_FLAG_IN_SFP_LINK_TASK
 (
u32
)(1 << 24)

	)

426 
	#IXGBE_FLAG_IN_SFP_MOD_TASK
 (
u32
)(1 << 25)

	)

427 
	#IXGBE_FLAG_FDIR_HASH_CAPABLE
 (
u32
)(1 << 26)

	)

428 
	#IXGBE_FLAG_FDIR_PERFECT_CAPABLE
 (
u32
)(1 << 27)

	)

431 
	#IXGBE_FLAG_RX_KERNEL_ENABLE
 (
u32
)(1 << 28)

	)

433 
u32
 
	mÊags2
;

434 #i‚de‡
IXGBE_NO_HW_RSC


435 
	#IXGBE_FLAG2_RSC_CAPABLE
 (
u32
)(1)

	)

436 
	#IXGBE_FLAG2_RSC_ENABLED
 (
u32
)(1 << 1)

	)

438 #i‚de‡
IXGBE_NO_LRO


439 
	#IXGBE_FLAG2_SWLRO_ENABLED
 (
u32
)(1 << 2)

	)

441 
	#IXGBE_FLAG2_VMDQ_DEFAULT_OVERRIDE
 (
u32
)(1 << 3)

	)

444 
	#IXGBE_TRY_LINK_TIMEOUT
 (4 * 
HZ
)

	)

447 
√t_devi˚
 *
	m√tdev
;

448 
pci_dev
 *
	mpdev
;

449 
√t_devi˚_°©s
 
	m√t_°©s
;

450 #i‚de‡
IXGBE_NO_LRO


451 
ixgbe_Ão_°©s
 
	mÃo_°©s
;

454 #ifde‡
ETHTOOL_TEST


455 
u32
 
	mã°_i¸
;

456 
ixgbe_rög
 
	mã°_tx_rög
;

457 
ixgbe_rög
 
	mã°_rx_rög
;

461 
ixgbe_hw
 
	mhw
;

462 
u16
 
	mmsg_íabÀ
;

463 
ixgbe_hw_°©s
 
	m°©s
;

464 #i‚de‡
IXGBE_NO_LLI


465 
u32
 
	mŒi_p‹t
;

466 
u32
 
	mŒi_size
;

467 
u64
 
	mŒi_öt
;

468 
u32
 
	mŒi_ëy≥
;

469 
u32
 
	mŒi_vœn_¥i
;

472 
u32
 
	meôr_∑øm
;

474 
	m°©e
;

475 
u32
 *
	mc⁄fig_•a˚
;

476 
u64
 
	mtx_busy
;

477 
	mtx_rög_cou¡
;

478 
	mrx_rög_cou¡
;

480 
u32
 
	mlök_•ìd
;

481 
boﬁ
 
	mlök_up
;

482 
	mlök_check_timeout
;

484 
w‹k_°ru˘
 
	mw©chdog_èsk
;

485 
w‹k_°ru˘
 
	msÂ_èsk
;

486 
timî_li°
 
	msÂ_timî
;

487 
w‹k_°ru˘
 
	mmu…i•ìd_fibî_èsk
;

488 
w‹k_°ru˘
 
	msÂ_c⁄fig_moduÀ_èsk
;

489 
u64
 
	mÊm
;

490 
u32
 
	mfdú_pbÆloc
;

491 
u32
 
	m©r_ßm∂e_øã
;

492 
•ölock_t
 
	mfdú_≥r„˘_lock
;

493 
w‹k_°ru˘
 
	mfdú_ªöô_èsk
;

494 
u64
 
	mrsc_cou¡
;

495 
u32
 
	mwﬁ
;

496 
u16
 
	mì¥om_vîsi⁄
;

497 
boﬁ
 
	m√tdev_ªgi°îed
;

498 
	mlsc_öt_«me
[
IFNAMSIZ
 + 9];

499 #ifde‡
IXGBE_TCP_TIMER


500 
	mt˝_timî_«me
[
IFNAMSIZ
 + 9];

504 
	eixbge_°©e_t
 {

505 
	m__IXGBE_TESTING
,

506 
	m__IXGBE_RESETTING
,

507 
	m__IXGBE_DOWN
,

508 
	m__IXGBE_FDIR_INIT_DONE
,

509 
	m__IXGBE_SFP_MODULE_NOT_FOUND


512 #ifde‡
CONFIG_DCB


513 
dcb∆_π∆_›s
 
dcb∆_›s
;

514 
ixgbe_c›y_dcb_cfg
(
ixgbe_dcb_c⁄fig
 *
§c_dcb_cfg
,

515 
ixgbe_dcb_c⁄fig
 *
d°_dcb_cfg
, 
tc_max
);

519 
ixgbe_vÆid©e_mac_addr
(
u8
 *
mc_addr
);

520 
ixgbe_check_›ti⁄s
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

521 
ixgbe_assign_√tdev_›s
(
√t_devi˚
 *
√tdev
);

524 
ixgbe_drivî_«me
[];

525 c⁄° 
ixgbe_drivî_vîsi⁄
[];

527 
ixgbe_up
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

528 
ixgbe_down
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

529 
ixgbe_ªöô_locked
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

530 
ixgbe_ª£t
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

531 
ixgbe_£t_ëhtoﬁ_›s
(
√t_devi˚
 *
√tdev
);

532 
ixgbe_£tup_rx_ªsour˚s
(
ixgbe_ad≠ãr
 *,
ixgbe_rög
 *);

533 
ixgbe_£tup_tx_ªsour˚s
(
ixgbe_ad≠ãr
 *,
ixgbe_rög
 *);

534 
ixgbe_‰ì_rx_ªsour˚s
(
ixgbe_ad≠ãr
 *,
ixgbe_rög
 *);

535 
ixgbe_‰ì_tx_ªsour˚s
(
ixgbe_ad≠ãr
 *,
ixgbe_rög
 *);

536 
ixgbe_upd©e_°©s
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

537 
ixgbe_öô_öãºu±_scheme
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

538 
ixgbe_˛ór_öãºu±_scheme
(
ixgbe_ad≠ãr
 *
ad≠ãr
);

539 
boﬁ
 
ixgbe_is_ixgbe
(
pci_dev
 *
pcidev
);

542 
ixgbe_£t_rx_mode
(
√t_devi˚
 *
√tdev
);

544 #ifde‡
ETHTOOL_OPS_COMPAT


545 
ëhtoﬁ_io˘l
(
i‰eq
 *
i‰
);

548 
ixgbe_dcb_√éök_ªgi°î
();

549 
ixgbe_dcb_√éök_uƒegi°î
();

	@ixgbe_82598.c

28 
	~"ixgbe_ty≥.h
"

29 
	~"ixgbe_≠i.h
"

30 
	~"ixgbe_comm⁄.h
"

31 
	~"ixgbe_phy.h
"

33 
u32
 
ixgbe_gë_pcõ_msix_cou¡_82598
(
ixgbe_hw
 *
hw
);

34 
s32
 
ixgbe_öô_›s_82598
(
ixgbe_hw
 *
hw
);

35 
s32
 
ixgbe_gë_lök_ˇ∑bûôõs_82598
(
ixgbe_hw
 *
hw
,

36 
ixgbe_lök_•ìd
 *
•ìd
,

37 
boﬁ
 *
aut⁄eg
);

38 
ixgbe_medü_ty≥
 
ixgbe_gë_medü_ty≥_82598
(
ixgbe_hw
 *
hw
);

39 
s32
 
ixgbe_fc_íabÀ_82598
(
ixgbe_hw
 *
hw
, s32 
∑ckëbuf_num
);

40 
s32
 
ixgbe_£tup_mac_lök_82598
(
ixgbe_hw
 *
hw
);

41 
s32
 
ixgbe_check_mac_lök_82598
(
ixgbe_hw
 *
hw
,

42 
ixgbe_lök_•ìd
 *
•ìd
, 
boﬁ
 *
lök_up
,

43 
boﬁ
 
lök_up_waô_to_com∂ëe
);

44 
s32
 
ixgbe_£tup_mac_lök_•ìd_82598
(
ixgbe_hw
 *
hw
,

45 
ixgbe_lök_•ìd
 
•ìd
,

46 
boﬁ
 
aut⁄eg
,

47 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
);

48 
s32
 
ixgbe_£tup_c›≥r_lök_82598
(
ixgbe_hw
 *
hw
);

49 
s32
 
ixgbe_£tup_c›≥r_lök_•ìd_82598
(
ixgbe_hw
 *
hw
,

50 
ixgbe_lök_•ìd
 
•ìd
,

51 
boﬁ
 
aut⁄eg
,

52 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
);

53 
s32
 
ixgbe_ª£t_hw_82598
(
ixgbe_hw
 *
hw
);

54 
s32
 
ixgbe_°¨t_hw_82598
(
ixgbe_hw
 *
hw
);

55 
s32
 
ixgbe_£t_vmdq_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
);

56 
s32
 
ixgbe_˛ór_vmdq_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
);

57 
s32
 
ixgbe_£t_v·a_82598
(
ixgbe_hw
 *
hw
, 
u32
 
vœn
,

58 
u32
 
vöd
, 
boﬁ
 
vœn_⁄
);

59 
s32
 
ixgbe_˛ór_v·a_82598
(
ixgbe_hw
 *
hw
);

60 
s32
 
ixgbe_ªad_™Æog_ªg8_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 *
vÆ
);

61 
s32
 
ixgbe_wrôe_™Æog_ªg8_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 
vÆ
);

62 
s32
 
ixgbe_ªad_i2c_ì¥om_82598
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

63 
u8
 *
ì¥om_d©a
);

64 
u32
 
ixgbe_gë_suµ‹ãd_physiˇl_œyî_82598
(
ixgbe_hw
 *
hw
);

65 
s32
 
ixgbe_öô_phy_›s_82598
(
ixgbe_hw
 *
hw
);

66 
ixgbe_£t_œn_id_mu…i_p‹t_pcõ_82598
(
ixgbe_hw
 *
hw
);

79 
	$ixgbe_£t_pcõ_com∂ëi⁄_timeout
(
ixgbe_hw
 *
hw
)

81 
u32
 
g¸
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GCR
);

82 
u16
 
pcõ_dev˘l2
;

85 i‡(
g¸
 & 
IXGBE_GCR_CMPL_TMOUT_MASK
)

86 
out
;

92 i‡(!(
g¸
 & 
IXGBE_GCR_CAP_VER2
)) {

93 
g¸
 |
IXGBE_GCR_CMPL_TMOUT_10ms
;

94 
out
;

102 
pcõ_dev˘l2
 = 
	`IXGBE_READ_PCIE_WORD
(
hw
, 
IXGBE_PCI_DEVICE_CONTROL2
);

103 
pcõ_dev˘l2
 |
IXGBE_PCI_DEVICE_CONTROL2_16ms
;

104 
	`IXGBE_WRITE_PCIE_WORD
(
hw
, 
IXGBE_PCI_DEVICE_CONTROL2
, 
pcõ_dev˘l2
);

105 
out
:

107 
g¸
 &~
IXGBE_GCR_CMPL_TMOUT_RESEND
;

108 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GCR
, 
g¸
);

109 
	}
}

118 
u32
 
	$ixgbe_gë_pcõ_msix_cou¡_82598
(
ixgbe_hw
 *
hw
)

120 
u32
 
msix_cou¡
 = 18;

122 i‡(
hw
->
mac
.
msix_ve˘‹s_‰om_pcõ
) {

123 
msix_cou¡
 = 
	`IXGBE_READ_PCIE_WORD
(
hw
,

124 
IXGBE_PCIE_MSIX_82598_CAPS
);

125 
msix_cou¡
 &
IXGBE_PCIE_MSIX_TBL_SZ_MASK
;

129 
msix_cou¡
++;

131  
msix_cou¡
;

132 
	}
}

141 
s32
 
	$ixgbe_öô_›s_82598
(
ixgbe_hw
 *
hw
)

143 
ixgbe_mac_öfo
 *
mac
 = &
hw
->mac;

144 
ixgbe_phy_öfo
 *
phy
 = &
hw
->phy;

145 
s32
 
ªt_vÆ
;

147 
ªt_vÆ
 = 
	`ixgbe_öô_phy_›s_gíîic
(
hw
);

148 
ªt_vÆ
 = 
	`ixgbe_öô_›s_gíîic
(
hw
);

151 
phy
->
›s
.
öô
 = &
ixgbe_öô_phy_›s_82598
;

154 
mac
->
›s
.
°¨t_hw
 = &
ixgbe_°¨t_hw_82598
;

155 
mac
->
›s
.
ª£t_hw
 = &
ixgbe_ª£t_hw_82598
;

156 
mac
->
›s
.
gë_medü_ty≥
 = &
ixgbe_gë_medü_ty≥_82598
;

157 
mac
->
›s
.
gë_suµ‹ãd_physiˇl_œyî
 =

158 &
ixgbe_gë_suµ‹ãd_physiˇl_œyî_82598
;

159 
mac
->
›s
.
ªad_™Æog_ªg8
 = &
ixgbe_ªad_™Æog_ªg8_82598
;

160 
mac
->
›s
.
wrôe_™Æog_ªg8
 = &
ixgbe_wrôe_™Æog_ªg8_82598
;

161 
mac
->
›s
.
£t_œn_id
 = &
ixgbe_£t_œn_id_mu…i_p‹t_pcõ_82598
;

164 
mac
->
›s
.
£t_vmdq
 = &
ixgbe_£t_vmdq_82598
;

165 
mac
->
›s
.
˛ór_vmdq
 = &
ixgbe_˛ór_vmdq_82598
;

166 
mac
->
›s
.
£t_v·a
 = &
ixgbe_£t_v·a_82598
;

167 
mac
->
›s
.
˛ór_v·a
 = &
ixgbe_˛ór_v·a_82598
;

170 
mac
->
›s
.
fc_íabÀ
 = &
ixgbe_fc_íabÀ_82598
;

172 
mac
->
mc·_size
 = 128;

173 
mac
->
v·_size
 = 128;

174 
mac
->
num_ør_íåõs
 = 16;

175 
mac
->
max_tx_queues
 = 32;

176 
mac
->
max_rx_queues
 = 64;

177 
mac
->
max_msix_ve˘‹s
 = 
	`ixgbe_gë_pcõ_msix_cou¡_82598
(
hw
);

180 
phy
->
›s
.
ªad_i2c_ì¥om
 = &
ixgbe_ªad_i2c_ì¥om_82598
;

183 
mac
->
›s
.
check_lök
 = &
ixgbe_check_mac_lök_82598
;

184 
mac
->
›s
.
£tup_lök
 = &
ixgbe_£tup_mac_lök_82598
;

185 
mac
->
›s
.
£tup_lök_•ìd
 = &
ixgbe_£tup_mac_lök_•ìd_82598
;

186 
mac
->
›s
.
gë_lök_ˇ∑bûôõs
 =

187 &
ixgbe_gë_lök_ˇ∑bûôõs_82598
;

189  
ªt_vÆ
;

190 
	}
}

201 
s32
 
	$ixgbe_öô_phy_›s_82598
(
ixgbe_hw
 *
hw
)

203 
ixgbe_mac_öfo
 *
mac
 = &
hw
->mac;

204 
ixgbe_phy_öfo
 *
phy
 = &
hw
->phy;

205 
s32
 
ªt_vÆ
 = 0;

206 
u16
 
li°_off£t
, 
d©a_off£t
;

209 
phy
->
›s
.
	`idítify
(
hw
);

212 i‡(
mac
->
›s
.
	`gë_medü_ty≥
(
hw
Ë=
ixgbe_medü_ty≥_c›≥r
) {

213 
mac
->
›s
.
£tup_lök
 = &
ixgbe_£tup_c›≥r_lök_82598
;

214 
mac
->
›s
.
£tup_lök_•ìd
 =

215 &
ixgbe_£tup_c›≥r_lök_•ìd_82598
;

216 
mac
->
›s
.
gë_lök_ˇ∑bûôõs
 =

217 &
ixgbe_gë_c›≥r_lök_ˇ∑bûôõs_gíîic
;

220 
hw
->
phy
.
ty≥
) {

221 
ixgbe_phy_ä
:

222 
phy
->
›s
.
£tup_lök
 = &
ixgbe_£tup_phy_lök_äx
;

223 
phy
->
›s
.
check_lök
 = &
ixgbe_check_phy_lök_äx
;

224 
phy
->
›s
.
gë_fúmw¨e_vîsi⁄
 =

225 &
ixgbe_gë_phy_fúmw¨e_vîsi⁄_äx
;

227 
ixgbe_phy_aq
:

228 
phy
->
›s
.
gë_fúmw¨e_vîsi⁄
 =

229 &
ixgbe_gë_phy_fúmw¨e_vîsi⁄_aq
;

231 
ixgbe_phy_∆
:

232 
phy
->
›s
.
ª£t
 = &
ixgbe_ª£t_phy_∆
;

235 
ªt_vÆ
 = 
phy
->
›s
.
	`idítify_sÂ
(
hw
);

236 i‡(
ªt_vÆ
 != 0)

237 
out
;

238 i‡(
hw
->
phy
.
sÂ_ty≥
 =
ixgbe_sÂ_ty≥_unknown
) {

239 
ªt_vÆ
 = 
IXGBE_ERR_SFP_NOT_SUPPORTED
;

240 
out
;

244 
ªt_vÆ
 = 
	`ixgbe_gë_sÂ_öô_£quí˚_off£ts
(
hw
,

245 &
li°_off£t
,

246 &
d©a_off£t
);

247 i‡(
ªt_vÆ
 != 0) {

248 
ªt_vÆ
 = 
IXGBE_ERR_SFP_NOT_SUPPORTED
;

249 
out
;

256 
out
:

257  
ªt_vÆ
;

258 
	}
}

267 
s32
 
	$ixgbe_°¨t_hw_82598
(
ixgbe_hw
 *
hw
)

269 
s32
 
ªt_vÆ
 = 0;

271 
ªt_vÆ
 = 
	`ixgbe_°¨t_hw_gíîic
(
hw
);

274 i‡(
ªt_vÆ
 == 0)

275 
	`ixgbe_£t_pcõ_com∂ëi⁄_timeout
(
hw
);

277  
ªt_vÆ
;

278 
	}
}

288 
s32
 
	$ixgbe_gë_lök_ˇ∑bûôõs_82598
(
ixgbe_hw
 *
hw
,

289 
ixgbe_lök_•ìd
 *
•ìd
,

290 
boﬁ
 *
aut⁄eg
)

292 
s32
 
°©us
 = 0;

293 
u32
 
autoc
 = 0;

300 i‡(
hw
->
mac
.
‹ig_lök_£âögs_°‹ed
)

301 
autoc
 = 
hw
->
mac
.
‹ig_autoc
;

303 
autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

305 
autoc
 & 
IXGBE_AUTOC_LMS_MASK
) {

306 
IXGBE_AUTOC_LMS_1G_LINK_NO_AN
:

307 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

308 *
aut⁄eg
 = 
Ál£
;

311 
IXGBE_AUTOC_LMS_10G_LINK_NO_AN
:

312 *
•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

313 *
aut⁄eg
 = 
Ál£
;

316 
IXGBE_AUTOC_LMS_1G_AN
:

317 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

318 *
aut⁄eg
 = 
åue
;

321 
IXGBE_AUTOC_LMS_KX4_AN
:

322 
IXGBE_AUTOC_LMS_KX4_AN_1G_AN
:

323 *
•ìd
 = 
IXGBE_LINK_SPEED_UNKNOWN
;

324 i‡(
autoc
 & 
IXGBE_AUTOC_KX4_SUPP
)

325 *
•ìd
 |
IXGBE_LINK_SPEED_10GB_FULL
;

326 i‡(
autoc
 & 
IXGBE_AUTOC_KX_SUPP
)

327 *
•ìd
 |
IXGBE_LINK_SPEED_1GB_FULL
;

328 *
aut⁄eg
 = 
åue
;

332 
°©us
 = 
IXGBE_ERR_LINK_SETUP
;

336  
°©us
;

337 
	}
}

345 
ixgbe_medü_ty≥
 
	$ixgbe_gë_medü_ty≥_82598
(
ixgbe_hw
 *
hw
)

347 
ixgbe_medü_ty≥
 
medü_ty≥
;

350 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_cu_unknown
 ||

351 
hw
->
phy
.
ty≥
 =
ixgbe_phy_ä
 ||

352 
hw
->
phy
.
ty≥
 =
ixgbe_phy_aq
) {

353 
medü_ty≥
 = 
ixgbe_medü_ty≥_c›≥r
;

354 
out
;

358 
hw
->
devi˚_id
) {

359 
IXGBE_DEV_ID_82598
:

360 
IXGBE_DEV_ID_82598_BX
:

362 
medü_ty≥
 = 
ixgbe_medü_ty≥_back∂™e
;

364 
IXGBE_DEV_ID_82598AF_DUAL_PORT
:

365 
IXGBE_DEV_ID_82598AF_SINGLE_PORT
:

366 
IXGBE_DEV_ID_82598EB_CX4
:

367 
IXGBE_DEV_ID_82598_CX4_DUAL_PORT
:

368 
IXGBE_DEV_ID_82598_DA_DUAL_PORT
:

369 
IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM
:

370 
IXGBE_DEV_ID_82598EB_XF_LR
:

371 
IXGBE_DEV_ID_82598EB_SFP_LOM
:

372 
medü_ty≥
 = 
ixgbe_medü_ty≥_fibî
;

374 
IXGBE_DEV_ID_82598AT
:

375 
IXGBE_DEV_ID_82598AT2
:

376 
medü_ty≥
 = 
ixgbe_medü_ty≥_c›≥r
;

379 
medü_ty≥
 = 
ixgbe_medü_ty≥_unknown
;

382 
out
:

383  
medü_ty≥
;

384 
	}
}

393 
s32
 
	$ixgbe_fc_íabÀ_82598
(
ixgbe_hw
 *
hw
, 
s32
 
∑ckëbuf_num
)

395 
s32
 
ªt_vÆ
 = 0;

396 
u32
 
f˘æ_ªg
;

397 
u32
 
rmcs_ªg
;

398 
u32
 
ªg
;

400 #ifde‡
CONFIG_DCB


401 i‡(
hw
->
fc
.
ªque°ed_mode
 =
ixgbe_fc_pfc
)

402 
out
;

406 
ªt_vÆ
 = 
	`ixgbe_fc_aut⁄eg
(
hw
);

407 i‡(
ªt_vÆ
)

408 
out
;

411 
f˘æ_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

412 
f˘æ_ªg
 &~(
IXGBE_FCTRL_RFCE
 | 
IXGBE_FCTRL_RPFCE
);

414 
rmcs_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RMCS
);

415 
rmcs_ªg
 &~(
IXGBE_RMCS_TFCE_PRIORITY
 | 
IXGBE_RMCS_TFCE_802_3X
);

430 
hw
->
fc
.
cuºít_mode
) {

431 
ixgbe_fc_n⁄e
:

436 
ixgbe_fc_rx_∑u£
:

445 
f˘æ_ªg
 |
IXGBE_FCTRL_RFCE
;

447 
ixgbe_fc_tx_∑u£
:

452 
rmcs_ªg
 |
IXGBE_RMCS_TFCE_802_3X
;

454 
ixgbe_fc_fuŒ
:

456 
f˘æ_ªg
 |
IXGBE_FCTRL_RFCE
;

457 
rmcs_ªg
 |
IXGBE_RMCS_TFCE_802_3X
;

459 #ifde‡
CONFIG_DCB


460 
ixgbe_fc_pfc
:

461 
out
;

465 
	`hw_dbg
(
hw
, "Flow controlÖaram set incorrectly\n");

466 
ªt_vÆ
 = -
IXGBE_ERR_CONFIG
;

467 
out
;

472 
f˘æ_ªg
 |
IXGBE_FCTRL_DPF
;

473 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCTRL
, 
f˘æ_ªg
);

474 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RMCS
, 
rmcs_ªg
);

477 i‡(
hw
->
fc
.
cuºít_mode
 & 
ixgbe_fc_tx_∑u£
) {

478 i‡(
hw
->
fc
.
£nd_x⁄
) {

479 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTL
(
∑ckëbuf_num
),

480 (
hw
->
fc
.
low_w©î
 | 
IXGBE_FCRTL_XONE
));

482 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTL
(
∑ckëbuf_num
),

483 
hw
->
fc
.
low_w©î
);

486 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTH
(
∑ckëbuf_num
),

487 (
hw
->
fc
.
high_w©î
 | 
IXGBE_FCRTH_FCEN
));

491 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCTTV
(
∑ckëbuf_num
 / 2));

492 i‡((
∑ckëbuf_num
 & 1) == 0)

493 
ªg
 = (ªg & 0xFFFF0000Ë| 
hw
->
fc
.
∑u£_time
;

495 
ªg
 = (ªg & 0x0000FFFFË| (
hw
->
fc
.
∑u£_time
 << 16);

496 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCTTV
(
∑ckëbuf_num
 / 2), 
ªg
);

498 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCRTV
, (hw->
fc
.
∑u£_time
 >> 1));

500 
out
:

501  
ªt_vÆ
;

502 
	}
}

511 
s32
 
	$ixgbe_£tup_mac_lök_82598
(
ixgbe_hw
 *
hw
)

513 
u32
 
autoc_ªg
;

514 
u32
 
löks_ªg
;

515 
u32
 
i
;

516 
s32
 
°©us
 = 0;

519 
autoc_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

520 
autoc_ªg
 |
IXGBE_AUTOC_AN_RESTART
;

521 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, 
autoc_ªg
);

524 i‡(
hw
->
phy
.
aut⁄eg_waô_to_com∂ëe
) {

525 i‡((
autoc_ªg
 & 
IXGBE_AUTOC_LMS_MASK
) ==

526 
IXGBE_AUTOC_LMS_KX4_AN
 ||

527 (
autoc_ªg
 & 
IXGBE_AUTOC_LMS_MASK
) ==

528 
IXGBE_AUTOC_LMS_KX4_AN_1G_AN
) {

529 
löks_ªg
 = 0;

530 
i
 = 0; i < 
IXGBE_AUTO_NEG_TIME
; i++) {

531 
löks_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

532 i‡(
löks_ªg
 & 
IXGBE_LINKS_KX_AN_COMP
)

534 
	`m¶ìp
(100);

536 i‡(!(
löks_ªg
 & 
IXGBE_LINKS_KX_AN_COMP
)) {

537 
°©us
 = 
IXGBE_ERR_AUTONEG_NOT_COMPLETE
;

538 
	`hw_dbg
(
hw
, "Autonegotiation didÇot complete.\n");

544 
	`m¶ìp
(50);

546  
°©us
;

547 
	}
}

558 
s32
 
	$ixgbe_check_mac_lök_82598
(
ixgbe_hw
 *
hw
,

559 
ixgbe_lök_•ìd
 *
•ìd
, 
boﬁ
 *
lök_up
,

560 
boﬁ
 
lök_up_waô_to_com∂ëe
)

562 
u32
 
löks_ªg
;

563 
u32
 
i
;

564 
u16
 
lök_ªg
, 
ad≠t_comp_ªg
;

572 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_∆
) {

573 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 0xC79F, 
IXGBE_TWINAX_DEV
, &
lök_ªg
);

574 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 0xC79F, 
IXGBE_TWINAX_DEV
, &
lök_ªg
);

575 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 0xC00C, 
IXGBE_TWINAX_DEV
,

576 &
ad≠t_comp_ªg
);

577 i‡(
lök_up_waô_to_com∂ëe
) {

578 
i
 = 0; i < 
IXGBE_LINK_UP_TIME
; i++) {

579 i‡((
lök_ªg
 & 1) &&

580 ((
ad≠t_comp_ªg
 & 1) == 0)) {

581 *
lök_up
 = 
åue
;

584 *
lök_up
 = 
Ál£
;

586 
	`m¶ìp
(100);

587 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 0xC79F,

588 
IXGBE_TWINAX_DEV
,

589 &
lök_ªg
);

590 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 0xC00C,

591 
IXGBE_TWINAX_DEV
,

592 &
ad≠t_comp_ªg
);

595 i‡((
lök_ªg
 & 1) &&

596 ((
ad≠t_comp_ªg
 & 1) == 0))

597 *
lök_up
 = 
åue
;

599 *
lök_up
 = 
Ál£
;

602 i‡(*
lök_up
 =
Ál£
)

603 
out
;

606 
löks_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

607 i‡(
lök_up_waô_to_com∂ëe
) {

608 
i
 = 0; i < 
IXGBE_LINK_UP_TIME
; i++) {

609 i‡(
löks_ªg
 & 
IXGBE_LINKS_UP
) {

610 *
lök_up
 = 
åue
;

613 *
lök_up
 = 
Ál£
;

615 
	`m¶ìp
(100);

616 
löks_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

619 i‡(
löks_ªg
 & 
IXGBE_LINKS_UP
)

620 *
lök_up
 = 
åue
;

622 *
lök_up
 = 
Ál£
;

625 i‡(
löks_ªg
 & 
IXGBE_LINKS_SPEED
)

626 *
•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

628 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

631 i‡(*
lök_up
 =
Ál£
) {

632 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_n⁄e
;

633 
hw
->
fc
.
fc_was_aut⁄egged
 = 
Ál£
;

635 
out
:

637 
	}
}

648 
s32
 
	$ixgbe_£tup_mac_lök_•ìd_82598
(
ixgbe_hw
 *
hw
,

649 
ixgbe_lök_•ìd
 
•ìd
, 
boﬁ
 
aut⁄eg
,

650 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

652 
s32
 
°©us
 = 0;

653 
ixgbe_lök_•ìd
 
lök_ˇ∑bûôõs
 = 
IXGBE_LINK_SPEED_UNKNOWN
;

654 
u32
 
cuº_autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

655 
u32
 
autoc
 = 
cuº_autoc
;

656 
u32
 
lök_mode
 = 
autoc
 & 
IXGBE_AUTOC_LMS_MASK
;

659 
	`ixgbe_gë_lök_ˇ∑bûôõs
(
hw
, &
lök_ˇ∑bûôõs
, &
aut⁄eg
);

660 
•ìd
 &
lök_ˇ∑bûôõs
;

662 i‡(
•ìd
 =
IXGBE_LINK_SPEED_UNKNOWN
)

663 
°©us
 = 
IXGBE_ERR_LINK_SETUP
;

666 i‡(
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_AN
 ||

667 
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_AN_1G_AN
) {

668 
autoc
 &~
IXGBE_AUTOC_KX4_KX_SUPP_MASK
;

669 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_10GB_FULL
)

670 
autoc
 |
IXGBE_AUTOC_KX4_SUPP
;

671 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_1GB_FULL
)

672 
autoc
 |
IXGBE_AUTOC_KX_SUPP
;

673 i‡(
autoc
 !
cuº_autoc
)

674 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, 
autoc
);

677 i‡(
°©us
 == 0) {

678 
hw
->
phy
.
aut⁄eg_waô_to_com∂ëe
 =áutoneg_wait_to_complete;

685 
°©us
 = 
	`ixgbe_£tup_mac_lök_82598
(
hw
);

688  
°©us
;

689 
	}
}

701 
s32
 
	$ixgbe_£tup_c›≥r_lök_82598
(
ixgbe_hw
 *
hw
)

703 
s32
 
°©us
;

706 
°©us
 = 
hw
->
phy
.
›s
.
	`£tup_lök
(hw);

709 
	`ixgbe_£tup_mac_lök_82598
(
hw
);

711  
°©us
;

712 
	}
}

723 
s32
 
	$ixgbe_£tup_c›≥r_lök_•ìd_82598
(
ixgbe_hw
 *
hw
,

724 
ixgbe_lök_•ìd
 
•ìd
,

725 
boﬁ
 
aut⁄eg
,

726 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

728 
s32
 
°©us
;

731 
°©us
 = 
hw
->
phy
.
›s
.
	`£tup_lök_•ìd
(hw, 
•ìd
, 
aut⁄eg
,

732 
aut⁄eg_waô_to_com∂ëe
);

734 
	`ixgbe_£tup_mac_lök_82598
(
hw
);

736  
°©us
;

737 
	}
}

747 
s32
 
	$ixgbe_ª£t_hw_82598
(
ixgbe_hw
 *
hw
)

749 
s32
 
°©us
 = 0;

750 
s32
 
phy_°©us
 = 0;

751 
u32
 
˘æ
;

752 
u32
 
ghec¸
;

753 
u32
 
i
;

754 
u32
 
autoc
;

755 
u8
 
™Æog_vÆ
;

758 
hw
->
mac
.
›s
.
	`°›_ad≠ãr
(hw);

765 
hw
->
mac
.
›s
.
	`ªad_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_LPBK
, &
™Æog_vÆ
);

766 i‡(
™Æog_vÆ
 & 
IXGBE_ATLAS_PDN_TX_REG_EN
) {

768 
hw
->
mac
.
›s
.
	`ªad_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_LPBK
,

769 &
™Æog_vÆ
);

770 
™Æog_vÆ
 &~
IXGBE_ATLAS_PDN_TX_REG_EN
;

771 
hw
->
mac
.
›s
.
	`wrôe_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_LPBK
,

772 
™Æog_vÆ
);

774 
hw
->
mac
.
›s
.
	`ªad_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_10G
,

775 &
™Æog_vÆ
);

776 
™Æog_vÆ
 &~
IXGBE_ATLAS_PDN_TX_10G_QL_ALL
;

777 
hw
->
mac
.
›s
.
	`wrôe_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_10G
,

778 
™Æog_vÆ
);

780 
hw
->
mac
.
›s
.
	`ªad_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_1G
,

781 &
™Æog_vÆ
);

782 
™Æog_vÆ
 &~
IXGBE_ATLAS_PDN_TX_1G_QL_ALL
;

783 
hw
->
mac
.
›s
.
	`wrôe_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_1G
,

784 
™Æog_vÆ
);

786 
hw
->
mac
.
›s
.
	`ªad_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_AN
,

787 &
™Æog_vÆ
);

788 
™Æog_vÆ
 &~
IXGBE_ATLAS_PDN_TX_AN_QL_ALL
;

789 
hw
->
mac
.
›s
.
	`wrôe_™Æog_ªg8
(hw, 
IXGBE_ATLAS_PDN_AN
,

790 
™Æog_vÆ
);

794 i‡(
hw
->
phy
.
ª£t_dißbÀ
 =
Ál£
) {

798 
phy_°©us
 = 
hw
->
phy
.
›s
.
	`öô
(hw);

799 i‡(
phy_°©us
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
)

800 
ª£t_hw_out
;

801 i‡(
phy_°©us
 =
IXGBE_ERR_SFP_NOT_PRESENT
)

802 
no_phy_ª£t
;

804 
hw
->
phy
.
›s
.
	`ª£t
(hw);

807 
no_phy_ª£t
:

812 
°©us
 = 
	`ixgbe_dißbÀ_pcõ_ma°î
(
hw
);

813 i‡(
°©us
 != 0) {

814 
°©us
 = 
IXGBE_ERR_MASTER_REQUESTS_PENDING
;

815 
	`hw_dbg
(
hw
, "PCI-E Master disableÖolling has failed.\n");

822 
˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL
);

823 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CTRL
, (
˘æ
 | 
IXGBE_CTRL_RST
));

824 
	`IXGBE_WRITE_FLUSH
(
hw
);

827 
i
 = 0; i < 10; i++) {

828 
	`udñay
(1);

829 
˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL
);

830 i‡(!(
˘æ
 & 
IXGBE_CTRL_RST
))

833 i‡(
˘æ
 & 
IXGBE_CTRL_RST
) {

834 
°©us
 = 
IXGBE_ERR_RESET_FAILED
;

835 
	`hw_dbg
(
hw
, "ResetÖolling failedÅo complete.\n");

838 
	`m¶ìp
(50);

840 
ghec¸
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GHECCR
);

841 
ghec¸
 &= ~((1 << 21) | (1 << 18) | (1 << 9) | (1 << 6));

842 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GHECCR
, 
ghec¸
);

849 
autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

850 i‡(
hw
->
mac
.
‹ig_lök_£âögs_°‹ed
 =
Ál£
) {

851 
hw
->
mac
.
‹ig_autoc
 = 
autoc
;

852 
hw
->
mac
.
‹ig_lök_£âögs_°‹ed
 = 
åue
;

853 } i‡(
autoc
 !
hw
->
mac
.
‹ig_autoc
)

854 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, hw->
mac
.
‹ig_autoc
);

857 
hw
->
mac
.
›s
.
	`gë_mac_addr
(hw, hw->mac.
≥rm_addr
);

863 
hw
->
mac
.
›s
.
	`öô_rx_addrs
(hw);

867 
ª£t_hw_out
:

868 i‡(
phy_°©us
 != 0)

869 
°©us
 = 
phy_°©us
;

870  
°©us
;

871 
	}
}

879 
s32
 
	$ixgbe_£t_vmdq_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
)

881 
u32
 
ør_high
;

883 
ør_high
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAH
(
ør
));

884 
ør_high
 &~
IXGBE_RAH_VIND_MASK
;

885 
ør_high
 |((
vmdq
 << 
IXGBE_RAH_VIND_SHIFT
Ë& 
IXGBE_RAH_VIND_MASK
);

886 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAH
(
ør
), 
ør_high
);

888 
	}
}

896 
s32
 
	$ixgbe_˛ór_vmdq_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
)

898 
u32
 
ør_high
;

899 
u32
 
ør_íåõs
 = 
hw
->
mac
.
num_ør_íåõs
;

902 i‡(
ør
 < 
ør_íåõs
) {

903 
ør_high
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAH
(
ør
));

904 i‡(
ør_high
 & 
IXGBE_RAH_VIND_MASK
) {

905 
ør_high
 &~
IXGBE_RAH_VIND_MASK
;

906 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAH
(
ør
), 
ør_high
);

909 
	`hw_dbg
(
hw
, "RAR index %d i†ouào‡ønge.\n", 
ør
);

913 
	}
}

924 
s32
 
	$ixgbe_£t_v·a_82598
(
ixgbe_hw
 *
hw
, 
u32
 
vœn
, u32 
vöd
,

925 
boﬁ
 
vœn_⁄
)

927 
u32
 
ªgödex
;

928 
u32
 
bôödex
;

929 
u32
 
bôs
;

930 
u32
 
v·abyã
;

932 i‡(
vœn
 > 4095)

933  
IXGBE_ERR_PARAM
;

936 
ªgödex
 = (
vœn
 >> 5) & 0x7F;

939 
v·abyã
 = ((
vœn
 >> 3) & 0x03);

940 
bôödex
 = (
vœn
 & 0x7) << 2;

943 
bôs
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_VFTAVIND
(
v·abyã
, 
ªgödex
));

944 
bôs
 &(~(0x0F << 
bôödex
));

945 
bôs
 |(
vöd
 << 
bôödex
);

946 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VFTAVIND
(
v·abyã
, 
ªgödex
), 
bôs
);

949 
bôödex
 = 
vœn
 & 0x1F;

951 
bôs
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_VFTA
(
ªgödex
));

952 i‡(
vœn_⁄
)

954 
bôs
 |(1 << 
bôödex
);

957 
bôs
 &~(1 << 
bôödex
);

958 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VFTA
(
ªgödex
), 
bôs
);

961 
	}
}

969 
s32
 
	$ixgbe_˛ór_v·a_82598
(
ixgbe_hw
 *
hw
)

971 
u32
 
off£t
;

972 
u32
 
vœnbyã
;

974 
off£t
 = 0; off£à< 
hw
->
mac
.
v·_size
; offset++)

975 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VFTA
(
off£t
), 0);

977 
vœnbyã
 = 0; vlanbyte < 4; vlanbyte++)

978 
off£t
 = 0; off£à< 
hw
->
mac
.
v·_size
; offset++)

979 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VFTAVIND
(
vœnbyã
, 
off£t
),

983 
	}
}

993 
s32
 
	$ixgbe_ªad_™Æog_ªg8_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 *
vÆ
)

995 
u32
 
©œs_˘l
;

997 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ATLASCTL
,

998 
IXGBE_ATLASCTL_WRITE_CMD
 | (
ªg
 << 8));

999 
	`IXGBE_WRITE_FLUSH
(
hw
);

1000 
	`udñay
(10);

1001 
©œs_˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ATLASCTL
);

1002 *
vÆ
 = (
u8
)
©œs_˘l
;

1005 
	}
}

1015 
s32
 
	$ixgbe_wrôe_™Æog_ªg8_82598
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 
vÆ
)

1017 
u32
 
©œs_˘l
;

1019 
©œs_˘l
 = (
ªg
 << 8Ë| 
vÆ
;

1020 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ATLASCTL
, 
©œs_˘l
);

1021 
	`IXGBE_WRITE_FLUSH
(
hw
);

1022 
	`udñay
(10);

1025 
	}
}

1035 
s32
 
	$ixgbe_ªad_i2c_ì¥om_82598
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

1036 
u8
 *
ì¥om_d©a
)

1038 
s32
 
°©us
 = 0;

1039 
u16
 
sÂ_addr
 = 0;

1040 
u16
 
sÂ_d©a
 = 0;

1041 
u16
 
sÂ_°©
 = 0;

1042 
u32
 
i
;

1044 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_∆
) {

1050 
sÂ_addr
 = (
IXGBE_I2C_EEPROM_DEV_ADDR
 << 8Ë+ 
byã_off£t
;

1051 
sÂ_addr
 = (sÂ_add∏| 
IXGBE_I2C_EEPROM_READ_MASK
);

1052 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw,

1053 
IXGBE_MDIO_PMA_PMD_SDA_SCL_ADDR
,

1054 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
,

1055 
sÂ_addr
);

1058 
i
 = 0; i < 100; i++) {

1059 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw,

1060 
IXGBE_MDIO_PMA_PMD_SDA_SCL_STAT
,

1061 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
,

1062 &
sÂ_°©
);

1063 
sÂ_°©
 = sÂ_°© & 
IXGBE_I2C_EEPROM_STATUS_MASK
;

1064 i‡(
sÂ_°©
 !
IXGBE_I2C_EEPROM_STATUS_IN_PROGRESS
)

1066 
	`m¶ìp
(10);

1069 i‡(
sÂ_°©
 !
IXGBE_I2C_EEPROM_STATUS_PASS
) {

1070 
	`hw_dbg
(
hw
, "EEPROMÑead didÇotÖass.\n");

1071 
°©us
 = 
IXGBE_ERR_SFP_NOT_PRESENT
;

1072 
out
;

1076 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PMA_PMD_SDA_SCL_DATA
,

1077 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
, &
sÂ_d©a
);

1079 *
ì¥om_d©a
 = (
u8
)(
sÂ_d©a
 >> 8);

1081 
°©us
 = 
IXGBE_ERR_PHY
;

1082 
out
;

1085 
out
:

1086  
°©us
;

1087 
	}
}

1095 
u32
 
	$ixgbe_gë_suµ‹ãd_physiˇl_œyî_82598
(
ixgbe_hw
 *
hw
)

1097 
u32
 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_UNKNOWN
;

1098 
u32
 
autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

1099 
u32
 
pma_pmd_10g
 = 
autoc
 & 
IXGBE_AUTOC_10G_PMA_PMD_MASK
;

1100 
u32
 
pma_pmd_1g
 = 
autoc
 & 
IXGBE_AUTOC_1G_PMA_PMD_MASK
;

1101 
u16
 
ext_abûôy
 = 0;

1103 
hw
->
phy
.
›s
.
	`idítify
(hw);

1107 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_ä
 ||

1108 
hw
->
phy
.
ty≥
 =
ixgbe_phy_cu_unknown
) {

1109 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_EXT_ABILITY
,

1110 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
, &
ext_abûôy
);

1111 i‡(
ext_abûôy
 & 
IXGBE_MDIO_PHY_10GBASET_ABILITY
)

1112 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_10GBASE_T
;

1113 i‡(
ext_abûôy
 & 
IXGBE_MDIO_PHY_1000BASET_ABILITY
)

1114 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_1000BASE_T
;

1115 i‡(
ext_abûôy
 & 
IXGBE_MDIO_PHY_100BASETX_ABILITY
)

1116 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_100BASE_TX
;

1117 
out
;

1120 
autoc
 & 
IXGBE_AUTOC_LMS_MASK
) {

1121 
IXGBE_AUTOC_LMS_1G_AN
:

1122 
IXGBE_AUTOC_LMS_1G_LINK_NO_AN
:

1123 i‡(
pma_pmd_1g
 =
IXGBE_AUTOC_1G_KX
)

1124 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_1000BASE_KX
;

1126 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_1000BASE_BX
;

1128 
IXGBE_AUTOC_LMS_10G_LINK_NO_AN
:

1129 i‡(
pma_pmd_10g
 =
IXGBE_AUTOC_10G_CX4
)

1130 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_CX4
;

1131 i‡(
pma_pmd_10g
 =
IXGBE_AUTOC_10G_KX4
)

1132 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_KX4
;

1134 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_UNKNOWN
;

1136 
IXGBE_AUTOC_LMS_KX4_AN
:

1137 
IXGBE_AUTOC_LMS_KX4_AN_1G_AN
:

1138 i‡(
autoc
 & 
IXGBE_AUTOC_KX_SUPP
)

1139 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_1000BASE_KX
;

1140 i‡(
autoc
 & 
IXGBE_AUTOC_KX4_SUPP
)

1141 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_10GBASE_KX4
;

1147 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_∆
) {

1148 
hw
->
phy
.
›s
.
	`idítify_sÂ
(hw);

1150 
hw
->
phy
.
sÂ_ty≥
) {

1151 
ixgbe_sÂ_ty≥_da_cu
:

1152 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_SFP_PLUS_CU
;

1154 
ixgbe_sÂ_ty≥_§
:

1155 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_SR
;

1157 
ixgbe_sÂ_ty≥_Ã
:

1158 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_LR
;

1161 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_UNKNOWN
;

1166 
hw
->
devi˚_id
) {

1167 
IXGBE_DEV_ID_82598_DA_DUAL_PORT
:

1168 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_SFP_PLUS_CU
;

1170 
IXGBE_DEV_ID_82598AF_DUAL_PORT
:

1171 
IXGBE_DEV_ID_82598AF_SINGLE_PORT
:

1172 
IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM
:

1173 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_SR
;

1175 
IXGBE_DEV_ID_82598EB_XF_LR
:

1176 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_LR
;

1182 
out
:

1183  
physiˇl_œyî
;

1184 
	}
}

1194 
	$ixgbe_£t_œn_id_mu…i_p‹t_pcõ_82598
(
ixgbe_hw
 *
hw
)

1196 
ixgbe_bus_öfo
 *
bus
 = &
hw
->bus;

1197 
u16
 
pci_gí
, 
pci_˘æ2
;

1199 
	`ixgbe_£t_œn_id_mu…i_p‹t_pcõ
(
hw
);

1202 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_PCIE_GENERAL_PTR
, &
pci_gí
);

1203 i‡((
pci_gí
 != 0) && (pci_gen != 0xFFFF)) {

1205 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
pci_gí
 + 
IXGBE_PCIE_CTRL2
, &
pci_˘æ2
);

1208 i‡((
pci_˘æ2
 & 
IXGBE_PCIE_CTRL2_LAN_DISABLE
) &&

1209 !(
pci_˘æ2
 & 
IXGBE_PCIE_CTRL2_DISABLE_SELECT
) &&

1210 !(
pci_˘æ2
 & 
IXGBE_PCIE_CTRL2_DUMMY_ENABLE
)) {

1212 
bus
->
func
 = 0;

1215 
	}
}

	@ixgbe_82599.c

28 
	~"ixgbe_ty≥.h
"

29 
	~"ixgbe_≠i.h
"

30 
	~"ixgbe_comm⁄.h
"

31 
	~"ixgbe_phy.h
"

33 
u32
 
ixgbe_gë_pcõ_msix_cou¡_82599
(
ixgbe_hw
 *
hw
);

34 
s32
 
ixgbe_öô_›s_82599
(
ixgbe_hw
 *
hw
);

35 
s32
 
ixgbe_gë_lök_ˇ∑bûôõs_82599
(
ixgbe_hw
 *
hw
,

36 
ixgbe_lök_•ìd
 *
•ìd
,

37 
boﬁ
 *
aut⁄eg
);

38 
ixgbe_medü_ty≥
 
ixgbe_gë_medü_ty≥_82599
(
ixgbe_hw
 *
hw
);

39 
s32
 
ixgbe_£tup_mac_lök_mu…i•ìd_fibî
(
ixgbe_hw
 *
hw
);

40 
s32
 
ixgbe_£tup_mac_lök_•ìd_mu…i•ìd_fibî
(
ixgbe_hw
 *
hw
,

41 
ixgbe_lök_•ìd
 
•ìd
, 
boﬁ
 
aut⁄eg
,

42 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
);

43 
s32
 
ixgbe_£tup_mac_lök_82599
(
ixgbe_hw
 *
hw
);

44 
s32
 
ixgbe_check_mac_lök_82599
(
ixgbe_hw
 *
hw
,

45 
ixgbe_lök_•ìd
 *
•ìd
,

46 
boﬁ
 *
lök_up
, boﬁ 
lök_up_waô_to_com∂ëe
);

47 
s32
 
ixgbe_£tup_mac_lök_•ìd_82599
(
ixgbe_hw
 *
hw
,

48 
ixgbe_lök_•ìd
 
•ìd
,

49 
boﬁ
 
aut⁄eg
,

50 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
);

51 
s32
 
ixgbe_£tup_c›≥r_lök_82599
(
ixgbe_hw
 *
hw
);

52 
s32
 
ixgbe_£tup_c›≥r_lök_•ìd_82599
(
ixgbe_hw
 *
hw
,

53 
ixgbe_lök_•ìd
 
•ìd
,

54 
boﬁ
 
aut⁄eg
,

55 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
);

56 
s32
 
ixgbe_£tup_sÂ_moduÀs_82599
(
ixgbe_hw
 *
hw
);

57 
ixgbe_öô_mac_lök_›s_82599
(
ixgbe_hw
 *
hw
);

58 
s32
 
ixgbe_ª£t_hw_82599
(
ixgbe_hw
 *
hw
);

59 
s32
 
ixgbe_£t_vmdq_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
);

60 
s32
 
ixgbe_˛ór_vmdq_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
);

61 
s32
 
ixgbe_ö£π_mac_addr_82599
(
ixgbe_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
vmdq
);

62 
s32
 
ixgbe_£t_v·a_82599
(
ixgbe_hw
 *
hw
, 
u32
 
vœn
,

63 
u32
 
vöd
, 
boﬁ
 
vœn_⁄
);

64 
s32
 
ixgbe_˛ór_v·a_82599
(
ixgbe_hw
 *
hw
);

65 
s32
 
ixgbe_öô_uè_èbÀs_82599
(
ixgbe_hw
 *
hw
);

66 
s32
 
ixgbe_ªad_™Æog_ªg8_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 *
vÆ
);

67 
s32
 
ixgbe_wrôe_™Æog_ªg8_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 
vÆ
);

68 
s32
 
ixgbe_°¨t_hw_ªv_1_82599
(
ixgbe_hw
 *
hw
);

69 
s32
 
ixgbe_idítify_phy_82599
(
ixgbe_hw
 *
hw
);

70 
s32
 
ixgbe_öô_phy_›s_82599
(
ixgbe_hw
 *
hw
);

71 
u32
 
ixgbe_gë_suµ‹ãd_physiˇl_œyî_82599
(
ixgbe_hw
 *
hw
);

72 
s32
 
ixgbe_íabÀ_rx_dma_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ªgvÆ
);

73 
s32
 
ixgbe_gë_ßn_mac_addr_off£t_82599
(
ixgbe_hw
 *
hw
,

74 
u16
 *
ßn_mac_off£t
);

75 
s32
 
ixgbe_gë_ßn_mac_addr_82599
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
);

76 
s32
 
ixgbe_£t_ßn_mac_addr_82599
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
);

77 
s32
 
ixgbe_gë_devi˚_ˇps_82599
(
ixgbe_hw
 *
hw
, 
u16
 *
devi˚_ˇps
);

78 
s32
 
ixgbe_vîify_fw_vîsi⁄_82599
(
ixgbe_hw
 *
hw
);

80 
	$ixgbe_öô_mac_lök_›s_82599
(
ixgbe_hw
 *
hw
)

82 
ixgbe_mac_öfo
 *
mac
 = &
hw
->mac;

84 i‡(
hw
->
phy
.
mu…i•ìd_fibî
) {

86 
mac
->
›s
.
£tup_lök
 =

87 &
ixgbe_£tup_mac_lök_mu…i•ìd_fibî
;

88 
mac
->
›s
.
£tup_lök_•ìd
 =

89 &
ixgbe_£tup_mac_lök_•ìd_mu…i•ìd_fibî
;

91 
mac
->
›s
.
£tup_lök
 =

92 &
ixgbe_£tup_mac_lök_82599
;

93 
mac
->
›s
.
£tup_lök_•ìd
 =

94 &
ixgbe_£tup_mac_lök_•ìd_82599
;

96 
	}
}

107 
s32
 
	$ixgbe_öô_phy_›s_82599
(
ixgbe_hw
 *
hw
)

109 
ixgbe_mac_öfo
 *
mac
 = &
hw
->mac;

110 
ixgbe_phy_öfo
 *
phy
 = &
hw
->phy;

111 
s32
 
ªt_vÆ
 = 0;

114 
ªt_vÆ
 = 
phy
->
›s
.
	`idítify
(
hw
);

115 i‡(
ªt_vÆ
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
)

116 
öô_phy_›s_out
;

119 
	`ixgbe_öô_mac_lök_›s_82599
(
hw
);

120 i‡(
hw
->
phy
.
sÂ_ty≥
 !
ixgbe_sÂ_ty≥_unknown
)

121 
hw
->
phy
.
›s
.
ª£t
 = 
NULL
;

124 i‡(
mac
->
›s
.
	`gë_medü_ty≥
(
hw
Ë=
ixgbe_medü_ty≥_c›≥r
) {

125 
mac
->
›s
.
£tup_lök
 = &
ixgbe_£tup_c›≥r_lök_82599
;

126 
mac
->
›s
.
£tup_lök_•ìd
 =

127 &
ixgbe_£tup_c›≥r_lök_•ìd_82599
;

128 
mac
->
›s
.
gë_lök_ˇ∑bûôõs
 =

129 &
ixgbe_gë_c›≥r_lök_ˇ∑bûôõs_gíîic
;

133 
hw
->
phy
.
ty≥
) {

134 
ixgbe_phy_ä
:

135 
phy
->
›s
.
check_lök
 = &
ixgbe_check_phy_lök_äx
;

136 
phy
->
›s
.
gë_fúmw¨e_vîsi⁄
 =

137 &
ixgbe_gë_phy_fúmw¨e_vîsi⁄_äx
;

139 
ixgbe_phy_aq
:

140 
phy
->
›s
.
gë_fúmw¨e_vîsi⁄
 =

141 &
ixgbe_gë_phy_fúmw¨e_vîsi⁄_aq
;

146 
öô_phy_›s_out
:

147  
ªt_vÆ
;

148 
	}
}

150 
s32
 
	$ixgbe_£tup_sÂ_moduÀs_82599
(
ixgbe_hw
 *
hw
)

152 
s32
 
ªt_vÆ
 = 0;

153 
u16
 
li°_off£t
, 
d©a_off£t
, 
d©a_vÆue
;

155 i‡(
hw
->
phy
.
sÂ_ty≥
 !
ixgbe_sÂ_ty≥_unknown
) {

156 
	`ixgbe_öô_mac_lök_›s_82599
(
hw
);

158 
hw
->
phy
.
›s
.
ª£t
 = 
NULL
;

160 
ªt_vÆ
 = 
	`ixgbe_gë_sÂ_öô_£quí˚_off£ts
(
hw
, &
li°_off£t
,

161 &
d©a_off£t
);

162 i‡(
ªt_vÆ
 != 0)

163 
£tup_sÂ_out
;

166 
ªt_vÆ
 = 
	`ixgbe_acquúe_swfw_sync
(
hw
, 
IXGBE_GSSR_MAC_CSR_SM
);

167 i‡(
ªt_vÆ
 != 0) {

168 
ªt_vÆ
 = 
IXGBE_ERR_SWFW_SYNC
;

169 
£tup_sÂ_out
;

172 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, ++
d©a_off£t
, &
d©a_vÆue
);

173 
d©a_vÆue
 != 0xffff) {

174 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CORECTL
, 
d©a_vÆue
);

175 
	`IXGBE_WRITE_FLUSH
(
hw
);

176 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, ++
d©a_off£t
, &
d©a_vÆue
);

179 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
,

180 (
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
Ë| 
IXGBE_AUTOC_AN_RESTART
));

183 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
IXGBE_GSSR_MAC_CSR_SM
);

185 
	`m¶ìp
(
hw
->
ì¥om
.
£m≠h‹e_dñay
);

188 
£tup_sÂ_out
:

189  
ªt_vÆ
;

190 
	}
}

199 
u32
 
	$ixgbe_gë_pcõ_msix_cou¡_82599
(
ixgbe_hw
 *
hw
)

201 
u32
 
msix_cou¡
 = 64;

203 i‡(
hw
->
mac
.
msix_ve˘‹s_‰om_pcõ
) {

204 
msix_cou¡
 = 
	`IXGBE_READ_PCIE_WORD
(
hw
,

205 
IXGBE_PCIE_MSIX_82599_CAPS
);

206 
msix_cou¡
 &
IXGBE_PCIE_MSIX_TBL_SZ_MASK
;

210 
msix_cou¡
++;

213  
msix_cou¡
;

214 
	}
}

224 
s32
 
	$ixgbe_öô_›s_82599
(
ixgbe_hw
 *
hw
)

226 
ixgbe_mac_öfo
 *
mac
 = &
hw
->mac;

227 
ixgbe_phy_öfo
 *
phy
 = &
hw
->phy;

228 
s32
 
ªt_vÆ
;

230 
ªt_vÆ
 = 
	`ixgbe_öô_phy_›s_gíîic
(
hw
);

231 
ªt_vÆ
 = 
	`ixgbe_öô_›s_gíîic
(
hw
);

234 
phy
->
›s
.
idítify
 = &
ixgbe_idítify_phy_82599
;

235 
phy
->
›s
.
öô
 = &
ixgbe_öô_phy_›s_82599
;

238 
mac
->
›s
.
ª£t_hw
 = &
ixgbe_ª£t_hw_82599
;

239 
mac
->
›s
.
gë_medü_ty≥
 = &
ixgbe_gë_medü_ty≥_82599
;

240 
mac
->
›s
.
gë_suµ‹ãd_physiˇl_œyî
 =

241 &
ixgbe_gë_suµ‹ãd_physiˇl_œyî_82599
;

242 
mac
->
›s
.
íabÀ_rx_dma
 = &
ixgbe_íabÀ_rx_dma_82599
;

243 
mac
->
›s
.
ªad_™Æog_ªg8
 = &
ixgbe_ªad_™Æog_ªg8_82599
;

244 
mac
->
›s
.
wrôe_™Æog_ªg8
 = &
ixgbe_wrôe_™Æog_ªg8_82599
;

245 
mac
->
›s
.
°¨t_hw
 = &
ixgbe_°¨t_hw_ªv_1_82599
;

246 
mac
->
›s
.
gë_ßn_mac_addr
 = &
ixgbe_gë_ßn_mac_addr_82599
;

247 
mac
->
›s
.
£t_ßn_mac_addr
 = &
ixgbe_£t_ßn_mac_addr_82599
;

248 
mac
->
›s
.
gë_devi˚_ˇps
 = &
ixgbe_gë_devi˚_ˇps_82599
;

251 
mac
->
›s
.
£t_vmdq
 = &
ixgbe_£t_vmdq_82599
;

252 
mac
->
›s
.
˛ór_vmdq
 = &
ixgbe_˛ór_vmdq_82599
;

253 
mac
->
›s
.
ö£π_mac_addr
 = &
ixgbe_ö£π_mac_addr_82599
;

254 
mac
->
ør_highw©î
 = 1;

255 
mac
->
›s
.
£t_v·a
 = &
ixgbe_£t_v·a_82599
;

256 
mac
->
›s
.
˛ór_v·a
 = &
ixgbe_˛ór_v·a_82599
;

257 
mac
->
›s
.
öô_uè_èbÀs
 = &
ixgbe_öô_uè_èbÀs_82599
;

258 
mac
->
›s
.
£tup_sÂ
 = &
ixgbe_£tup_sÂ_moduÀs_82599
;

261 
mac
->
›s
.
gë_lök_ˇ∑bûôõs
 = &
ixgbe_gë_lök_ˇ∑bûôõs_82599
;

262 
mac
->
›s
.
check_lök
 = &
ixgbe_check_mac_lök_82599
;

263 
	`ixgbe_öô_mac_lök_›s_82599
(
hw
);

265 
mac
->
mc·_size
 = 128;

266 
mac
->
v·_size
 = 128;

267 
mac
->
num_ør_íåõs
 = 128;

268 
mac
->
max_tx_queues
 = 128;

269 
mac
->
max_rx_queues
 = 128;

270 
mac
->
max_msix_ve˘‹s
 = 
	`ixgbe_gë_pcõ_msix_cou¡_82599
(
hw
);

273  
ªt_vÆ
;

274 
	}
}

284 
s32
 
	$ixgbe_gë_lök_ˇ∑bûôõs_82599
(
ixgbe_hw
 *
hw
,

285 
ixgbe_lök_•ìd
 *
•ìd
,

286 
boﬁ
 *
√gŸüti⁄
)

288 
s32
 
°©us
 = 0;

289 
u32
 
autoc
 = 0;

296 i‡(
hw
->
mac
.
‹ig_lök_£âögs_°‹ed
)

297 
autoc
 = 
hw
->
mac
.
‹ig_autoc
;

299 
autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

301 
autoc
 & 
IXGBE_AUTOC_LMS_MASK
) {

302 
IXGBE_AUTOC_LMS_1G_LINK_NO_AN
:

303 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

304 *
√gŸüti⁄
 = 
Ál£
;

307 
IXGBE_AUTOC_LMS_10G_LINK_NO_AN
:

308 *
•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

309 *
√gŸüti⁄
 = 
Ál£
;

312 
IXGBE_AUTOC_LMS_1G_AN
:

313 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

314 *
√gŸüti⁄
 = 
åue
;

317 
IXGBE_AUTOC_LMS_10G_SERIAL
:

318 *
•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

319 *
√gŸüti⁄
 = 
Ál£
;

322 
IXGBE_AUTOC_LMS_KX4_KX_KR
:

323 
IXGBE_AUTOC_LMS_KX4_KX_KR_1G_AN
:

324 *
•ìd
 = 
IXGBE_LINK_SPEED_UNKNOWN
;

325 i‡(
autoc
 & 
IXGBE_AUTOC_KR_SUPP
)

326 *
•ìd
 |
IXGBE_LINK_SPEED_10GB_FULL
;

327 i‡(
autoc
 & 
IXGBE_AUTOC_KX4_SUPP
)

328 *
•ìd
 |
IXGBE_LINK_SPEED_10GB_FULL
;

329 i‡(
autoc
 & 
IXGBE_AUTOC_KX_SUPP
)

330 *
•ìd
 |
IXGBE_LINK_SPEED_1GB_FULL
;

331 *
√gŸüti⁄
 = 
åue
;

334 
IXGBE_AUTOC_LMS_KX4_KX_KR_SGMII
:

335 *
•ìd
 = 
IXGBE_LINK_SPEED_100_FULL
;

336 i‡(
autoc
 & 
IXGBE_AUTOC_KR_SUPP
)

337 *
•ìd
 |
IXGBE_LINK_SPEED_10GB_FULL
;

338 i‡(
autoc
 & 
IXGBE_AUTOC_KX4_SUPP
)

339 *
•ìd
 |
IXGBE_LINK_SPEED_10GB_FULL
;

340 i‡(
autoc
 & 
IXGBE_AUTOC_KX_SUPP
)

341 *
•ìd
 |
IXGBE_LINK_SPEED_1GB_FULL
;

342 *
√gŸüti⁄
 = 
åue
;

345 
IXGBE_AUTOC_LMS_SGMII_1G_100M
:

346 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
 | 
IXGBE_LINK_SPEED_100_FULL
;

347 *
√gŸüti⁄
 = 
Ál£
;

351 
°©us
 = 
IXGBE_ERR_LINK_SETUP
;

352 
out
;

356 i‡(
hw
->
phy
.
mu…i•ìd_fibî
) {

357 *
•ìd
 |
IXGBE_LINK_SPEED_10GB_FULL
 |

358 
IXGBE_LINK_SPEED_1GB_FULL
;

359 *
√gŸüti⁄
 = 
åue
;

362 
out
:

363  
°©us
;

364 
	}
}

372 
ixgbe_medü_ty≥
 
	$ixgbe_gë_medü_ty≥_82599
(
ixgbe_hw
 *
hw
)

374 
ixgbe_medü_ty≥
 
medü_ty≥
;

377 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_cu_unknown
 ||

378 
hw
->
phy
.
ty≥
 =
ixgbe_phy_ä
 ||

379 
hw
->
phy
.
ty≥
 =
ixgbe_phy_aq
) {

380 
medü_ty≥
 = 
ixgbe_medü_ty≥_c›≥r
;

381 
out
;

384 
hw
->
devi˚_id
) {

385 
IXGBE_DEV_ID_82599_KX4
:

386 
IXGBE_DEV_ID_82599_XAUI_LOM
:

388 
medü_ty≥
 = 
ixgbe_medü_ty≥_back∂™e
;

390 
IXGBE_DEV_ID_82599_SFP
:

391 
medü_ty≥
 = 
ixgbe_medü_ty≥_fibî
;

394 
medü_ty≥
 = 
ixgbe_medü_ty≥_unknown
;

397 
out
:

398  
medü_ty≥
;

399 
	}
}

408 
s32
 
	$ixgbe_£tup_mac_lök_82599
(
ixgbe_hw
 *
hw
)

410 
u32
 
autoc_ªg
;

411 
u32
 
löks_ªg
;

412 
u32
 
i
;

413 
s32
 
°©us
 = 0;

416 
autoc_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

417 
autoc_ªg
 |
IXGBE_AUTOC_AN_RESTART
;

418 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, 
autoc_ªg
);

421 i‡(
hw
->
phy
.
aut⁄eg_waô_to_com∂ëe
) {

422 i‡((
autoc_ªg
 & 
IXGBE_AUTOC_LMS_MASK
) ==

423 
IXGBE_AUTOC_LMS_KX4_KX_KR
 ||

424 (
autoc_ªg
 & 
IXGBE_AUTOC_LMS_MASK
) ==

425 
IXGBE_AUTOC_LMS_KX4_KX_KR_1G_AN


426 || (
autoc_ªg
 & 
IXGBE_AUTOC_LMS_MASK
) ==

427 
IXGBE_AUTOC_LMS_KX4_KX_KR_SGMII
) {

428 
löks_ªg
 = 0;

429 
i
 = 0; i < 
IXGBE_AUTO_NEG_TIME
; i++) {

430 
löks_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

431 i‡(
löks_ªg
 & 
IXGBE_LINKS_KX_AN_COMP
)

433 
	`m¶ìp
(100);

435 i‡(!(
löks_ªg
 & 
IXGBE_LINKS_KX_AN_COMP
)) {

436 
°©us
 = 
IXGBE_ERR_AUTONEG_NOT_COMPLETE
;

437 
	`hw_dbg
(
hw
, "Autoneg didÇot complete.\n");

443 
	`m¶ìp
(50);

445  
°©us
;

446 
	}
}

457 
s32
 
	$ixgbe_£tup_mac_lök_mu…i•ìd_fibî
(
ixgbe_hw
 *
hw
)

459 
s32
 
°©us
 = 0;

460 
ixgbe_lök_•ìd
 
lök_•ìd
 = 
IXGBE_LINK_SPEED_82599_AUTONEG
;

461 
°©us
 = 
	`ixgbe_£tup_mac_lök_•ìd_mu…i•ìd_fibî
(
hw
,

462 
lök_•ìd
, 
åue
,Årue);

463  
°©us
;

464 
	}
}

475 
s32
 
	$ixgbe_£tup_mac_lök_•ìd_mu…i•ìd_fibî
(
ixgbe_hw
 *
hw
,

476 
ixgbe_lök_•ìd
 
•ìd
, 
boﬁ
 
aut⁄eg
,

477 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

479 
s32
 
°©us
 = 0;

480 
ixgbe_lök_•ìd
 
lök_•ìd
;

481 
ixgbe_lök_•ìd
 
highe°_lök_•ìd
 = 
IXGBE_LINK_SPEED_UNKNOWN
;

482 
u32
 
•ìd˙t
 = 0;

483 
u32
 
esdp_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ESDP
);

484 
u32
 
i
 = 0;

485 
boﬁ
 
lök_up
 = 
Ál£
;

486 
boﬁ
 
√gŸüti⁄
;

489 
°©us
 = 
	`ixgbe_gë_lök_ˇ∑bûôõs
(
hw
, &
lök_•ìd
, &
√gŸüti⁄
);

490 i‡(
°©us
 != 0)

491 
out
;

493 
•ìd
 &
lök_•ìd
;

496 
hw
->
phy
.
aut⁄eg_advîti£d
 = 0;

498 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_10GB_FULL
)

499 
hw
->
phy
.
aut⁄eg_advîti£d
 |
IXGBE_LINK_SPEED_10GB_FULL
;

501 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_1GB_FULL
)

502 
hw
->
phy
.
aut⁄eg_advîti£d
 |
IXGBE_LINK_SPEED_1GB_FULL
;

518 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_10GB_FULL
) {

519 
•ìd˙t
++;

520 
highe°_lök_•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

523 
°©us
 = 
	`ixgbe_check_lök
(
hw
, &
lök_•ìd
, &
lök_up
, 
Ál£
);

524 i‡(
°©us
 != 0)

525 
out
;

527 i‡((
lök_•ìd
 =
IXGBE_LINK_SPEED_10GB_FULL
Ë&& 
lök_up
)

528 
out
;

531 
esdp_ªg
 |(
IXGBE_ESDP_SDP5_DIR
 | 
IXGBE_ESDP_SDP5
);

532 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ESDP
, 
esdp_ªg
);

535 
	`m¶ìp
(40);

537 
°©us
 = 
	`ixgbe_£tup_mac_lök_•ìd_82599
(

538 
hw
, 
IXGBE_LINK_SPEED_10GB_FULL
, 
aut⁄eg
,

539 
aut⁄eg_waô_to_com∂ëe
);

540 i‡(
°©us
 != 0)

541 
out
;

544 i‡(
hw
->
mac
.
autŸry_ª°¨t
) {

546 
esdp_ªg
 |
IXGBE_ESDP_SDP3
;

547 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ESDP
, 
esdp_ªg
);

548 
	`udñay
(100);

551 
esdp_ªg
 &~
IXGBE_ESDP_SDP3
;

552 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ESDP
, 
esdp_ªg
);

553 
	`m¶ìp
(2);

555 
hw
->
mac
.
autŸry_ª°¨t
 = 
Ál£
;

559 
i
 = 0; i < 5; i++) {

561 
	`m¶ìp
(100);

564 
°©us
 = 
	`ixgbe_check_lök
(
hw
, &
lök_•ìd
,

565 &
lök_up
, 
Ál£
);

566 i‡(
°©us
 != 0)

567 
out
;

569 i‡(
lök_up
)

570 
out
;

574 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_1GB_FULL
) {

575 
•ìd˙t
++;

576 i‡(
highe°_lök_•ìd
 =
IXGBE_LINK_SPEED_UNKNOWN
)

577 
highe°_lök_•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

580 
°©us
 = 
	`ixgbe_check_lök
(
hw
, &
lök_•ìd
, &
lök_up
, 
Ál£
);

581 i‡(
°©us
 != 0)

582 
out
;

584 i‡((
lök_•ìd
 =
IXGBE_LINK_SPEED_1GB_FULL
Ë&& 
lök_up
)

585 
out
;

588 
esdp_ªg
 &~
IXGBE_ESDP_SDP5
;

589 
esdp_ªg
 |
IXGBE_ESDP_SDP5_DIR
;

590 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ESDP
, 
esdp_ªg
);

593 
	`m¶ìp
(40);

595 
°©us
 = 
	`ixgbe_£tup_mac_lök_•ìd_82599
(

596 
hw
, 
IXGBE_LINK_SPEED_1GB_FULL
, 
aut⁄eg
,

597 
aut⁄eg_waô_to_com∂ëe
);

598 i‡(
°©us
 != 0)

599 
out
;

602 i‡(
hw
->
mac
.
autŸry_ª°¨t
) {

604 
esdp_ªg
 |
IXGBE_ESDP_SDP3
;

605 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ESDP
, 
esdp_ªg
);

606 
	`udñay
(100);

609 
esdp_ªg
 &~
IXGBE_ESDP_SDP3
;

610 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_ESDP
, 
esdp_ªg
);

611 
	`m¶ìp
(2);

613 
hw
->
mac
.
autŸry_ª°¨t
 = 
Ál£
;

617 
	`m¶ìp
(100);

620 
°©us
 = 
	`ixgbe_check_lök
(
hw
, &
lök_•ìd
, &
lök_up
, 
Ál£
);

621 i‡(
°©us
 != 0)

622 
out
;

624 i‡(
lök_up
)

625 
out
;

633 i‡(
•ìd˙t
 > 1)

634 
°©us
 = 
	`ixgbe_£tup_mac_lök_•ìd_mu…i•ìd_fibî
(
hw
,

635 
highe°_lök_•ìd
, 
aut⁄eg
, 
aut⁄eg_waô_to_com∂ëe
);

637 
out
:

638  
°©us
;

639 
	}
}

650 
s32
 
	$ixgbe_check_mac_lök_82599
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 *
•ìd
,

651 
boﬁ
 *
lök_up
, boﬁ 
lök_up_waô_to_com∂ëe
)

653 
u32
 
löks_ªg
;

654 
u32
 
i
;

656 
löks_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

657 i‡(
lök_up_waô_to_com∂ëe
) {

658 
i
 = 0; i < 
IXGBE_LINK_UP_TIME
; i++) {

659 i‡(
löks_ªg
 & 
IXGBE_LINKS_UP
) {

660 *
lök_up
 = 
åue
;

663 *
lök_up
 = 
Ál£
;

665 
	`m¶ìp
(100);

666 
löks_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

669 i‡(
löks_ªg
 & 
IXGBE_LINKS_UP
)

670 *
lök_up
 = 
åue
;

672 *
lök_up
 = 
Ál£
;

675 i‡((
löks_ªg
 & 
IXGBE_LINKS_SPEED_82599
) ==

676 
IXGBE_LINKS_SPEED_10G_82599
)

677 *
•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

678 i‡((
löks_ªg
 & 
IXGBE_LINKS_SPEED_82599
) ==

679 
IXGBE_LINKS_SPEED_1G_82599
)

680 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

682 *
•ìd
 = 
IXGBE_LINK_SPEED_100_FULL
;

685 i‡(*
lök_up
 =
Ál£
) {

686 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_n⁄e
;

687 
hw
->
fc
.
fc_was_aut⁄egged
 = 
Ál£
;

691 
	}
}

702 
s32
 
	$ixgbe_£tup_mac_lök_•ìd_82599
(
ixgbe_hw
 *
hw
,

703 
ixgbe_lök_•ìd
 
•ìd
, 
boﬁ
 
aut⁄eg
,

704 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

706 
s32
 
°©us
 = 0;

707 
u32
 
autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

708 
u32
 
autoc2
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC2
);

709 
u32
 
°¨t_autoc
 = 
autoc
;

710 
u32
 
‹ig_autoc
 = 0;

711 
u32
 
lök_mode
 = 
autoc
 & 
IXGBE_AUTOC_LMS_MASK
;

712 
u32
 
pma_pmd_1g
 = 
autoc
 & 
IXGBE_AUTOC_1G_PMA_PMD_MASK
;

713 
u32
 
pma_pmd_10g_£rül
 = 
autoc2
 & 
IXGBE_AUTOC2_10G_SERIAL_PMA_PMD_MASK
;

714 
u32
 
löks_ªg
;

715 
u32
 
i
;

716 
ixgbe_lök_•ìd
 
lök_ˇ∑bûôõs
 = 
IXGBE_LINK_SPEED_UNKNOWN
;

719 
°©us
 = 
	`ixgbe_gë_lök_ˇ∑bûôõs
(
hw
, &
lök_ˇ∑bûôõs
, &
aut⁄eg
);

720 i‡(
°©us
 != 0)

721 
out
;

723 
•ìd
 &
lök_ˇ∑bûôõs
;

725 i‡(
•ìd
 =
IXGBE_LINK_SPEED_UNKNOWN
) {

726 
°©us
 = 
IXGBE_ERR_LINK_SETUP
;

727 
out
;

731 i‡(
hw
->
mac
.
‹ig_lök_£âögs_°‹ed
)

732 
‹ig_autoc
 = 
hw
->
mac
.orig_autoc;

734 
‹ig_autoc
 = 
autoc
;

736 i‡(
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_KX_KR
 ||

737 
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_KX_KR_1G_AN
 ||

738 
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_KX_KR_SGMII
) {

740 
autoc
 &~(
IXGBE_AUTOC_KX4_KX_SUPP_MASK
 | 
IXGBE_AUTOC_KR_SUPP
);

741 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_10GB_FULL
)

742 i‡(
‹ig_autoc
 & 
IXGBE_AUTOC_KX4_SUPP
)

743 
autoc
 |
IXGBE_AUTOC_KX4_SUPP
;

744 i‡(
‹ig_autoc
 & 
IXGBE_AUTOC_KR_SUPP
)

745 
autoc
 |
IXGBE_AUTOC_KR_SUPP
;

746 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_1GB_FULL
)

747 
autoc
 |
IXGBE_AUTOC_KX_SUPP
;

748 } i‡((
pma_pmd_1g
 =
IXGBE_AUTOC_1G_SFI
) &&

749 (
lök_mode
 =
IXGBE_AUTOC_LMS_1G_LINK_NO_AN
 ||

750 
lök_mode
 =
IXGBE_AUTOC_LMS_1G_AN
)) {

752 i‡((
•ìd
 =
IXGBE_LINK_SPEED_10GB_FULL
) &&

753 (
pma_pmd_10g_£rül
 =
IXGBE_AUTOC2_10G_SFI
)) {

754 
autoc
 &~
IXGBE_AUTOC_LMS_MASK
;

755 
autoc
 |
IXGBE_AUTOC_LMS_10G_SERIAL
;

757 } i‡((
pma_pmd_10g_£rül
 =
IXGBE_AUTOC2_10G_SFI
) &&

758 (
lök_mode
 =
IXGBE_AUTOC_LMS_10G_SERIAL
)) {

760 i‡((
•ìd
 =
IXGBE_LINK_SPEED_1GB_FULL
) &&

761 (
pma_pmd_1g
 =
IXGBE_AUTOC_1G_SFI
)) {

762 
autoc
 &~
IXGBE_AUTOC_LMS_MASK
;

763 i‡(
aut⁄eg
)

764 
autoc
 |
IXGBE_AUTOC_LMS_1G_AN
;

766 
autoc
 |
IXGBE_AUTOC_LMS_1G_LINK_NO_AN
;

770 i‡(
autoc
 !
°¨t_autoc
) {

773 
autoc
 |
IXGBE_AUTOC_AN_RESTART
;

774 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, 
autoc
);

777 i‡(
aut⁄eg_waô_to_com∂ëe
) {

778 i‡(
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_KX_KR
 ||

779 
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_KX_KR_1G_AN
 ||

780 
lök_mode
 =
IXGBE_AUTOC_LMS_KX4_KX_KR_SGMII
) {

781 
löks_ªg
 = 0;

782 
i
 = 0; i < 
IXGBE_AUTO_NEG_TIME
; i++) {

783 
löks_ªg
 =

784 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

785 i‡(
löks_ªg
 & 
IXGBE_LINKS_KX_AN_COMP
)

787 
	`m¶ìp
(100);

789 i‡(!(
löks_ªg
 & 
IXGBE_LINKS_KX_AN_COMP
)) {

790 
°©us
 =

791 
IXGBE_ERR_AUTONEG_NOT_COMPLETE
;

792 
	`hw_dbg
(
hw
, "Autoneg didÇot complete.\n");

798 
	`m¶ìp
(50);

801 
out
:

802  
°©us
;

803 
	}
}

811 
s32
 
	$ixgbe_£tup_c›≥r_lök_82599
(
ixgbe_hw
 *
hw
)

813 
s32
 
°©us
;

816 
°©us
 = 
hw
->
phy
.
›s
.
	`£tup_lök
(hw);

819 
	`ixgbe_£tup_mac_lök_82599
(
hw
);

821  
°©us
;

822 
	}
}

833 
s32
 
	$ixgbe_£tup_c›≥r_lök_•ìd_82599
(
ixgbe_hw
 *
hw
,

834 
ixgbe_lök_•ìd
 
•ìd
,

835 
boﬁ
 
aut⁄eg
,

836 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

838 
s32
 
°©us
;

841 
°©us
 = 
hw
->
phy
.
›s
.
	`£tup_lök_•ìd
(hw, 
•ìd
, 
aut⁄eg
,

842 
aut⁄eg_waô_to_com∂ëe
);

844 
	`ixgbe_£tup_mac_lök_82599
(
hw
);

846  
°©us
;

847 
	}
}

856 
s32
 
	$ixgbe_ª£t_hw_82599
(
ixgbe_hw
 *
hw
)

858 
s32
 
°©us
 = 0;

859 
u32
 
˘æ
, 
˘æ_ext
;

860 
u32
 
i
;

861 
u32
 
autoc
;

862 
u32
 
autoc2
;

865 
hw
->
mac
.
›s
.
	`°›_ad≠ãr
(hw);

870 
°©us
 = 
hw
->
phy
.
›s
.
	`öô
(hw);

872 i‡(
°©us
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
)

873 
ª£t_hw_out
;

876 i‡(
hw
->
phy
.
sÂ_£tup_√eded
) {

877 
°©us
 = 
hw
->
mac
.
›s
.
	`£tup_sÂ
(hw);

878 
hw
->
phy
.
sÂ_£tup_√eded
 = 
Ál£
;

881 i‡(
°©us
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
)

882 
ª£t_hw_out
;

885 i‡(
hw
->
phy
.
ª£t_dißbÀ
 =
Ál£
 && hw->phy.
›s
.
ª£t
 !
NULL
)

886 
hw
->
phy
.
›s
.
	`ª£t
(hw);

892 
°©us
 = 
	`ixgbe_dißbÀ_pcõ_ma°î
(
hw
);

893 i‡(
°©us
 != 0) {

894 
°©us
 = 
IXGBE_ERR_MASTER_REQUESTS_PENDING
;

895 
	`hw_dbg
(
hw
, "PCI-E Master disableÖolling has failed.\n");

902 
˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL
);

903 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CTRL
, (
˘æ
 | 
IXGBE_CTRL_RST
));

904 
	`IXGBE_WRITE_FLUSH
(
hw
);

907 
i
 = 0; i < 10; i++) {

908 
	`udñay
(1);

909 
˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL
);

910 i‡(!(
˘æ
 & 
IXGBE_CTRL_RST
))

913 i‡(
˘æ
 & 
IXGBE_CTRL_RST
) {

914 
°©us
 = 
IXGBE_ERR_RESET_FAILED
;

915 
	`hw_dbg
(
hw
, "ResetÖolling failedÅo complete.\n");

918 
˘æ_ext
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL_EXT
);

919 
˘æ_ext
 |
IXGBE_CTRL_EXT_PFRSTD
;

920 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CTRL_EXT
, 
˘æ_ext
);

922 
	`m¶ìp
(50);

931 
autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

932 
autoc2
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC2
);

933 i‡(
hw
->
mac
.
‹ig_lök_£âögs_°‹ed
 =
Ál£
) {

934 
hw
->
mac
.
‹ig_autoc
 = 
autoc
;

935 
hw
->
mac
.
‹ig_autoc2
 = 
autoc2
;

936 
hw
->
mac
.
‹ig_lök_£âögs_°‹ed
 = 
åue
;

938 i‡(
autoc
 !
hw
->
mac
.
‹ig_autoc
)

939 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, (hw->
mac
.
‹ig_autoc
 |

940 
IXGBE_AUTOC_AN_RESTART
));

942 i‡((
autoc2
 & 
IXGBE_AUTOC2_UPPER_MASK
) !=

943 (
hw
->
mac
.
‹ig_autoc2
 & 
IXGBE_AUTOC2_UPPER_MASK
)) {

944 
autoc2
 &~
IXGBE_AUTOC2_UPPER_MASK
;

945 
autoc2
 |(
hw
->
mac
.
‹ig_autoc2
 &

946 
IXGBE_AUTOC2_UPPER_MASK
);

947 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC2
, 
autoc2
);

952 
hw
->
mac
.
›s
.
	`gë_mac_addr
(hw, hw->mac.
≥rm_addr
);

959 
hw
->
mac
.
num_ør_íåõs
 = 128;

960 
hw
->
mac
.
›s
.
	`öô_rx_addrs
(hw);

965 
hw
->
mac
.
›s
.
	`gë_ßn_mac_addr
(hw, hw->mac.
ßn_addr
);

968 i‡(
	`ixgbe_vÆid©e_mac_addr
(
hw
->
mac
.
ßn_addr
) == 0) {

969 
hw
->
mac
.
›s
.
	`£t_ør
(hw, hw->mac.
num_ør_íåõs
 - 1,

970 
hw
->
mac
.
ßn_addr
, 0, 
IXGBE_RAH_AV
);

973 
hw
->
mac
.
num_ør_íåõs
--;

976 
ª£t_hw_out
:

977  
°©us
;

978 
	}
}

989 
s32
 
	$ixgbe_ö£π_mac_addr_82599
(
ixgbe_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
vmdq
)

991 c⁄° 
u32
 
NO_EMPTY_RAR_FOUND
 = 0xFFFFFFFF;

992 
u32
 
fú°_em±y_ør
 = 
NO_EMPTY_RAR_FOUND
;

993 
u32
 
ør
;

994 
u32
 
ør_low
, 
ør_high
;

995 
u32
 
addr_low
, 
addr_high
;

998 
addr_low
 = 
addr
[0] | (addr[1] << 8)

999 | (
addr
[2] << 16)

1000 | (
addr
[3] << 24);

1001 
addr_high
 = 
addr
[4] | (addr[5] << 8);

1009 
ør
 = 0;Ñ¨ < 
hw
->
mac
.
ør_highw©î
;Ñar++) {

1010 
ør_high
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAH
(
ør
));

1012 i‡(((
IXGBE_RAH_AV
 & 
ør_high
) == 0)

1013 && 
fú°_em±y_ør
 =
NO_EMPTY_RAR_FOUND
) {

1014 
fú°_em±y_ør
 = 
ør
;

1015 } i‡((
ør_high
 & 0xFFFFË=
addr_high
) {

1016 
ør_low
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAL
(
ør
));

1017 i‡(
ør_low
 =
addr_low
)

1022 i‡(
ør
 < 
hw
->
mac
.
ør_highw©î
) {

1024 
	`ixgbe_£t_vmdq
(
hw
, 
ør
, 
vmdq
);

1025 } i‡(
fú°_em±y_ør
 !
NO_EMPTY_RAR_FOUND
) {

1027 
ør
 = 
fú°_em±y_ør
;

1028 
	`ixgbe_£t_ør
(
hw
, 
ør
, 
addr
, 
vmdq
, 
IXGBE_RAH_AV
);

1029 } i‡(
ør
 =
hw
->
mac
.
ør_highw©î
) {

1031 
	`ixgbe_£t_ør
(
hw
, 
ør
, 
addr
, 
vmdq
, 
IXGBE_RAH_AV
);

1032 
hw
->
mac
.
ør_highw©î
++;

1033 } i‡(
ør
 >
hw
->
mac
.
num_ør_íåõs
) {

1034  
IXGBE_ERR_INVALID_MAC_ADDR
;

1041 i‡(
ør
 == 0)

1042 
	`ixgbe_˛ór_vmdq
(
hw
, 
ør
, 0);

1044  
ør
;

1045 
	}
}

1053 
s32
 
	$ixgbe_˛ór_vmdq_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
)

1055 
u32
 
mpßr_lo
, 
mpßr_hi
;

1056 
u32
 
ør_íåõs
 = 
hw
->
mac
.
num_ør_íåõs
;

1058 i‡(
ør
 < 
ør_íåõs
) {

1059 
mpßr_lo
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_MPSAR_LO
(
ør
));

1060 
mpßr_hi
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_MPSAR_HI
(
ør
));

1062 i‡(!
mpßr_lo
 && !
mpßr_hi
)

1063 
d⁄e
;

1065 i‡(
vmdq
 =
IXGBE_CLEAR_VMDQ_ALL
) {

1066 i‡(
mpßr_lo
) {

1067 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MPSAR_LO
(
ør
), 0);

1068 
mpßr_lo
 = 0;

1070 i‡(
mpßr_hi
) {

1071 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MPSAR_HI
(
ør
), 0);

1072 
mpßr_hi
 = 0;

1074 } i‡(
vmdq
 < 32) {

1075 
mpßr_lo
 &~(1 << 
vmdq
);

1076 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MPSAR_LO
(
ør
), 
mpßr_lo
);

1078 
mpßr_hi
 &~(1 << (
vmdq
 - 32));

1079 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MPSAR_HI
(
ør
), 
mpßr_hi
);

1083 i‡(
mpßr_lo
 =0 && 
mpßr_hi
 =0 && 
ør
 != 0)

1084 
hw
->
mac
.
›s
.
	`˛ór_ør
(hw, 
ør
);

1086 
	`hw_dbg
(
hw
, "RAR index %d i†ouào‡ønge.\n", 
ør
);

1089 
d⁄e
:

1091 
	}
}

1099 
s32
 
	$ixgbe_£t_vmdq_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
)

1101 
u32
 
mpßr
;

1102 
u32
 
ør_íåõs
 = 
hw
->
mac
.
num_ør_íåõs
;

1104 i‡(
ør
 < 
ør_íåõs
) {

1105 i‡(
vmdq
 < 32) {

1106 
mpßr
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_MPSAR_LO
(
ør
));

1107 
mpßr
 |1 << 
vmdq
;

1108 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MPSAR_LO
(
ør
), 
mpßr
);

1110 
mpßr
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_MPSAR_HI
(
ør
));

1111 
mpßr
 |1 << (
vmdq
 - 32);

1112 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MPSAR_HI
(
ør
), 
mpßr
);

1115 
	`hw_dbg
(
hw
, "RAR index %d i†ouào‡ønge.\n", 
ør
);

1118 
	}
}

1128 
ölöe
 
s32
 
	$ixgbe_föd_vlvf_¶Ÿ
(
ixgbe_hw
 *
hw
, 
u32
 
vœn
)

1130 
u32
 
bôs
 = 0;

1131 
u32
 
fú°_em±y_¶Ÿ
 = 0;

1132 
s32
 
ªgödex
;

1138 
ªgödex
 = 1;Ñegödex < 
IXGBE_VLVF_ENTRIES
;Ñegindex++) {

1139 
bôs
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_VLVF
(
ªgödex
));

1140 i‡(!
bôs
 && !(
fú°_em±y_¶Ÿ
))

1141 
fú°_em±y_¶Ÿ
 = 
ªgödex
;

1142 i‡((
bôs
 & 0x0FFFË=
vœn
)

1151 i‡(
ªgödex
 >
IXGBE_VLVF_ENTRIES
) {

1152 i‡(
fú°_em±y_¶Ÿ
)

1153 
ªgödex
 = 
fú°_em±y_¶Ÿ
;

1155 
	`hw_dbg
(
hw
, "No space in VLVF.\n");

1156 
ªgödex
 = -1;

1160  
ªgödex
;

1161 
	}
}

1172 
s32
 
	$ixgbe_£t_v·a_82599
(
ixgbe_hw
 *
hw
, 
u32
 
vœn
, u32 
vöd
,

1173 
boﬁ
 
vœn_⁄
)

1175 
s32
 
ªgödex
;

1176 
u32
 
bôödex
;

1177 
u32
 
bôs
;

1178 
u32
 
vt
;

1180 i‡(
vœn
 > 4095)

1181  
IXGBE_ERR_PARAM
;

1194 
ªgödex
 = (
vœn
 >> 5) & 0x7F;

1195 
bôödex
 = 
vœn
 & 0x1F;

1196 
bôs
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_VFTA
(
ªgödex
));

1197 i‡(
vœn_⁄
)

1198 
bôs
 |(1 << 
bôödex
);

1200 
bôs
 &~(1 << 
bôödex
);

1201 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VFTA
(
ªgödex
), 
bôs
);

1212 
vt
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_VT_CTL
);

1213 i‡(
vt
 & 
IXGBE_VT_CTL_VT_ENABLE
) {

1214 i‡(
vœn
 == 0) {

1215 
ªgödex
 = 0;

1217 
ªgödex
 = 
	`ixgbe_föd_vlvf_¶Ÿ
(
hw
, 
vœn
);

1218 i‡(
ªgödex
 < 0)

1219 
out
;

1222 i‡(
vœn_⁄
) {

1224 i‡(
vöd
 < 32) {

1225 
bôs
 = 
	`IXGBE_READ_REG
(
hw
,

1226 
	`IXGBE_VLVFB
(
ªgödex
*2));

1227 
bôs
 |(1 << 
vöd
);

1228 
	`IXGBE_WRITE_REG
(
hw
,

1229 
	`IXGBE_VLVFB
(
ªgödex
*2),

1230 
bôs
);

1232 
bôs
 = 
	`IXGBE_READ_REG
(
hw
,

1233 
	`IXGBE_VLVFB
((
ªgödex
*2)+1));

1234 
bôs
 |(1 << 
vöd
);

1235 
	`IXGBE_WRITE_REG
(
hw
,

1236 
	`IXGBE_VLVFB
((
ªgödex
*2)+1),

1237 
bôs
);

1241 i‡(
vöd
 < 32) {

1242 
bôs
 = 
	`IXGBE_READ_REG
(
hw
,

1243 
	`IXGBE_VLVFB
(
ªgödex
*2));

1244 
bôs
 &~(1 << 
vöd
);

1245 
	`IXGBE_WRITE_REG
(
hw
,

1246 
	`IXGBE_VLVFB
(
ªgödex
*2),

1247 
bôs
);

1248 
bôs
 |
	`IXGBE_READ_REG
(
hw
,

1249 
	`IXGBE_VLVFB
((
ªgödex
*2)+1));

1251 
bôs
 = 
	`IXGBE_READ_REG
(
hw
,

1252 
	`IXGBE_VLVFB
((
ªgödex
*2)+1));

1253 
bôs
 &~(1 << 
vöd
);

1254 
	`IXGBE_WRITE_REG
(
hw
,

1255 
	`IXGBE_VLVFB
((
ªgödex
*2)+1),

1256 
bôs
);

1257 
bôs
 |
	`IXGBE_READ_REG
(
hw
,

1258 
	`IXGBE_VLVFB
(
ªgödex
*2));

1262 i‡(
bôs
)

1263 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VLVF
(
ªgödex
),

1264 (
IXGBE_VLVF_VIEN
 | 
vœn
));

1266 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VLVF
(
ªgödex
), 0);

1268 
out
:

1270 
	}
}

1278 
s32
 
	$ixgbe_˛ór_v·a_82599
(
ixgbe_hw
 *
hw
)

1280 
u32
 
off£t
;

1282 
off£t
 = 0; off£à< 
hw
->
mac
.
v·_size
; offset++)

1283 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VFTA
(
off£t
), 0);

1285 
off£t
 = 0; off£à< 
IXGBE_VLVF_ENTRIES
; offset++) {

1286 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VLVF
(
off£t
), 0);

1287 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VLVFB
(
off£t
*2), 0);

1288 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_VLVFB
((
off£t
*2)+1), 0);

1292 
	}
}

1298 
s32
 
	$ixgbe_öô_uè_èbÀs_82599
(
ixgbe_hw
 *
hw
)

1300 
i
;

1302 
	`hw_dbg
(
hw
, " Clearing UTA\n");

1304 
i
 = 0; i < 128; i++)

1305 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_UTA
(
i
), 0);

1308 
	}
}

1314 
s32
 
	$ixgbe_ªöô_fdú_èbÀs_82599
(
ixgbe_hw
 *
hw
)

1316 
i
;

1317 
u32
 
fdú˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRCTRL
);

1318 
fdú˘æ
 &~
IXGBE_FDIRCTRL_INIT_DONE
;

1324 
i
 = 0; i < 
IXGBE_FDIRCMD_CMD_POLL
; i++) {

1325 i‡(!(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRCMD
) &

1326 
IXGBE_FDIRCMD_CMD_MASK
))

1328 
	`udñay
(10);

1330 i‡(
i
 >
IXGBE_FDIRCMD_CMD_POLL
) {

1331 
	`hw_dbg
(
hw
, "Flow DirectorÖrevious command isn't complete, "

1333  
IXGBE_ERR_FDIR_REINIT_FAILED
;

1336 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRFREE
, 0);

1337 
	`IXGBE_WRITE_FLUSH
(
hw
);

1345 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRCMD
,

1346 (
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRCMD
) |

1347 
IXGBE_FDIRCMD_CLEARHT
));

1348 
	`IXGBE_WRITE_FLUSH
(
hw
);

1349 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRCMD
,

1350 (
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRCMD
) &

1351 ~
IXGBE_FDIRCMD_CLEARHT
));

1352 
	`IXGBE_WRITE_FLUSH
(
hw
);

1357 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRHASH
, 0x00);

1358 
	`IXGBE_WRITE_FLUSH
(
hw
);

1360 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRCTRL
, 
fdú˘æ
);

1361 
	`IXGBE_WRITE_FLUSH
(
hw
);

1364 
i
 = 0; i < 
IXGBE_FDIR_INIT_DONE_POLL
; i++) {

1365 i‡(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRCTRL
) &

1366 
IXGBE_FDIRCTRL_INIT_DONE
)

1368 
	`udñay
(10);

1370 i‡(
i
 >
IXGBE_FDIR_INIT_DONE_POLL
) {

1371 
	`hw_dbg
(
hw
, "Flow Director SignatureÖollÅimeÉxceeded!\n");

1372  
IXGBE_ERR_FDIR_REINIT_FAILED
;

1376 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRUSTAT
);

1377 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRFSTAT
);

1378 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRMATCH
);

1379 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRMISS
);

1380 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRLEN
);

1383 
	}
}

1390 
s32
 
	$ixgbe_öô_fdú_sig«tuª_82599
(
ixgbe_hw
 *
hw
, 
u32
 
pbÆloc
)

1392 
u32
 
fdú˘æ
 = 0;

1393 
u32
 
pbsize
;

1394 
i
;

1401 
pbsize
 = (1 << (
IXGBE_FDIR_PBALLOC_SIZE_SHIFT
 + 
pbÆloc
));

1402 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(0),

1403 (
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(0)Ë- 
pbsize
));

1411 
i
 = 1; i < 8; i++)

1412 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(
i
), 0);

1415 
fdú˘æ
 |4 << 
IXGBE_FDIRCTRL_FULL_THRESH_SHIFT
;

1418 
fdú˘æ
 |0xA << 
IXGBE_FDIRCTRL_MAX_LENGTH_SHIFT
;

1420 
pbÆloc
) {

1421 
IXGBE_FDIR_PBALLOC_64K
:

1423 
fdú˘æ
 |
IXGBE_FDIRCTRL_PBALLOC_64K
;

1425 
IXGBE_FDIR_PBALLOC_128K
:

1427 
fdú˘æ
 |
IXGBE_FDIRCTRL_PBALLOC_128K
;

1429 
IXGBE_FDIR_PBALLOC_256K
:

1431 
fdú˘æ
 |
IXGBE_FDIRCTRL_PBALLOC_256K
;

1435  
IXGBE_ERR_CONFIG
;

1439 
fdú˘æ
 |(0x6 << 
IXGBE_FDIRCTRL_FLEX_SHIFT
);

1443 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRHKEY
,

1444 
	`IXGBE_HTONL
(
IXGBE_ATR_BUCKET_HASH_KEY
));

1445 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRSKEY
,

1446 
	`IXGBE_HTONL
(
IXGBE_ATR_SIGNATURE_HASH_KEY
));

1461 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRCTRL
, 
fdú˘æ
);

1462 
	`IXGBE_WRITE_FLUSH
(
hw
);

1463 
i
 = 0; i < 
IXGBE_FDIR_INIT_DONE_POLL
; i++) {

1464 i‡(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRCTRL
) &

1465 
IXGBE_FDIRCTRL_INIT_DONE
)

1467 
	`m¶ìp
(1);

1469 i‡(
i
 >
IXGBE_FDIR_INIT_DONE_POLL
)

1470 
	`hw_dbg
(
hw
, "Flow Director SignatureÖollÅimeÉxceeded!\n");

1473 
	}
}

1480 
s32
 
	$ixgbe_öô_fdú_≥r„˘_82599
(
ixgbe_hw
 *
hw
, 
u32
 
pbÆloc
)

1482 
u32
 
fdú˘æ
 = 0;

1483 
u32
 
pbsize
;

1484 
i
;

1492 
pbsize
 = (1 << (
IXGBE_FDIR_PBALLOC_SIZE_SHIFT
 + 
pbÆloc
));

1493 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(0),

1494 (
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(0)Ë- 
pbsize
));

1502 
i
 = 1; i < 8; i++)

1503 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(
i
), 0);

1506 
fdú˘æ
 |4 << 
IXGBE_FDIRCTRL_FULL_THRESH_SHIFT
;

1508 
pbÆloc
) {

1509 
IXGBE_FDIR_PBALLOC_64K
:

1511 
fdú˘æ
 |
IXGBE_FDIRCTRL_PBALLOC_64K
;

1513 
IXGBE_FDIR_PBALLOC_128K
:

1515 
fdú˘æ
 |
IXGBE_FDIRCTRL_PBALLOC_128K
;

1517 
IXGBE_FDIR_PBALLOC_256K
:

1519 
fdú˘æ
 |
IXGBE_FDIRCTRL_PBALLOC_256K
;

1523  
IXGBE_ERR_CONFIG
;

1527 
fdú˘æ
 |
IXGBE_FDIRCTRL_PERFECT_MATCH
;

1528 
fdú˘æ
 |
IXGBE_FDIRCTRL_REPORT_STATUS
;

1531 
fdú˘æ
 |(0x6 << 
IXGBE_FDIRCTRL_FLEX_SHIFT
);

1534 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRHKEY
,

1535 
	`IXGBE_HTONL
(
IXGBE_ATR_BUCKET_HASH_KEY
));

1536 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRSKEY
,

1537 
	`IXGBE_HTONL
(
IXGBE_ATR_SIGNATURE_HASH_KEY
));

1554 
fdú˘æ
 |(0xA << 
IXGBE_FDIRCTRL_MAX_LENGTH_SHIFT
);

1556 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRCTRL
, 
fdú˘æ
);

1557 
	`IXGBE_WRITE_FLUSH
(
hw
);

1558 
i
 = 0; i < 
IXGBE_FDIR_INIT_DONE_POLL
; i++) {

1559 i‡(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRCTRL
) &

1560 
IXGBE_FDIRCTRL_INIT_DONE
)

1562 
	`m¶ìp
(1);

1564 i‡(
i
 >
IXGBE_FDIR_INIT_DONE_POLL
)

1565 
	`hw_dbg
(
hw
, "Flow Director PerfectÖollÅimeÉxceeded!\n");

1568 
	}
}

1576 
u16
 
	$ixgbe_©r_compuã_hash_82599
(
ixgbe_©r_öput
 *
©r_öput
, 
u32
 
key
)

1610 
u64
 
fûl
[6];

1611 
u32
 
key
[11];

1612 
u8
 
key_°ªam
[44];

1613 } 
tmp_key
;

1615 
u8
 *
°ªam
 = (u8 *)
©r_öput
;

1616 
u8
 
öt_key
[44];

1617 
u8
 
hash_°r
[46];

1618 
u16
 
hash_ªsu…
 = 0;

1619 
i
, 
j
, 
k
, 
h
;

1625 
tmp_key
.
fûl
[0] = 0;

1628 
i
 = 0; i < 6; i++) {

1629 
u64
 
fûlkey
 = ((u64)
key
 << 32) | key;

1630 
tmp_key
.
fûl
[
i
] = 
fûlkey
;

1638 
öt_key
[0] = 
tmp_key
.
key_°ªam
[0] >> 1;

1639 
i
 = 1, 
j
 = 0; i < 44; i++) {

1640 
this_key
 = 
tmp_key
.
key_°ªam
[
j
] << 7;

1641 
j
++;

1642 
öt_key
[
i
] = (
u8
)(
this_key
 | (
tmp_key
.
key_°ªam
[
j
] >> 1));

1649 
hash_°r
[0] = (
°ªam
[40] & 0x7f) >> 1;

1650 
i
 = 1, 
j
 = 40; i < 46; i++) {

1651 
this_°r
 = 
°ªam
[
j
] << 7;

1652 
j
++;

1653 i‡(
j
 > 41)

1654 
j
 = 0;

1655 
hash_°r
[
i
] = (
u8
)(
this_°r
 | (
°ªam
[
j
] >> 1));

1663 
i
 = 45, 
j
 = 43, 
k
 = 0; k < 351 && i >= 2 && j >= 0; i--, j--) {

1664 
h
 = 0; h < 8 && 
k
 < 351; h++, k++) {

1665 i‡(
öt_key
[
j
] & (1 << 
h
)) {

1680 
tmp
 = (
hash_°r
[
i
] >> 
h
);

1681 
tmp
 |(
hash_°r
[
i
 - 1] << (8 - 
h
));

1682 
tmp
 |()(
hash_°r
[
i
 - 2] & ((1 << 
h
) - 1))

1683 << (16 - 
h
);

1684 
hash_ªsu…
 ^(
u16
)
tmp
;

1689  
hash_ªsu…
;

1690 
	}
}

1697 
s32
 
	$ixgbe_©r_£t_vœn_id_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
vœn
)

1699 
öput
->
byã_°ªam
[
IXGBE_ATR_VLAN_OFFSET
 + 1] = 
vœn
 >> 8;

1700 
öput
->
byã_°ªam
[
IXGBE_ATR_VLAN_OFFSET
] = 
vœn
 & 0xff;

1703 
	}
}

1710 
s32
 
	$ixgbe_©r_£t_§c_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 
§c_addr
)

1712 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
 + 3] = 
§c_addr
 >> 24;

1713 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
 + 2] =

1714 (
§c_addr
 >> 16) & 0xff;

1715 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
 + 1] =

1716 (
§c_addr
 >> 8) & 0xff;

1717 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
] = 
§c_addr
 & 0xff;

1720 
	}
}

1727 
s32
 
	$ixgbe_©r_£t_d°_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 
d°_addr
)

1729 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
 + 3] = 
d°_addr
 >> 24;

1730 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
 + 2] =

1731 (
d°_addr
 >> 16) & 0xff;

1732 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
 + 1] =

1733 (
d°_addr
 >> 8) & 0xff;

1734 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
] = 
d°_addr
 & 0xff;

1737 
	}
}

1747 
s32
 
	$ixgbe_©r_£t_§c_ùv6_82599
(
ixgbe_©r_öput
 *
öput
,

1748 
u32
 
§c_addr_1
, u32 
§c_addr_2
,

1749 
u32
 
§c_addr_3
, u32 
§c_addr_4
)

1751 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
] = 
§c_addr_4
 & 0xff;

1752 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 1] =

1753 (
§c_addr_4
 >> 8) & 0xff;

1754 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 2] =

1755 (
§c_addr_4
 >> 16) & 0xff;

1756 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 3] = 
§c_addr_4
 >> 24;

1758 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 4] = 
§c_addr_3
 & 0xff;

1759 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 5] =

1760 (
§c_addr_3
 >> 8) & 0xff;

1761 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 6] =

1762 (
§c_addr_3
 >> 16) & 0xff;

1763 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 7] = 
§c_addr_3
 >> 24;

1765 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 8] = 
§c_addr_2
 & 0xff;

1766 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 9] =

1767 (
§c_addr_2
 >> 8) & 0xff;

1768 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 10] =

1769 (
§c_addr_2
 >> 16) & 0xff;

1770 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 11] = 
§c_addr_2
 >> 24;

1772 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 12] = 
§c_addr_1
 & 0xff;

1773 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 13] =

1774 (
§c_addr_1
 >> 8) & 0xff;

1775 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 14] =

1776 (
§c_addr_1
 >> 16) & 0xff;

1777 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 15] = 
§c_addr_1
 >> 24;

1780 
	}
}

1790 
s32
 
	$ixgbe_©r_£t_d°_ùv6_82599
(
ixgbe_©r_öput
 *
öput
,

1791 
u32
 
d°_addr_1
, u32 
d°_addr_2
,

1792 
u32
 
d°_addr_3
, u32 
d°_addr_4
)

1794 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
] = 
d°_addr_4
 & 0xff;

1795 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 1] =

1796 (
d°_addr_4
 >> 8) & 0xff;

1797 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 2] =

1798 (
d°_addr_4
 >> 16) & 0xff;

1799 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 3] = 
d°_addr_4
 >> 24;

1801 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 4] = 
d°_addr_3
 & 0xff;

1802 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 5] =

1803 (
d°_addr_3
 >> 8) & 0xff;

1804 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 6] =

1805 (
d°_addr_3
 >> 16) & 0xff;

1806 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 7] = 
d°_addr_3
 >> 24;

1808 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 8] = 
d°_addr_2
 & 0xff;

1809 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 9] =

1810 (
d°_addr_2
 >> 8) & 0xff;

1811 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 10] =

1812 (
d°_addr_2
 >> 16) & 0xff;

1813 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 11] = 
d°_addr_2
 >> 24;

1815 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 12] = 
d°_addr_1
 & 0xff;

1816 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 13] =

1817 (
d°_addr_1
 >> 8) & 0xff;

1818 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 14] =

1819 (
d°_addr_1
 >> 16) & 0xff;

1820 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 15] = 
d°_addr_1
 >> 24;

1823 
	}
}

1830 
s32
 
	$ixgbe_©r_£t_§c_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
§c_p‹t
)

1832 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_PORT_OFFSET
 + 1] = 
§c_p‹t
 >> 8;

1833 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_PORT_OFFSET
] = 
§c_p‹t
 & 0xff;

1836 
	}
}

1843 
s32
 
	$ixgbe_©r_£t_d°_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
d°_p‹t
)

1845 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_PORT_OFFSET
 + 1] = 
d°_p‹t
 >> 8;

1846 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_PORT_OFFSET
] = 
d°_p‹t
 & 0xff;

1849 
	}
}

1856 
s32
 
	$ixgbe_©r_£t_Êex_byã_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
Êex_byã
)

1858 
öput
->
byã_°ªam
[
IXGBE_ATR_FLEX_BYTE_OFFSET
 + 1] = 
Êex_byã
 >> 8;

1859 
öput
->
byã_°ªam
[
IXGBE_ATR_FLEX_BYTE_OFFSET
] = 
Êex_byã
 & 0xff;

1862 
	}
}

1869 
s32
 
	$ixgbe_©r_£t_vm_poﬁ_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 
vm_poﬁ
)

1871 
öput
->
byã_°ªam
[
IXGBE_ATR_VM_POOL_OFFSET
] = 
vm_poﬁ
;

1874 
	}
}

1881 
s32
 
	$ixgbe_©r_£t_l4ty≥_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 
l4ty≥
)

1883 
öput
->
byã_°ªam
[
IXGBE_ATR_L4TYPE_OFFSET
] = 
l4ty≥
;

1886 
	}
}

1893 
s32
 
	$ixgbe_©r_gë_vœn_id_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 *
vœn
)

1895 *
vœn
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_VLAN_OFFSET
];

1896 *
vœn
 |
öput
->
byã_°ªam
[
IXGBE_ATR_VLAN_OFFSET
 + 1] << 8;

1899 
	}
}

1906 
s32
 
	$ixgbe_©r_gë_§c_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 *
§c_addr
)

1908 *
§c_addr
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
];

1909 *
§c_addr
 |
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
 + 1] << 8;

1910 *
§c_addr
 |
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
 + 2] << 16;

1911 *
§c_addr
 |
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV4_OFFSET
 + 3] << 24;

1914 
	}
}

1921 
s32
 
	$ixgbe_©r_gë_d°_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 *
d°_addr
)

1923 *
d°_addr
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
];

1924 *
d°_addr
 |
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
 + 1] << 8;

1925 *
d°_addr
 |
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
 + 2] << 16;

1926 *
d°_addr
 |
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV4_OFFSET
 + 3] << 24;

1929 
	}
}

1939 
s32
 
	$ixgbe_©r_gë_§c_ùv6_82599
(
ixgbe_©r_öput
 *
öput
,

1940 
u32
 *
§c_addr_1
, u32 *
§c_addr_2
,

1941 
u32
 *
§c_addr_3
, u32 *
§c_addr_4
)

1943 *
§c_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 12];

1944 *
§c_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 13] << 8;

1945 *
§c_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 14] << 16;

1946 *
§c_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 15] << 24;

1948 *
§c_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 8];

1949 *
§c_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 9] << 8;

1950 *
§c_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 10] << 16;

1951 *
§c_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 11] << 24;

1953 *
§c_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 4];

1954 *
§c_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 5] << 8;

1955 *
§c_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 6] << 16;

1956 *
§c_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 7] << 24;

1958 *
§c_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
];

1959 *
§c_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 1] << 8;

1960 *
§c_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 2] << 16;

1961 *
§c_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_IPV6_OFFSET
 + 3] << 24;

1964 
	}
}

1974 
s32
 
	$ixgbe_©r_gë_d°_ùv6_82599
(
ixgbe_©r_öput
 *
öput
,

1975 
u32
 *
d°_addr_1
, u32 *
d°_addr_2
,

1976 
u32
 *
d°_addr_3
, u32 *
d°_addr_4
)

1978 *
d°_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 12];

1979 *
d°_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 13] << 8;

1980 *
d°_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 14] << 16;

1981 *
d°_addr_1
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 15] << 24;

1983 *
d°_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 8];

1984 *
d°_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 9] << 8;

1985 *
d°_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 10] << 16;

1986 *
d°_addr_2
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 11] << 24;

1988 *
d°_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 4];

1989 *
d°_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 5] << 8;

1990 *
d°_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 6] << 16;

1991 *
d°_addr_3
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 7] << 24;

1993 *
d°_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
];

1994 *
d°_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 1] << 8;

1995 *
d°_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 2] << 16;

1996 *
d°_addr_4
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_IPV6_OFFSET
 + 3] << 24;

1999 
	}
}

2011 
s32
 
	$ixgbe_©r_gë_§c_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 *
§c_p‹t
)

2013 *
§c_p‹t
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_PORT_OFFSET
] << 8;

2014 *
§c_p‹t
 |
öput
->
byã_°ªam
[
IXGBE_ATR_SRC_PORT_OFFSET
 + 1];

2017 
	}
}

2029 
s32
 
	$ixgbe_©r_gë_d°_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 *
d°_p‹t
)

2031 *
d°_p‹t
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_DST_PORT_OFFSET
] << 8;

2032 *
d°_p‹t
 |
öput
->
byã_°ªam
[
IXGBE_ATR_DST_PORT_OFFSET
 + 1];

2035 
	}
}

2042 
s32
 
	$ixgbe_©r_gë_Êex_byã_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 *
Êex_byã
)

2044 *
Êex_byã
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_FLEX_BYTE_OFFSET
];

2045 *
Êex_byã
 |
öput
->
byã_°ªam
[
IXGBE_ATR_FLEX_BYTE_OFFSET
 + 1] << 8;

2048 
	}
}

2055 
s32
 
	$ixgbe_©r_gë_vm_poﬁ_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 *
vm_poﬁ
)

2057 *
vm_poﬁ
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_VM_POOL_OFFSET
];

2060 
	}
}

2067 
s32
 
	$ixgbe_©r_gë_l4ty≥_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 *
l4ty≥
)

2069 *
l4ty≥
 = 
öput
->
byã_°ªam
[
IXGBE_ATR_L4TYPE_OFFSET
];

2072 
	}
}

2080 
s32
 
	$ixgbe_fdú_add_sig«tuª_fûãr_82599
(
ixgbe_hw
 *
hw
,

2081 
ixgbe_©r_öput
 *
öput
,

2082 
u8
 
queue
)

2084 
u64
 
fdúhashcmd
;

2085 
u64
 
fdúcmd
;

2086 
u32
 
fdúhash
;

2087 
u16
 
buckë_hash
, 
sig_hash
;

2088 
u8
 
l4ty≥
;

2090 
buckë_hash
 = 
	`ixgbe_©r_compuã_hash_82599
(
öput
,

2091 
IXGBE_ATR_BUCKET_HASH_KEY
);

2094 
buckë_hash
 &
IXGBE_ATR_HASH_MASK
;

2096 
sig_hash
 = 
	`ixgbe_©r_compuã_hash_82599
(
öput
,

2097 
IXGBE_ATR_SIGNATURE_HASH_KEY
);

2101 
	`ixgbe_©r_gë_l4ty≥_82599
(
öput
, &
l4ty≥
);

2107 
fdúhash
 = 
sig_hash
 << 
IXGBE_FDIRHASH_SIG_SW_INDEX_SHIFT
 | 
buckë_hash
;

2109 
fdúcmd
 = (
IXGBE_FDIRCMD_CMD_ADD_FLOW
 | 
IXGBE_FDIRCMD_FILTER_UPDATE
 |

2110 
IXGBE_FDIRCMD_LAST
 | 
IXGBE_FDIRCMD_QUEUE_EN
);

2112 
l4ty≥
 & 
IXGBE_ATR_L4TYPE_MASK
) {

2113 
IXGBE_ATR_L4TYPE_TCP
:

2114 
fdúcmd
 |
IXGBE_FDIRCMD_L4TYPE_TCP
;

2116 
IXGBE_ATR_L4TYPE_UDP
:

2117 
fdúcmd
 |
IXGBE_FDIRCMD_L4TYPE_UDP
;

2119 
IXGBE_ATR_L4TYPE_SCTP
:

2120 
fdúcmd
 |
IXGBE_FDIRCMD_L4TYPE_SCTP
;

2123 
	`hw_dbg
(
hw
, " Error onÜ4type input\n");

2124  
IXGBE_ERR_CONFIG
;

2127 i‡(
l4ty≥
 & 
IXGBE_ATR_L4TYPE_IPV6_MASK
)

2128 
fdúcmd
 |
IXGBE_FDIRCMD_IPV6
;

2130 
fdúcmd
 |((
u64
)
queue
 << 
IXGBE_FDIRCMD_RX_QUEUE_SHIFT
);

2131 
fdúhashcmd
 = ((
fdúcmd
 << 32Ë| 
fdúhash
);

2133 
	`hw_dbg
(
hw
, "Tx Queue=%x hash=%x\n", 
queue
, 
fdúhash
 & 0x7FFF7FFF);

2134 
	`IXGBE_WRITE_REG64
(
hw
, 
IXGBE_FDIRHASH
, 
fdúhashcmd
);

2137 
	}
}

2148 
s32
 
	$ixgbe_fdú_add_≥r„˘_fûãr_82599
(
ixgbe_hw
 *
hw
,

2149 
ixgbe_©r_öput
 *
öput
,

2150 
u16
 
so·_id
,

2151 
u8
 
queue
)

2153 
u32
 
fdúcmd
 = 0;

2154 
u32
 
fdúhash
;

2155 
u32
 
§c_ùv4
, 
d°_ùv4
;

2156 
u32
 
§c_ùv6_1
, 
§c_ùv6_2
, 
§c_ùv6_3
, 
§c_ùv6_4
;

2157 
u16
 
§c_p‹t
, 
d°_p‹t
, 
vœn_id
, 
Êex_byãs
;

2158 
u16
 
buckë_hash
;

2159 
u8
 
l4ty≥
;

2162 
	`ixgbe_©r_gë_l4ty≥_82599
(
öput
, &
l4ty≥
);

2168 
l4ty≥
 & 
IXGBE_ATR_L4TYPE_MASK
) {

2169 
IXGBE_ATR_L4TYPE_TCP
:

2170 
fdúcmd
 |
IXGBE_FDIRCMD_L4TYPE_TCP
;

2172 
IXGBE_ATR_L4TYPE_UDP
:

2173 
fdúcmd
 |
IXGBE_FDIRCMD_L4TYPE_UDP
;

2175 
IXGBE_ATR_L4TYPE_SCTP
:

2176 
fdúcmd
 |
IXGBE_FDIRCMD_L4TYPE_SCTP
;

2179 
	`hw_dbg
(
hw
, " Error onÜ4type input\n");

2180  
IXGBE_ERR_CONFIG
;

2183 
buckë_hash
 = 
	`ixgbe_©r_compuã_hash_82599
(
öput
,

2184 
IXGBE_ATR_BUCKET_HASH_KEY
);

2187 
buckë_hash
 &
IXGBE_ATR_HASH_MASK
;

2189 
	`ixgbe_©r_gë_vœn_id_82599
(
öput
, &
vœn_id
);

2190 
	`ixgbe_©r_gë_§c_p‹t_82599
(
öput
, &
§c_p‹t
);

2191 
	`ixgbe_©r_gë_d°_p‹t_82599
(
öput
, &
d°_p‹t
);

2192 
	`ixgbe_©r_gë_Êex_byã_82599
(
öput
, &
Êex_byãs
);

2194 
fdúhash
 = 
so·_id
 << 
IXGBE_FDIRHASH_SIG_SW_INDEX_SHIFT
 | 
buckë_hash
;

2197 i‡(
l4ty≥
 & 
IXGBE_ATR_L4TYPE_IPV6_MASK
) {

2199 
	`ixgbe_©r_gë_§c_ùv6_82599
(
öput
, &
§c_ùv6_1
, &
§c_ùv6_2
,

2200 &
§c_ùv6_3
, &
§c_ùv6_4
);

2202 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FDIRSIPv6
(0), 
§c_ùv6_1
);

2203 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FDIRSIPv6
(1), 
§c_ùv6_2
);

2204 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FDIRSIPv6
(2), 
§c_ùv6_3
);

2206 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRIPSA
, 
§c_ùv6_4
);

2208 
fdúcmd
 |
IXGBE_FDIRCMD_IPV6
;

2209 
fdúcmd
 |
IXGBE_FDIRCMD_IPv6DMATCH
;

2212 
	`ixgbe_©r_gë_§c_ùv4_82599
(
öput
, &
§c_ùv4
);

2213 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRIPSA
, 
§c_ùv4
);

2217 
	`ixgbe_©r_gë_d°_ùv4_82599
(
öput
, &
d°_ùv4
);

2218 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRIPDA
, 
d°_ùv4
);

2220 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRVLAN
, (
vœn_id
 |

2221 (
Êex_byãs
 << 
IXGBE_FDIRVLAN_FLEX_SHIFT
)));

2222 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRPORT
, (
§c_p‹t
 |

2223 (
d°_p‹t
 << 
IXGBE_FDIRPORT_DESTINATION_SHIFT
)));

2225 
fdúcmd
 |
IXGBE_FDIRCMD_CMD_ADD_FLOW
;

2226 
fdúcmd
 |
IXGBE_FDIRCMD_FILTER_UPDATE
;

2227 
fdúcmd
 |
IXGBE_FDIRCMD_LAST
;

2228 
fdúcmd
 |
IXGBE_FDIRCMD_QUEUE_EN
;

2229 
fdúcmd
 |
queue
 << 
IXGBE_FDIRCMD_RX_QUEUE_SHIFT
;

2231 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRHASH
, 
fdúhash
);

2232 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FDIRCMD
, 
fdúcmd
);

2235 
	}
}

2245 
s32
 
	$ixgbe_ªad_™Æog_ªg8_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 *
vÆ
)

2247 
u32
 
c‹e_˘l
;

2249 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CORECTL
, 
IXGBE_CORECTL_WRITE_CMD
 |

2250 (
ªg
 << 8));

2251 
	`IXGBE_WRITE_FLUSH
(
hw
);

2252 
	`udñay
(10);

2253 
c‹e_˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CORECTL
);

2254 *
vÆ
 = (
u8
)
c‹e_˘l
;

2257 
	}
}

2267 
s32
 
	$ixgbe_wrôe_™Æog_ªg8_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 
vÆ
)

2269 
u32
 
c‹e_˘l
;

2271 
c‹e_˘l
 = (
ªg
 << 8Ë| 
vÆ
;

2272 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CORECTL
, 
c‹e_˘l
);

2273 
	`IXGBE_WRITE_FLUSH
(
hw
);

2274 
	`udñay
(10);

2277 
	}
}

2287 
s32
 
	$ixgbe_°¨t_hw_ªv_1_82599
(
ixgbe_hw
 *
hw
)

2289 
u32
 
q_num
;

2290 
s32
 
ªt_vÆ
 = 0;

2292 
ªt_vÆ
 = 
	`ixgbe_°¨t_hw_gíîic
(
hw
);

2295 
q_num
 = 0; q_num < 
hw
->
mac
.
max_tx_queues
; q_num++) {

2296 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDQSEL
, 
q_num
);

2297 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTBCNRC
, 0);

2299 
	`IXGBE_WRITE_FLUSH
(
hw
);

2302 
hw
->
mac
.
autŸry_ª°¨t
 = 
åue
;

2304 i‡(
ªt_vÆ
 == 0)

2305 
ªt_vÆ
 = 
	`ixgbe_vîify_fw_vîsi⁄_82599
(
hw
);

2306  
ªt_vÆ
;

2307 
	}
}

2317 
s32
 
	$ixgbe_idítify_phy_82599
(
ixgbe_hw
 *
hw
)

2319 
s32
 
°©us
 = 
IXGBE_ERR_PHY_ADDR_INVALID
;

2322 
°©us
 = 
	`ixgbe_idítify_phy_gíîic
(
hw
);

2323 i‡(
°©us
 != 0)

2324 
°©us
 = 
	`ixgbe_idítify_sÂ_moduÀ_gíîic
(
hw
);

2326 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_unknown
) {

2327 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_n⁄e
;

2328 
°©us
 = 0;

2332 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_sÂ_unsuµ‹ãd
)

2333 
°©us
 = 
IXGBE_ERR_SFP_NOT_SUPPORTED
;

2335  
°©us
;

2336 
	}
}

2344 
u32
 
	$ixgbe_gë_suµ‹ãd_physiˇl_œyî_82599
(
ixgbe_hw
 *
hw
)

2346 
u32
 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_UNKNOWN
;

2347 
u32
 
autoc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

2348 
u32
 
autoc2
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC2
);

2349 
u32
 
pma_pmd_10g_£rül
 = 
autoc2
 & 
IXGBE_AUTOC2_10G_SERIAL_PMA_PMD_MASK
;

2350 
u32
 
pma_pmd_10g_∑øŒñ
 = 
autoc
 & 
IXGBE_AUTOC_10G_PMA_PMD_MASK
;

2351 
u32
 
pma_pmd_1g
 = 
autoc
 & 
IXGBE_AUTOC_1G_PMA_PMD_MASK
;

2352 
u16
 
ext_abûôy
 = 0;

2353 
u8
 
comp_codes_10g
 = 0;

2355 
hw
->
phy
.
›s
.
	`idítify
(hw);

2357 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_ä
 ||

2358 
hw
->
phy
.
ty≥
 =
ixgbe_phy_aq
 ||

2359 
hw
->
phy
.
ty≥
 =
ixgbe_phy_cu_unknown
) {

2360 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_EXT_ABILITY
,

2361 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
, &
ext_abûôy
);

2362 i‡(
ext_abûôy
 & 
IXGBE_MDIO_PHY_10GBASET_ABILITY
)

2363 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_10GBASE_T
;

2364 i‡(
ext_abûôy
 & 
IXGBE_MDIO_PHY_1000BASET_ABILITY
)

2365 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_1000BASE_T
;

2366 i‡(
ext_abûôy
 & 
IXGBE_MDIO_PHY_100BASETX_ABILITY
)

2367 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_100BASE_TX
;

2368 
out
;

2371 
autoc
 & 
IXGBE_AUTOC_LMS_MASK
) {

2372 
IXGBE_AUTOC_LMS_1G_AN
:

2373 
IXGBE_AUTOC_LMS_1G_LINK_NO_AN
:

2374 i‡(
pma_pmd_1g
 =
IXGBE_AUTOC_1G_KX_BX
) {

2375 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_1000BASE_KX
 |

2376 
IXGBE_PHYSICAL_LAYER_1000BASE_BX
;

2377 
out
;

2380 
sÂ_check
;

2382 
IXGBE_AUTOC_LMS_10G_LINK_NO_AN
:

2383 i‡(
pma_pmd_10g_∑øŒñ
 =
IXGBE_AUTOC_10G_CX4
)

2384 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_CX4
;

2385 i‡(
pma_pmd_10g_∑øŒñ
 =
IXGBE_AUTOC_10G_KX4
)

2386 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_KX4
;

2387 i‡(
pma_pmd_10g_∑øŒñ
 =
IXGBE_AUTOC_10G_XAUI
)

2388 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_XAUI
;

2389 
out
;

2391 
IXGBE_AUTOC_LMS_10G_SERIAL
:

2392 i‡(
pma_pmd_10g_£rül
 =
IXGBE_AUTOC2_10G_KR
) {

2393 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_KR
;

2394 
out
;

2395 } i‡(
pma_pmd_10g_£rül
 =
IXGBE_AUTOC2_10G_SFI
)

2396 
sÂ_check
;

2398 
IXGBE_AUTOC_LMS_KX4_KX_KR
:

2399 
IXGBE_AUTOC_LMS_KX4_KX_KR_1G_AN
:

2400 i‡(
autoc
 & 
IXGBE_AUTOC_KX_SUPP
)

2401 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_1000BASE_KX
;

2402 i‡(
autoc
 & 
IXGBE_AUTOC_KX4_SUPP
)

2403 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_10GBASE_KX4
;

2404 i‡(
autoc
 & 
IXGBE_AUTOC_KR_SUPP
)

2405 
physiˇl_œyî
 |
IXGBE_PHYSICAL_LAYER_10GBASE_KR
;

2406 
out
;

2409 
out
;

2413 
sÂ_check
:

2417 
hw
->
phy
.
›s
.
	`idítify_sÂ
(hw);

2418 i‡(
hw
->
phy
.
sÂ_ty≥
 =
ixgbe_sÂ_ty≥_nŸ_¥e£¡
)

2419 
out
;

2421 
hw
->
phy
.
ty≥
) {

2422 
ixgbe_phy_tw_tyco
:

2423 
ixgbe_phy_tw_unknown
:

2424 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_SFP_PLUS_CU
;

2426 
ixgbe_phy_sÂ_avago
:

2427 
ixgbe_phy_sÂ_·l
:

2428 
ixgbe_phy_sÂ_öãl
:

2429 
ixgbe_phy_sÂ_unknown
:

2430 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw,

2431 
IXGBE_SFF_10GBE_COMP_CODES
, &
comp_codes_10g
);

2432 i‡(
comp_codes_10g
 & 
IXGBE_SFF_10GBASESR_CAPABLE
)

2433 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_SR
;

2434 i‡(
comp_codes_10g
 & 
IXGBE_SFF_10GBASELR_CAPABLE
)

2435 
physiˇl_œyî
 = 
IXGBE_PHYSICAL_LAYER_10GBASE_LR
;

2441 
out
:

2442  
physiˇl_œyî
;

2443 
	}
}

2452 
s32
 
	$ixgbe_íabÀ_rx_dma_82599
(
ixgbe_hw
 *
hw
, 
u32
 
ªgvÆ
)

2454 
	#IXGBE_MAX_SECRX_POLL
 30

	)

2455 
i
;

2456 
£¸xªg
;

2464 
£¸xªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SECRXCTRL
);

2465 
£¸xªg
 |
IXGBE_SECRXCTRL_RX_DIS
;

2466 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_SECRXCTRL
, 
£¸xªg
);

2467 
i
 = 0; i < 
IXGBE_MAX_SECRX_POLL
; i++) {

2468 
£¸xªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SECRXSTAT
);

2469 i‡(
£¸xªg
 & 
IXGBE_SECRXSTAT_SECRX_RDY
)

2473 
	`udñay
(10);

2477 i‡(
i
 >
IXGBE_MAX_SECRX_POLL
)

2478 
	`hw_dbg
(
hw
, "Rx unit beingÉnabled before security "

2481 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCTRL
, 
ªgvÆ
);

2482 
£¸xªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SECRXCTRL
);

2483 
£¸xªg
 &~
IXGBE_SECRXCTRL_RX_DIS
;

2484 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_SECRXCTRL
, 
£¸xªg
);

2485 
	`IXGBE_WRITE_FLUSH
(
hw
);

2488 
	}
}

2498 
s32
 
	$ixgbe_gë_devi˚_ˇps_82599
(
ixgbe_hw
 *
hw
, 
u16
 *
devi˚_ˇps
)

2500 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_DEVICE_CAPS
, 
devi˚_ˇps
);

2503 
	}
}

2514 
s32
 
	$ixgbe_gë_ßn_mac_addr_off£t_82599
(
ixgbe_hw
 *
hw
,

2515 
u16
 *
ßn_mac_off£t
)

2521 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_SAN_MAC_ADDR_PTR
, 
ßn_mac_off£t
);

2524 
	}
}

2536 
s32
 
	$ixgbe_gë_ßn_mac_addr_82599
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
)

2538 
u16
 
ßn_mac_d©a
, 
ßn_mac_off£t
;

2539 
u8
 
i
;

2545 
	`ixgbe_gë_ßn_mac_addr_off£t_82599
(
hw
, &
ßn_mac_off£t
);

2547 i‡((
ßn_mac_off£t
 == 0) || (san_mac_offset == 0xFFFF)) {

2552 
i
 = 0; i < 6; i++)

2553 
ßn_mac_addr
[
i
] = 0xFF;

2555 
ßn_mac_addr_out
;

2559 
hw
->
mac
.
›s
.
	`£t_œn_id
(hw);

2561 (
hw
->
bus
.
func
Ë? (
ßn_mac_off£t
 +
IXGBE_SAN_MAC_ADDR_PORT1_OFFSET
) :

2562 (
ßn_mac_off£t
 +
IXGBE_SAN_MAC_ADDR_PORT0_OFFSET
);

2563 
i
 = 0; i < 3; i++) {

2564 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
ßn_mac_off£t
, &
ßn_mac_d©a
);

2565 
ßn_mac_addr
[
i
 * 2] = (
u8
)(
ßn_mac_d©a
);

2566 
ßn_mac_addr
[
i
 * 2 + 1] = (
u8
)(
ßn_mac_d©a
 >> 8);

2567 
ßn_mac_off£t
++;

2570 
ßn_mac_addr_out
:

2572 
	}
}

2581 
s32
 
	$ixgbe_£t_ßn_mac_addr_82599
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
)

2583 
s32
 
°©us
 = 0;

2584 
u16
 
ßn_mac_d©a
, 
ßn_mac_off£t
;

2585 
u8
 
i
;

2588 
	`ixgbe_gë_ßn_mac_addr_off£t_82599
(
hw
, &
ßn_mac_off£t
);

2590 i‡((
ßn_mac_off£t
 == 0) || (san_mac_offset == 0xFFFF)) {

2591 
°©us
 = 
IXGBE_ERR_NO_SAN_ADDR_PTR
;

2592 
ßn_mac_addr_out
;

2596 
hw
->
mac
.
›s
.
	`£t_œn_id
(hw);

2598 (
hw
->
bus
.
func
Ë? (
ßn_mac_off£t
 +
IXGBE_SAN_MAC_ADDR_PORT1_OFFSET
) :

2599 (
ßn_mac_off£t
 +
IXGBE_SAN_MAC_ADDR_PORT0_OFFSET
);

2601 
i
 = 0; i < 3; i++) {

2602 
ßn_mac_d©a
 = (
u16
)((u16)(
ßn_mac_addr
[
i
 * 2 + 1]) << 8);

2603 
ßn_mac_d©a
 |(
u16
)(
ßn_mac_addr
[
i
 * 2]);

2604 
hw
->
ì¥om
.
›s
.
	`wrôe
(hw, 
ßn_mac_off£t
, 
ßn_mac_d©a
);

2605 
ßn_mac_off£t
++;

2608 
ßn_mac_addr_out
:

2609  
°©us
;

2610 
	}
}

2622 
s32
 
	$ixgbe_vîify_fw_vîsi⁄_82599
(
ixgbe_hw
 *
hw
)

2624 
s32
 
°©us
 = 
IXGBE_ERR_EEPROM_VERSION
;

2625 
u16
 
fw_off£t
, 
fw_±p_cfg_off£t
;

2626 
u16
 
fw_vîsi⁄
 = 0;

2629 i‡(
hw
->
phy
.
medü_ty≥
 !
ixgbe_medü_ty≥_fibî
) {

2630 
°©us
 = 0;

2631 
fw_vîsi⁄_out
;

2635 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_FW_PTR
, &
fw_off£t
);

2637 i‡((
fw_off£t
 == 0) || (fw_offset == 0xFFFF))

2638 
fw_vîsi⁄_out
;

2641 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, (
fw_off£t
 +

2642 
IXGBE_FW_PASSTHROUGH_PATCH_CONFIG_PTR
),

2643 &
fw_±p_cfg_off£t
);

2645 i‡((
fw_±p_cfg_off£t
 == 0) || (fw_ptp_cfg_offset == 0xFFFF))

2646 
fw_vîsi⁄_out
;

2649 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, (
fw_±p_cfg_off£t
 +

2650 
IXGBE_FW_PATCH_VERSION_4
),

2651 &
fw_vîsi⁄
);

2653 i‡(
fw_vîsi⁄
 > 0x5)

2654 
°©us
 = 0;

2656 
fw_vîsi⁄_out
:

2657  
°©us
;

2658 
	}
}

	@ixgbe_api.c

28 
	~"ixgbe_≠i.h
"

29 
	~"ixgbe_comm⁄.h
"

31 
s32
 
ixgbe_öô_›s_82598
(
ixgbe_hw
 *
hw
);

32 
s32
 
ixgbe_öô_›s_82599
(
ixgbe_hw
 *
hw
);

46 
s32
 
	$ixgbe_öô_sh¨ed_code
(
ixgbe_hw
 *
hw
)

48 
s32
 
°©us
;

53 
	`ixgbe_£t_mac_ty≥
(
hw
);

55 
hw
->
mac
.
ty≥
) {

56 
ixgbe_mac_82598EB
:

57 
°©us
 = 
	`ixgbe_öô_›s_82598
(
hw
);

59 
ixgbe_mac_82599EB
:

60 
°©us
 = 
	`ixgbe_öô_›s_82599
(
hw
);

63 
°©us
 = 
IXGBE_ERR_DEVICE_NOT_SUPPORTED
;

67  
°©us
;

68 
	}
}

77 
s32
 
	$ixgbe_£t_mac_ty≥
(
ixgbe_hw
 *
hw
)

79 
s32
 
ªt_vÆ
 = 0;

81 i‡(
hw
->
víd‹_id
 =
IXGBE_INTEL_VENDOR_ID
) {

82 
hw
->
devi˚_id
) {

83 
IXGBE_DEV_ID_82598
:

84 
IXGBE_DEV_ID_82598_BX
:

85 
IXGBE_DEV_ID_82598AF_SINGLE_PORT
:

86 
IXGBE_DEV_ID_82598AF_DUAL_PORT
:

87 
IXGBE_DEV_ID_82598AT
:

88 
IXGBE_DEV_ID_82598AT2
:

89 
IXGBE_DEV_ID_82598EB_CX4
:

90 
IXGBE_DEV_ID_82598_CX4_DUAL_PORT
:

91 
IXGBE_DEV_ID_82598_DA_DUAL_PORT
:

92 
IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM
:

93 
IXGBE_DEV_ID_82598EB_XF_LR
:

94 
IXGBE_DEV_ID_82598EB_SFP_LOM
:

95 
hw
->
mac
.
ty≥
 = 
ixgbe_mac_82598EB
;

97 
IXGBE_DEV_ID_82599_KX4
:

98 
IXGBE_DEV_ID_82599_XAUI_LOM
:

99 
IXGBE_DEV_ID_82599_SFP
:

100 
hw
->
mac
.
ty≥
 = 
ixgbe_mac_82599EB
;

103 
ªt_vÆ
 = 
IXGBE_ERR_DEVICE_NOT_SUPPORTED
;

107 
ªt_vÆ
 = 
IXGBE_ERR_DEVICE_NOT_SUPPORTED
;

110 
	`hw_dbg
(
hw
, "ixgbe_set_mac_type found mac: %d,Ñeturns: %d\n",

111 
hw
->
mac
.
ty≥
, 
ªt_vÆ
);

112  
ªt_vÆ
;

113 
	}
}

121 
s32
 
	$ixgbe_öô_hw
(
ixgbe_hw
 *
hw
)

123  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
öô_hw
, (hw),

124 
IXGBE_NOT_IMPLEMENTED
);

125 
	}
}

134 
s32
 
	$ixgbe_ª£t_hw
(
ixgbe_hw
 *
hw
)

136  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
ª£t_hw
, (hw),

137 
IXGBE_NOT_IMPLEMENTED
);

138 
	}
}

150 
s32
 
	$ixgbe_°¨t_hw
(
ixgbe_hw
 *
hw
)

152  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
°¨t_hw
, (hw),

153 
IXGBE_NOT_IMPLEMENTED
);

154 
	}
}

163 
s32
 
	$ixgbe_˛ór_hw_˙ås
(
ixgbe_hw
 *
hw
)

165  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
˛ór_hw_˙ås
, (hw),

166 
IXGBE_NOT_IMPLEMENTED
);

167 
	}
}

175 
ixgbe_medü_ty≥
 
	$ixgbe_gë_medü_ty≥
(
ixgbe_hw
 *
hw
)

177  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
gë_medü_ty≥
, (hw),

178 
ixgbe_medü_ty≥_unknown
);

179 
	}
}

191 
s32
 
	$ixgbe_gë_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
mac_addr
)

193  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
gë_mac_addr
,

194 (
hw
, 
mac_addr
), 
IXGBE_NOT_IMPLEMENTED
);

195 
	}
}

205 
s32
 
	$ixgbe_gë_ßn_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
)

207  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
gë_ßn_mac_addr
,

208 (
hw
, 
ßn_mac_addr
), 
IXGBE_NOT_IMPLEMENTED
);

209 
	}
}

218 
s32
 
	$ixgbe_£t_ßn_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
)

220  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
£t_ßn_mac_addr
,

221 (
hw
, 
ßn_mac_addr
), 
IXGBE_NOT_IMPLEMENTED
);

222 
	}
}

231 
s32
 
	$ixgbe_gë_devi˚_ˇps
(
ixgbe_hw
 *
hw
, 
u16
 *
devi˚_ˇps
)

233  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
gë_devi˚_ˇps
,

234 (
hw
, 
devi˚_ˇps
), 
IXGBE_NOT_IMPLEMENTED
);

235 
	}
}

243 
s32
 
	$ixgbe_gë_bus_öfo
(
ixgbe_hw
 *
hw
)

245  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
gë_bus_öfo
, (hw),

246 
IXGBE_NOT_IMPLEMENTED
);

247 
	}
}

255 
u32
 
	$ixgbe_gë_num_of_tx_queues
(
ixgbe_hw
 *
hw
)

257  
hw
->
mac
.
max_tx_queues
;

258 
	}
}

266 
u32
 
	$ixgbe_gë_num_of_rx_queues
(
ixgbe_hw
 *
hw
)

268  
hw
->
mac
.
max_rx_queues
;

269 
	}
}

280 
s32
 
	$ixgbe_°›_ad≠ãr
(
ixgbe_hw
 *
hw
)

282  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
°›_ad≠ãr
, (hw),

283 
IXGBE_NOT_IMPLEMENTED
);

284 
	}
}

293 
s32
 
	$ixgbe_ªad_pba_num
(
ixgbe_hw
 *
hw
, 
u32
 *
pba_num
)

295  
	`ixgbe_ªad_pba_num_gíîic
(
hw
, 
pba_num
);

296 
	}
}

304 
s32
 
	$ixgbe_idítify_phy
(
ixgbe_hw
 *
hw
)

306 
s32
 
°©us
 = 0;

308 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_unknown
) {

309 
°©us
 = 
	`ixgbe_ˇŒ_func
(
hw
,

310 
hw
->
phy
.
›s
.
idítify
,

311 (
hw
),

312 
IXGBE_NOT_IMPLEMENTED
);

315  
°©us
;

316 
	}
}

322 
s32
 
	$ixgbe_ª£t_phy
(
ixgbe_hw
 *
hw
)

324 
s32
 
°©us
 = 0;

326 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_unknown
) {

327 i‡(
	`ixgbe_idítify_phy
(
hw
) != 0)

328 
°©us
 = 
IXGBE_ERR_PHY
;

331 i‡(
°©us
 == 0) {

332 
°©us
 = 
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
ª£t
, (hw),

333 
IXGBE_NOT_IMPLEMENTED
);

335  
°©us
;

336 
	}
}

343 
s32
 
	$ixgbe_gë_phy_fúmw¨e_vîsi⁄
(
ixgbe_hw
 *
hw
, 
u16
 *
fúmw¨e_vîsi⁄
)

345 
s32
 
°©us
 = 0;

347 
°©us
 = 
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
gë_fúmw¨e_vîsi⁄
,

348 (
hw
, 
fúmw¨e_vîsi⁄
),

349 
IXGBE_NOT_IMPLEMENTED
);

350  
°©us
;

351 
	}
}

361 
s32
 
	$ixgbe_ªad_phy_ªg
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
, u32 
devi˚_ty≥
,

362 
u16
 *
phy_d©a
)

364 i‡(
hw
->
phy
.
id
 == 0)

365 
	`ixgbe_idítify_phy
(
hw
);

367  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
ªad_ªg
, (hw, 
ªg_addr
,

368 
devi˚_ty≥
, 
phy_d©a
), 
IXGBE_NOT_IMPLEMENTED
);

369 
	}
}

379 
s32
 
	$ixgbe_wrôe_phy_ªg
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
, u32 
devi˚_ty≥
,

380 
u16
 
phy_d©a
)

382 i‡(
hw
->
phy
.
id
 == 0)

383 
	`ixgbe_idítify_phy
(
hw
);

385  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
wrôe_ªg
, (hw, 
ªg_addr
,

386 
devi˚_ty≥
, 
phy_d©a
), 
IXGBE_NOT_IMPLEMENTED
);

387 
	}
}

395 
s32
 
	$ixgbe_£tup_phy_lök
(
ixgbe_hw
 *
hw
)

397  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
£tup_lök
, (hw),

398 
IXGBE_NOT_IMPLEMENTED
);

399 
	}
}

408 
s32
 
	$ixgbe_check_phy_lök
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 *
•ìd
,

409 
boﬁ
 *
lök_up
)

411  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
check_lök
, (hw, 
•ìd
,

412 
lök_up
), 
IXGBE_NOT_IMPLEMENTED
);

413 
	}
}

423 
s32
 
	$ixgbe_£tup_phy_lök_•ìd
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 
•ìd
,

424 
boﬁ
 
aut⁄eg
,

425 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

427  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
£tup_lök_•ìd
, (hw, 
•ìd
,

428 
aut⁄eg
, 
aut⁄eg_waô_to_com∂ëe
),

429 
IXGBE_NOT_IMPLEMENTED
);

430 
	}
}

439 
s32
 
	$ixgbe_£tup_lök
(
ixgbe_hw
 *
hw
)

441  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
£tup_lök
, (hw),

442 
IXGBE_NOT_IMPLEMENTED
);

443 
	}
}

451 
s32
 
	$ixgbe_check_lök
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 *
•ìd
,

452 
boﬁ
 *
lök_up
, boﬁ 
lök_up_waô_to_com∂ëe
)

454  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
check_lök
, (hw, 
•ìd
,

455 
lök_up
, 
lök_up_waô_to_com∂ëe
),

456 
IXGBE_NOT_IMPLEMENTED
);

457 
	}
}

467 
s32
 
	$ixgbe_£tup_lök_•ìd
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 
•ìd
,

468 
boﬁ
 
aut⁄eg
,

469 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

471  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
£tup_lök_•ìd
, (hw, 
•ìd
,

472 
aut⁄eg
, 
aut⁄eg_waô_to_com∂ëe
),

473 
IXGBE_NOT_IMPLEMENTED
);

474 
	}
}

482 
s32
 
	$ixgbe_gë_lök_ˇ∑bûôõs
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 *
•ìd
,

483 
boﬁ
 *
aut⁄eg
)

485  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
gë_lök_ˇ∑bûôõs
, (hw,

486 
•ìd
, 
aut⁄eg
), 
IXGBE_NOT_IMPLEMENTED
);

487 
	}
}

496 
s32
 
	$ixgbe_Àd_⁄
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

498  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
Àd_⁄
, (hw, 
ödex
),

499 
IXGBE_NOT_IMPLEMENTED
);

500 
	}
}

509 
s32
 
	$ixgbe_Àd_off
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

511  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
Àd_off
, (hw, 
ödex
),

512 
IXGBE_NOT_IMPLEMENTED
);

513 
	}
}

522 
s32
 
	$ixgbe_blök_Àd_°¨t
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

524  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
blök_Àd_°¨t
, (hw, 
ödex
),

525 
IXGBE_NOT_IMPLEMENTED
);

526 
	}
}

534 
s32
 
	$ixgbe_blök_Àd_°›
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

536  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
blök_Àd_°›
, (hw, 
ödex
),

537 
IXGBE_NOT_IMPLEMENTED
);

538 
	}
}

547 
s32
 
	$ixgbe_öô_ì¥om_∑øms
(
ixgbe_hw
 *
hw
)

549  
	`ixgbe_ˇŒ_func
(
hw
, hw->
ì¥om
.
›s
.
öô_∑øms
, (hw),

550 
IXGBE_NOT_IMPLEMENTED
);

551 
	}
}

564 
s32
 
	$ixgbe_wrôe_ì¥om
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 
d©a
)

566  
	`ixgbe_ˇŒ_func
(
hw
, hw->
ì¥om
.
›s
.
wrôe
, (hw, 
off£t
, 
d©a
),

567 
IXGBE_NOT_IMPLEMENTED
);

568 
	}
}

578 
s32
 
	$ixgbe_ªad_ì¥om
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 *
d©a
)

580  
	`ixgbe_ˇŒ_func
(
hw
, hw->
ì¥om
.
›s
.
ªad
, (hw, 
off£t
, 
d©a
),

581 
IXGBE_NOT_IMPLEMENTED
);

582 
	}
}

591 
s32
 
	$ixgbe_vÆid©e_ì¥om_checksum
(
ixgbe_hw
 *
hw
, 
u16
 *
checksum_vÆ
)

593  
	`ixgbe_ˇŒ_func
(
hw
, hw->
ì¥om
.
›s
.
vÆid©e_checksum
,

594 (
hw
, 
checksum_vÆ
), 
IXGBE_NOT_IMPLEMENTED
);

595 
	}
}

601 
s32
 
	$ixgbe_upd©e_ì¥om_checksum
(
ixgbe_hw
 *
hw
)

603  
	`ixgbe_ˇŒ_func
(
hw
, hw->
ì¥om
.
›s
.
upd©e_checksum
, (hw),

604 
IXGBE_NOT_IMPLEMENTED
);

605 
	}
}

616 
s32
 
	$ixgbe_ö£π_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
vmdq
)

618  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
ö£π_mac_addr
,

619 (
hw
, 
addr
, 
vmdq
),

620 
IXGBE_NOT_IMPLEMENTED
);

621 
	}
}

633 
s32
 
	$ixgbe_£t_ør
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
, 
u8
 *
addr
, u32 
vmdq
,

634 
u32
 
íabÀ_addr
)

636  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
£t_ør
, (hw, 
ödex
, 
addr
, 
vmdq
,

637 
íabÀ_addr
), 
IXGBE_NOT_IMPLEMENTED
);

638 
	}
}

647 
s32
 
	$ixgbe_˛ór_ør
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

649  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
˛ór_ør
, (hw, 
ödex
),

650 
IXGBE_NOT_IMPLEMENTED
);

651 
	}
}

659 
s32
 
	$ixgbe_£t_vmdq
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
)

661  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
£t_vmdq
, (hw, 
ør
, 
vmdq
),

662 
IXGBE_NOT_IMPLEMENTED
);

663 
	}
}

671 
s32
 
	$ixgbe_˛ór_vmdq
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
)

673  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
˛ór_vmdq
, (hw, 
ør
, 
vmdq
),

674 
IXGBE_NOT_IMPLEMENTED
);

675 
	}
}

685 
s32
 
	$ixgbe_öô_rx_addrs
(
ixgbe_hw
 *
hw
)

687  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
öô_rx_addrs
, (hw),

688 
IXGBE_NOT_IMPLEMENTED
);

689 
	}
}

695 
u32
 
	$ixgbe_gë_num_rx_addrs
(
ixgbe_hw
 *
hw
)

697  
hw
->
mac
.
num_ør_íåõs
;

698 
	}
}

711 
s32
 
	$ixgbe_upd©e_uc_addr_li°
(
ixgbe_hw
 *
hw
, 
u8
 *
addr_li°
,

712 
u32
 
addr_cou¡
, 
ixgbe_mc_addr_ôr
 
func
)

714  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
upd©e_uc_addr_li°
, (hw,

715 
addr_li°
, 
addr_cou¡
, 
func
),

716 
IXGBE_NOT_IMPLEMENTED
);

717 
	}
}

731 
s32
 
	$ixgbe_upd©e_mc_addr_li°
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr_li°
,

732 
u32
 
mc_addr_cou¡
, 
ixgbe_mc_addr_ôr
 
func
)

734  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
upd©e_mc_addr_li°
, (hw,

735 
mc_addr_li°
, 
mc_addr_cou¡
, 
func
),

736 
IXGBE_NOT_IMPLEMENTED
);

737 
	}
}

745 
s32
 
	$ixgbe_íabÀ_mc
(
ixgbe_hw
 *
hw
)

747  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
íabÀ_mc
, (hw),

748 
IXGBE_NOT_IMPLEMENTED
);

749 
	}
}

757 
s32
 
	$ixgbe_dißbÀ_mc
(
ixgbe_hw
 *
hw
)

759  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
dißbÀ_mc
, (hw),

760 
IXGBE_NOT_IMPLEMENTED
);

761 
	}
}

769 
s32
 
	$ixgbe_˛ór_v·a
(
ixgbe_hw
 *
hw
)

771  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
˛ór_v·a
, (hw),

772 
IXGBE_NOT_IMPLEMENTED
);

773 
	}
}

784 
s32
 
	$ixgbe_£t_v·a
(
ixgbe_hw
 *
hw
, 
u32
 
vœn
, u32 
vöd
, 
boﬁ
 
vœn_⁄
)

786  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
£t_v·a
, (hw, 
vœn
, 
vöd
,

787 
vœn_⁄
), 
IXGBE_NOT_IMPLEMENTED
);

788 
	}
}

797 
s32
 
	$ixgbe_fc_íabÀ
(
ixgbe_hw
 *
hw
, 
s32
 
∑ckëbuf_num
)

799  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
fc_íabÀ
, (hw, 
∑ckëbuf_num
),

800 
IXGBE_NOT_IMPLEMENTED
);

801 
	}
}

811 
s32
 
	$ixgbe_ªad_™Æog_ªg8
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 *
vÆ
)

813  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
ªad_™Æog_ªg8
, (hw, 
ªg
,

814 
vÆ
), 
IXGBE_NOT_IMPLEMENTED
);

815 
	}
}

825 
s32
 
	$ixgbe_wrôe_™Æog_ªg8
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 
vÆ
)

827  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
wrôe_™Æog_ªg8
, (hw, 
ªg
,

828 
vÆ
), 
IXGBE_NOT_IMPLEMENTED
);

829 
	}
}

838 
s32
 
	$ixgbe_öô_uè_èbÀs
(
ixgbe_hw
 *
hw
)

840  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
öô_uè_èbÀs
, (hw),

841 
IXGBE_NOT_IMPLEMENTED
);

842 
	}
}

852 
s32
 
	$ixgbe_ªad_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
, u8 
dev_addr
,

853 
u8
 *
d©a
)

855  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
ªad_i2c_byã
, (hw, 
byã_off£t
,

856 
dev_addr
, 
d©a
), 
IXGBE_NOT_IMPLEMENTED
);

857 
	}
}

868 
s32
 
	$ixgbe_wrôe_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
, u8 
dev_addr
,

869 
u8
 
d©a
)

871  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
wrôe_i2c_byã
, (hw, 
byã_off£t
,

872 
dev_addr
, 
d©a
), 
IXGBE_NOT_IMPLEMENTED
);

873 
	}
}

883 
s32
 
	$ixgbe_wrôe_i2c_ì¥om
(
ixgbe_hw
 *
hw
,

884 
u8
 
byã_off£t
, u8 
ì¥om_d©a
)

886  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
wrôe_i2c_ì¥om
,

887 (
hw
, 
byã_off£t
, 
ì¥om_d©a
),

888 
IXGBE_NOT_IMPLEMENTED
);

889 
	}
}

899 
s32
 
	$ixgbe_ªad_i2c_ì¥om
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
, u8 *
ì¥om_d©a
)

901  
	`ixgbe_ˇŒ_func
(
hw
, hw->
phy
.
›s
.
ªad_i2c_ì¥om
,

902 (
hw
, 
byã_off£t
, 
ì¥om_d©a
),

903 
IXGBE_NOT_IMPLEMENTED
);

904 
	}
}

912 
u32
 
	$ixgbe_gë_suµ‹ãd_physiˇl_œyî
(
ixgbe_hw
 *
hw
)

914  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
gë_suµ‹ãd_physiˇl_œyî
,

915 (
hw
), 
IXGBE_PHYSICAL_LAYER_UNKNOWN
);

916 
	}
}

925 
s32
 
	$ixgbe_íabÀ_rx_dma
(
ixgbe_hw
 *
hw
, 
u32
 
ªgvÆ
)

927  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
íabÀ_rx_dma
,

928 (
hw
, 
ªgvÆ
), 
IXGBE_NOT_IMPLEMENTED
);

929 
	}
}

939 
s32
 
	$ixgbe_acquúe_swfw_£m≠h‹e
(
ixgbe_hw
 *
hw
, 
u16
 
mask
)

941  
	`ixgbe_ˇŒ_func
(
hw
, hw->
mac
.
›s
.
acquúe_swfw_sync
,

942 (
hw
, 
mask
), 
IXGBE_NOT_IMPLEMENTED
);

943 
	}
}

953 
	$ixgbe_ªÀa£_swfw_£m≠h‹e
(
ixgbe_hw
 *
hw
, 
u16
 
mask
)

955 i‡(
hw
->
mac
.
›s
.
ªÀa£_swfw_sync
)

956 
hw
->
mac
.
›s
.
	`ªÀa£_swfw_sync
(hw, 
mask
);

957 
	}
}

	@ixgbe_api.h

28 #i‚de‡
_IXGBE_API_H_


29 
	#_IXGBE_API_H_


	)

31 
	~"ixgbe_ty≥.h
"

33 
s32
 
ixgbe_öô_sh¨ed_code
(
ixgbe_hw
 *
hw
);

35 
s32
 
ixgbe_£t_mac_ty≥
(
ixgbe_hw
 *
hw
);

36 
s32
 
ixgbe_öô_hw
(
ixgbe_hw
 *
hw
);

37 
s32
 
ixgbe_ª£t_hw
(
ixgbe_hw
 *
hw
);

38 
s32
 
ixgbe_°¨t_hw
(
ixgbe_hw
 *
hw
);

39 
s32
 
ixgbe_˛ór_hw_˙ås
(
ixgbe_hw
 *
hw
);

40 
ixgbe_medü_ty≥
 
ixgbe_gë_medü_ty≥
(
ixgbe_hw
 *
hw
);

41 
s32
 
ixgbe_gë_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
mac_addr
);

42 
s32
 
ixgbe_gë_bus_öfo
(
ixgbe_hw
 *
hw
);

43 
u32
 
ixgbe_gë_num_of_tx_queues
(
ixgbe_hw
 *
hw
);

44 
u32
 
ixgbe_gë_num_of_rx_queues
(
ixgbe_hw
 *
hw
);

45 
s32
 
ixgbe_°›_ad≠ãr
(
ixgbe_hw
 *
hw
);

46 
s32
 
ixgbe_ªad_pba_num
(
ixgbe_hw
 *
hw
, 
u32
 *
pba_num
);

48 
s32
 
ixgbe_idítify_phy
(
ixgbe_hw
 *
hw
);

49 
s32
 
ixgbe_ª£t_phy
(
ixgbe_hw
 *
hw
);

50 
s32
 
ixgbe_ªad_phy_ªg
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
, u32 
devi˚_ty≥
,

51 
u16
 *
phy_d©a
);

52 
s32
 
ixgbe_wrôe_phy_ªg
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
, u32 
devi˚_ty≥
,

53 
u16
 
phy_d©a
);

55 
s32
 
ixgbe_£tup_phy_lök
(
ixgbe_hw
 *
hw
);

56 
s32
 
ixgbe_check_phy_lök
(
ixgbe_hw
 *
hw
,

57 
ixgbe_lök_•ìd
 *
•ìd
,

58 
boﬁ
 *
lök_up
);

59 
s32
 
ixgbe_£tup_phy_lök_•ìd
(
ixgbe_hw
 *
hw
,

60 
ixgbe_lök_•ìd
 
•ìd
,

61 
boﬁ
 
aut⁄eg
,

62 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
);

63 
s32
 
ixgbe_£tup_lök
(
ixgbe_hw
 *
hw
);

64 
s32
 
ixgbe_£tup_lök_•ìd
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 
•ìd
,

65 
boﬁ
 
aut⁄eg
, boﬁ 
aut⁄eg_waô_to_com∂ëe
);

66 
s32
 
ixgbe_check_lök
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 *
•ìd
,

67 
boﬁ
 *
lök_up
, boﬁ 
lök_up_waô_to_com∂ëe
);

68 
s32
 
ixgbe_gë_lök_ˇ∑bûôõs
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 *
•ìd
,

69 
boﬁ
 *
aut⁄eg
);

70 
s32
 
ixgbe_Àd_⁄
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

71 
s32
 
ixgbe_Àd_off
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

72 
s32
 
ixgbe_blök_Àd_°¨t
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

73 
s32
 
ixgbe_blök_Àd_°›
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

75 
s32
 
ixgbe_öô_ì¥om_∑øms
(
ixgbe_hw
 *
hw
);

76 
s32
 
ixgbe_wrôe_ì¥om
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 
d©a
);

77 
s32
 
ixgbe_ªad_ì¥om
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 *
d©a
);

78 
s32
 
ixgbe_vÆid©e_ì¥om_checksum
(
ixgbe_hw
 *
hw
, 
u16
 *
checksum_vÆ
);

79 
s32
 
ixgbe_upd©e_ì¥om_checksum
(
ixgbe_hw
 *
hw
);

81 
s32
 
ixgbe_ö£π_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
vmdq
);

82 
s32
 
ixgbe_£t_ør
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
, 
u8
 *
addr
, u32 
vmdq
,

83 
u32
 
íabÀ_addr
);

84 
s32
 
ixgbe_˛ór_ør
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

85 
s32
 
ixgbe_£t_vmdq
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
);

86 
s32
 
ixgbe_˛ór_vmdq
(
ixgbe_hw
 *
hw
, 
u32
 
ør
, u32 
vmdq
);

87 
s32
 
ixgbe_öô_rx_addrs
(
ixgbe_hw
 *
hw
);

88 
u32
 
ixgbe_gë_num_rx_addrs
(
ixgbe_hw
 *
hw
);

89 
s32
 
ixgbe_upd©e_uc_addr_li°
(
ixgbe_hw
 *
hw
, 
u8
 *
addr_li°
,

90 
u32
 
addr_cou¡
, 
ixgbe_mc_addr_ôr
 
func
);

91 
s32
 
ixgbe_upd©e_mc_addr_li°
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr_li°
,

92 
u32
 
mc_addr_cou¡
, 
ixgbe_mc_addr_ôr
 
func
);

93 
ixgbe_add_uc_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
addr_li°
, 
u32
 
vmdq
);

94 
s32
 
ixgbe_íabÀ_mc
(
ixgbe_hw
 *
hw
);

95 
s32
 
ixgbe_dißbÀ_mc
(
ixgbe_hw
 *
hw
);

96 
s32
 
ixgbe_˛ór_v·a
(
ixgbe_hw
 *
hw
);

97 
s32
 
ixgbe_£t_v·a
(
ixgbe_hw
 *
hw
, 
u32
 
vœn
,

98 
u32
 
vöd
, 
boﬁ
 
vœn_⁄
);

100 
s32
 
ixgbe_fc_íabÀ
(
ixgbe_hw
 *
hw
, s32 
∑ckëbuf_num
);

102 
ixgbe_£t_mè
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr
);

103 
s32
 
ixgbe_gë_phy_fúmw¨e_vîsi⁄
(
ixgbe_hw
 *
hw
,

104 
u16
 *
fúmw¨e_vîsi⁄
);

105 
s32
 
ixgbe_ªad_™Æog_ªg8
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 *
vÆ
);

106 
s32
 
ixgbe_wrôe_™Æog_ªg8
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 
vÆ
);

107 
s32
 
ixgbe_öô_uè_èbÀs
(
ixgbe_hw
 *
hw
);

108 
s32
 
ixgbe_ªad_i2c_ì¥om
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
, u8 *
ì¥om_d©a
);

109 
u32
 
ixgbe_gë_suµ‹ãd_physiˇl_œyî
(
ixgbe_hw
 *
hw
);

110 
s32
 
ixgbe_íabÀ_rx_dma
(
ixgbe_hw
 *
hw
, 
u32
 
ªgvÆ
);

111 
s32
 
ixgbe_ªöô_fdú_èbÀs_82599
(
ixgbe_hw
 *
hw
);

112 
s32
 
ixgbe_öô_fdú_sig«tuª_82599
(
ixgbe_hw
 *
hw
, 
u32
 
pbÆloc
);

113 
s32
 
ixgbe_öô_fdú_≥r„˘_82599
(
ixgbe_hw
 *
hw
, 
u32
 
pbÆloc
);

114 
s32
 
ixgbe_fdú_add_sig«tuª_fûãr_82599
(
ixgbe_hw
 *
hw
,

115 
ixgbe_©r_öput
 *
öput
,

116 
u8
 
queue
);

117 
s32
 
ixgbe_fdú_add_≥r„˘_fûãr_82599
(
ixgbe_hw
 *
hw
,

118 
ixgbe_©r_öput
 *
öput
,

119 
u16
 
so·_id
,

120 
u8
 
queue
);

121 
u16
 
ixgbe_©r_compuã_hash_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 
key
);

122 
s32
 
ixgbe_©r_£t_vœn_id_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
vœn_id
);

123 
s32
 
ixgbe_©r_£t_§c_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 
§c_addr
);

124 
s32
 
ixgbe_©r_£t_d°_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 
d°_addr
);

125 
s32
 
ixgbe_©r_£t_§c_ùv6_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 
§c_addr_1
,

126 
u32
 
§c_addr_2
, u32 
§c_addr_3
,

127 
u32
 
§c_addr_4
);

128 
s32
 
ixgbe_©r_£t_d°_ùv6_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 
d°_addr_1
,

129 
u32
 
d°_addr_2
, u32 
d°_addr_3
,

130 
u32
 
d°_addr_4
);

131 
s32
 
ixgbe_©r_£t_§c_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
§c_p‹t
);

132 
s32
 
ixgbe_©r_£t_d°_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
d°_p‹t
);

133 
s32
 
ixgbe_©r_£t_Êex_byã_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 
Êex_byã
);

134 
s32
 
ixgbe_©r_£t_vm_poﬁ_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 
vm_poﬁ
);

135 
s32
 
ixgbe_©r_£t_l4ty≥_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 
l4ty≥
);

136 
s32
 
ixgbe_©r_gë_vœn_id_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 *
vœn_id
);

137 
s32
 
ixgbe_©r_gë_§c_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 *
§c_addr
);

138 
s32
 
ixgbe_©r_gë_d°_ùv4_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 *
d°_addr
);

139 
s32
 
ixgbe_©r_gë_§c_ùv6_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 *
§c_addr_1
,

140 
u32
 *
§c_addr_2
, u32 *
§c_addr_3
,

141 
u32
 *
§c_addr_4
);

142 
s32
 
ixgbe_©r_gë_d°_ùv6_82599
(
ixgbe_©r_öput
 *
öput
, 
u32
 *
d°_addr_1
,

143 
u32
 *
d°_addr_2
, u32 *
d°_addr_3
,

144 
u32
 *
d°_addr_4
);

145 
s32
 
ixgbe_©r_gë_§c_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 *
§c_p‹t
);

146 
s32
 
ixgbe_©r_gë_d°_p‹t_82599
(
ixgbe_©r_öput
 *
öput
, 
u16
 *
d°_p‹t
);

147 
s32
 
ixgbe_©r_gë_Êex_byã_82599
(
ixgbe_©r_öput
 *
öput
,

148 
u16
 *
Êex_byã
);

149 
s32
 
ixgbe_©r_gë_vm_poﬁ_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 *
vm_poﬁ
);

150 
s32
 
ixgbe_©r_gë_l4ty≥_82599
(
ixgbe_©r_öput
 *
öput
, 
u8
 *
l4ty≥
);

151 
s32
 
ixgbe_ªad_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
, u8 
dev_addr
,

152 
u8
 *
d©a
);

153 
s32
 
ixgbe_wrôe_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
, u8 
dev_addr
,

154 
u8
 
d©a
);

155 
s32
 
ixgbe_wrôe_i2c_ì¥om
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
, u8 
ì¥om_d©a
);

156 
s32
 
ixgbe_gë_ßn_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
);

157 
s32
 
ixgbe_£t_ßn_mac_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
ßn_mac_addr
);

158 
s32
 
ixgbe_gë_devi˚_ˇps
(
ixgbe_hw
 *
hw
, 
u16
 *
devi˚_ˇps
);

159 
s32
 
ixgbe_acquúe_swfw_£m≠h‹e
(
ixgbe_hw
 *
hw
, 
u16
 
mask
);

160 
ixgbe_ªÀa£_swfw_£m≠h‹e
(
ixgbe_hw
 *
hw
, 
u16
 
mask
);

	@ixgbe_common.c

28 
	~"ixgbe_comm⁄.h
"

29 
	~"ixgbe_≠i.h
"

31 
s32
 
ixgbe_pﬁl_ì¥om_ìrd_d⁄e
(
ixgbe_hw
 *
hw
);

32 
s32
 
ixgbe_acquúe_ì¥om
(
ixgbe_hw
 *
hw
);

33 
s32
 
ixgbe_gë_ì¥om_£m≠h‹e
(
ixgbe_hw
 *
hw
);

34 
ixgbe_ªÀa£_ì¥om_£m≠h‹e
(
ixgbe_hw
 *
hw
);

35 
s32
 
ixgbe_ªady_ì¥om
(
ixgbe_hw
 *
hw
);

36 
ixgbe_°™dby_ì¥om
(
ixgbe_hw
 *
hw
);

37 
ixgbe_shi·_out_ì¥om_bôs
(
ixgbe_hw
 *
hw
, 
u16
 
d©a
,

38 
u16
 
cou¡
);

39 
u16
 
ixgbe_shi·_ö_ì¥om_bôs
(
ixgbe_hw
 *
hw
, u16 
cou¡
);

40 
ixgbe_øi£_ì¥om_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
ìc
);

41 
ixgbe_lowî_ì¥om_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
ìc
);

42 
ixgbe_ªÀa£_ì¥om
(
ixgbe_hw
 *
hw
);

43 
u16
 
ixgbe_ˇlc_ì¥om_checksum
(
ixgbe_hw
 *
hw
);

45 
s32
 
ixgbe_mè_ve˘‹
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr
);

53 
s32
 
	$ixgbe_öô_›s_gíîic
(
ixgbe_hw
 *
hw
)

55 
ixgbe_ì¥om_öfo
 *
ì¥om
 = &
hw
->eeprom;

56 
ixgbe_mac_öfo
 *
mac
 = &
hw
->mac;

57 
u32
 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

60 
ì¥om
->
›s
.
öô_∑øms
 = &
ixgbe_öô_ì¥om_∑øms_gíîic
;

62 i‡(
ìc
 & (1 << 8))

63 
ì¥om
->
›s
.
ªad
 = &
ixgbe_ªad_ì¥om_gíîic
;

65 
ì¥om
->
›s
.
ªad
 = &
ixgbe_ªad_ì¥om_bô_b™g_gíîic
;

66 
ì¥om
->
›s
.
wrôe
 = &
ixgbe_wrôe_ì¥om_gíîic
;

67 
ì¥om
->
›s
.
vÆid©e_checksum
 =

68 &
ixgbe_vÆid©e_ì¥om_checksum_gíîic
;

69 
ì¥om
->
›s
.
upd©e_checksum
 = &
ixgbe_upd©e_ì¥om_checksum_gíîic
;

72 
mac
->
›s
.
öô_hw
 = &
ixgbe_öô_hw_gíîic
;

73 
mac
->
›s
.
ª£t_hw
 = 
NULL
;

74 
mac
->
›s
.
°¨t_hw
 = &
ixgbe_°¨t_hw_gíîic
;

75 
mac
->
›s
.
˛ór_hw_˙ås
 = &
ixgbe_˛ór_hw_˙ås_gíîic
;

76 
mac
->
›s
.
gë_medü_ty≥
 = 
NULL
;

77 
mac
->
›s
.
gë_suµ‹ãd_physiˇl_œyî
 = 
NULL
;

78 
mac
->
›s
.
íabÀ_rx_dma
 = &
ixgbe_íabÀ_rx_dma_gíîic
;

79 
mac
->
›s
.
gë_mac_addr
 = &
ixgbe_gë_mac_addr_gíîic
;

80 
mac
->
›s
.
°›_ad≠ãr
 = &
ixgbe_°›_ad≠ãr_gíîic
;

81 
mac
->
›s
.
gë_bus_öfo
 = &
ixgbe_gë_bus_öfo_gíîic
;

82 
mac
->
›s
.
£t_œn_id
 = &
ixgbe_£t_œn_id_mu…i_p‹t_pcõ
;

83 
mac
->
›s
.
acquúe_swfw_sync
 = &
ixgbe_acquúe_swfw_sync
;

84 
mac
->
›s
.
ªÀa£_swfw_sync
 = &
ixgbe_ªÀa£_swfw_sync
;

87 
mac
->
›s
.
Àd_⁄
 = &
ixgbe_Àd_⁄_gíîic
;

88 
mac
->
›s
.
Àd_off
 = &
ixgbe_Àd_off_gíîic
;

89 
mac
->
›s
.
blök_Àd_°¨t
 = &
ixgbe_blök_Àd_°¨t_gíîic
;

90 
mac
->
›s
.
blök_Àd_°›
 = &
ixgbe_blök_Àd_°›_gíîic
;

93 
mac
->
›s
.
£t_ør
 = &
ixgbe_£t_ør_gíîic
;

94 
mac
->
›s
.
˛ór_ør
 = &
ixgbe_˛ór_ør_gíîic
;

95 
mac
->
›s
.
ö£π_mac_addr
 = 
NULL
;

96 
mac
->
›s
.
£t_vmdq
 = 
NULL
;

97 
mac
->
›s
.
˛ór_vmdq
 = 
NULL
;

98 
mac
->
›s
.
öô_rx_addrs
 = &
ixgbe_öô_rx_addrs_gíîic
;

99 
mac
->
›s
.
upd©e_uc_addr_li°
 = &
ixgbe_upd©e_uc_addr_li°_gíîic
;

100 
mac
->
›s
.
upd©e_mc_addr_li°
 = &
ixgbe_upd©e_mc_addr_li°_gíîic
;

101 
mac
->
›s
.
íabÀ_mc
 = &
ixgbe_íabÀ_mc_gíîic
;

102 
mac
->
›s
.
dißbÀ_mc
 = &
ixgbe_dißbÀ_mc_gíîic
;

103 
mac
->
›s
.
˛ór_v·a
 = 
NULL
;

104 
mac
->
›s
.
£t_v·a
 = 
NULL
;

105 
mac
->
›s
.
öô_uè_èbÀs
 = 
NULL
;

108 
mac
->
›s
.
fc_íabÀ
 = &
ixgbe_fc_íabÀ_gíîic
;

111 
mac
->
›s
.
gë_lök_ˇ∑bûôõs
 = 
NULL
;

112 
mac
->
›s
.
£tup_lök
 = 
NULL
;

113 
mac
->
›s
.
£tup_lök_•ìd
 = 
NULL
;

114 
mac
->
›s
.
check_lök
 = 
NULL
;

117 
	}
}

128 
s32
 
	$ixgbe_°¨t_hw_gíîic
(
ixgbe_hw
 *
hw
)

130 
u32
 
˘æ_ext
;

131 
s32
 
ªt_vÆ
 = 0;

134 
hw
->
phy
.
medü_ty≥
 = hw->
mac
.
›s
.
	`gë_medü_ty≥
(hw);

139 
hw
->
mac
.
›s
.
	`˛ór_v·a
(hw);

142 
hw
->
mac
.
›s
.
	`˛ór_hw_˙ås
(hw);

145 
˘æ_ext
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL_EXT
);

146 
˘æ_ext
 |
IXGBE_CTRL_EXT_NS_DIS
;

147 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CTRL_EXT
, 
˘æ_ext
);

148 
	`IXGBE_WRITE_FLUSH
(
hw
);

151 
	`ixgbe_£tup_fc
(
hw
, 0);

154 
hw
->
ad≠ãr_°›≥d
 = 
Ál£
;

156  
ªt_vÆ
;

157 
	}
}

169 
s32
 
	$ixgbe_öô_hw_gíîic
(
ixgbe_hw
 *
hw
)

171 
s32
 
°©us
 = 0;

174 
°©us
 = 
hw
->
mac
.
›s
.
	`ª£t_hw
(hw);

176 i‡(
°©us
 == 0) {

178 
°©us
 = 
hw
->
mac
.
›s
.
	`°¨t_hw
(hw);

181  
°©us
;

182 
	}
}

191 
s32
 
	$ixgbe_˛ór_hw_˙ås_gíîic
(
ixgbe_hw
 *
hw
)

193 
u16
 
i
 = 0;

195 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CRCERRS
);

196 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ILLERRC
);

197 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ERRBC
);

198 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSPDC
);

199 
i
 = 0; i < 8; i++)

200 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_MPC
(
i
));

202 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MLFC
);

203 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MRFC
);

204 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RLEC
);

205 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXONTXC
);

206 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXOFFTXC
);

207 i‡(
hw
->
mac
.
ty≥
 >
ixgbe_mac_82599EB
) {

208 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXONRXCNT
);

209 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXOFFRXCNT
);

211 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXONRXC
);

212 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXOFFRXC
);

215 
i
 = 0; i < 8; i++) {

216 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXONTXC
(
i
));

217 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXOFFTXC
(
i
));

218 i‡(
hw
->
mac
.
ty≥
 >
ixgbe_mac_82599EB
) {

219 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXONRXCNT
(
i
));

220 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXOFFRXCNT
(
i
));

222 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXONRXC
(
i
));

223 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXOFFRXC
(
i
));

226 i‡(
hw
->
mac
.
ty≥
 >
ixgbe_mac_82599EB
)

227 
i
 = 0; i < 8; i++)

228 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXON2OFFCNT
(
i
));

229 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC64
);

230 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC127
);

231 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC255
);

232 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC511
);

233 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC1023
);

234 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC1522
);

235 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GPRC
);

236 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_BPRC
);

237 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MPRC
);

238 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GPTC
);

239 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GORCL
);

240 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GORCH
);

241 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GOTCL
);

242 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GOTCH
);

243 
i
 = 0; i < 8; i++)

244 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RNBC
(
i
));

245 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RUC
);

246 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RFC
);

247 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ROC
);

248 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RJC
);

249 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MNGPRC
);

250 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MNGPDC
);

251 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MNGPTC
);

252 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TORL
);

253 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TORH
);

254 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TPR
);

255 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TPT
);

256 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC64
);

257 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC127
);

258 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC255
);

259 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC511
);

260 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC1023
);

261 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC1522
);

262 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MPTC
);

263 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_BPTC
);

264 
i
 = 0; i < 16; i++) {

265 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPRC
(
i
));

266 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBRC
(
i
));

267 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPTC
(
i
));

268 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBTC
(
i
));

272 
	}
}

281 
s32
 
	$ixgbe_ªad_pba_num_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 *
pba_num
)

283 
s32
 
ªt_vÆ
;

284 
u16
 
d©a
;

286 
ªt_vÆ
 = 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_PBANUM0_PTR
, &
d©a
);

287 i‡(
ªt_vÆ
) {

288 
	`hw_dbg
(
hw
, "NVM Read Error\n");

289  
ªt_vÆ
;

291 *
pba_num
 = (
u32
)(
d©a
 << 16);

293 
ªt_vÆ
 = 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_PBANUM1_PTR
, &
d©a
);

294 i‡(
ªt_vÆ
) {

295 
	`hw_dbg
(
hw
, "NVM Read Error\n");

296  
ªt_vÆ
;

298 *
pba_num
 |
d©a
;

301 
	}
}

312 
s32
 
	$ixgbe_gë_mac_addr_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 *
mac_addr
)

314 
u32
 
ør_high
;

315 
u32
 
ør_low
;

316 
u16
 
i
;

318 
ør_high
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAH
(0));

319 
ør_low
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAL
(0));

321 
i
 = 0; i < 4; i++)

322 
mac_addr
[
i
] = (
u8
)(
ør_low
 >> (i*8));

324 
i
 = 0; i < 2; i++)

325 
mac_addr
[
i
+4] = (
u8
)(
ør_high
 >> (i*8));

328 
	}
}

336 
s32
 
	$ixgbe_gë_bus_öfo_gíîic
(
ixgbe_hw
 *
hw
)

338 
ixgbe_mac_öfo
 *
mac
 = &
hw
->mac;

339 
u16
 
lök_°©us
;

341 
hw
->
bus
.
ty≥
 = 
ixgbe_bus_ty≥_pci_ex¥ess
;

344 
lök_°©us
 = 
	`IXGBE_READ_PCIE_WORD
(
hw
, 
IXGBE_PCI_LINK_STATUS
);

346 
lök_°©us
 & 
IXGBE_PCI_LINK_WIDTH
) {

347 
IXGBE_PCI_LINK_WIDTH_1
:

348 
hw
->
bus
.
width
 = 
ixgbe_bus_width_pcõ_x1
;

350 
IXGBE_PCI_LINK_WIDTH_2
:

351 
hw
->
bus
.
width
 = 
ixgbe_bus_width_pcõ_x2
;

353 
IXGBE_PCI_LINK_WIDTH_4
:

354 
hw
->
bus
.
width
 = 
ixgbe_bus_width_pcõ_x4
;

356 
IXGBE_PCI_LINK_WIDTH_8
:

357 
hw
->
bus
.
width
 = 
ixgbe_bus_width_pcõ_x8
;

360 
hw
->
bus
.
width
 = 
ixgbe_bus_width_unknown
;

364 
lök_°©us
 & 
IXGBE_PCI_LINK_SPEED
) {

365 
IXGBE_PCI_LINK_SPEED_2500
:

366 
hw
->
bus
.
•ìd
 = 
ixgbe_bus_•ìd_2500
;

368 
IXGBE_PCI_LINK_SPEED_5000
:

369 
hw
->
bus
.
•ìd
 = 
ixgbe_bus_•ìd_5000
;

372 
hw
->
bus
.
•ìd
 = 
ixgbe_bus_•ìd_unknown
;

376 
mac
->
›s
.
	`£t_œn_id
(
hw
);

379 
	}
}

388 
	$ixgbe_£t_œn_id_mu…i_p‹t_pcõ
(
ixgbe_hw
 *
hw
)

390 
ixgbe_bus_öfo
 *
bus
 = &
hw
->bus;

391 
u32
 
ªg
;

393 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_STATUS
);

394 
bus
->
func
 = (
ªg
 & 
IXGBE_STATUS_LAN_ID
Ë>> 
IXGBE_STATUS_LAN_ID_SHIFT
;

395 
bus
->
œn_id
 = bus->
func
;

398 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FACTPS
);

399 i‡(
ªg
 & 
IXGBE_FACTPS_LFS
)

400 
bus
->
func
 ^= 0x1;

401 
	}
}

412 
s32
 
	$ixgbe_°›_ad≠ãr_gíîic
(
ixgbe_hw
 *
hw
)

414 
u32
 
numbî_of_queues
;

415 
u32
 
ªg_vÆ
;

416 
u16
 
i
;

422 
hw
->
ad≠ãr_°›≥d
 = 
åue
;

425 
ªg_vÆ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCTRL
);

426 
ªg_vÆ
 &~(
IXGBE_RXCTRL_RXEN
);

427 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCTRL
, 
ªg_vÆ
);

428 
	`IXGBE_WRITE_FLUSH
(
hw
);

429 
	`m¶ìp
(2);

432 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIMC
, 
IXGBE_IRQ_CLEAR_MASK
);

435 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EICR
);

438 
numbî_of_queues
 = 
hw
->
mac
.
max_tx_queues
;

439 
i
 = 0; i < 
numbî_of_queues
; i++) {

440 
ªg_vÆ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(
i
));

441 i‡(
ªg_vÆ
 & 
IXGBE_TXDCTL_ENABLE
) {

442 
ªg_vÆ
 &~
IXGBE_TXDCTL_ENABLE
;

443 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXDCTL
(
i
), 
ªg_vÆ
);

451 i‡(
	`ixgbe_dißbÀ_pcõ_ma°î
(
hw
) != 0)

452 
	`hw_dbg
(
hw
, "PCI-E Master disableÖolling has failed.\n");

455 
	}
}

462 
s32
 
	$ixgbe_Àd_⁄_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

464 
u32
 
Àd_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LEDCTL
);

467 
Àd_ªg
 &~
	`IXGBE_LED_MODE_MASK
(
ödex
);

468 
Àd_ªg
 |
IXGBE_LED_ON
 << 
	`IXGBE_LED_MODE_SHIFT
(
ödex
);

469 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_LEDCTL
, 
Àd_ªg
);

470 
	`IXGBE_WRITE_FLUSH
(
hw
);

473 
	}
}

480 
s32
 
	$ixgbe_Àd_off_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

482 
u32
 
Àd_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LEDCTL
);

485 
Àd_ªg
 &~
	`IXGBE_LED_MODE_MASK
(
ödex
);

486 
Àd_ªg
 |
IXGBE_LED_OFF
 << 
	`IXGBE_LED_MODE_SHIFT
(
ödex
);

487 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_LEDCTL
, 
Àd_ªg
);

488 
	`IXGBE_WRITE_FLUSH
(
hw
);

491 
	}
}

500 
s32
 
	$ixgbe_öô_ì¥om_∑øms_gíîic
(
ixgbe_hw
 *
hw
)

502 
ixgbe_ì¥om_öfo
 *
ì¥om
 = &
hw
->eeprom;

503 
u32
 
ìc
;

504 
u16
 
ì¥om_size
;

506 i‡(
ì¥om
->
ty≥
 =
ixgbe_ì¥om_unöôülized
) {

507 
ì¥om
->
ty≥
 = 
ixgbe_ì¥om_n⁄e
;

510 
ì¥om
->
£m≠h‹e_dñay
 = 10;

516 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

517 i‡(
ìc
 & 
IXGBE_EEC_PRES
) {

518 
ì¥om
->
ty≥
 = 
ixgbe_ì¥om_•i
;

524 
ì¥om_size
 = (
u16
)((
ìc
 & 
IXGBE_EEC_SIZE
) >>

525 
IXGBE_EEC_SIZE_SHIFT
);

526 
ì¥om
->
w‹d_size
 = 1 << (
ì¥om_size
 +

527 
IXGBE_EEPROM_WORD_SIZE_SHIFT
);

530 i‡(
ìc
 & 
IXGBE_EEC_ADDR_SIZE
)

531 
ì¥om
->
addªss_bôs
 = 16;

533 
ì¥om
->
addªss_bôs
 = 8;

534 
	`hw_dbg
(
hw
, "EepromÖarams:Åype = %d, size = %d,áddress bits: "

535 "%d\n", 
ì¥om
->
ty≥
,Éïrom->
w‹d_size
,

536 
ì¥om
->
addªss_bôs
);

540 
	}
}

551 
s32
 
	$ixgbe_wrôe_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 
d©a
)

553 
s32
 
°©us
;

554 
u8
 
wrôe_›code
 = 
IXGBE_EEPROM_WRITE_OPCODE_SPI
;

556 
hw
->
ì¥om
.
›s
.
	`öô_∑øms
(hw);

558 i‡(
off£t
 >
hw
->
ì¥om
.
w‹d_size
) {

559 
°©us
 = 
IXGBE_ERR_EEPROM
;

560 
out
;

564 
°©us
 = 
	`ixgbe_acquúe_ì¥om
(
hw
);

566 i‡(
°©us
 == 0) {

567 i‡(
	`ixgbe_ªady_ì¥om
(
hw
) != 0) {

568 
	`ixgbe_ªÀa£_ì¥om
(
hw
);

569 
°©us
 = 
IXGBE_ERR_EEPROM
;

573 i‡(
°©us
 == 0) {

574 
	`ixgbe_°™dby_ì¥om
(
hw
);

577 
	`ixgbe_shi·_out_ì¥om_bôs
(
hw
, 
IXGBE_EEPROM_WREN_OPCODE_SPI
,

578 
IXGBE_EEPROM_OPCODE_BITS
);

580 
	`ixgbe_°™dby_ì¥om
(
hw
);

586 i‡((
hw
->
ì¥om
.
addªss_bôs
 =8Ë&& (
off£t
 >= 128))

587 
wrôe_›code
 |
IXGBE_EEPROM_A8_OPCODE_SPI
;

590 
	`ixgbe_shi·_out_ì¥om_bôs
(
hw
, 
wrôe_›code
,

591 
IXGBE_EEPROM_OPCODE_BITS
);

592 
	`ixgbe_shi·_out_ì¥om_bôs
(
hw
, (
u16
)(
off£t
*2),

593 
hw
->
ì¥om
.
addªss_bôs
);

596 
d©a
 = (data >> 8) | (data << 8);

597 
	`ixgbe_shi·_out_ì¥om_bôs
(
hw
, 
d©a
, 16);

598 
	`ixgbe_°™dby_ì¥om
(
hw
);

601 
	`ixgbe_ªÀa£_ì¥om
(
hw
);

604 
out
:

605  
°©us
;

606 
	}
}

616 
s32
 
	$ixgbe_ªad_ì¥om_bô_b™g_gíîic
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
,

617 
u16
 *
d©a
)

619 
s32
 
°©us
;

620 
u16
 
w‹d_ö
;

621 
u8
 
ªad_›code
 = 
IXGBE_EEPROM_READ_OPCODE_SPI
;

623 
hw
->
ì¥om
.
›s
.
	`öô_∑øms
(hw);

625 i‡(
off£t
 >
hw
->
ì¥om
.
w‹d_size
) {

626 
°©us
 = 
IXGBE_ERR_EEPROM
;

627 
out
;

631 
°©us
 = 
	`ixgbe_acquúe_ì¥om
(
hw
);

633 i‡(
°©us
 == 0) {

634 i‡(
	`ixgbe_ªady_ì¥om
(
hw
) != 0) {

635 
	`ixgbe_ªÀa£_ì¥om
(
hw
);

636 
°©us
 = 
IXGBE_ERR_EEPROM
;

640 i‡(
°©us
 == 0) {

641 
	`ixgbe_°™dby_ì¥om
(
hw
);

647 i‡((
hw
->
ì¥om
.
addªss_bôs
 =8Ë&& (
off£t
 >= 128))

648 
ªad_›code
 |
IXGBE_EEPROM_A8_OPCODE_SPI
;

651 
	`ixgbe_shi·_out_ì¥om_bôs
(
hw
, 
ªad_›code
,

652 
IXGBE_EEPROM_OPCODE_BITS
);

653 
	`ixgbe_shi·_out_ì¥om_bôs
(
hw
, (
u16
)(
off£t
*2),

654 
hw
->
ì¥om
.
addªss_bôs
);

657 
w‹d_ö
 = 
	`ixgbe_shi·_ö_ì¥om_bôs
(
hw
, 16);

658 *
d©a
 = (
w‹d_ö
 >> 8) | (word_in << 8);

661 
	`ixgbe_ªÀa£_ì¥om
(
hw
);

664 
out
:

665  
°©us
;

666 
	}
}

676 
s32
 
	$ixgbe_ªad_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 *
d©a
)

678 
u32
 
ìrd
;

679 
s32
 
°©us
;

681 
hw
->
ì¥om
.
›s
.
	`öô_∑øms
(hw);

683 i‡(
off£t
 >
hw
->
ì¥om
.
w‹d_size
) {

684 
°©us
 = 
IXGBE_ERR_EEPROM
;

685 
out
;

688 
ìrd
 = (
off£t
 << 
IXGBE_EEPROM_READ_ADDR_SHIFT
) +

689 
IXGBE_EEPROM_READ_REG_START
;

691 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EERD
, 
ìrd
);

692 
°©us
 = 
	`ixgbe_pﬁl_ì¥om_ìrd_d⁄e
(
hw
);

694 i‡(
°©us
 == 0)

695 *
d©a
 = (
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EERD
) >>

696 
IXGBE_EEPROM_READ_REG_DATA
);

698 
	`hw_dbg
(
hw
, "EepromÑeadÅimed out\n");

700 
out
:

701  
°©us
;

702 
	}
}

710 
s32
 
	$ixgbe_pﬁl_ì¥om_ìrd_d⁄e
(
ixgbe_hw
 *
hw
)

712 
u32
 
i
;

713 
u32
 
ªg
;

714 
s32
 
°©us
 = 
IXGBE_ERR_EEPROM
;

716 
i
 = 0; i < 
IXGBE_EERD_ATTEMPTS
; i++) {

717 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EERD
);

718 i‡(
ªg
 & 
IXGBE_EEPROM_READ_REG_DONE
) {

719 
°©us
 = 0;

722 
	`udñay
(5);

724  
°©us
;

725 
	}
}

734 
s32
 
	$ixgbe_acquúe_ì¥om
(
ixgbe_hw
 *
hw
)

736 
s32
 
°©us
 = 0;

737 
u32
 
ìc
;

738 
u32
 
i
;

740 i‡(
	`ixgbe_acquúe_swfw_sync
(
hw
, 
IXGBE_GSSR_EEP_SM
) != 0)

741 
°©us
 = 
IXGBE_ERR_SWFW_SYNC
;

743 i‡(
°©us
 == 0) {

744 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

747 
ìc
 |
IXGBE_EEC_REQ
;

748 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

750 
i
 = 0; i < 
IXGBE_EEPROM_GRANT_ATTEMPTS
; i++) {

751 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

752 i‡(
ìc
 & 
IXGBE_EEC_GNT
)

754 
	`udñay
(5);

758 i‡(!(
ìc
 & 
IXGBE_EEC_GNT
)) {

759 
ìc
 &~
IXGBE_EEC_REQ
;

760 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

761 
	`hw_dbg
(
hw
, "CouldÇotácquire EEPROM grant\n");

763 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
IXGBE_GSSR_EEP_SM
);

764 
°©us
 = 
IXGBE_ERR_EEPROM
;

769 i‡(
°©us
 == 0) {

771 
ìc
 &~(
IXGBE_EEC_CS
 | 
IXGBE_EEC_SK
);

772 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

773 
	`IXGBE_WRITE_FLUSH
(
hw
);

774 
	`udñay
(1);

776  
°©us
;

777 
	}
}

785 
s32
 
	$ixgbe_gë_ì¥om_£m≠h‹e
(
ixgbe_hw
 *
hw
)

787 
s32
 
°©us
 = 
IXGBE_ERR_EEPROM
;

788 
u32
 
timeout
 = 2000;

789 
u32
 
i
;

790 
u32
 
swsm
;

793 
i
 = 0; i < 
timeout
; i++) {

798 
swsm
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SWSM
);

799 i‡(!(
swsm
 & 
IXGBE_SWSM_SMBI
)) {

800 
°©us
 = 0;

803 
	`udñay
(50);

807 i‡(
°©us
 == 0) {

808 
i
 = 0; i < 
timeout
; i++) {

809 
swsm
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SWSM
);

812 
swsm
 |
IXGBE_SWSM_SWESMBI
;

813 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_SWSM
, 
swsm
);

819 
swsm
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SWSM
);

820 i‡(
swsm
 & 
IXGBE_SWSM_SWESMBI
)

823 
	`udñay
(50);

830 i‡(
i
 >
timeout
) {

831 
	`hw_dbg
(
hw
, "SWESMBI Software EEPROM semaphore "

833 
	`ixgbe_ªÀa£_ì¥om_£m≠h‹e
(
hw
);

834 
°©us
 = 
IXGBE_ERR_EEPROM
;

837 
	`hw_dbg
(
hw
, "Software semaphore SMBI between device drivers "

841  
°©us
;

842 
	}
}

850 
	$ixgbe_ªÀa£_ì¥om_£m≠h‹e
(
ixgbe_hw
 *
hw
)

852 
u32
 
swsm
;

854 
swsm
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SWSM
);

857 
swsm
 &~(
IXGBE_SWSM_SWESMBI
 | 
IXGBE_SWSM_SMBI
);

858 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_SWSM
, 
swsm
);

859 
	`IXGBE_WRITE_FLUSH
(
hw
);

860 
	}
}

866 
s32
 
	$ixgbe_ªady_ì¥om
(
ixgbe_hw
 *
hw
)

868 
s32
 
°©us
 = 0;

869 
u16
 
i
;

870 
u8
 
•i_°©_ªg
;

878 
i
 = 0; i < 
IXGBE_EEPROM_MAX_RETRY_SPI
; i += 5) {

879 
	`ixgbe_shi·_out_ì¥om_bôs
(
hw
, 
IXGBE_EEPROM_RDSR_OPCODE_SPI
,

880 
IXGBE_EEPROM_OPCODE_BITS
);

881 
•i_°©_ªg
 = (
u8
)
	`ixgbe_shi·_ö_ì¥om_bôs
(
hw
, 8);

882 i‡(!(
•i_°©_ªg
 & 
IXGBE_EEPROM_STATUS_RDY_SPI
))

885 
	`udñay
(5);

886 
	`ixgbe_°™dby_ì¥om
(
hw
);

893 i‡(
i
 >
IXGBE_EEPROM_MAX_RETRY_SPI
) {

894 
	`hw_dbg
(
hw
, "SPI EEPROM StatusÉrror\n");

895 
°©us
 = 
IXGBE_ERR_EEPROM
;

898  
°©us
;

899 
	}
}

905 
	$ixgbe_°™dby_ì¥om
(
ixgbe_hw
 *
hw
)

907 
u32
 
ìc
;

909 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

912 
ìc
 |
IXGBE_EEC_CS
;

913 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

914 
	`IXGBE_WRITE_FLUSH
(
hw
);

915 
	`udñay
(1);

916 
ìc
 &~
IXGBE_EEC_CS
;

917 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

918 
	`IXGBE_WRITE_FLUSH
(
hw
);

919 
	`udñay
(1);

920 
	}
}

928 
	$ixgbe_shi·_out_ì¥om_bôs
(
ixgbe_hw
 *
hw
, 
u16
 
d©a
,

929 
u16
 
cou¡
)

931 
u32
 
ìc
;

932 
u32
 
mask
;

933 
u32
 
i
;

935 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

941 
mask
 = 0x01 << (
cou¡
 - 1);

943 
i
 = 0; i < 
cou¡
; i++) {

951 i‡(
d©a
 & 
mask
)

952 
ìc
 |
IXGBE_EEC_DI
;

954 
ìc
 &~
IXGBE_EEC_DI
;

956 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

957 
	`IXGBE_WRITE_FLUSH
(
hw
);

959 
	`udñay
(1);

961 
	`ixgbe_øi£_ì¥om_˛k
(
hw
, &
ìc
);

962 
	`ixgbe_lowî_ì¥om_˛k
(
hw
, &
ìc
);

968 
mask
 = mask >> 1;

972 
ìc
 &~
IXGBE_EEC_DI
;

973 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

974 
	`IXGBE_WRITE_FLUSH
(
hw
);

975 
	}
}

981 
u16
 
	$ixgbe_shi·_ö_ì¥om_bôs
(
ixgbe_hw
 *
hw
, 
u16
 
cou¡
)

983 
u32
 
ìc
;

984 
u32
 
i
;

985 
u16
 
d©a
 = 0;

994 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

996 
ìc
 &~(
IXGBE_EEC_DO
 | 
IXGBE_EEC_DI
);

998 
i
 = 0; i < 
cou¡
; i++) {

999 
d©a
 = data << 1;

1000 
	`ixgbe_øi£_ì¥om_˛k
(
hw
, &
ìc
);

1002 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

1004 
ìc
 &~(
IXGBE_EEC_DI
);

1005 i‡(
ìc
 & 
IXGBE_EEC_DO
)

1006 
d©a
 |= 1;

1008 
	`ixgbe_lowî_ì¥om_˛k
(
hw
, &
ìc
);

1011  
d©a
;

1012 
	}
}

1019 
	$ixgbe_øi£_ì¥om_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
ìc
)

1025 *
ìc
 = *ì¯| 
IXGBE_EEC_SK
;

1026 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, *
ìc
);

1027 
	`IXGBE_WRITE_FLUSH
(
hw
);

1028 
	`udñay
(1);

1029 
	}
}

1036 
	$ixgbe_lowî_ì¥om_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
ìc
)

1042 *
ìc
 = *ì¯& ~
IXGBE_EEC_SK
;

1043 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, *
ìc
);

1044 
	`IXGBE_WRITE_FLUSH
(
hw
);

1045 
	`udñay
(1);

1046 
	}
}

1052 
	$ixgbe_ªÀa£_ì¥om
(
ixgbe_hw
 *
hw
)

1054 
u32
 
ìc
;

1056 
ìc
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

1058 
ìc
 |
IXGBE_EEC_CS
;

1059 
ìc
 &~
IXGBE_EEC_SK
;

1061 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

1062 
	`IXGBE_WRITE_FLUSH
(
hw
);

1064 
	`udñay
(1);

1067 
ìc
 &~
IXGBE_EEC_REQ
;

1068 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EEC
, 
ìc
);

1070 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
IXGBE_GSSR_EEP_SM
);

1073 
	`m¶ìp
(
hw
->
ì¥om
.
£m≠h‹e_dñay
);

1074 
	}
}

1080 
u16
 
	$ixgbe_ˇlc_ì¥om_checksum
(
ixgbe_hw
 *
hw
)

1082 
u16
 
i
;

1083 
u16
 
j
;

1084 
u16
 
checksum
 = 0;

1085 
u16
 
Àngth
 = 0;

1086 
u16
 
poöãr
 = 0;

1087 
u16
 
w‹d
 = 0;

1090 
i
 = 0; i < 
IXGBE_EEPROM_CHECKSUM
; i++) {

1091 i‡(
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
i
, &
w‹d
) != 0) {

1092 
	`hw_dbg
(
hw
, "EEPROMÑead failed\n");

1095 
checksum
 +
w‹d
;

1099 
i
 = 
IXGBE_PCIE_ANALOG_PTR
; i < 
IXGBE_FW_PTR
; i++) {

1100 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
i
, &
poöãr
);

1103 i‡(
poöãr
 != 0xFFFF &&Öointer != 0) {

1104 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
poöãr
, &
Àngth
);

1106 i‡(
Àngth
 != 0xFFFF &&Üength != 0) {

1107 
j
 = 
poöãr
+1; j <poöãr+
Àngth
; j++) {

1108 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
j
, &
w‹d
);

1109 
checksum
 +
w‹d
;

1115 
checksum
 = (
u16
)
IXGBE_EEPROM_SUM
 - checksum;

1117  
checksum
;

1118 
	}
}

1128 
s32
 
	$ixgbe_vÆid©e_ì¥om_checksum_gíîic
(
ixgbe_hw
 *
hw
,

1129 
u16
 *
checksum_vÆ
)

1131 
s32
 
°©us
;

1132 
u16
 
checksum
;

1133 
u16
 
ªad_checksum
 = 0;

1140 
°©us
 = 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 0, &
checksum
);

1142 i‡(
°©us
 == 0) {

1143 
checksum
 = 
	`ixgbe_ˇlc_ì¥om_checksum
(
hw
);

1145 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_EEPROM_CHECKSUM
, &
ªad_checksum
);

1151 i‡(
ªad_checksum
 !
checksum
)

1152 
°©us
 = 
IXGBE_ERR_EEPROM_CHECKSUM
;

1155 i‡(
checksum_vÆ
)

1156 *
checksum_vÆ
 = 
checksum
;

1158 
	`hw_dbg
(
hw
, "EEPROMÑead failed\n");

1161  
°©us
;

1162 
	}
}

1168 
s32
 
	$ixgbe_upd©e_ì¥om_checksum_gíîic
(
ixgbe_hw
 *
hw
)

1170 
s32
 
°©us
;

1171 
u16
 
checksum
;

1178 
°©us
 = 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 0, &
checksum
);

1180 i‡(
°©us
 == 0) {

1181 
checksum
 = 
	`ixgbe_ˇlc_ì¥om_checksum
(
hw
);

1182 
°©us
 = 
hw
->
ì¥om
.
›s
.
	`wrôe
(hw, 
IXGBE_EEPROM_CHECKSUM
,

1183 
checksum
);

1185 
	`hw_dbg
(
hw
, "EEPROMÑead failed\n");

1188  
°©us
;

1189 
	}
}

1197 
s32
 
	$ixgbe_vÆid©e_mac_addr
(
u8
 *
mac_addr
)

1199 
s32
 
°©us
 = 0;

1202 i‡(
	`IXGBE_IS_MULTICAST
(
mac_addr
)) {

1203 
	`hw_dbg
(
hw
, "MACáddress is multicast\n");

1204 
°©us
 = 
IXGBE_ERR_INVALID_MAC_ADDR
;

1206 } i‡(
	`IXGBE_IS_BROADCAST
(
mac_addr
)) {

1207 
	`hw_dbg
(
hw
, "MACáddress is broadcast\n");

1208 
°©us
 = 
IXGBE_ERR_INVALID_MAC_ADDR
;

1210 } i‡(
mac_addr
[0] == 0 && mac_addr[1] == 0 && mac_addr[2] == 0 &&

1211 
mac_addr
[3] == 0 && mac_addr[4] == 0 && mac_addr[5] == 0) {

1212 
	`hw_dbg
(
hw
, "MACáddress isáll zeros\n");

1213 
°©us
 = 
IXGBE_ERR_INVALID_MAC_ADDR
;

1215  
°©us
;

1216 
	}
}

1228 
s32
 
	$ixgbe_£t_ør_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
, 
u8
 *
addr
, u32 
vmdq
,

1229 
u32
 
íabÀ_addr
)

1231 
u32
 
ør_low
, 
ør_high
;

1232 
u32
 
ør_íåõs
 = 
hw
->
mac
.
num_ør_íåõs
;

1235 
hw
->
mac
.
›s
.
	`£t_vmdq
(hw, 
ödex
, 
vmdq
);

1238 i‡(
ödex
 < 
ør_íåõs
) {

1243 
ør_low
 = ((
u32
)
addr
[0] |

1244 ((
u32
)
addr
[1] << 8) |

1245 ((
u32
)
addr
[2] << 16) |

1246 ((
u32
)
addr
[3] << 24));

1252 
ør_high
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAH
(
ödex
));

1253 
ør_high
 &~(0x0000FFFF | 
IXGBE_RAH_AV
);

1254 
ør_high
 |((
u32
)
addr
[4] | ((u32)addr[5] << 8));

1256 i‡(
íabÀ_addr
 != 0)

1257 
ør_high
 |
IXGBE_RAH_AV
;

1259 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAL
(
ödex
), 
ør_low
);

1260 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAH
(
ödex
), 
ør_high
);

1262 
	`hw_dbg
(
hw
, "RAR index %d i†ouào‡ønge.\n", 
ödex
);

1266 
	}
}

1275 
s32
 
	$ixgbe_˛ór_ør_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

1277 
u32
 
ør_high
;

1278 
u32
 
ør_íåõs
 = 
hw
->
mac
.
num_ør_íåõs
;

1281 i‡(
ödex
 < 
ør_íåõs
) {

1287 
ør_high
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAH
(
ödex
));

1288 
ør_high
 &~(0x0000FFFF | 
IXGBE_RAH_AV
);

1290 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAL
(
ödex
), 0);

1291 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAH
(
ödex
), 
ør_high
);

1293 
	`hw_dbg
(
hw
, "RAR index %d i†ouào‡ønge.\n", 
ödex
);

1297 
hw
->
mac
.
›s
.
	`˛ór_vmdq
(hw, 
ödex
, 
IXGBE_CLEAR_VMDQ_ALL
);

1300 
	}
}

1310 
s32
 
	$ixgbe_öô_rx_addrs_gíîic
(
ixgbe_hw
 *
hw
)

1312 
u32
 
i
;

1313 
u32
 
ør_íåõs
 = 
hw
->
mac
.
num_ør_íåõs
;

1320 i‡(
	`ixgbe_vÆid©e_mac_addr
(
hw
->
mac
.
addr
) ==

1321 
IXGBE_ERR_INVALID_MAC_ADDR
) {

1323 
hw
->
mac
.
›s
.
	`gë_mac_addr
(hw, hw->mac.
addr
);

1325 
	`hw_dbg
(
hw
, " Keeping Current RAR0 Addr =%.2X %.2X %.2X ",

1326 
hw
->
mac
.
addr
[0], hw->mac.addr[1],

1327 
hw
->
mac
.
addr
[2]);

1328 
	`hw_dbg
(
hw
, "%.2X %.2X %.2X\n", hw->
mac
.
addr
[3],

1329 
hw
->
mac
.
addr
[4], hw->mac.addr[5]);

1332 
	`hw_dbg
(
hw
, "Overriding MAC Address in RAR[0]\n");

1333 
	`hw_dbg
(
hw
, " New MAC Addr =%.2X %.2X %.2X ",

1334 
hw
->
mac
.
addr
[0], hw->mac.addr[1],

1335 
hw
->
mac
.
addr
[2]);

1336 
	`hw_dbg
(
hw
, "%.2X %.2X %.2X\n", hw->
mac
.
addr
[3],

1337 
hw
->
mac
.
addr
[4], hw->mac.addr[5]);

1339 
hw
->
mac
.
›s
.
	`£t_ør
(hw, 0, hw->mac.
addr
, 0, 
IXGBE_RAH_AV
);

1341 
hw
->
addr_˘æ
.
ovîÊow_¥omisc
 = 0;

1343 
hw
->
addr_˘æ
.
ør_u£d_cou¡
 = 1;

1346 
	`hw_dbg
(
hw
, "CÀ¨ög RAR[1-%d]\n", 
ør_íåõs
 - 1);

1347 
i
 = 1; i < 
ør_íåõs
; i++) {

1348 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAL
(
i
), 0);

1349 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAH
(
i
), 0);

1353 
hw
->
addr_˘æ
.
mè_ö_u£
 = 0;

1354 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MCSTCTRL
, hw->
mac
.
mc_fûãr_ty≥
);

1356 
	`hw_dbg
(
hw
, " Clearing MTA\n");

1357 
i
 = 0; i < 
hw
->
mac
.
mc·_size
; i++)

1358 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MTA
(
i
), 0);

1360 
	`ixgbe_öô_uè_èbÀs
(
hw
);

1363 
	}
}

1372 
	$ixgbe_add_uc_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
vmdq
)

1374 
u32
 
ør_íåõs
 = 
hw
->
mac
.
num_ør_íåõs
;

1375 
u32
 
ør
;

1377 
	`hw_dbg
(
hw
, " UC Addr = %.2X %.2X %.2X %.2X %.2X %.2X\n",

1378 
addr
[0],áddr[1],áddr[2],áddr[3],áddr[4],áddr[5]);

1384 i‡(
hw
->
addr_˘æ
.
ør_u£d_cou¡
 < 
ør_íåõs
) {

1385 
ør
 = 
hw
->
addr_˘æ
.
ør_u£d_cou¡
;

1386 
hw
->
mac
.
›s
.
	`£t_ør
(hw, 
ør
, 
addr
, 
vmdq
, 
IXGBE_RAH_AV
);

1387 
	`hw_dbg
(
hw
, "Addedá sec⁄d¨yáddªs†tÿRAR[%d]\n", 
ør
);

1388 
hw
->
addr_˘æ
.
ør_u£d_cou¡
++;

1390 
hw
->
addr_˘æ
.
ovîÊow_¥omisc
++;

1393 
	`hw_dbg
(
hw
, "ixgbe_add_uc_addr Complete\n");

1394 
	}
}

1410 
s32
 
	$ixgbe_upd©e_uc_addr_li°_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 *
addr_li°
,

1411 
u32
 
addr_cou¡
, 
ixgbe_mc_addr_ôr
 
√xt
)

1413 
u8
 *
addr
;

1414 
u32
 
i
;

1415 
u32
 
ﬁd_¥omisc_£âög
 = 
hw
->
addr_˘æ
.
ovîÊow_¥omisc
;

1416 
u32
 
uc_addr_ö_u£
;

1417 
u32
 
f˘æ
;

1418 
u32
 
vmdq
;

1424 
uc_addr_ö_u£
 = 
hw
->
addr_˘æ
.
ør_u£d_cou¡
 - 1;

1425 
hw
->
addr_˘æ
.
ør_u£d_cou¡
 -
uc_addr_ö_u£
;

1426 
hw
->
addr_˘æ
.
ovîÊow_¥omisc
 = 0;

1429 
	`hw_dbg
(
hw
, "CÀ¨ög RAR[1-%d]\n", hw->
addr_˘æ
.
ør_u£d_cou¡
);

1430 
i
 = 1; i <
hw
->
addr_˘æ
.
ør_u£d_cou¡
; i++) {

1431 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAL
(
i
), 0);

1432 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RAH
(
i
), 0);

1436 
i
 = 0; i < 
addr_cou¡
; i++) {

1437 
	`hw_dbg
(
hw
, " AddingÅhe secondaryáddresses:\n");

1438 
addr
 = 
	`√xt
(
hw
, &
addr_li°
, &
vmdq
);

1439 
	`ixgbe_add_uc_addr
(
hw
, 
addr
, 
vmdq
);

1442 i‡(
hw
->
addr_˘æ
.
ovîÊow_¥omisc
) {

1444 i‡(!
ﬁd_¥omisc_£âög
 && !
hw
->
addr_˘æ
.
u£r_£t_¥omisc
) {

1445 
	`hw_dbg
(
hw
, " Enteringáddress overflowÖromisc mode\n");

1446 
f˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

1447 
f˘æ
 |
IXGBE_FCTRL_UPE
;

1448 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCTRL
, 
f˘æ
);

1452 i‡(
ﬁd_¥omisc_£âög
 && !
hw
->
addr_˘æ
.
u£r_£t_¥omisc
) {

1453 
	`hw_dbg
(
hw
, " Leavingáddress overflowÖromisc mode\n");

1454 
f˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

1455 
f˘æ
 &~
IXGBE_FCTRL_UPE
;

1456 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCTRL
, 
f˘æ
);

1460 
	`hw_dbg
(
hw
, "ixgbe_update_uc_addr_list_generic Complete\n");

1462 
	}
}

1476 
s32
 
	$ixgbe_mè_ve˘‹
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr
)

1478 
u32
 
ve˘‹
 = 0;

1480 
hw
->
mac
.
mc_fûãr_ty≥
) {

1482 
ve˘‹
 = ((
mc_addr
[4] >> 4Ë| (((
u16
)mc_addr[5]) << 4));

1485 
ve˘‹
 = ((
mc_addr
[4] >> 3Ë| (((
u16
)mc_addr[5]) << 5));

1488 
ve˘‹
 = ((
mc_addr
[4] >> 2Ë| (((
u16
)mc_addr[5]) << 6));

1491 
ve˘‹
 = ((
mc_addr
[4]Ë| (((
u16
)mc_addr[5]) << 8));

1494 
	`hw_dbg
(
hw
, "MC filterÅypeÖaram set incorrectly\n");

1499 
ve˘‹
 &= 0xFFF;

1500  
ve˘‹
;

1501 
	}
}

1510 
	$ixgbe_£t_mè
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr
)

1512 
u32
 
ve˘‹
;

1513 
u32
 
ve˘‹_bô
;

1514 
u32
 
ve˘‹_ªg
;

1515 
u32
 
mè_ªg
;

1517 
hw
->
addr_˘æ
.
mè_ö_u£
++;

1519 
ve˘‹
 = 
	`ixgbe_mè_ve˘‹
(
hw
, 
mc_addr
);

1520 
	`hw_dbg
(
hw
, " bô-ve˘‹ = 0x%03X\n", 
ve˘‹
);

1531 
ve˘‹_ªg
 = (
ve˘‹
 >> 5) & 0x7F;

1532 
ve˘‹_bô
 = 
ve˘‹
 & 0x1F;

1533 
mè_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_MTA
(
ve˘‹_ªg
));

1534 
mè_ªg
 |(1 << 
ve˘‹_bô
);

1535 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MTA
(
ve˘‹_ªg
), 
mè_ªg
);

1536 
	}
}

1550 
s32
 
	$ixgbe_upd©e_mc_addr_li°_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr_li°
,

1551 
u32
 
mc_addr_cou¡
, 
ixgbe_mc_addr_ôr
 
√xt
)

1553 
u32
 
i
;

1554 
u32
 
vmdq
;

1560 
hw
->
addr_˘æ
.
num_mc_addrs
 = 
mc_addr_cou¡
;

1561 
hw
->
addr_˘æ
.
mè_ö_u£
 = 0;

1564 
	`hw_dbg
(
hw
, " Clearing MTA\n");

1565 
i
 = 0; i < 
hw
->
mac
.
mc·_size
; i++)

1566 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_MTA
(
i
), 0);

1569 
i
 = 0; i < 
mc_addr_cou¡
; i++) {

1570 
	`hw_dbg
(
hw
, " AddingÅhe multicastáddresses:\n");

1571 
	`ixgbe_£t_mè
(
hw
, 
	`√xt
(hw, &
mc_addr_li°
, &
vmdq
));

1575 i‡(
hw
->
addr_˘æ
.
mè_ö_u£
 > 0)

1576 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MCSTCTRL
,

1577 
IXGBE_MCSTCTRL_MFE
 | 
hw
->
mac
.
mc_fûãr_ty≥
);

1579 
	`hw_dbg
(
hw
, "ixgbe_update_mc_addr_list_generic Complete\n");

1581 
	}
}

1589 
s32
 
	$ixgbe_íabÀ_mc_gíîic
(
ixgbe_hw
 *
hw
)

1591 
ixgbe_addr_fûãr_öfo
 *
a
 = &
hw
->
addr_˘æ
;

1593 i‡(
a
->
mè_ö_u£
 > 0)

1594 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MCSTCTRL
, 
IXGBE_MCSTCTRL_MFE
 |

1595 
hw
->
mac
.
mc_fûãr_ty≥
);

1598 
	}
}

1606 
s32
 
	$ixgbe_dißbÀ_mc_gíîic
(
ixgbe_hw
 *
hw
)

1608 
ixgbe_addr_fûãr_öfo
 *
a
 = &
hw
->
addr_˘æ
;

1610 i‡(
a
->
mè_ö_u£
 > 0)

1611 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MCSTCTRL
, hw->
mac
.
mc_fûãr_ty≥
);

1614 
	}
}

1623 
s32
 
	$ixgbe_fc_íabÀ_gíîic
(
ixgbe_hw
 *
hw
, 
s32
 
∑ckëbuf_num
)

1625 
s32
 
ªt_vÆ
 = 0;

1626 
u32
 
mÊ˙_ªg
, 
fccfg_ªg
;

1627 
u32
 
ªg
;

1628 
u32
 
rx_pba_size
;

1630 #ifde‡
CONFIG_DCB


1631 i‡(
hw
->
fc
.
ªque°ed_mode
 =
ixgbe_fc_pfc
)

1632 
out
;

1636 
ªt_vÆ
 = 
	`ixgbe_fc_aut⁄eg
(
hw
);

1637 i‡(
ªt_vÆ
)

1638 
out
;

1641 
mÊ˙_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MFLCN
);

1642 
mÊ˙_ªg
 &~(
IXGBE_MFLCN_RFCE
 | 
IXGBE_MFLCN_RPFCE
);

1644 
fccfg_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCCFG
);

1645 
fccfg_ªg
 &~(
IXGBE_FCCFG_TFCE_802_3X
 | 
IXGBE_FCCFG_TFCE_PRIORITY
);

1660 
hw
->
fc
.
cuºít_mode
) {

1661 
ixgbe_fc_n⁄e
:

1666 
ixgbe_fc_rx_∑u£
:

1675 
mÊ˙_ªg
 |
IXGBE_MFLCN_RFCE
;

1677 
ixgbe_fc_tx_∑u£
:

1682 
fccfg_ªg
 |
IXGBE_FCCFG_TFCE_802_3X
;

1684 
ixgbe_fc_fuŒ
:

1686 
mÊ˙_ªg
 |
IXGBE_MFLCN_RFCE
;

1687 
fccfg_ªg
 |
IXGBE_FCCFG_TFCE_802_3X
;

1689 #ifde‡
CONFIG_DCB


1690 
ixgbe_fc_pfc
:

1691 
out
;

1695 
	`hw_dbg
(
hw
, "Flow controlÖaram set incorrectly\n");

1696 
ªt_vÆ
 = -
IXGBE_ERR_CONFIG
;

1697 
out
;

1702 
mÊ˙_ªg
 |
IXGBE_MFLCN_DPF
;

1703 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MFLCN
, 
mÊ˙_ªg
);

1704 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCCFG
, 
fccfg_ªg
);

1706 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MTQC
);

1708 i‡(
ªg
 & 
IXGBE_MTQC_RT_ENA
) {

1709 
rx_pba_size
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(
∑ckëbuf_num
));

1712 
ªg
 = (
rx_pba_size
 >> 5) & 0xFFE0;

1713 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTL_82599
(
∑ckëbuf_num
), 
ªg
);

1715 
ªg
 = (
rx_pba_size
 >> 2) & 0xFFE0;

1716 i‡(
hw
->
fc
.
cuºít_mode
 & 
ixgbe_fc_tx_∑u£
)

1717 
ªg
 |
IXGBE_FCRTH_FCEN
;

1718 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTH_82599
(
∑ckëbuf_num
), 
ªg
);

1722 i‡(
hw
->
fc
.
cuºít_mode
 & 
ixgbe_fc_tx_∑u£
) {

1723 i‡(
hw
->
fc
.
£nd_x⁄
) {

1724 
	`IXGBE_WRITE_REG
(
hw
,

1725 
	`IXGBE_FCRTL_82599
(
∑ckëbuf_num
),

1726 (
hw
->
fc
.
low_w©î
 |

1727 
IXGBE_FCRTL_XONE
));

1729 
	`IXGBE_WRITE_REG
(
hw
,

1730 
	`IXGBE_FCRTL_82599
(
∑ckëbuf_num
),

1731 
hw
->
fc
.
low_w©î
);

1734 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTH_82599
(
∑ckëbuf_num
),

1735 (
hw
->
fc
.
high_w©î
 | 
IXGBE_FCRTH_FCEN
));

1740 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCTTV
(
∑ckëbuf_num
 / 2));

1741 i‡((
∑ckëbuf_num
 & 1) == 0)

1742 
ªg
 = (ªg & 0xFFFF0000Ë| 
hw
->
fc
.
∑u£_time
;

1744 
ªg
 = (ªg & 0x0000FFFFË| (
hw
->
fc
.
∑u£_time
 << 16);

1745 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCTTV
(
∑ckëbuf_num
 / 2), 
ªg
);

1747 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCRTV
, (hw->
fc
.
∑u£_time
 >> 1));

1749 
out
:

1750  
ªt_vÆ
;

1751 
	}
}

1760 
s32
 
	$ixgbe_fc_aut⁄eg
(
ixgbe_hw
 *
hw
)

1762 
s32
 
ªt_vÆ
 = 0;

1763 
ixgbe_lök_•ìd
 
•ìd
;

1764 
u32
 
pcs_™adv_ªg
, 
pcs_Õab_ªg
, 
lök°©
;

1765 
boﬁ
 
lök_up
;

1780 
hw
->
mac
.
›s
.
	`check_lök
(hw, &
•ìd
, &
lök_up
, 
Ál£
);

1781 
lök°©
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GLSTA
);

1783 i‡(
hw
->
fc
.
dißbÀ_fc_aut⁄eg
 ||

1784 !
hw
->
phy
.
mu…i•ìd_fibî
 ||

1785 (
•ìd
 !
IXGBE_LINK_SPEED_1GB_FULL
) ||

1786 !
lök_up
 ||

1787 ((
lök°©
 & 
IXGBE_PCS1GLSTA_AN_COMPLETE
) == 0) ||

1788 ((
lök°©
 & 
IXGBE_PCS1GLSTA_AN_TIMED_OUT
) == 1)) {

1789 
hw
->
fc
.
fc_was_aut⁄egged
 = 
Ál£
;

1790 
hw
->
fc
.
cuºít_mode
 = hw->fc.
ªque°ed_mode
;

1791 
	`hw_dbg
(
hw
, "Autoneg FC was skipped.\n");

1792 
out
;

1799 
pcs_™adv_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GANA
);

1800 
pcs_Õab_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GANLP
);

1801 i‡((
pcs_™adv_ªg
 & 
IXGBE_PCS1GANA_SYM_PAUSE
) &&

1802 (
pcs_Õab_ªg
 & 
IXGBE_PCS1GANA_SYM_PAUSE
)) {

1810 i‡(
hw
->
fc
.
ªque°ed_mode
 =
ixgbe_fc_fuŒ
) {

1811 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_fuŒ
;

1812 
	`hw_dbg
(
hw
, "Flow Control = FULL.\n");

1814 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_rx_∑u£
;

1815 
	`hw_dbg
(
hw
, "Flow Control = RX PAUSE frames only.\n");

1817 } i‡(!(
pcs_™adv_ªg
 & 
IXGBE_PCS1GANA_SYM_PAUSE
) &&

1818 (
pcs_™adv_ªg
 & 
IXGBE_PCS1GANA_ASM_PAUSE
) &&

1819 (
pcs_Õab_ªg
 & 
IXGBE_PCS1GANA_SYM_PAUSE
) &&

1820 (
pcs_Õab_ªg
 & 
IXGBE_PCS1GANA_ASM_PAUSE
)) {

1821 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_tx_∑u£
;

1822 
	`hw_dbg
(
hw
, "Flow Control = TX PAUSE frames only.\n");

1823 } i‡((
pcs_™adv_ªg
 & 
IXGBE_PCS1GANA_SYM_PAUSE
) &&

1824 (
pcs_™adv_ªg
 & 
IXGBE_PCS1GANA_ASM_PAUSE
) &&

1825 !(
pcs_Õab_ªg
 & 
IXGBE_PCS1GANA_SYM_PAUSE
) &&

1826 (
pcs_Õab_ªg
 & 
IXGBE_PCS1GANA_ASM_PAUSE
)) {

1827 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_rx_∑u£
;

1828 
	`hw_dbg
(
hw
, "Flow Control = RX PAUSE frames only.\n");

1830 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_n⁄e
;

1831 
	`hw_dbg
(
hw
, "Flow Control = NONE.\n");

1835 
hw
->
fc
.
fc_was_aut⁄egged
 = 
åue
;

1837 
out
:

1838  
ªt_vÆ
;

1839 
	}
}

1847 
s32
 
	$ixgbe_£tup_fc
(
ixgbe_hw
 *
hw
, 
s32
 
∑ckëbuf_num
)

1849 
s32
 
ªt_vÆ
 = 0;

1850 
u32
 
ªg
;

1852 #ifde‡
CONFIG_DCB


1853 i‡(
hw
->
fc
.
ªque°ed_mode
 =
ixgbe_fc_pfc
) {

1854 
hw
->
fc
.
cuºít_mode
 = hw->fc.
ªque°ed_mode
;

1855 
out
;

1861 i‡(
∑ckëbuf_num
 < 0 ||Öacketbuf_num > 7) {

1862 
	`hw_dbg
(
hw
, "InvalidÖacket bufferÇumber [%d],ÉxpectedÑange is"

1863 " 0-7\n", 
∑ckëbuf_num
);

1864 
ªt_vÆ
 = 
IXGBE_ERR_INVALID_LINK_SETTINGS
;

1865 
out
;

1872 i‡(!
hw
->
fc
.
low_w©î
 || !hw->fc.
high_w©î
 || !hw->fc.
∑u£_time
) {

1873 
	`hw_dbg
(
hw
, "Invalid water mark configuration\n");

1874 
ªt_vÆ
 = 
IXGBE_ERR_INVALID_LINK_SETTINGS
;

1875 
out
;

1882 i‡(
hw
->
fc
.
°ri˘_õì
 && hw->fc.
ªque°ed_mode
 =
ixgbe_fc_rx_∑u£
) {

1883 
	`hw_dbg
(
hw
, "ixgbe_fc_rx_pauseÇot valid in strict IEEE mode\n");

1884 
ªt_vÆ
 = 
IXGBE_ERR_INVALID_LINK_SETTINGS
;

1885 
out
;

1892 i‡(
hw
->
fc
.
ªque°ed_mode
 =
ixgbe_fc_deÁu…
)

1893 
hw
->
fc
.
ªque°ed_mode
 = 
ixgbe_fc_fuŒ
;

1900 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GANA
);

1915 
hw
->
fc
.
ªque°ed_mode
) {

1916 
ixgbe_fc_n⁄e
:

1918 
ªg
 &~(
IXGBE_PCS1GANA_SYM_PAUSE
 | 
IXGBE_PCS1GANA_ASM_PAUSE
);

1920 
ixgbe_fc_rx_∑u£
:

1929 
ªg
 |(
IXGBE_PCS1GANA_SYM_PAUSE
 | 
IXGBE_PCS1GANA_ASM_PAUSE
);

1931 
ixgbe_fc_tx_∑u£
:

1936 
ªg
 |(
IXGBE_PCS1GANA_ASM_PAUSE
);

1937 
ªg
 &~(
IXGBE_PCS1GANA_SYM_PAUSE
);

1939 
ixgbe_fc_fuŒ
:

1941 
ªg
 |(
IXGBE_PCS1GANA_SYM_PAUSE
 | 
IXGBE_PCS1GANA_ASM_PAUSE
);

1943 #ifde‡
CONFIG_DCB


1944 
ixgbe_fc_pfc
:

1945 
out
;

1949 
	`hw_dbg
(
hw
, "Flow controlÖaram set incorrectly\n");

1950 
ªt_vÆ
 = -
IXGBE_ERR_CONFIG
;

1951 
out
;

1955 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_PCS1GANA
, 
ªg
);

1956 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GLCTL
);

1959 
ªg
 |
IXGBE_PCS1GLCTL_AN_ENABLE
 | 
IXGBE_PCS1GLCTL_AN_RESTART
;

1962 i‡(
hw
->
fc
.
°ri˘_õì
)

1963 
ªg
 &~
IXGBE_PCS1GLCTL_AN_1G_TIMEOUT_EN
;

1965 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_PCS1GLCTL
, 
ªg
);

1966 
	`hw_dbg
(
hw
, "Së u∞FC; PCS1GLCTL = 0x%08X\n", 
ªg
);

1968 
out
:

1969  
ªt_vÆ
;

1970 
	}
}

1981 
s32
 
	$ixgbe_dißbÀ_pcõ_ma°î
(
ixgbe_hw
 *
hw
)

1983 
u32
 
i
;

1984 
u32
 
ªg_vÆ
;

1985 
u32
 
numbî_of_queues
;

1986 
s32
 
°©us
 = 
IXGBE_ERR_MASTER_REQUESTS_PENDING
;

1989 
numbî_of_queues
 = 
hw
->
mac
.
max_rx_queues
;

1990 
i
 = 0; i < 
numbî_of_queues
; i++) {

1991 
ªg_vÆ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXDCTL
(
i
));

1992 i‡(
ªg_vÆ
 & 
IXGBE_RXDCTL_ENABLE
) {

1993 
ªg_vÆ
 &~
IXGBE_RXDCTL_ENABLE
;

1994 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXDCTL
(
i
), 
ªg_vÆ
);

1998 
ªg_vÆ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL
);

1999 
ªg_vÆ
 |
IXGBE_CTRL_GIO_DIS
;

2000 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CTRL
, 
ªg_vÆ
);

2002 
i
 = 0; i < 
IXGBE_PCI_MASTER_DISABLE_TIMEOUT
; i++) {

2003 i‡(!(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_STATUS
Ë& 
IXGBE_STATUS_GIO
)) {

2004 
°©us
 = 0;

2007 
	`udñay
(100);

2010  
°©us
;

2011 
	}
}

2022 
s32
 
	$ixgbe_acquúe_swfw_sync
(
ixgbe_hw
 *
hw
, 
u16
 
mask
)

2024 
u32
 
gs§
;

2025 
u32
 
swmask
 = 
mask
;

2026 
u32
 
fwmask
 = 
mask
 << 5;

2027 
s32
 
timeout
 = 200;

2029 
timeout
) {

2034 i‡(
	`ixgbe_gë_ì¥om_£m≠h‹e
(
hw
))

2035  -
IXGBE_ERR_SWFW_SYNC
;

2037 
gs§
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GSSR
);

2038 i‡(!(
gs§
 & (
fwmask
 | 
swmask
)))

2045 
	`ixgbe_ªÀa£_ì¥om_£m≠h‹e
(
hw
);

2046 
	`m¶ìp
(5);

2047 
timeout
--;

2050 i‡(!
timeout
) {

2051 
	`hw_dbg
(
hw
, "Driver can'táccessÑesource, SW_FW_SYNCÅimeout.\n");

2052  -
IXGBE_ERR_SWFW_SYNC
;

2055 
gs§
 |
swmask
;

2056 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GSSR
, 
gs§
);

2058 
	`ixgbe_ªÀa£_ì¥om_£m≠h‹e
(
hw
);

2060 
	}
}

2070 
	$ixgbe_ªÀa£_swfw_sync
(
ixgbe_hw
 *
hw
, 
u16
 
mask
)

2072 
u32
 
gs§
;

2073 
u32
 
swmask
 = 
mask
;

2075 
	`ixgbe_gë_ì¥om_£m≠h‹e
(
hw
);

2077 
gs§
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GSSR
);

2078 
gs§
 &~
swmask
;

2079 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GSSR
, 
gs§
);

2081 
	`ixgbe_ªÀa£_ì¥om_£m≠h‹e
(
hw
);

2082 
	}
}

2091 
s32
 
	$ixgbe_íabÀ_rx_dma_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªgvÆ
)

2093 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCTRL
, 
ªgvÆ
);

2096 
	}
}

2103 
s32
 
	$ixgbe_blök_Àd_°¨t_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

2105 
ixgbe_lök_•ìd
 
•ìd
 = 0;

2106 
boﬁ
 
lök_up
 = 0;

2107 
u32
 
autoc_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

2108 
u32
 
Àd_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LEDCTL
);

2114 
hw
->
mac
.
›s
.
	`check_lök
(hw, &
•ìd
, &
lök_up
, 
Ál£
);

2116 i‡(!
lök_up
) {

2118 
autoc_ªg
 |
IXGBE_AUTOC_AN_RESTART
;

2119 
autoc_ªg
 |
IXGBE_AUTOC_FLU
;

2120 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, 
autoc_ªg
);

2121 
	`m¶ìp
(10);

2124 
Àd_ªg
 &~
	`IXGBE_LED_MODE_MASK
(
ödex
);

2125 
Àd_ªg
 |
	`IXGBE_LED_BLINK
(
ödex
);

2126 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_LEDCTL
, 
Àd_ªg
);

2127 
	`IXGBE_WRITE_FLUSH
(
hw
);

2130 
	}
}

2137 
s32
 
	$ixgbe_blök_Àd_°›_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
)

2139 
u32
 
autoc_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

2140 
u32
 
Àd_ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LEDCTL
);

2142 
autoc_ªg
 &~
IXGBE_AUTOC_FLU
;

2143 
autoc_ªg
 |
IXGBE_AUTOC_AN_RESTART
;

2144 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_AUTOC
, 
autoc_ªg
);

2146 
Àd_ªg
 &~
	`IXGBE_LED_MODE_MASK
(
ödex
);

2147 
Àd_ªg
 &~
	`IXGBE_LED_BLINK
(
ödex
);

2148 
Àd_ªg
 |
IXGBE_LED_LINK_ACTIVE
 << 
	`IXGBE_LED_MODE_SHIFT
(
ödex
);

2149 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_LEDCTL
, 
Àd_ªg
);

2150 
	`IXGBE_WRITE_FLUSH
(
hw
);

2153 
	}
}

	@ixgbe_common.h

28 #i‚de‡
_IXGBE_COMMON_H_


29 
	#_IXGBE_COMMON_H_


	)

31 
	~"ixgbe_ty≥.h
"

33 
s32
 
ixgbe_öô_›s_gíîic
(
ixgbe_hw
 *
hw
);

34 
s32
 
ixgbe_öô_hw_gíîic
(
ixgbe_hw
 *
hw
);

35 
s32
 
ixgbe_°¨t_hw_gíîic
(
ixgbe_hw
 *
hw
);

36 
s32
 
ixgbe_˛ór_hw_˙ås_gíîic
(
ixgbe_hw
 *
hw
);

37 
s32
 
ixgbe_ªad_pba_num_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 *
pba_num
);

38 
s32
 
ixgbe_gë_mac_addr_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 *
mac_addr
);

39 
s32
 
ixgbe_gë_bus_öfo_gíîic
(
ixgbe_hw
 *
hw
);

40 
ixgbe_£t_œn_id_mu…i_p‹t_pcõ
(
ixgbe_hw
 *
hw
);

41 
s32
 
ixgbe_°›_ad≠ãr_gíîic
(
ixgbe_hw
 *
hw
);

43 
s32
 
ixgbe_Àd_⁄_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

44 
s32
 
ixgbe_Àd_off_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

46 
s32
 
ixgbe_öô_ì¥om_∑øms_gíîic
(
ixgbe_hw
 *
hw
);

47 
s32
 
ixgbe_wrôe_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 
d©a
);

48 
s32
 
ixgbe_ªad_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
, u16 *
d©a
);

49 
s32
 
ixgbe_ªad_ì¥om_bô_b™g_gíîic
(
ixgbe_hw
 *
hw
, 
u16
 
off£t
,

50 
u16
 *
d©a
);

51 
s32
 
ixgbe_vÆid©e_ì¥om_checksum_gíîic
(
ixgbe_hw
 *
hw
,

52 
u16
 *
checksum_vÆ
);

53 
s32
 
ixgbe_upd©e_ì¥om_checksum_gíîic
(
ixgbe_hw
 *
hw
);

55 
s32
 
ixgbe_£t_ør_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
, 
u8
 *
addr
, u32 
vmdq
,

56 
u32
 
íabÀ_addr
);

57 
s32
 
ixgbe_˛ór_ør_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

58 
s32
 
ixgbe_öô_rx_addrs_gíîic
(
ixgbe_hw
 *
hw
);

59 
s32
 
ixgbe_upd©e_mc_addr_li°_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 *
mc_addr_li°
,

60 
u32
 
mc_addr_cou¡
,

61 
ixgbe_mc_addr_ôr
 
func
);

62 
s32
 
ixgbe_upd©e_uc_addr_li°_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 *
addr_li°
,

63 
u32
 
addr_cou¡
, 
ixgbe_mc_addr_ôr
 
func
);

64 
ixgbe_add_uc_addr
(
ixgbe_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
vmdq
);

65 
s32
 
ixgbe_íabÀ_mc_gíîic
(
ixgbe_hw
 *
hw
);

66 
s32
 
ixgbe_dißbÀ_mc_gíîic
(
ixgbe_hw
 *
hw
);

67 
s32
 
ixgbe_íabÀ_rx_dma_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªgvÆ
);

69 
s32
 
ixgbe_£tup_fc
(
ixgbe_hw
 *
hw
, s32 
∑ckëbuf_num
);

70 
s32
 
ixgbe_fc_íabÀ_gíîic
(
ixgbe_hw
 *
hw
, s32 
∑ckãtbuf_num
);

71 
s32
 
ixgbe_fc_aut⁄eg
(
ixgbe_hw
 *
hw
);

73 
s32
 
ixgbe_vÆid©e_mac_addr
(
u8
 *
mac_addr
);

74 
s32
 
ixgbe_acquúe_swfw_sync
(
ixgbe_hw
 *
hw
, 
u16
 
mask
);

75 
ixgbe_ªÀa£_swfw_sync
(
ixgbe_hw
 *
hw
, 
u16
 
mask
);

76 
s32
 
ixgbe_dißbÀ_pcõ_ma°î
(
ixgbe_hw
 *
hw
);

78 
s32
 
ixgbe_ªad_™Æog_ªg8_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 *
vÆ
);

79 
s32
 
ixgbe_wrôe_™Æog_ªg8_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u8
 
vÆ
);

80 
s32
 
ixgbe_blök_Àd_°¨t_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

81 
s32
 
ixgbe_blök_Àd_°›_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ödex
);

	@ixgbe_dcb.c

29 
	~"ixgbe_ty≥.h
"

30 
	~"ixgbe_dcb.h
"

31 
	~"ixgbe_dcb_82598.h
"

32 
	~"ixgbe_dcb_82599.h
"

48 
s32
 
	$ixgbe_dcb_check_c⁄fig
(
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

50 
tc_bw_Æloc
 *
p
;

51 
s32
 
ªt_vÆ
 = 0;

52 
u8
 
i
, 
j
, 
bw
 = 0, 
bw_id
;

53 
u8
 
bw_sum
[2][
MAX_BW_GROUP
];

54 
boﬁ
 
lök_°ri˘
[2][
MAX_BW_GROUP
];

56 
	`mem£t
(
bw_sum
, 0, (bw_sum));

57 
	`mem£t
(
lök_°ri˘
, 0, (link_strict));

60 
i
 = 0; i < 2; i++) {

62 
j
 = 0; j < 
MAX_TRAFFIC_CLASS
; j++) {

63 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
j
].
∑th
[
i
];

65 
bw
 = 
p
->
bwg_≥r˚¡
;

66 
bw_id
 = 
p
->
bwg_id
;

68 i‡(
bw_id
 >
MAX_BW_GROUP
) {

69 
ªt_vÆ
 = 
DCB_ERR_CONFIG
;

70 
îr_c⁄fig
;

72 i‡(
p
->
¥io_ty≥
 =
¥io_lök
) {

73 
lök_°ri˘
[
i
][
bw_id
] = 
åue
;

75 i‡(
bw
) {

76 
ªt_vÆ
 = 
DCB_ERR_LS_BW_NONZERO
;

77 
îr_c⁄fig
;

79 } i‡(!
bw
) {

84 
ªt_vÆ
 = 
DCB_ERR_TC_BW_ZERO
;

85 
îr_c⁄fig
;

87 
bw_sum
[
i
][
bw_id
] +
bw
;

90 
bw
 = 0;

93 
j
 = 0; j < 
MAX_BW_GROUP
; j++) {

94 
bw
 +
dcb_c⁄fig
->
bw_≥r˚¡age
[
i
][
j
];

100 i‡(
lök_°ri˘
[
i
][
j
]) {

101 i‡(
bw_sum
[
i
][
j
]) {

106 
ªt_vÆ
 = 
DCB_ERR_LS_BWG_NONZERO
;

107 
îr_c⁄fig
;

109 } i‡(
bw_sum
[
i
][
j
] !
BW_PERCENT
 &&

110 
bw_sum
[
i
][
j
] != 0) {

111 
ªt_vÆ
 = 
DCB_ERR_TC_BW
;

112 
îr_c⁄fig
;

116 i‡(
bw
 !
BW_PERCENT
) {

117 
ªt_vÆ
 = 
DCB_ERR_BW_GROUP
;

118 
îr_c⁄fig
;

122  
DCB_SUCCESS
;

124 
îr_c⁄fig
:

125 
	`hw_dbg
(
hw
, "DCBÉrror code %d while checking %s settings.\n",

126 
ªt_vÆ
, (
j
 =
DCB_TX_CONFIG
) ? "Tx" : "Rx");

128  
ªt_vÆ
;

129 
	}
}

140 
s32
 
	$ixgbe_dcb_ˇlcuœã_tc_¸edôs
(
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
,

141 
u8
 
dúe˘i⁄
)

143 
tc_bw_Æloc
 *
p
;

144 
s32
 
ªt_vÆ
 = 0;

146 
u32
 
¸edô_ªfûl
 = 0;

147 
u32
 
¸edô_max
 = 0;

148 
u16
 
lök_≥r˚¡age
 = 0;

149 
u8
 
bw_≥r˚¡
 = 0;

150 
u8
 
i
;

152 i‡(
dcb_c⁄fig
 =
NULL
) {

153 
ªt_vÆ
 = 
DCB_ERR_CONFIG
;

154 
out
;

158 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

159 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
∑th
[
dúe˘i⁄
];

160 
bw_≥r˚¡
 = 
dcb_c⁄fig
->
bw_≥r˚¡age
[
dúe˘i⁄
][
p
->
bwg_id
];

162 
lök_≥r˚¡age
 = 
p
->
bwg_≥r˚¡
;

164 
lök_≥r˚¡age
 = (lök_≥r˚¡agê* 
bw_≥r˚¡
) / 100;

165 i‡(
p
->
bwg_≥r˚¡
 > 0 && 
lök_≥r˚¡age
 == 0)

166 
lök_≥r˚¡age
 = 1;

169 
p
->
lök_≥r˚¡
 = (
u8
)
lök_≥r˚¡age
;

172 
¸edô_ªfûl
 = 
lök_≥r˚¡age
 * 
MINIMUM_CREDIT_REFILL
;

173 
p
->
d©a_¸edôs_ªfûl
 = (
u16
)
¸edô_ªfûl
;

176 
¸edô_max
 = (
lök_≥r˚¡age
 * 
MAX_CREDIT
) / 100;

183 i‡(
¸edô_max
 && (¸edô_max < 
MINIMUM_CREDIT_FOR_JUMBO
))

184 
¸edô_max
 = 
MINIMUM_CREDIT_FOR_JUMBO
;

186 i‡(
dúe˘i⁄
 =
DCB_TX_CONFIG
) {

193 i‡(
¸edô_max
 && (¸edô_max < 
MINIMUM_CREDIT_FOR_TSO
))

194 
¸edô_max
 = 
MINIMUM_CREDIT_FOR_TSO
;

196 
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
desc_¸edôs_max
 =

197 (
u16
)
¸edô_max
;

200 
p
->
d©a_¸edôs_max
 = (
u16
)
¸edô_max
;

203 
out
:

204  
ªt_vÆ
;

205 
	}
}

215 
s32
 
	$ixgbe_dcb_gë_tc_°©s
(
ixgbe_hw
 *
hw
, 
ixgbe_hw_°©s
 *
°©s
,

216 
u8
 
tc_cou¡
)

218 
s32
 
ªt
 = 0;

219 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

220 
ªt
 = 
	`ixgbe_dcb_gë_tc_°©s_82598
(
hw
, 
°©s
, 
tc_cou¡
);

221 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

222 
ªt
 = 
	`ixgbe_dcb_gë_tc_°©s_82599
(
hw
, 
°©s
, 
tc_cou¡
);

223  
ªt
;

224 
	}
}

234 
s32
 
	$ixgbe_dcb_gë_pfc_°©s
(
ixgbe_hw
 *
hw
, 
ixgbe_hw_°©s
 *
°©s
,

235 
u8
 
tc_cou¡
)

237 
s32
 
ªt
 = 0;

238 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

239 
ªt
 = 
	`ixgbe_dcb_gë_pfc_°©s_82598
(
hw
, 
°©s
, 
tc_cou¡
);

240 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

241 
ªt
 = 
	`ixgbe_dcb_gë_pfc_°©s_82599
(
hw
, 
°©s
, 
tc_cou¡
);

242  
ªt
;

243 
	}
}

252 
s32
 
	$ixgbe_dcb_c⁄fig_rx_¨bôî
(
ixgbe_hw
 *
hw
,

253 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

255 
s32
 
ªt
 = 0;

256 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

257 
ªt
 = 
	`ixgbe_dcb_c⁄fig_rx_¨bôî_82598
(
hw
, 
dcb_c⁄fig
);

258 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

259 
ªt
 = 
	`ixgbe_dcb_c⁄fig_rx_¨bôî_82599
(
hw
, 
dcb_c⁄fig
);

260  
ªt
;

261 
	}
}

270 
s32
 
	$ixgbe_dcb_c⁄fig_tx_desc_¨bôî
(
ixgbe_hw
 *
hw
,

271 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

273 
s32
 
ªt
 = 0;

274 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

275 
ªt
 = 
	`ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82598
(
hw
, 
dcb_c⁄fig
);

276 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

277 
ªt
 = 
	`ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82599
(
hw
, 
dcb_c⁄fig
);

278  
ªt
;

279 
	}
}

288 
s32
 
	$ixgbe_dcb_c⁄fig_tx_d©a_¨bôî
(
ixgbe_hw
 *
hw
,

289 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

291 
s32
 
ªt
 = 0;

292 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

293 
ªt
 = 
	`ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82598
(
hw
, 
dcb_c⁄fig
);

294 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

295 
ªt
 = 
	`ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82599
(
hw
, 
dcb_c⁄fig
);

296  
ªt
;

297 
	}
}

306 
s32
 
	$ixgbe_dcb_c⁄fig_pfc
(
ixgbe_hw
 *
hw
,

307 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

309 
s32
 
ªt
 = 0;

310 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

311 
ªt
 = 
	`ixgbe_dcb_c⁄fig_pfc_82598
(
hw
, 
dcb_c⁄fig
);

312 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

313 
ªt
 = 
	`ixgbe_dcb_c⁄fig_pfc_82599
(
hw
, 
dcb_c⁄fig
);

314  
ªt
;

315 
	}
}

324 
s32
 
	$ixgbe_dcb_c⁄fig_tc_°©s
(
ixgbe_hw
 *
hw
)

326 
s32
 
ªt
 = 0;

327 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

328 
ªt
 = 
	`ixgbe_dcb_c⁄fig_tc_°©s_82598
(
hw
);

329 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

330 
ªt
 = 
	`ixgbe_dcb_c⁄fig_tc_°©s_82599
(
hw
);

331  
ªt
;

332 
	}
}

341 
s32
 
	$ixgbe_dcb_hw_c⁄fig
(
ixgbe_hw
 *
hw
,

342 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

344 
s32
 
ªt
 = 0;

345 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

346 
ªt
 = 
	`ixgbe_dcb_hw_c⁄fig_82598
(
hw
, 
dcb_c⁄fig
);

347 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

348 
ªt
 = 
	`ixgbe_dcb_hw_c⁄fig_82599
(
hw
, 
dcb_c⁄fig
);

349  
ªt
;

350 
	}
}

	@ixgbe_dcb.h

28 #i‚de‡
_DCB_CONFIG_H_


29 
	#_DCB_CONFIG_H_


	)

31 
	~"ixgbe_ty≥.h
"

35 
	#IXGBE_MAX_PACKET_BUFFERS
 8

	)

36 
	#MAX_USER_PRIORITY
 8

	)

37 
	#MAX_TRAFFIC_CLASS
 8

	)

38 
	#MAX_BW_GROUP
 8

	)

39 
	#BW_PERCENT
 100

	)

41 
	#DCB_TX_CONFIG
 0

	)

42 
	#DCB_RX_CONFIG
 1

	)

45 
	#DCB_SUCCESS
 0

	)

46 
	#DCB_ERR_CONFIG
 -1

	)

47 
	#DCB_ERR_PARAM
 -2

	)

51 
	#DCB_ERR_BW_GROUP
 -3

	)

53 
	#DCB_ERR_TC_BW
 -4

	)

55 
	#DCB_ERR_LS_GS
 -5

	)

57 
	#DCB_ERR_LS_BW_NONZERO
 -6

	)

59 
	#DCB_ERR_LS_BWG_NONZERO
 -7

	)

61 
	#DCB_ERR_TC_BW_ZERO
 -8

	)

63 
	#DCB_NOT_IMPLEMENTED
 0x7FFFFFFF

	)

65 
	sdcb_pfc_tc_debug
 {

66 
u8
 
	mtc
;

67 
u8
 
	m∑u£_°©us
;

68 
u64
 
	m∑u£_qu™è
;

71 
	e°ri˘_¥io_ty≥
 {

72 
	m¥io_n⁄e
 = 0,

73 
	m¥io_group
,

74 
	m¥io_lök


78 
	#IXGBE_DCB_PG_SUPPORT
 0x00000001

	)

79 
	#IXGBE_DCB_PFC_SUPPORT
 0x00000002

	)

80 
	#IXGBE_DCB_BCN_SUPPORT
 0x00000004

	)

81 
	#IXGBE_DCB_UP2TC_SUPPORT
 0x00000008

	)

82 
	#IXGBE_DCB_GSP_SUPPORT
 0x00000010

	)

84 
	#IXGBE_DCB_8_TC_SUPPORT
 0x80

	)

86 
	sdcb_suµ‹t
 {

88 
u32
 
	mˇ∑bûôõs
;

93 
u8
 
	måaffic_˛as£s
;

94 
u8
 
	mpfc_åaffic_˛as£s
;

98 
	stc_bw_Æloc
 {

99 
u8
 
	mbwg_id
;

100 
u8
 
	mbwg_≥r˚¡
;

101 
u8
 
	mlök_≥r˚¡
;

102 
u8
 
	mup_to_tc_bôm≠
;

103 
u16
 
	md©a_¸edôs_ªfûl
;

104 
u16
 
	md©a_¸edôs_max
;

106 
°ri˘_¥io_ty≥
 
	m¥io_ty≥
;

109 
	edcb_pfc_ty≥
 {

110 
	mpfc_dißbÀd
 = 0,

111 
	mpfc_íabÀd_fuŒ
,

112 
	mpfc_íabÀd_tx
,

113 
	mpfc_íabÀd_rx


117 
	stc_c⁄figuøti⁄
 {

118 
tc_bw_Æloc
 
	m∑th
[2];

119 
dcb_pfc_ty≥
 
	mdcb_pfc
;

121 
u16
 
	mdesc_¸edôs_max
;

122 
u8
 
	mtc
;

125 
	edcb_rx_pba_cfg
 {

126 
	mpba_equÆ
,

127 
	mpba_80_48


130 
	sdcb_num_tcs
 {

131 
u8
 
	mpg_tcs
;

132 
u8
 
	mpfc_tcs
;

135 
	sixgbe_dcb_c⁄fig
 {

136 
tc_c⁄figuøti⁄
 
	mtc_c⁄fig
[
MAX_TRAFFIC_CLASS
];

137 
dcb_suµ‹t
 
	msuµ‹t
;

138 
dcb_num_tcs
 
	mnum_tcs
;

139 
u8
 
	mbw_≥r˚¡age
[2][
MAX_BW_GROUP
];

140 
boﬁ
 
	mpfc_mode_íabÀ
;

141 
boﬁ
 
	mround_robö_íabÀ
;

143 
dcb_rx_pba_cfg
 
	mrx_pba_cfg
;

145 
u32
 
	mdcb_cfg_vîsi⁄
;

146 
u32
 
	mlök_•ìd
;

152 
s32
 
ixgbe_dcb_check_c⁄fig
(
ixgbe_dcb_c⁄fig
 *
c⁄fig
);

155 
s32
 
ixgbe_dcb_ˇlcuœã_tc_¸edôs
(
ixgbe_dcb_c⁄fig
 *
c⁄fig
,

156 
u8
 
dúe˘i⁄
);

159 
s32
 
ixgbe_dcb_c⁄fig_pfc
(
ixgbe_hw
 *
hw
,

160 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

161 
s32
 
ixgbe_dcb_gë_pfc_°©s
(
ixgbe_hw
 *
hw
, 
ixgbe_hw_°©s
 *
°©s
,

162 
u8
 
tc_cou¡
);

165 
s32
 
ixgbe_dcb_c⁄fig_tc_°©s
(
ixgbe_hw
 *);

166 
s32
 
ixgbe_dcb_gë_tc_°©s
(
ixgbe_hw
 *
hw
, 
ixgbe_hw_°©s
 *
°©s
,

167 
u8
 
tc_cou¡
);

170 
s32
 
ixgbe_dcb_c⁄fig_tx_desc_¨bôî
(
ixgbe_hw
 *
hw
,

171 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

172 
s32
 
ixgbe_dcb_c⁄fig_tx_d©a_¨bôî
(
ixgbe_hw
 *
hw
,

173 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

174 
s32
 
ixgbe_dcb_c⁄fig_rx_¨bôî
(
ixgbe_hw
 *
hw
,

175 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

178 
s32
 
ixgbe_dcb_hw_c⁄fig
(
ixgbe_hw
 *
hw
, 
ixgbe_dcb_c⁄fig
 *
c⁄fig
);

182 
	#MAX_CREDIT_REFILL
 511

	)

183 
	#MINIMUM_CREDIT_REFILL
 5

	)

184 
	#MINIMUM_CREDIT_FOR_JUMBO
 145

	)

186 
	#DCB_MAX_TSO_SIZE
 32*1024

	)

188 
	#MINIMUM_CREDIT_FOR_TSO
 (
DCB_MAX_TSO_SIZE
/64 + 1Ë

	)

190 
	#MAX_CREDIT
 4095

	)

	@ixgbe_dcb_82598.c

29 
	~"ixgbe_ty≥.h
"

30 
	~"ixgbe_dcb.h
"

31 
	~"ixgbe_dcb_82598.h
"

41 
s32
 
	$ixgbe_dcb_gë_tc_°©s_82598
(
ixgbe_hw
 *
hw
,

42 
ixgbe_hw_°©s
 *
°©s
,

43 
u8
 
tc_cou¡
)

45 
tc
;

47 i‡(
tc_cou¡
 > 
MAX_TRAFFIC_CLASS
)

48  
DCB_ERR_PARAM
;

50 
tc
 = 0;Å¯< 
tc_cou¡
;Åc++) {

52 
°©s
->
q±c
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPTC
(tc));

54 
°©s
->
qbtc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBTC
(tc));

56 
°©s
->
q¥c
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPRC
(tc));

58 
°©s
->
qbrc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBRC
(tc));

64 
tc_°©s_¨øy
[
up
]->
ö_ovîÊow_disˇrds
 = 0;

65 
tc_°©s_¨øy
[
up
]->
out_ovîÊow_disˇrds
 = 0;

70 
	}
}

80 
s32
 
	$ixgbe_dcb_gë_pfc_°©s_82598
(
ixgbe_hw
 *
hw
,

81 
ixgbe_hw_°©s
 *
°©s
,

82 
u8
 
tc_cou¡
)

84 
tc
;

86 i‡(
tc_cou¡
 > 
MAX_TRAFFIC_CLASS
)

87  
DCB_ERR_PARAM
;

88 
tc
 = 0;Å¯< 
tc_cou¡
;Åc++) {

90 
°©s
->
pxof·xc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXOFFTXC
(tc));

92 
°©s
->
pxof‰xc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXOFFRXC
(tc));

96 
	}
}

105 
s32
 
	$ixgbe_dcb_c⁄fig_∑ckë_buf„rs_82598
(
ixgbe_hw
 *
hw
,

106 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

108 
s32
 
ªt_vÆ
 = 0;

109 
u32
 
vÆue
 = 
IXGBE_RXPBSIZE_64KB
;

110 
u8
 
i
 = 0;

113 
dcb_c⁄fig
->
rx_pba_cfg
) {

114 
pba_80_48
:

116 
vÆue
 = 
IXGBE_RXPBSIZE_80KB
;

117 ; 
i
 < 4; i++)

118 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(
i
), 
vÆue
);

120 
vÆue
 = 
IXGBE_RXPBSIZE_48KB
;

122 
pba_equÆ
:

124 ; 
i
 < 
IXGBE_MAX_PACKET_BUFFERS
; i++)

125 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(
i
), 
vÆue
);

128 
i
 = 0; i < 
IXGBE_MAX_PACKET_BUFFERS
; i++) {

129 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXPBSIZE
(
i
),

130 
IXGBE_TXPBSIZE_40KB
);

135  
ªt_vÆ
;

136 
	}
}

145 
s32
 
	$ixgbe_dcb_c⁄fig_rx_¨bôî_82598
(
ixgbe_hw
 *
hw
,

146 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

148 
tc_bw_Æloc
 *
p
;

149 
u32
 
ªg
 = 0;

150 
u32
 
¸edô_ªfûl
 = 0;

151 
u32
 
¸edô_max
 = 0;

152 
u8
 
i
 = 0;

154 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RUPPBMR
Ë| 
IXGBE_RUPPBMR_MQA
;

155 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RUPPBMR
, 
ªg
);

157 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RMCS
);

159 
ªg
 &~
IXGBE_RMCS_ARBDIS
;

161 
ªg
 |
IXGBE_RMCS_RRM
;

163 
ªg
 |
IXGBE_RMCS_DFP
;

165 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RMCS
, 
ªg
);

168 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

169 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
∑th
[
DCB_RX_CONFIG
];

170 
¸edô_ªfûl
 = 
p
->
d©a_¸edôs_ªfûl
;

171 
¸edô_max
 = 
p
->
d©a_¸edôs_max
;

173 
ªg
 = 
¸edô_ªfûl
 | (
¸edô_max
 << 
IXGBE_RT2CR_MCL_SHIFT
);

175 i‡(
p
->
¥io_ty≥
 =
¥io_lök
)

176 
ªg
 |
IXGBE_RT2CR_LSP
;

178 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RT2CR
(
i
), 
ªg
);

181 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RDRXCTL
);

182 
ªg
 |
IXGBE_RDRXCTL_RDMTS_1_2
;

183 
ªg
 |
IXGBE_RDRXCTL_MPBEN
;

184 
ªg
 |
IXGBE_RDRXCTL_MCEN
;

185 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RDRXCTL
, 
ªg
);

187 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCTRL
);

189 
ªg
 &~
IXGBE_RXCTRL_DMBYPS
;

190 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCTRL
, 
ªg
);

193 
	}
}

202 
s32
 
	$ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82598
(
ixgbe_hw
 *
hw
,

203 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

205 
tc_bw_Æloc
 *
p
;

206 
u32
 
ªg
, 
max_¸edôs
;

207 
u8
 
i
;

209 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DPMCS
);

212 
ªg
 &~
IXGBE_DPMCS_ARBDIS
;

213 i‡(!(
dcb_c⁄fig
->
round_robö_íabÀ
)) {

215 
ªg
 |(
IXGBE_DPMCS_TDPAC
 | 
IXGBE_DPMCS_TRM
);

217 
ªg
 |
IXGBE_DPMCS_TSOEF
;

219 
ªg
 |(0x4 << 
IXGBE_DPMCS_MTSOS_SHIFT
);

221 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_DPMCS
, 
ªg
);

224 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

225 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
∑th
[
DCB_TX_CONFIG
];

226 
max_¸edôs
 = 
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
desc_¸edôs_max
;

227 
ªg
 = 
max_¸edôs
 << 
IXGBE_TDTQ2TCCR_MCL_SHIFT
;

228 
ªg
 |
p
->
d©a_¸edôs_ªfûl
;

229 
ªg
 |(
u32
)(
p
->
bwg_id
Ë<< 
IXGBE_TDTQ2TCCR_BWG_SHIFT
;

231 i‡(
p
->
¥io_ty≥
 =
¥io_group
)

232 
ªg
 |
IXGBE_TDTQ2TCCR_GSP
;

234 i‡(
p
->
¥io_ty≥
 =
¥io_lök
)

235 
ªg
 |
IXGBE_TDTQ2TCCR_LSP
;

237 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TDTQ2TCCR
(
i
), 
ªg
);

241 
	}
}

250 
s32
 
	$ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82598
(
ixgbe_hw
 *
hw
,

251 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

253 
tc_bw_Æloc
 *
p
;

254 
u32
 
ªg
;

255 
u8
 
i
;

257 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PDPMCS
);

259 
ªg
 &~
IXGBE_PDPMCS_ARBDIS
;

261 
ªg
 |(
IXGBE_PDPMCS_TPPAC
 | 
IXGBE_PDPMCS_TRM
);

263 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_PDPMCS
, 
ªg
);

266 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

267 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
∑th
[
DCB_TX_CONFIG
];

268 
ªg
 = 
p
->
d©a_¸edôs_ªfûl
;

269 
ªg
 |(
u32
)(
p
->
d©a_¸edôs_max
Ë<< 
IXGBE_TDPT2TCCR_MCL_SHIFT
;

270 
ªg
 |(
u32
)(
p
->
bwg_id
Ë<< 
IXGBE_TDPT2TCCR_BWG_SHIFT
;

272 i‡(
p
->
¥io_ty≥
 =
¥io_group
)

273 
ªg
 |
IXGBE_TDPT2TCCR_GSP
;

275 i‡(
p
->
¥io_ty≥
 =
¥io_lök
)

276 
ªg
 |
IXGBE_TDPT2TCCR_LSP
;

278 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TDPT2TCCR
(
i
), 
ªg
);

282 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DTXCTL
);

283 
ªg
 |
IXGBE_DTXCTL_ENDBUBD
;

284 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_DTXCTL
, 
ªg
);

287 
	}
}

296 
s32
 
	$ixgbe_dcb_c⁄fig_pfc_82598
(
ixgbe_hw
 *
hw
,

297 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

299 
u32
 
ªg
, 
rx_pba_size
;

300 
u8
 
i
;

302 i‡(!
dcb_c⁄fig
->
pfc_mode_íabÀ
)

303 
out
;

306 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RMCS
);

307 
ªg
 &~
IXGBE_RMCS_TFCE_802_3X
;

309 
ªg
 |
IXGBE_RMCS_TFCE_PRIORITY
;

310 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RMCS
, 
ªg
);

313 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

314 
ªg
 &~
IXGBE_FCTRL_RFCE
;

315 
ªg
 |
IXGBE_FCTRL_RPFCE
;

316 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCTRL
, 
ªg
);

322 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

323 i‡(
dcb_c⁄fig
->
rx_pba_cfg
 =
pba_equÆ
) {

324 
rx_pba_size
 = 
IXGBE_RXPBSIZE_64KB
;

326 
rx_pba_size
 = (
i
 < 4Ë? 
IXGBE_RXPBSIZE_80KB


327 : 
IXGBE_RXPBSIZE_48KB
;

330 
ªg
 = ((
rx_pba_size
 >> 5) & 0xFFF0);

331 i‡(
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_tx
 ||

332 
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_fuŒ
)

333 
ªg
 |
IXGBE_FCRTL_XONE
;

335 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTL
(
i
), 
ªg
);

337 
ªg
 = ((
rx_pba_size
 >> 2) & 0xFFF0);

338 i‡(
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_tx
 ||

339 
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_fuŒ
)

340 
ªg
 |
IXGBE_FCRTH_FCEN
;

342 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTH
(
i
), 
ªg
);

346 
i
 = 0; i < (
MAX_TRAFFIC_CLASS
 >> 1); i++)

347 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCTTV
(
i
), 0x68006800);

350 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCRTV
, 0x3400);

352 
out
:

354 
	}
}

363 
s32
 
	$ixgbe_dcb_c⁄fig_tc_°©s_82598
(
ixgbe_hw
 *
hw
)

365 
u32
 
ªg
 = 0;

366 
u8
 
i
 = 0;

367 
u8
 
j
 = 0;

370 
i
 = 0, 
j
 = 0; i < 15 && j < 8; i = i + 2, j++) {

371 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RQSMR
(
i
));

372 
ªg
 |((0x1010101Ë* 
j
);

373 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RQSMR
(
i
), 
ªg
);

374 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RQSMR
(
i
 + 1));

375 
ªg
 |((0x1010101Ë* 
j
);

376 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RQSMR
(
i
 + 1), 
ªg
);

379 
i
 = 0; i < 8; i++) {

380 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TQSMR
(
i
));

381 
ªg
 |((0x1010101Ë* 
i
);

382 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TQSMR
(
i
), 
ªg
);

386 
	}
}

395 
s32
 
	$ixgbe_dcb_hw_c⁄fig_82598
(
ixgbe_hw
 *
hw
,

396 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

399 
	`ixgbe_dcb_c⁄fig_∑ckë_buf„rs_82598
(
hw
, 
dcb_c⁄fig
);

400 
	`ixgbe_dcb_c⁄fig_rx_¨bôî_82598
(
hw
, 
dcb_c⁄fig
);

401 
	`ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82598
(
hw
, 
dcb_c⁄fig
);

402 
	`ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82598
(
hw
, 
dcb_c⁄fig
);

403 
	`ixgbe_dcb_c⁄fig_pfc_82598
(
hw
, 
dcb_c⁄fig
);

404 
	`ixgbe_dcb_c⁄fig_tc_°©s_82598
(
hw
);

408 
	}
}

	@ixgbe_dcb_82598.h

28 #i‚de‡
_DCB_82598_CONFIG_H_


29 
	#_DCB_82598_CONFIG_H_


	)

33 
	#IXGBE_DPMCS_MTSOS_SHIFT
 16

	)

34 
	#IXGBE_DPMCS_TDPAC
 0x00000001

	)

36 
	#IXGBE_DPMCS_TRM
 0x00000010

	)

37 
	#IXGBE_DPMCS_ARBDIS
 0x00000040

	)

38 
	#IXGBE_DPMCS_TSOEF
 0x00080000

	)

40 
	#IXGBE_RUPPBMR_MQA
 0x80000000

	)

42 
	#IXGBE_RT2CR_MCL_SHIFT
 12

	)

43 
	#IXGBE_RT2CR_LSP
 0x80000000

	)

45 
	#IXGBE_RDRXCTL_MPBEN
 0x00000010

	)

47 
	#IXGBE_RDRXCTL_MCEN
 0x00000040

	)

50 
	#IXGBE_TDTQ2TCCR_MCL_SHIFT
 12

	)

51 
	#IXGBE_TDTQ2TCCR_BWG_SHIFT
 9

	)

52 
	#IXGBE_TDTQ2TCCR_GSP
 0x40000000

	)

53 
	#IXGBE_TDTQ2TCCR_LSP
 0x80000000

	)

55 
	#IXGBE_TDPT2TCCR_MCL_SHIFT
 12

	)

56 
	#IXGBE_TDPT2TCCR_BWG_SHIFT
 9

	)

57 
	#IXGBE_TDPT2TCCR_GSP
 0x40000000

	)

58 
	#IXGBE_TDPT2TCCR_LSP
 0x80000000

	)

60 
	#IXGBE_PDPMCS_TPPAC
 0x00000020

	)

62 
	#IXGBE_PDPMCS_ARBDIS
 0x00000040

	)

63 
	#IXGBE_PDPMCS_TRM
 0x00000100

	)

65 
	#IXGBE_DTXCTL_ENDBUBD
 0x00000004

	)

67 
	#IXGBE_TXPBSIZE_40KB
 0x0000A000

	)

68 
	#IXGBE_RXPBSIZE_48KB
 0x0000C000

	)

69 
	#IXGBE_RXPBSIZE_64KB
 0x00010000

	)

70 
	#IXGBE_RXPBSIZE_80KB
 0x00014000

	)

75 
s32
 
ixgbe_dcb_c⁄fig_pfc_82598
(
ixgbe_hw
 *
hw
,

76 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

77 
s32
 
ixgbe_dcb_gë_pfc_°©s_82598
(
ixgbe_hw
 *
hw
,

78 
ixgbe_hw_°©s
 *
°©s
,

79 
u8
 
tc_cou¡
);

82 
s32
 
ixgbe_dcb_c⁄fig_tc_°©s_82598
(
ixgbe_hw
 *
hw
);

83 
s32
 
ixgbe_dcb_gë_tc_°©s_82598
(
ixgbe_hw
 *
hw
,

84 
ixgbe_hw_°©s
 *
°©s
,

85 
u8
 
tc_cou¡
);

88 
s32
 
ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82598
(
ixgbe_hw
 *
hw
,

89 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

90 
s32
 
ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82598
(
ixgbe_hw
 *
hw
,

91 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

92 
s32
 
ixgbe_dcb_c⁄fig_rx_¨bôî_82598
(
ixgbe_hw
 *
hw
,

93 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

96 
s32
 
ixgbe_dcb_hw_c⁄fig_82598
(
ixgbe_hw
 *
hw
,

97 
ixgbe_dcb_c⁄fig
 *
c⁄fig
);

	@ixgbe_dcb_82599.c

29 
	~"ixgbe_ty≥.h
"

30 
	~"ixgbe_dcb.h
"

31 
	~"ixgbe_dcb_82599.h
"

41 
s32
 
	$ixgbe_dcb_gë_tc_°©s_82599
(
ixgbe_hw
 *
hw
,

42 
ixgbe_hw_°©s
 *
°©s
,

43 
u8
 
tc_cou¡
)

45 
tc
;

47 i‡(
tc_cou¡
 > 
MAX_TRAFFIC_CLASS
)

48  
DCB_ERR_PARAM
;

50 
tc
 = 0;Å¯< 
tc_cou¡
;Åc++) {

52 
°©s
->
q±c
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPTC
(tc));

54 
°©s
->
qbtc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBTC
(tc));

56 
°©s
->
q¥c
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPRC
(tc));

58 
°©s
->
qbrc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBRC
(tc));

64 
tc_°©s_¨øy
[
up
]->
ö_ovîÊow_disˇrds
 = 0;

65 
tc_°©s_¨øy
[
up
]->
out_ovîÊow_disˇrds
 = 0;

70 
	}
}

80 
s32
 
	$ixgbe_dcb_gë_pfc_°©s_82599
(
ixgbe_hw
 *
hw
,

81 
ixgbe_hw_°©s
 *
°©s
,

82 
u8
 
tc_cou¡
)

84 
tc
;

86 i‡(
tc_cou¡
 > 
MAX_TRAFFIC_CLASS
)

87  
DCB_ERR_PARAM
;

88 
tc
 = 0;Å¯< 
tc_cou¡
;Åc++) {

90 
°©s
->
pxof·xc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXOFFTXC
(tc));

92 
°©s
->
pxof‰xc
[
tc
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PXOFFRXCNT
(tc));

96 
	}
}

105 
s32
 
	$ixgbe_dcb_c⁄fig_∑ckë_buf„rs_82599
(
ixgbe_hw
 *
hw
,

106 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

108 
s32
 
ªt_vÆ
 = 0;

109 
u32
 
vÆue
 = 
IXGBE_RXPBSIZE_64KB
;

110 
u8
 
i
 = 0;

113 
dcb_c⁄fig
->
rx_pba_cfg
) {

114 
pba_80_48
:

116 
vÆue
 = 
IXGBE_RXPBSIZE_80KB
;

117 ; 
i
 < 4; i++)

118 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(
i
), 
vÆue
);

120 
vÆue
 = 
IXGBE_RXPBSIZE_48KB
;

122 
pba_equÆ
:

124 ; 
i
 < 
IXGBE_MAX_PACKET_BUFFERS
; i++)

125 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(
i
), 
vÆue
);

128 
i
 = 0; i < 
IXGBE_MAX_PACKET_BUFFERS
; i++) {

129 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXPBSIZE
(
i
),

130 
IXGBE_TXPBSIZE_20KB
);

131 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXPBTHRESH
(
i
),

132 
IXGBE_TXPBTHRESH_DCB
);

137  
ªt_vÆ
;

138 
	}
}

147 
s32
 
	$ixgbe_dcb_c⁄fig_rx_¨bôî_82599
(
ixgbe_hw
 *
hw
,

148 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

150 
tc_bw_Æloc
 *
p
;

151 
u32
 
ªg
 = 0;

152 
u32
 
¸edô_ªfûl
 = 0;

153 
u32
 
¸edô_max
 = 0;

154 
u8
 
i
 = 0;

160 
ªg
 = 
IXGBE_RTRPCS_RRM
 | 
IXGBE_RTRPCS_RAC
 | 
IXGBE_RTRPCS_ARBDIS
;

161 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTRPCS
, 
ªg
);

164 
ªg
 = 0;

165 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++)

166 
ªg
 |(
i
 << (ò* 
IXGBE_RTRUP2TC_UP_SHIFT
));

167 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTRUP2TC
, 
ªg
);

170 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

171 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
∑th
[
DCB_RX_CONFIG
];

173 
¸edô_ªfûl
 = 
p
->
d©a_¸edôs_ªfûl
;

174 
¸edô_max
 = 
p
->
d©a_¸edôs_max
;

175 
ªg
 = 
¸edô_ªfûl
 | (
¸edô_max
 << 
IXGBE_RTRPT4C_MCL_SHIFT
);

177 
ªg
 |(
u32
)(
p
->
bwg_id
Ë<< 
IXGBE_RTRPT4C_BWG_SHIFT
;

179 i‡(
p
->
¥io_ty≥
 =
¥io_lök
)

180 
ªg
 |
IXGBE_RTRPT4C_LSP
;

182 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RTRPT4C
(
i
), 
ªg
);

189 
ªg
 = 
IXGBE_RTRPCS_RRM
 | 
IXGBE_RTRPCS_RAC
;

190 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTRPCS
, 
ªg
);

193 
	}
}

202 
s32
 
	$ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82599
(
ixgbe_hw
 *
hw
,

203 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

205 
tc_bw_Æloc
 *
p
;

206 
u32
 
ªg
, 
max_¸edôs
;

207 
u8
 
i
;

210 
i
 = 0; i < 128; i++) {

211 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDQSEL
, 
i
);

212 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDT1C
, 0);

216 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

217 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
∑th
[
DCB_TX_CONFIG
];

218 
max_¸edôs
 = 
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
desc_¸edôs_max
;

219 
ªg
 = 
max_¸edôs
 << 
IXGBE_RTTDT2C_MCL_SHIFT
;

220 
ªg
 |
p
->
d©a_¸edôs_ªfûl
;

221 
ªg
 |(
u32
)(
p
->
bwg_id
Ë<< 
IXGBE_RTTDT2C_BWG_SHIFT
;

223 i‡(
p
->
¥io_ty≥
 =
¥io_group
)

224 
ªg
 |
IXGBE_RTTDT2C_GSP
;

226 i‡(
p
->
¥io_ty≥
 =
¥io_lök
)

227 
ªg
 |
IXGBE_RTTDT2C_LSP
;

229 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RTTDT2C
(
i
), 
ªg
);

236 
ªg
 = 
IXGBE_RTTDCS_TDPAC
 | 
IXGBE_RTTDCS_TDRM
;

237 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDCS
, 
ªg
);

240 
	}
}

249 
s32
 
	$ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82599
(
ixgbe_hw
 *
hw
,

250 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

252 
tc_bw_Æloc
 *
p
;

253 
u32
 
ªg
;

254 
u8
 
i
;

260 
ªg
 = 
IXGBE_RTTPCS_TPPAC
 | 
IXGBE_RTTPCS_TPRM
 |

261 (
IXGBE_RTTPCS_ARBD_DCB
 << 
IXGBE_RTTPCS_ARBD_SHIFT
) |

262 
IXGBE_RTTPCS_ARBDIS
;

263 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTPCS
, 
ªg
);

266 
ªg
 = 0;

267 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++)

268 
ªg
 |(
i
 << (ò* 
IXGBE_RTTUP2TC_UP_SHIFT
));

269 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTUP2TC
, 
ªg
);

272 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

273 
p
 = &
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
∑th
[
DCB_TX_CONFIG
];

274 
ªg
 = 
p
->
d©a_¸edôs_ªfûl
;

275 
ªg
 |(
u32
)(
p
->
d©a_¸edôs_max
Ë<< 
IXGBE_RTTPT2C_MCL_SHIFT
;

276 
ªg
 |(
u32
)(
p
->
bwg_id
Ë<< 
IXGBE_RTTPT2C_BWG_SHIFT
;

278 i‡(
p
->
¥io_ty≥
 =
¥io_group
)

279 
ªg
 |
IXGBE_RTTPT2C_GSP
;

281 i‡(
p
->
¥io_ty≥
 =
¥io_lök
)

282 
ªg
 |
IXGBE_RTTPT2C_LSP
;

284 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RTTPT2C
(
i
), 
ªg
);

291 
ªg
 = 
IXGBE_RTTPCS_TPPAC
 | 
IXGBE_RTTPCS_TPRM
 |

292 (
IXGBE_RTTPCS_ARBD_DCB
 << 
IXGBE_RTTPCS_ARBD_SHIFT
);

293 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTPCS
, 
ªg
);

296 
	}
}

305 
s32
 
	$ixgbe_dcb_c⁄fig_pfc_82599
(
ixgbe_hw
 *
hw
,

306 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

308 
u32
 
i
, 
ªg
, 
rx_pba_size
;

311 i‡(!
dcb_c⁄fig
->
pfc_mode_íabÀ
) {

312 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++)

313 
hw
->
mac
.
›s
.
	`fc_íabÀ
(hw, 
i
);

314 
out
;

318 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++) {

319 i‡(
dcb_c⁄fig
->
rx_pba_cfg
 =
pba_equÆ
)

320 
rx_pba_size
 = 
IXGBE_RXPBSIZE_64KB
;

322 
rx_pba_size
 = (
i
 < 4Ë? 
IXGBE_RXPBSIZE_80KB


323 : 
IXGBE_RXPBSIZE_48KB
;

325 
ªg
 = ((
rx_pba_size
 >> 5) & 0xFFE0);

326 i‡(
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_fuŒ
 ||

327 
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_tx
)

328 
ªg
 |
IXGBE_FCRTL_XONE
;

329 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTL_82599
(
i
), 
ªg
);

331 
ªg
 = ((
rx_pba_size
 >> 2) & 0xFFE0);

332 i‡(
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_fuŒ
 ||

333 
dcb_c⁄fig
->
tc_c⁄fig
[
i
].
dcb_pfc
 =
pfc_íabÀd_tx
)

334 
ªg
 |
IXGBE_FCRTH_FCEN
;

335 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCRTH_82599
(
i
), 
ªg
);

339 
ªg
 = 
hw
->
fc
.
∑u£_time
 | (hw->fc.pause_time << 16);

340 
i
 = 0; i < (
MAX_TRAFFIC_CLASS
 / 2); i++)

341 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_FCTTV
(
i
), 
ªg
);

344 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCRTV
, hw->
fc
.
∑u£_time
 / 2);

347 
ªg
 = 
IXGBE_FCCFG_TFCE_PRIORITY
;

348 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCCFG
, 
ªg
);

355 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MFLCN
);

356 
ªg
 &~
IXGBE_MFLCN_RFCE
;

357 
ªg
 |
IXGBE_MFLCN_RPFCE
;

358 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MFLCN
, 
ªg
);

359 
out
:

361 
	}
}

370 
s32
 
	$ixgbe_dcb_c⁄fig_tc_°©s_82599
(
ixgbe_hw
 *
hw
)

372 
u32
 
ªg
 = 0;

373 
u8
 
i
 = 0;

381 
i
 = 0; i < 32; i++) {

382 
ªg
 = 0x01010101 * (
i
 / 4);

383 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RQSMR
(
i
), 
ªg
);

393 
i
 = 0; i < 32; i++) {

394 i‡(
i
 < 8)

395 
ªg
 = 0x00000000;

396 i‡(
i
 < 16)

397 
ªg
 = 0x01010101;

398 i‡(
i
 < 20)

399 
ªg
 = 0x02020202;

400 i‡(
i
 < 24)

401 
ªg
 = 0x03030303;

402 i‡(
i
 < 26)

403 
ªg
 = 0x04040404;

404 i‡(
i
 < 28)

405 
ªg
 = 0x05050505;

406 i‡(
i
 < 30)

407 
ªg
 = 0x06060606;

409 
ªg
 = 0x07070707;

410 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TQSM
(
i
), 
ªg
);

414 
	}
}

423 
s32
 
	$ixgbe_dcb_c⁄fig_82599
(
ixgbe_hw
 *
hw
)

425 
u32
 
ªg
;

426 
u32
 
q
;

429 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RTTDCS
);

430 
ªg
 |
IXGBE_RTTDCS_ARBDIS
;

431 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDCS
, 
ªg
);

434 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MRQC
);

435 
ªg
 & 
IXGBE_MRQC_MRQE_MASK
) {

437 
IXGBE_MRQC_RT4TCEN
:

439 
ªg
 = (ªg & ~
IXGBE_MRQC_MRQE_MASK
Ë| 
IXGBE_MRQC_RT8TCEN
;

441 
IXGBE_MRQC_RSSEN
:

442 
IXGBE_MRQC_RTRSS4TCEN
:

444 
ªg
 = (ªg & ~
IXGBE_MRQC_MRQE_MASK
Ë| 
IXGBE_MRQC_RTRSS8TCEN
;

448 
ªg
 = (ªg & ~
IXGBE_MRQC_MRQE_MASK
Ë| 
IXGBE_MRQC_RT8TCEN
;

450 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MRQC
, 
ªg
);

453 
ªg
 = 
IXGBE_MTQC_RT_ENA
 | 
IXGBE_MTQC_8TC_8TQ
;

454 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MTQC
, 
ªg
);

457 
q
=0; q < 128; q++) {

458 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_QDE
, 
q
 << 
IXGBE_QDE_IDX_SHIFT
);

462 
ªg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RTTDCS
);

463 
ªg
 &~
IXGBE_RTTDCS_ARBDIS
;

464 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDCS
, 
ªg
);

467 
	}
}

476 
s32
 
	$ixgbe_dcb_hw_c⁄fig_82599
(
ixgbe_hw
 *
hw
,

477 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
)

479 
u32
 
∑p
 = 0;

481 
	`ixgbe_dcb_c⁄fig_∑ckë_buf„rs_82599
(
hw
, 
dcb_c⁄fig
);

482 
	`ixgbe_dcb_c⁄fig_82599
(
hw
);

483 
	`ixgbe_dcb_c⁄fig_rx_¨bôî_82599
(
hw
, 
dcb_c⁄fig
);

484 
	`ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82599
(
hw
, 
dcb_c⁄fig
);

485 
	`ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82599
(
hw
, 
dcb_c⁄fig
);

486 
	`ixgbe_dcb_c⁄fig_pfc_82599
(
hw
, 
dcb_c⁄fig
);

487 
	`ixgbe_dcb_c⁄fig_tc_°©s_82599
(
hw
);

493 i‡(
dcb_c⁄fig
->
lök_•ìd
 > 0 && dcb_config->link_speed <= 9) {

494 
∑p
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PAP
);

495 
∑p
 |(
dcb_c⁄fig
->
lök_•ìd
 << 16);

496 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_PAP
, 
∑p
);

500 
	}
}

	@ixgbe_dcb_82599.h

28 #i‚de‡
_DCB_82599_CONFIG_H_


29 
	#_DCB_82599_CONFIG_H_


	)

32 
	#IXGBE_RTTDCS_TDPAC
 0x00000001

	)

35 
	#IXGBE_RTTDCS_VMPAC
 0x00000002

	)

38 
	#IXGBE_RTTDCS_TDRM
 0x00000010

	)

39 
	#IXGBE_RTTDCS_BDPM
 0x00400000

	)

40 
	#IXGBE_RTTDCS_BPBFSM
 0x00800000

	)

43 
	#IXGBE_RTTDCS_SPEED_CHG
 0x80000000

	)

46 
	#IXGBE_RTRUP2TC_UP_SHIFT
 3

	)

48 
	#IXGBE_RTTUP2TC_UP_SHIFT
 3

	)

50 
	#IXGBE_RTRPT4C_MCL_SHIFT
 12

	)

51 
	#IXGBE_RTRPT4C_BWG_SHIFT
 9

	)

52 
	#IXGBE_RTRPT4C_GSP
 0x40000000

	)

53 
	#IXGBE_RTRPT4C_LSP
 0x80000000

	)

55 
	#IXGBE_RDRXCTL_MPBEN
 0x00000010

	)

58 
	#IXGBE_RDRXCTL_MCEN
 0x00000040

	)

63 
	#IXGBE_RTRPCS_RRM
 0x00000002

	)

65 
	#IXGBE_RTRPCS_RAC
 0x00000004

	)

66 
	#IXGBE_RTRPCS_ARBDIS
 0x00000040

	)

69 
	#IXGBE_RTTDT2C_MCL_SHIFT
 12

	)

70 
	#IXGBE_RTTDT2C_BWG_SHIFT
 9

	)

71 
	#IXGBE_RTTDT2C_GSP
 0x40000000

	)

72 
	#IXGBE_RTTDT2C_LSP
 0x80000000

	)

74 
	#IXGBE_RTTPT2C_MCL_SHIFT
 12

	)

75 
	#IXGBE_RTTPT2C_BWG_SHIFT
 9

	)

76 
	#IXGBE_RTTPT2C_GSP
 0x40000000

	)

77 
	#IXGBE_RTTPT2C_LSP
 0x80000000

	)

80 
	#IXGBE_RTTPCS_TPPAC
 0x00000020

	)

83 
	#IXGBE_RTTPCS_ARBDIS
 0x00000040

	)

84 
	#IXGBE_RTTPCS_TPRM
 0x00000100

	)

85 
	#IXGBE_RTTPCS_ARBD_SHIFT
 22

	)

86 
	#IXGBE_RTTPCS_ARBD_DCB
 0x4

	)

88 
	#IXGBE_TXPBSIZE_20KB
 0x00005000

	)

89 
	#IXGBE_TXPBSIZE_40KB
 0x0000A000

	)

90 
	#IXGBE_RXPBSIZE_48KB
 0x0000C000

	)

91 
	#IXGBE_RXPBSIZE_64KB
 0x00010000

	)

92 
	#IXGBE_RXPBSIZE_80KB
 0x00014000

	)

93 
	#IXGBE_RXPBSIZE_128KB
 0x00020000

	)

95 
	#IXGBE_TXPBTHRESH_DCB
 0xA

	)

101 
s32
 
ixgbe_dcb_c⁄fig_pfc_82599
(
ixgbe_hw
 *
hw
,

102 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

103 
s32
 
ixgbe_dcb_gë_pfc_°©s_82599
(
ixgbe_hw
 *
hw
,

104 
ixgbe_hw_°©s
 *
°©s
,

105 
u8
 
tc_cou¡
);

108 
s32
 
ixgbe_dcb_c⁄fig_tc_°©s_82599
(
ixgbe_hw
 *
hw
);

109 
s32
 
ixgbe_dcb_gë_tc_°©s_82599
(
ixgbe_hw
 *
hw
,

110 
ixgbe_hw_°©s
 *
°©s
,

111 
u8
 
tc_cou¡
);

114 
s32
 
ixgbe_dcb_c⁄fig_tx_desc_¨bôî_82599
(
ixgbe_hw
 *
hw
,

115 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

116 
s32
 
ixgbe_dcb_c⁄fig_tx_d©a_¨bôî_82599
(
ixgbe_hw
 *
hw
,

117 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

118 
s32
 
ixgbe_dcb_c⁄fig_rx_¨bôî_82599
(
ixgbe_hw
 *
hw
,

119 
ixgbe_dcb_c⁄fig
 *
dcb_c⁄fig
);

122 
s32
 
ixgbe_dcb_hw_c⁄fig_82599
(
ixgbe_hw
 *
hw
,

123 
ixgbe_dcb_c⁄fig
 *
c⁄fig
);

	@ixgbe_dcb_nl.c

28 
	~"ixgbe.h
"

30 #ifde‡
CONFIG_DCB


31 
	~<löux/dcb∆.h
>

32 
	~"ixgbe_dcb_82598.h
"

33 
	~"ixgbe_dcb_82599.h
"

35 
	~<löux/√éök.h
>

36 
	~<löux/gíëlök.h
>

37 
	~<√t/gíëlök.h
>

38 
	~<löux/√tdevi˚.h
>

42 
	#BIT_DCB_MODE
 0x01

	)

43 
	#BIT_PFC
 0x02

	)

44 
	#BIT_PG_RX
 0x04

	)

45 
	#BIT_PG_TX
 0x08

	)

46 
	#BIT_RESETLINK
 0x40

	)

47 
	#BIT_LINKSPEED
 0x80

	)

50 
	#DCB_HW_CHG_RST
 0

	)

51 
	#DCB_NO_HW_CHG
 1

	)

52 
	#DCB_HW_CHG
 2

	)

54 #i‚de‡
CONFIG_DCB


57 
	mDCB_C_UNDEFINED
,

58 
	mDCB_C_GSTATE
,

59 
	mDCB_C_SSTATE
,

60 
	mDCB_C_PG_STATS
,

61 
	mDCB_C_PGTX_GCFG
,

62 
	mDCB_C_PGTX_SCFG
,

63 
	mDCB_C_PGRX_GCFG
,

64 
	mDCB_C_PGRX_SCFG
,

65 
	mDCB_C_PFC_GCFG
,

66 
	mDCB_C_PFC_SCFG
,

67 
	mDCB_C_PFC_STATS
,

68 
	mDCB_C_GLINK_SPD
,

69 
	mDCB_C_SLINK_SPD
,

70 
	mDCB_C_SET_ALL
,

71 
	mDCB_C_GPERM_HWADDR
,

72 
	m__DCB_C_ENUM_MAX
,

75 
	#IXGBE_DCB_C_MAX
 (
__DCB_C_ENUM_MAX
 - 1)

	)

79 
	mDCB_A_UNDEFINED
 = 0,

80 
	mDCB_A_IFNAME
,

81 
	mDCB_A_STATE
,

82 
	mDCB_A_PFC_STATS
,

83 
	mDCB_A_PFC_CFG
,

84 
	mDCB_A_PG_STATS
,

85 
	mDCB_A_PG_CFG
,

86 
	mDCB_A_LINK_SPD
,

87 
	mDCB_A_SET_ALL
,

88 
	mDCB_A_PERM_HWADDR
,

89 
	m__DCB_A_ENUM_MAX
,

92 
	#IXGBE_DCB_A_MAX
 (
__DCB_A_ENUM_MAX
 - 1)

	)

96 
	mPERM_HW_A_UNDEFINED
,

97 
	mPERM_HW_A_0
,

98 
	mPERM_HW_A_1
,

99 
	mPERM_HW_A_2
,

100 
	mPERM_HW_A_3
,

101 
	mPERM_HW_A_4
,

102 
	mPERM_HW_A_5
,

103 
	mPERM_HW_A_ALL
,

104 
	m__PERM_HW_A_ENUM_MAX
,

107 
	#IXGBE_DCB_PERM_HW_A_MAX
 (
__PERM_HW_A_ENUM_MAX
 - 1)

	)

111 
	mPFC_A_UP_UNDEFINED
,

112 
	mPFC_A_UP_0
,

113 
	mPFC_A_UP_1
,

114 
	mPFC_A_UP_2
,

115 
	mPFC_A_UP_3
,

116 
	mPFC_A_UP_4
,

117 
	mPFC_A_UP_5
,

118 
	mPFC_A_UP_6
,

119 
	mPFC_A_UP_7
,

120 
	mPFC_A_UP_MAX
,

121 
	mPFC_A_UP_ALL
,

122 
	m__PFC_A_UP_ENUM_MAX
,

125 
	#IXGBE_DCB_PFC_A_UP_MAX
 (
__PFC_A_UP_ENUM_MAX
 - 1)

	)

131 
	mPG_A_UNDEFINED
,

132 
	mPG_A_TC_0
,

133 
	mPG_A_TC_1
,

134 
	mPG_A_TC_2
,

135 
	mPG_A_TC_3
,

136 
	mPG_A_TC_4
,

137 
	mPG_A_TC_5
,

138 
	mPG_A_TC_6
,

139 
	mPG_A_TC_7
,

140 
	mPG_A_TC_MAX
,

141 
	mPG_A_TC_ALL
,

142 
	mPG_A_BWG_0
,

143 
	mPG_A_BWG_1
,

144 
	mPG_A_BWG_2
,

145 
	mPG_A_BWG_3
,

146 
	mPG_A_BWG_4
,

147 
	mPG_A_BWG_5
,

148 
	mPG_A_BWG_6
,

149 
	mPG_A_BWG_7
,

150 
	mPG_A_BWG_MAX
,

151 
	mPG_A_BWG_ALL
,

152 
	m__PG_A_ENUM_MAX
,

155 
	#IXGBE_DCB_PG_A_MAX
 (
__PG_A_ENUM_MAX
 - 1)

	)

158 
	mTC_A_PARAM_UNDEFINED
,

159 
	mTC_A_PARAM_STRICT_PRIO
,

160 
	mTC_A_PARAM_BW_GROUP_ID
,

161 
	mTC_A_PARAM_BW_PCT_IN_GROUP
,

162 
	mTC_A_PARAM_UP_MAPPING
,

163 
	mTC_A_PARAM_MAX
,

164 
	mTC_A_PARAM_ALL
,

165 
	m__TC_A_PARAM_ENUM_MAX
,

168 
	#IXGBE_DCB_TC_A_PARAM_MAX
 (
__TC_A_PARAM_ENUM_MAX
 - 1)

	)

170 
	#DCB_PROTO_VERSION
 0x1

	)

171 
	#is_pci_devi˚
(
dev
Ë((dev)->
bus
 =&
pci_bus_ty≥
)

	)

173 
gíl_Ámûy
 
	gdcb_Ámûy
 = {

174 .
id
 = 
GENL_ID_GENERATE
,

175 .
	ghdrsize
 = 0,

176 .
	g«me
 = "IXGBE_DCB",

177 .
	gvîsi⁄
 = 
DCB_PROTO_VERSION
,

178 .
	gmax©å
 = 
IXGBE_DCB_A_MAX
,

182 
∆a_pﬁicy
 
	gdcb_gíl_pﬁicy
[
IXGBE_DCB_A_MAX
 + 1] = {

183 [
DCB_A_IFNAME
] = {.
ty≥
 = 
NLA_STRING
, .
	gÀn
 = 
IFNAMSIZ
 - 1},

184 [
DCB_A_STATE
] = {.
ty≥
 = 
NLA_U8
},

185 [
DCB_A_PG_CFG
] = {.
ty≥
 = 
NLA_NESTED
},

186 [
DCB_A_PFC_CFG
] = {.
ty≥
 = 
NLA_NESTED
},

187 [
DCB_A_PFC_STATS
] = {.
ty≥
 = 
NLA_NESTED
},

188 [
DCB_A_PG_STATS
] = {.
ty≥
 = 
NLA_NESTED
},

189 [
DCB_A_LINK_SPD
] = {.
ty≥
 = 
NLA_U8
},

190 [
DCB_A_SET_ALL
] = {.
ty≥
 = 
NLA_U8
},

191 [
DCB_A_PERM_HWADDR
] = {.
ty≥
 = 
NLA_NESTED
},

195 
∆a_pﬁicy
 
	gdcb_≥rm_hwaddr_√°
[
IXGBE_DCB_PERM_HW_A_MAX
 + 1] = {

196 [
PERM_HW_A_0
] = {.
ty≥
 = 
NLA_U8
},

197 [
PERM_HW_A_1
] = {.
ty≥
 = 
NLA_U8
},

198 [
PERM_HW_A_2
] = {.
ty≥
 = 
NLA_U8
},

199 [
PERM_HW_A_3
] = {.
ty≥
 = 
NLA_U8
},

200 [
PERM_HW_A_4
] = {.
ty≥
 = 
NLA_U8
},

201 [
PERM_HW_A_5
] = {.
ty≥
 = 
NLA_U8
},

202 [
PERM_HW_A_ALL
] = {.
ty≥
 = 
NLA_FLAG
},

206 
∆a_pﬁicy
 
	gdcb_pfc_up_√°
[
IXGBE_DCB_PFC_A_UP_MAX
 + 1] = {

207 [
PFC_A_UP_0
] = {.
ty≥
 = 
NLA_U8
},

208 [
PFC_A_UP_1
] = {.
ty≥
 = 
NLA_U8
},

209 [
PFC_A_UP_2
] = {.
ty≥
 = 
NLA_U8
},

210 [
PFC_A_UP_3
] = {.
ty≥
 = 
NLA_U8
},

211 [
PFC_A_UP_4
] = {.
ty≥
 = 
NLA_U8
},

212 [
PFC_A_UP_5
] = {.
ty≥
 = 
NLA_U8
},

213 [
PFC_A_UP_6
] = {.
ty≥
 = 
NLA_U8
},

214 [
PFC_A_UP_7
] = {.
ty≥
 = 
NLA_U8
},

215 [
PFC_A_UP_ALL
] = {.
ty≥
 = 
NLA_FLAG
},

219 
∆a_pﬁicy
 
	gdcb_pg_√°
[
IXGBE_DCB_PG_A_MAX
 + 1] = {

220 [
PG_A_TC_0
] = {.
ty≥
 = 
NLA_NESTED
},

221 [
PG_A_TC_1
] = {.
ty≥
 = 
NLA_NESTED
},

222 [
PG_A_TC_2
] = {.
ty≥
 = 
NLA_NESTED
},

223 [
PG_A_TC_3
] = {.
ty≥
 = 
NLA_NESTED
},

224 [
PG_A_TC_4
] = {.
ty≥
 = 
NLA_NESTED
},

225 [
PG_A_TC_5
] = {.
ty≥
 = 
NLA_NESTED
},

226 [
PG_A_TC_6
] = {.
ty≥
 = 
NLA_NESTED
},

227 [
PG_A_TC_7
] = {.
ty≥
 = 
NLA_NESTED
},

228 [
PG_A_TC_ALL
] = {.
ty≥
 = 
NLA_NESTED
},

229 [
PG_A_BWG_0
] = {.
ty≥
 = 
NLA_U8
},

230 [
PG_A_BWG_1
] = {.
ty≥
 = 
NLA_U8
},

231 [
PG_A_BWG_2
] = {.
ty≥
 = 
NLA_U8
},

232 [
PG_A_BWG_3
] = {.
ty≥
 = 
NLA_U8
},

233 [
PG_A_BWG_4
] = {.
ty≥
 = 
NLA_U8
},

234 [
PG_A_BWG_5
] = {.
ty≥
 = 
NLA_U8
},

235 [
PG_A_BWG_6
] = {.
ty≥
 = 
NLA_U8
},

236 [
PG_A_BWG_7
] = {.
ty≥
 = 
NLA_U8
},

237 [
PG_A_BWG_ALL
]{.
ty≥
 = 
NLA_FLAG
},

241 
∆a_pﬁicy
 
	gdcb_tc_∑øm_√°
[
IXGBE_DCB_TC_A_PARAM_MAX
 + 1] = {

242 [
TC_A_PARAM_STRICT_PRIO
] = {.
ty≥
 = 
NLA_U8
},

243 [
TC_A_PARAM_BW_GROUP_ID
] = {.
ty≥
 = 
NLA_U8
},

244 [
TC_A_PARAM_BW_PCT_IN_GROUP
] = {.
ty≥
 = 
NLA_U8
},

245 [
TC_A_PARAM_UP_MAPPING
] = {.
ty≥
 = 
NLA_U8
},

246 [
TC_A_PARAM_ALL
] = {.
ty≥
 = 
NLA_FLAG
},

249 
	$ixgbe_dcb_check_ad≠ãr
(
√t_devi˚
 *
√tdev
)

251 
devi˚
 *
busdev
;

252 
pci_dev
 *
pcidev
;

254 
busdev
 = 
√tdev
->
dev
.
∑ª¡
;

255 i‡(!
busdev
)

256  -
EINVAL
;

258 i‡(!
	`is_pci_devi˚
(
busdev
))

259  -
EINVAL
;

261 
pcidev
 = 
	`to_pci_dev
(
busdev
);

262 i‡(!
pcidev
)

263  -
EINVAL
;

265 i‡(
	`ixgbe_is_ixgbe
(
pcidev
))

268  -
EINVAL
;

269 
	}
}

272 #ifde‡
CONFIG_DCB


273 
	$ixgbe_c›y_dcb_cfg
(
ixgbe_dcb_c⁄fig
 *
§c_dcb_cfg
,

274 
ixgbe_dcb_c⁄fig
 *
d°_dcb_cfg
, 
tc_max
)

276 
tc_c⁄figuøti⁄
 *
§c_tc_cfg
 = 
NULL
;

277 
tc_c⁄figuøti⁄
 *
d°_tc_cfg
 = 
NULL
;

278 
i
;

280 i‡(!
§c_dcb_cfg
 || !
d°_dcb_cfg
)

281  -
EINVAL
;

283 
i
 = 
DCB_PG_ATTR_TC_0
; i < 
tc_max
 + DCB_PG_ATTR_TC_0; i++) {

284 
§c_tc_cfg
 = &
§c_dcb_cfg
->
tc_c⁄fig
[
i
 - 
DCB_PG_ATTR_TC_0
];

285 
d°_tc_cfg
 = &
d°_dcb_cfg
->
tc_c⁄fig
[
i
 - 
DCB_PG_ATTR_TC_0
];

287 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
¥io_ty≥
 =

288 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
¥io_ty≥
;

290 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_id
 =

291 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_id
;

293 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_≥r˚¡
 =

294 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_≥r˚¡
;

296 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
up_to_tc_bôm≠
 =

297 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
up_to_tc_bôm≠
;

299 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
¥io_ty≥
 =

300 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
¥io_ty≥
;

302 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_id
 =

303 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_id
;

305 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_≥r˚¡
 =

306 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_≥r˚¡
;

308 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
up_to_tc_bôm≠
 =

309 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
up_to_tc_bôm≠
;

312 
i
 = 
DCB_PG_ATTR_BW_ID_0
; i < 
DCB_PG_ATTR_BW_ID_MAX
; i++) {

313 
d°_dcb_cfg
->
bw_≥r˚¡age
[
DCB_TX_CONFIG
]

314 [
i
-
DCB_PG_ATTR_BW_ID_0
] = 
§c_dcb_cfg
->
bw_≥r˚¡age


315 [
DCB_TX_CONFIG
][
i
-
DCB_PG_ATTR_BW_ID_0
];

316 
d°_dcb_cfg
->
bw_≥r˚¡age
[
DCB_RX_CONFIG
]

317 [
i
-
DCB_PG_ATTR_BW_ID_0
] = 
§c_dcb_cfg
->
bw_≥r˚¡age


318 [
DCB_RX_CONFIG
][
i
-
DCB_PG_ATTR_BW_ID_0
];

321 
i
 = 
DCB_PFC_UP_ATTR_0
; i < 
DCB_PFC_UP_ATTR_MAX
; i++) {

322 
d°_dcb_cfg
->
tc_c⁄fig
[
i
 - 
DCB_PFC_UP_ATTR_0
].
dcb_pfc
 =

323 
§c_dcb_cfg
->
tc_c⁄fig
[
i
 - 
DCB_PFC_UP_ATTR_0
].
dcb_pfc
;

325 
d°_dcb_cfg
->
pfc_mode_íabÀ
 = 
§c_dcb_cfg
->pfc_mode_enable;

328 
	}
}

330 
	$ixgbe_c›y_dcb_cfg
(
ixgbe_dcb_c⁄fig
 *
§c_dcb_cfg
,

331 
ixgbe_dcb_c⁄fig
 *
d°_dcb_cfg
, 
tc_max
)

333 
tc_c⁄figuøti⁄
 *
§c_tc_cfg
 = 
NULL
;

334 
tc_c⁄figuøti⁄
 *
d°_tc_cfg
 = 
NULL
;

335 
i
;

337 i‡(!
§c_dcb_cfg
 || !
d°_dcb_cfg
)

338  -
EINVAL
;

340 
d°_dcb_cfg
->
lök_•ìd
 = 
§c_dcb_cfg
->link_speed;

342 
i
 = 
PG_A_TC_0
; i < 
tc_max
 + PG_A_TC_0; i++) {

343 
§c_tc_cfg
 = &
§c_dcb_cfg
->
tc_c⁄fig
[
i
 - 
PG_A_TC_0
];

344 
d°_tc_cfg
 = &
d°_dcb_cfg
->
tc_c⁄fig
[
i
 - 
PG_A_TC_0
];

346 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
¥io_ty≥
 =

347 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
¥io_ty≥
;

349 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_id
 =

350 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_id
;

352 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_≥r˚¡
 =

353 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
bwg_≥r˚¡
;

355 
d°_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
up_to_tc_bôm≠
 =

356 
§c_tc_cfg
->
∑th
[
DCB_TX_CONFIG
].
up_to_tc_bôm≠
;

358 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
¥io_ty≥
 =

359 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
¥io_ty≥
;

361 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_id
 =

362 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_id
;

364 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_≥r˚¡
 =

365 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
bwg_≥r˚¡
;

367 
d°_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
up_to_tc_bôm≠
 =

368 
§c_tc_cfg
->
∑th
[
DCB_RX_CONFIG
].
up_to_tc_bôm≠
;

371 
i
 = 
PG_A_BWG_0
; i < 
PG_A_BWG_MAX
; i++) {

372 
d°_dcb_cfg
->
bw_≥r˚¡age
[
DCB_TX_CONFIG
][
i
 - 
PG_A_BWG_0
] =

373 
§c_dcb_cfg
->
bw_≥r˚¡age
[
DCB_TX_CONFIG
][
i
 - 
PG_A_BWG_0
];

374 
d°_dcb_cfg
->
bw_≥r˚¡age
[
DCB_RX_CONFIG
][
i
 - 
PG_A_BWG_0
] =

375 
§c_dcb_cfg
->
bw_≥r˚¡age
[
DCB_RX_CONFIG
][
i
 - 
PG_A_BWG_0
];

378 
i
 = 
PFC_A_UP_0
; i < 
PFC_A_UP_MAX
; i++) {

379 
d°_dcb_cfg
->
tc_c⁄fig
[
i
 - 
PFC_A_UP_0
].
dcb_pfc
 =

380 
§c_dcb_cfg
->
tc_c⁄fig
[
i
 - 
PFC_A_UP_0
].
dcb_pfc
;

384 
	}
}

386 
	$ixgbe_∆_ª∂y
(
u8
 
vÆue
, u8 
cmd
, u8 
©å
, 
gíl_öfo
 *
öfo
)

388 
sk_buff
 *
dcb_skb
 = 
NULL
;

389 *
d©a
;

390 
ªt
;

392 
dcb_skb
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

393 i‡(!
dcb_skb
)

394  -
EINVAL
;

396 
d©a
 = 
	`gílmsg_put_ª∂y
(
dcb_skb
, 
öfo
, &
dcb_Ámûy
, 0, 
cmd
);

397 i‡(!
d©a
)

398 
îr
;

400 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
©å
, 
vÆue
);

401 i‡(
ªt
)

402 
îr
;

405 
	`gílmsg_íd
(
dcb_skb
, 
d©a
);

406 
ªt
 = 
	`gílmsg_ª∂y
(
dcb_skb
, 
öfo
);

407 i‡(
ªt
)

408 
îr
;

412 
îr
:

413 
	`k‰ì
(
dcb_skb
);

414  -
EINVAL
;

415 
	}
}

418 #ifde‡
CONFIG_DCB


419 
u8
 
	$ixgbe_dcb∆_gë_°©e
(
√t_devi˚
 *
√tdev
)

421 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

423  !!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
);

424 
	}
}

426 
u8
 
	$ixgbe_dcb∆_£t_°©e
(
√t_devi˚
 *
√tdev
, 
u8
 
°©e
)

428 
u8
 
îr
 = 0;

429 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

431 i‡(
°©e
 > 0) {

433 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
)

434 
out
;

436 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
)) {

437 
	`DPRINTK
(
DRV
, 
ERR
, "Enable failed,Çeeds MSI-X\n");

438 
îr
 = 1;

439 
out
;

442 i‡(
	`√tif_ru¬ög
(
√tdev
))

443 #ifde‡
HAVE_NET_DEVICE_OPS


444 
√tdev
->
√tdev_›s
->
	`ndo_°›
(netdev);

446 
√tdev
->
	`°›
(netdev);

448 
	`ixgbe_˛ór_öãºu±_scheme
(
ad≠ãr
);

449 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

450 
ad≠ãr
->
œ°_lfc_mode
 =ád≠ãr->
hw
.
fc
.
cuºít_mode
;

451 
ad≠ãr
->
hw
.
fc
.
ªque°ed_mode
 = 
ixgbe_fc_n⁄e
;

453 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_RSS_ENABLED
;

454 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

455 
	`DPRINTK
(
DRV
, 
INFO
, "DCBÉnabled, "

457 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

458 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

460 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCB_ENABLED
;

461 
	`ixgbe_öô_öãºu±_scheme
(
ad≠ãr
);

462 i‡(
	`√tif_ru¬ög
(
√tdev
))

463 #ifde‡
HAVE_NET_DEVICE_OPS


464 
√tdev
->
√tdev_›s
->
	`ndo_›í
(netdev);

466 
√tdev
->
	`›í
(netdev);

470 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

471 i‡(
	`√tif_ru¬ög
(
√tdev
))

472 #ifde‡
HAVE_NET_DEVICE_OPS


473 
√tdev
->
√tdev_›s
->
	`ndo_°›
(netdev);

475 
√tdev
->
	`°›
(netdev);

477 
	`ixgbe_˛ór_öãºu±_scheme
(
ad≠ãr
);

478 
ad≠ãr
->
hw
.
fc
.
ªque°ed_mode
 =ád≠ãr->
œ°_lfc_mode
;

479 
ad≠ãr
->
ãmp_dcb_cfg
.
pfc_mode_íabÀ
 = 
Ál£
;

480 
ad≠ãr
->
dcb_cfg
.
pfc_mode_íabÀ
 = 
Ál£
;

481 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_DCB_ENABLED
;

482 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_RSS_ENABLED
;

483 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

484 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

485 
	`ixgbe_öô_öãºu±_scheme
(
ad≠ãr
);

486 i‡(
	`√tif_ru¬ög
(
√tdev
))

487 #ifde‡
HAVE_NET_DEVICE_OPS


488 
√tdev
->
√tdev_›s
->
	`ndo_›í
(netdev);

490 
√tdev
->
	`›í
(netdev);

494 
out
:

495  
îr
;

496 
	}
}

498 
	$ixgbe_dcb_g°©e
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

500 
ªt
 = -
ENOMEM
;

501 
√t_devi˚
 *
√tdev
 = 
NULL
;

502 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

504 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
])

505  -
EINVAL
;

507 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

508 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

509 i‡(!
√tdev
)

510  -
EINVAL
;

512 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

513 i‡(
ªt
)

514 
îr_out
;

516 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

518 
ªt
 = 
	`ixgbe_∆_ª∂y
(!!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
),

519 
DCB_C_GSTATE
, 
DCB_A_STATE
, 
öfo
);

520 i‡(
ªt
)

521 
îr_out
;

523 
îr_out
:

524 
	`dev_put
(
√tdev
);

525  
ªt
;

526 
	}
}

528 
	$ixgbe_dcb_s°©e
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

530 
√t_devi˚
 *
√tdev
 = 
NULL
;

531 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

532 
ªt
 = -
EINVAL
;

533 
u8
 
vÆue
;

535 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_STATE
])

536 
îr
;

538 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

539 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

540 i‡(!
√tdev
)

541 
îr
;

543 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

544 i‡(
ªt
)

545 
îr_out
;

547 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

549 
vÆue
 = 
	`∆a_gë_u8
(
öfo
->
©ås
[
DCB_A_STATE
]);

550 i‡((
vÆue
 & 1) != value) {

551 
	`DPRINTK
(
DRV
, 
ERR
, "VÆuêi†nŸ 1 o∏0, iài†%d.\n", 
vÆue
);

553 
vÆue
) {

555 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

556 i‡(
√tdev
->
Êags
 & 
IFF_UP
)

557 #ifde‡
HAVE_NET_DEVICE_OPS


558 
√tdev
->
√tdev_›s
->
	`ndo_°›
(netdev);

560 
√tdev
->
	`°›
(netdev);

562 
	`ixgbe_˛ór_öãºu±_scheme
(
ad≠ãr
);

564 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_DCB_ENABLED
;

565 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RSS_CAPABLE
)

566 
ad≠ãr
->
Êags
 |=

567 
IXGBE_FLAG_RSS_ENABLED
;

568 
	`ixgbe_öô_öãºu±_scheme
(
ad≠ãr
);

569 
	`ixgbe_ª£t
(
ad≠ãr
);

570 i‡(
√tdev
->
Êags
 & 
IFF_UP
)

571 #ifde‡
HAVE_NET_DEVICE_OPS


572 
√tdev
->
√tdev_›s
->
	`ndo_›í
(netdev);

574 
√tdev
->
	`›í
(netdev);

579 
out
;

582 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

584 
out
;

585 } i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_CAPABLE
)) {

586 
	`DPRINTK
(
DRV
, 
ERR
, "Enable failed. Make sure "

588 
ªt
 = -
EINVAL
;

589 
îr_out
;

591 i‡(
√tdev
->
Êags
 & 
IFF_UP
)

592 #ifde‡
HAVE_NET_DEVICE_OPS


593 
√tdev
->
√tdev_›s
->
	`ndo_°›
(netdev);

595 
√tdev
->
	`°›
(netdev);

597 
	`ixgbe_˛ór_öãºu±_scheme
(
ad≠ãr
);

599 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_RSS_ENABLED
;

600 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCB_ENABLED
;

601 
ad≠ãr
->
dcb_cfg
.
suµ‹t
.
ˇ∑bûôõs
 =

602 (
IXGBE_DCB_PG_SUPPORT
 | 
IXGBE_DCB_PFC_SUPPORT
 |

603 
IXGBE_DCB_GSP_SUPPORT
);

604 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

605 
	`DPRINTK
(
DRV
, 
INFO
, "DCBÉnabled, "

607 
ad≠ãr
->
Êags
 &=

608 ~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

609 
ad≠ãr
->
Êags
 &=

610 ~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

611 
ad≠ãr
->
dcb_cfg
.
suµ‹t
.
ˇ∑bûôõs
 |=

612 
IXGBE_DCB_UP2TC_SUPPORT
;

614 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
 = 8;

615 
	`ixgbe_öô_öãºu±_scheme
(
ad≠ãr
);

616 
	`ixgbe_ª£t
(
ad≠ãr
);

617 i‡(
√tdev
->
Êags
 & 
IFF_UP
)

618 #ifde‡
HAVE_NET_DEVICE_OPS


619 
√tdev
->
√tdev_›s
->
	`ndo_›í
(netdev);

621 
√tdev
->
	`›í
(netdev);

628 
out
:

629 
ªt
 = 
	`ixgbe_∆_ª∂y
(0, 
DCB_C_SSTATE
, 
DCB_A_STATE
, 
öfo
);

630 i‡(
ªt
)

631 
îr_out
;

633 
îr_out
:

634 
	`dev_put
(
√tdev
);

635 
îr
:

636  
ªt
;

637 
	}
}

639 
	$ixgbe_dcb_glök_•d
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

641 
ªt
 = -
ENOMEM
;

642 
√t_devi˚
 *
√tdev
 = 
NULL
;

643 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

645 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
])

646  -
EINVAL
;

648 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

649 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

650 i‡(!
√tdev
)

651  -
EINVAL
;

653 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

654 i‡(
ªt
)

655 
îr_out
;

657 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

659 
ªt
 = 
	`ixgbe_∆_ª∂y
(
ad≠ãr
->
dcb_cfg
.
lök_•ìd
 & 0xff,

660 
DCB_C_GLINK_SPD
, 
DCB_A_LINK_SPD
, 
öfo
);

661 i‡(
ªt
)

662 
îr_out
;

664 
îr_out
:

665 
	`dev_put
(
√tdev
);

666  
ªt
;

667 
	}
}

669 
	$ixgbe_dcb_¶ök_•d
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

671 
√t_devi˚
 *
√tdev
 = 
NULL
;

672 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

673 
ªt
 = -
EINVAL
;

674 
u8
 
vÆue
;

676 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_LINK_SPD
])

677 
îr
;

679 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

680 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

681 i‡(!
√tdev
)

682 
îr
;

684 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

685 i‡(
ªt
)

686 
îr_out
;

688 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

690 
vÆue
 = 
	`∆a_gë_u8
(
öfo
->
©ås
[
DCB_A_LINK_SPD
]);

691 i‡(
vÆue
 > 9) {

692 
	`DPRINTK
(
DRV
, 
ERR
, "VÆuêi†nŸ 0Åhru 9, iài†%d.\n", 
vÆue
);

694 i‡(!
ad≠ãr
->
dcb_£t_bôm≠
 &&

695 
	`ixgbe_c›y_dcb_cfg
(&
ad≠ãr
->
dcb_cfg
, &ad≠ãr->
ãmp_dcb_cfg
,

696 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
)) {

697 
ªt
 = -
EINVAL
;

698 
îr_out
;

701 
ad≠ãr
->
ãmp_dcb_cfg
.
lök_•ìd
 = 
vÆue
;

702 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_LINKSPEED
;

705 
ªt
 = 
	`ixgbe_∆_ª∂y
(0, 
DCB_C_SLINK_SPD
, 
DCB_A_LINK_SPD
, 
öfo
);

706 i‡(
ªt
)

707 
îr_out
;

709 
îr_out
:

710 
	`dev_put
(
√tdev
);

711 
îr
:

712  
ªt
;

713 
	}
}

716 #ifde‡
CONFIG_DCB


717 
	$ixgbe_dcb∆_gë_≥rm_hw_addr
(
√t_devi˚
 *
√tdev
,

718 
u8
 *
≥rm_addr
)

720 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

721 
i
, 
j
;

723 
	`mem£t
(
≥rm_addr
, 0xff, 
MAX_ADDR_LEN
);

725 
i
 = 0; i < 
√tdev
->
addr_Àn
; i++)

726 
≥rm_addr
[
i
] = 
ad≠ãr
->
hw
.
mac
.perm_addr[i];

728 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

729 
j
 = 0; j < 
√tdev
->
addr_Àn
; j++, 
i
++)

730 
≥rm_addr
[
i
] = 
ad≠ãr
->
hw
.
mac
.
ßn_addr
[
j
];

732 
	}
}

734 
	$ixgbe_dcb_g≥rm_hwaddr
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

736 *
d©a
;

737 
sk_buff
 *
dcb_skb
 = 
NULL
;

738 
∆©å
 *
tb
[
IXGBE_DCB_PERM_HW_A_MAX
 + 1], *
√°
;

739 
√t_devi˚
 *
√tdev
 = 
NULL
;

740 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

741 
ixgbe_hw
 *
hw
 = 
NULL
;

742 
ªt
 = -
ENOMEM
;

743 
i
;

745 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_PERM_HWADDR
])

746  -
EINVAL
;

748 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

749 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

750 i‡(!
√tdev
)

751  -
EINVAL
;

753 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

754 i‡(
ªt
)

755 
îr_out
;

757 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

759 
hw
 = &
ad≠ãr
->hw;

761 
ªt
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IXGBE_DCB_PERM_HW_A_MAX
,

762 
öfo
->
©ås
[
DCB_A_PERM_HWADDR
],

763 
dcb_≥rm_hwaddr_√°
);

764 i‡(
ªt
)

765 
îr
;

767 
dcb_skb
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

768 i‡(!
dcb_skb
)

769 
îr
;

771 
d©a
 = 
	`gílmsg_put_ª∂y
(
dcb_skb
, 
öfo
, &
dcb_Ámûy
, 0,

772 
DCB_C_GPERM_HWADDR
);

773 i‡(!
d©a
)

774 
îr
;

776 
√°
 = 
	`∆a_√°_°¨t
(
dcb_skb
, 
DCB_A_PERM_HWADDR
);

777 i‡(!
√°
)

778 
îr
;

780 
i
 = 0; i < 
√tdev
->
addr_Àn
; i++) {

781 i‡(!
tb
[
i
+
PERM_HW_A_0
] && !tb[
PERM_HW_A_ALL
])

782 
îr
;

784 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
DCB_A_PERM_HWADDR
,

785 
hw
->
mac
.
≥rm_addr
[
i
]);

787 i‡(
ªt
) {

788 
	`∆a_√°_ˇn˚l
(
dcb_skb
, 
√°
);

789 
îr
;

793 
	`∆a_√°_íd
(
dcb_skb
, 
√°
);

795 
	`gílmsg_íd
(
dcb_skb
, 
d©a
);

797 
ªt
 = 
	`gílmsg_ª∂y
(
dcb_skb
, 
öfo
);

798 i‡(
ªt
)

799 
îr
;

801 
	`dev_put
(
√tdev
);

804 
îr
:

805 
	`DPRINTK
(
DRV
, 
ERR
, "Error in getÖermanent hwaddr.\n");

806 
	`k‰ì
(
dcb_skb
);

807 
îr_out
:

808 
	`dev_put
(
√tdev
);

809  
ªt
;

810 
	}
}

813 #ifde‡
CONFIG_DCB


814 
	$ixgbe_dcb∆_£t_pg_tc_cfg_tx
(
√t_devi˚
 *
√tdev
, 
tc
,

815 
u8
 
¥io
, u8 
bwg_id
, u8 
bw_p˘
,

816 
u8
 
up_m≠
)

818 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

820 i‡(
¥io
 !
DCB_ATTR_VALUE_UNDEFINED
)

821 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
¥io_ty≥
 = 
¥io
;

822 i‡(
bwg_id
 !
DCB_ATTR_VALUE_UNDEFINED
)

823 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
bwg_id
 = bwg_id;

824 i‡(
bw_p˘
 !
DCB_ATTR_VALUE_UNDEFINED
)

825 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
bwg_≥r˚¡
 =

826 
bw_p˘
;

827 i‡(
up_m≠
 !
DCB_ATTR_VALUE_UNDEFINED
)

828 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
up_to_tc_bôm≠
 =

829 
up_m≠
;

831 i‡((
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
¥io_ty≥
 !=

832 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
¥io_ty≥
) ||

833 (
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
bwg_id
 !=

834 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
bwg_id
) ||

835 (
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
bwg_≥r˚¡
 !=

836 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
bwg_≥r˚¡
) ||

837 (
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
up_to_tc_bôm≠
 !=

838 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
up_to_tc_bôm≠
)) {

839 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PG_TX
;

840 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_RESETLINK
;

842 
	}
}

844 
	$ixgbe_dcb∆_£t_pg_bwg_cfg_tx
(
√t_devi˚
 *
√tdev
, 
bwg_id
,

845 
u8
 
bw_p˘
)

847 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

849 
ad≠ãr
->
ãmp_dcb_cfg
.
bw_≥r˚¡age
[0][
bwg_id
] = 
bw_p˘
;

851 i‡(
ad≠ãr
->
ãmp_dcb_cfg
.
bw_≥r˚¡age
[0][
bwg_id
] !=

852 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[0][
bwg_id
]) {

853 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PG_RX
;

854 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_RESETLINK
;

856 
	}
}

858 
	$ixgbe_dcb∆_£t_pg_tc_cfg_rx
(
√t_devi˚
 *
√tdev
, 
tc
,

859 
u8
 
¥io
, u8 
bwg_id
, u8 
bw_p˘
,

860 
u8
 
up_m≠
)

862 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

864 i‡(
¥io
 !
DCB_ATTR_VALUE_UNDEFINED
)

865 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
¥io_ty≥
 = 
¥io
;

866 i‡(
bwg_id
 !
DCB_ATTR_VALUE_UNDEFINED
)

867 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
bwg_id
 = bwg_id;

868 i‡(
bw_p˘
 !
DCB_ATTR_VALUE_UNDEFINED
)

869 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
bwg_≥r˚¡
 =

870 
bw_p˘
;

871 i‡(
up_m≠
 !
DCB_ATTR_VALUE_UNDEFINED
)

872 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
up_to_tc_bôm≠
 =

873 
up_m≠
;

875 i‡((
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
¥io_ty≥
 !=

876 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
¥io_ty≥
) ||

877 (
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
bwg_id
 !=

878 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
bwg_id
) ||

879 (
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
bwg_≥r˚¡
 !=

880 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
bwg_≥r˚¡
) ||

881 (
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
up_to_tc_bôm≠
 !=

882 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
up_to_tc_bôm≠
)) {

883 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PG_RX
;

884 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_RESETLINK
;

886 
	}
}

888 
	$ixgbe_dcb∆_£t_pg_bwg_cfg_rx
(
√t_devi˚
 *
√tdev
, 
bwg_id
,

889 
u8
 
bw_p˘
)

891 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

893 
ad≠ãr
->
ãmp_dcb_cfg
.
bw_≥r˚¡age
[1][
bwg_id
] = 
bw_p˘
;

895 i‡(
ad≠ãr
->
ãmp_dcb_cfg
.
bw_≥r˚¡age
[1][
bwg_id
] !=

896 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[1][
bwg_id
]) {

897 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PG_RX
;

898 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_RESETLINK
;

900 
	}
}

902 
	$ixgbe_dcb∆_gë_pg_tc_cfg_tx
(
√t_devi˚
 *
√tdev
, 
tc
,

903 
u8
 *
¥io
, u8 *
bwg_id
, u8 *
bw_p˘
,

904 
u8
 *
up_m≠
)

906 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

908 *
¥io
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
¥io_ty≥
;

909 *
bwg_id
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].bwg_id;

910 *
bw_p˘
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
bwg_≥r˚¡
;

911 *
up_m≠
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[0].
up_to_tc_bôm≠
;

912 
	}
}

914 
	$ixgbe_dcb∆_gë_pg_bwg_cfg_tx
(
√t_devi˚
 *
√tdev
, 
bwg_id
,

915 
u8
 *
bw_p˘
)

917 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

919 *
bw_p˘
 = 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[0][
bwg_id
];

920 
	}
}

922 
	$ixgbe_dcb∆_gë_pg_tc_cfg_rx
(
√t_devi˚
 *
√tdev
, 
tc
,

923 
u8
 *
¥io
, u8 *
bwg_id
, u8 *
bw_p˘
,

924 
u8
 *
up_m≠
)

926 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

928 *
¥io
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
¥io_ty≥
;

929 *
bwg_id
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].bwg_id;

930 *
bw_p˘
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
bwg_≥r˚¡
;

931 *
up_m≠
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
tc
].
∑th
[1].
up_to_tc_bôm≠
;

932 
	}
}

934 
	$ixgbe_dcb∆_gë_pg_bwg_cfg_rx
(
√t_devi˚
 *
√tdev
, 
bwg_id
,

935 
u8
 *
bw_p˘
)

937 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

939 *
bw_p˘
 = 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[1][
bwg_id
];

940 
	}
}

942 
	$ixgbe_dcb_pg_scfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
,

943 
dú
)

945 
√t_devi˚
 *
√tdev
 = 
NULL
;

946 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

947 
tc_c⁄figuøti⁄
 *
tc_c⁄fig
 = 
NULL
;

948 
tc_c⁄figuøti⁄
 *
tc_tmpcfg
 = 
NULL
;

949 
∆©å
 *
pg_tb
[
IXGBE_DCB_PG_A_MAX
 + 1];

950 
∆©å
 *
∑øm_tb
[
IXGBE_DCB_TC_A_PARAM_MAX
 + 1];

951 
i
, 
ªt
, 
tc_max
;

952 
u8
 
vÆue
;

953 
u8
 
ch™ged
 = 0;

955 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_PG_CFG
])

956  -
EINVAL
;

958 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

959 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

960 i‡(!
√tdev
)

961  -
EINVAL
;

963 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

964 i‡(
ªt
)

965 
îr
;

967 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

969 
ªt
 = 
	`∆a_∑r£_√°ed
(
pg_tb
, 
IXGBE_DCB_PG_A_MAX
,

970 
öfo
->
©ås
[
DCB_A_PG_CFG
], 
dcb_pg_√°
);

971 i‡(
ªt
)

972 
îr
;

974 i‡(!
ad≠ãr
->
dcb_£t_bôm≠
 &&

975 
	`ixgbe_c›y_dcb_cfg
(&
ad≠ãr
->
dcb_cfg
, &ad≠ãr->
ãmp_dcb_cfg
,

976 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
))

977 
îr
;

979 
tc_max
 = 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
;

980 
i
 = 
PG_A_TC_0
; i < 
tc_max
 + PG_A_TC_0; i++) {

981 i‡(!
pg_tb
[
i
])

984 
ªt
 = 
	`∆a_∑r£_√°ed
(
∑øm_tb
, 
IXGBE_DCB_TC_A_PARAM_MAX
,

985 
pg_tb
[
i
], 
dcb_tc_∑øm_√°
);

986 i‡(
ªt
)

987 
îr
;

989 
tc_c⁄fig
 = &
ad≠ãr
->
dcb_cfg
.tc_c⁄fig[
i
 - 
PG_A_TC_0
];

990 
tc_tmpcfg
 = &
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
i
 - 
PG_A_TC_0
];

991 i‡(
∑øm_tb
[
TC_A_PARAM_STRICT_PRIO
]) {

992 
vÆue
 = 
	`∆a_gë_u8
(
∑øm_tb
[
TC_A_PARAM_STRICT_PRIO
]);

993 
tc_tmpcfg
->
∑th
[
dú
].
¥io_ty≥
 = 
vÆue
;

994 i‡(
tc_tmpcfg
->
∑th
[
dú
].
¥io_ty≥
 !=

995 
tc_c⁄fig
->
∑th
[
dú
].
¥io_ty≥
)

996 
ch™ged
 = 1;

998 i‡(
∑øm_tb
[
TC_A_PARAM_BW_GROUP_ID
]) {

999 
vÆue
 = 
	`∆a_gë_u8
(
∑øm_tb
[
TC_A_PARAM_BW_GROUP_ID
]);

1000 
tc_tmpcfg
->
∑th
[
dú
].
bwg_id
 = 
vÆue
;

1001 i‡(
tc_tmpcfg
->
∑th
[
dú
].
bwg_id
 !=

1002 
tc_c⁄fig
->
∑th
[
dú
].
bwg_id
)

1003 
ch™ged
 = 1;

1005 i‡(
∑øm_tb
[
TC_A_PARAM_BW_PCT_IN_GROUP
]) {

1006 
vÆue
 = 
	`∆a_gë_u8
(
∑øm_tb
[
TC_A_PARAM_BW_PCT_IN_GROUP
]);

1007 
tc_tmpcfg
->
∑th
[
dú
].
bwg_≥r˚¡
 = 
vÆue
;

1008 i‡(
tc_tmpcfg
->
∑th
[
dú
].
bwg_≥r˚¡
 !=

1009 
tc_c⁄fig
->
∑th
[
dú
].
bwg_≥r˚¡
)

1010 
ch™ged
 = 1;

1012 i‡(
∑øm_tb
[
TC_A_PARAM_UP_MAPPING
]) {

1013 
vÆue
 = 
	`∆a_gë_u8
(
∑øm_tb
[
TC_A_PARAM_UP_MAPPING
]);

1014 
tc_tmpcfg
->
∑th
[
dú
].
up_to_tc_bôm≠
 = 
vÆue
;

1015 i‡(
tc_tmpcfg
->
∑th
[
dú
].
up_to_tc_bôm≠
 !=

1016 
tc_c⁄fig
->
∑th
[
dú
].
up_to_tc_bôm≠
)

1017 
ch™ged
 = 1;

1021 
i
 = 
PG_A_BWG_0
; i < 
PG_A_BWG_MAX
; i++) {

1022 i‡(!
pg_tb
[
i
])

1025 
vÆue
 = 
	`∆a_gë_u8
(
pg_tb
[
i
]);

1026 
ad≠ãr
->
ãmp_dcb_cfg
.
bw_≥r˚¡age
[
dú
][
i
-
PG_A_BWG_0
] = 
vÆue
;

1028 i‡(
ad≠ãr
->
ãmp_dcb_cfg
.
bw_≥r˚¡age
[
dú
][
i
-
PG_A_BWG_0
] !=

1029 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[
dú
][
i
-
PG_A_BWG_0
])

1030 
ch™ged
 = 1;

1033 
ad≠ãr
->
ãmp_dcb_cfg
.
round_robö_íabÀ
 = 
Ál£
;

1035 i‡(
ch™ged
) {

1036 i‡(
dú
 =
DCB_TX_CONFIG
)

1037 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PG_TX
;

1039 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PG_RX
;

1041 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_RESETLINK
;

1044 
ªt
 = 
	`ixgbe_∆_ª∂y
(0, (
dú
? 
DCB_C_PGRX_SCFG
 : 
DCB_C_PGTX_SCFG
),

1045 
DCB_A_PG_CFG
, 
öfo
);

1046 i‡(
ªt
)

1047 
îr
;

1049 
îr
:

1050 
	`dev_put
(
√tdev
);

1051  
ªt
;

1052 
	}
}

1054 
	$ixgbe_dcb_pgtx_scfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1056  
	`ixgbe_dcb_pg_scfg
(
skb
, 
öfo
, 
DCB_TX_CONFIG
);

1057 
	}
}

1059 
	$ixgbe_dcb_pgrx_scfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1061  
	`ixgbe_dcb_pg_scfg
(
skb
, 
öfo
, 
DCB_RX_CONFIG
);

1062 
	}
}

1064 
	$ixgbe_dcb_pg_gcfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
,

1065 
dú
)

1067 *
d©a
;

1068 
sk_buff
 *
dcb_skb
 = 
NULL
;

1069 
∆©å
 *
pg_√°
, *
∑øm_√°
, *
tb
;

1070 
∆©å
 *
pg_tb
[
IXGBE_DCB_PG_A_MAX
 + 1];

1071 
∆©å
 *
∑øm_tb
[
IXGBE_DCB_TC_A_PARAM_MAX
 + 1];

1072 
√t_devi˚
 *
√tdev
 = 
NULL
;

1073 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

1074 
tc_c⁄figuøti⁄
 *
tc_c⁄fig
 = 
NULL
;

1075 
tc_bw_Æloc
 *
tc
 = 
NULL
;

1076 
ªt
 = -
ENOMEM
;

1077 
i
, 
tc_max
;

1079 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_PG_CFG
])

1080  -
EINVAL
;

1082 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

1083 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

1084 i‡(!
√tdev
)

1085  -
EINVAL
;

1087 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

1088 i‡(
ªt
)

1089 
îr_out
;

1091 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1093 
ªt
 = 
	`∆a_∑r£_√°ed
(
pg_tb
, 
IXGBE_DCB_PG_A_MAX
,

1094 
öfo
->
©ås
[
DCB_A_PG_CFG
], 
dcb_pg_√°
);

1095 i‡(
ªt
)

1096 
îr
;

1098 
dcb_skb
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

1099 i‡(!
dcb_skb
)

1100 
îr
;

1102 
d©a
 = 
	`gílmsg_put_ª∂y
(
dcb_skb
, 
öfo
, &
dcb_Ámûy
, 0,

1103 (
dú
Ë? 
DCB_C_PGRX_GCFG
 : 
DCB_C_PGTX_GCFG
);

1105 i‡(!
d©a
)

1106 
îr
;

1108 
pg_√°
 = 
	`∆a_√°_°¨t
(
dcb_skb
, 
DCB_A_PG_CFG
);

1109 i‡(!
pg_√°
)

1110 
îr
;

1112 
tc_max
 = 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
;

1113 
i
 = 
PG_A_TC_0
; i < 
tc_max
 + PG_A_TC_0; i++) {

1114 i‡(!
pg_tb
[
i
] && !pg_tb[
PG_A_TC_ALL
])

1117 i‡(
pg_tb
[
PG_A_TC_ALL
])

1118 
tb
 = 
pg_tb
[
PG_A_TC_ALL
];

1120 
tb
 = 
pg_tb
[
i
];

1121 
ªt
 = 
	`∆a_∑r£_√°ed
(
∑øm_tb
, 
IXGBE_DCB_TC_A_PARAM_MAX
,

1122 
tb
, 
dcb_tc_∑øm_√°
);

1123 i‡(
ªt
)

1124 
îr_pg
;

1126 
∑øm_√°
 = 
	`∆a_√°_°¨t
(
dcb_skb
, 
i
);

1127 i‡(!
∑øm_√°
)

1128 
îr_pg
;

1130 
tc_c⁄fig
 = &
ad≠ãr
->
dcb_cfg
.tc_c⁄fig[
i
 - 
PG_A_TC_0
];

1131 
tc
 = &
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
i
 - 
PG_A_TC_0
].
∑th
[
dú
];

1133 i‡(
∑øm_tb
[
TC_A_PARAM_STRICT_PRIO
] ||

1134 
∑øm_tb
[
TC_A_PARAM_ALL
]) {

1135 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
TC_A_PARAM_STRICT_PRIO
,

1136 
tc
->
¥io_ty≥
);

1137 i‡(
ªt
)

1138 
îr_∑øm
;

1140 i‡(
∑øm_tb
[
TC_A_PARAM_BW_GROUP_ID
] ||

1141 
∑øm_tb
[
TC_A_PARAM_ALL
]) {

1142 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
TC_A_PARAM_BW_GROUP_ID
,

1143 
tc
->
bwg_id
);

1144 i‡(
ªt
)

1145 
îr_∑øm
;

1147 i‡(
∑øm_tb
[
TC_A_PARAM_BW_PCT_IN_GROUP
] ||

1148 
∑øm_tb
[
TC_A_PARAM_ALL
]) {

1149 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
TC_A_PARAM_BW_PCT_IN_GROUP
,

1150 
tc
->
bwg_≥r˚¡
);

1151 i‡(
ªt
)

1152 
îr_∑øm
;

1154 i‡(
∑øm_tb
[
TC_A_PARAM_UP_MAPPING
] ||

1155 
∑øm_tb
[
TC_A_PARAM_ALL
]) {

1156 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
TC_A_PARAM_UP_MAPPING
,

1157 
tc
->
up_to_tc_bôm≠
);

1158 i‡(
ªt
)

1159 
îr_∑øm
;

1161 
	`∆a_√°_íd
(
dcb_skb
, 
∑øm_√°
);

1164 
i
 = 
PG_A_BWG_0
; i < 
PG_A_BWG_MAX
; i++) {

1165 i‡(!
pg_tb
[
i
] && !pg_tb[
PG_A_BWG_ALL
])

1168 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
i
,

1169 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[
dú
][
i
-
PG_A_BWG_0
]);

1171 i‡(
ªt
)

1172 
îr_pg
;

1175 
	`∆a_√°_íd
(
dcb_skb
, 
pg_√°
);

1177 
	`gílmsg_íd
(
dcb_skb
, 
d©a
);

1178 
ªt
 = 
	`gílmsg_ª∂y
(
dcb_skb
, 
öfo
);

1179 i‡(
ªt
)

1180 
îr
;

1182 
	`dev_put
(
√tdev
);

1185 
îr_∑øm
:

1186 
	`DPRINTK
(
DRV
, 
ERR
, "Eº‹ i¿gëÖg %s.\n", 
dú
?"rx":"tx");

1187 
	`∆a_√°_ˇn˚l
(
dcb_skb
, 
∑øm_√°
);

1188 
îr_pg
:

1189 
	`∆a_√°_ˇn˚l
(
dcb_skb
, 
pg_√°
);

1190 
îr
:

1191 
	`k‰ì
(
dcb_skb
);

1192 
îr_out
:

1193 
	`dev_put
(
√tdev
);

1194  
ªt
;

1195 
	}
}

1197 
	$ixgbe_dcb_pgtx_gcfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1199  
	`ixgbe_dcb_pg_gcfg
(
skb
, 
öfo
, 
DCB_TX_CONFIG
);

1200 
	}
}

1202 
	$ixgbe_dcb_pgrx_gcfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1204  
	`ixgbe_dcb_pg_gcfg
(
skb
, 
öfo
, 
DCB_RX_CONFIG
);

1205 
	}
}

1208 #ifde‡
CONFIG_DCB


1209 
	$ixgbe_dcb∆_£t_pfc_cfg
(
√t_devi˚
 *
√tdev
, 
¥i‹ôy
,

1210 
u8
 
£âög
)

1212 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1214 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
¥i‹ôy
].
dcb_pfc
 = 
£âög
;

1215 i‡(
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
¥i‹ôy
].
dcb_pfc
 !=

1216 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
¥i‹ôy
].
dcb_pfc
) {

1217 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PFC
;

1219 
	}
}

1221 
	$ixgbe_dcb∆_gë_pfc_cfg
(
√t_devi˚
 *
√tdev
, 
¥i‹ôy
,

1222 
u8
 *
£âög
)

1224 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1226 *
£âög
 = 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
¥i‹ôy
].
dcb_pfc
;

1227 
	}
}

1229 
	$ixgbe_dcb_•fccfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1231 
∆©å
 *
tb
[
IXGBE_DCB_PFC_A_UP_MAX
 + 1];

1232 
√t_devi˚
 *
√tdev
 = 
NULL
;

1233 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

1234 
i
, 
ªt
 = -
ENOMEM
;

1235 
u8
 
£âög
;

1236 
u8
 
ch™ged
 = 0;

1238 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

1239 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

1240 i‡(!
√tdev
)

1241  -
EINVAL
;

1243 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1245 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_PFC_CFG
])

1246  -
EINVAL
;

1248 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

1249 i‡(
ªt
)

1250 
îr
;

1252 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1254 
ªt
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IXGBE_DCB_PFC_A_UP_MAX
,

1255 
öfo
->
©ås
[
DCB_A_PFC_CFG
],

1256 
dcb_pfc_up_√°
);

1257 i‡(
ªt
)

1258 
îr
;

1260 i‡(!
ad≠ãr
->
dcb_£t_bôm≠
 &&

1261 
	`ixgbe_c›y_dcb_cfg
(&
ad≠ãr
->
dcb_cfg
, &ad≠ãr->
ãmp_dcb_cfg
,

1262 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
)) {

1263 
ªt
 = -
EINVAL
;

1264 
îr
;

1267 
i
 = 
PFC_A_UP_0
; i < 
PFC_A_UP_MAX
; i++) {

1268 i‡(!
tb
[
i
])

1271 
£âög
 = 
	`∆a_gë_u8
(
tb
[
i
]);

1272 
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
i
-
PFC_A_UP_0
].
dcb_pfc
 = 
£âög
;

1274 i‡(
ad≠ãr
->
ãmp_dcb_cfg
.
tc_c⁄fig
[
i
-
PFC_A_UP_0
].
dcb_pfc
 !=

1275 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
i
-
PFC_A_UP_0
].
dcb_pfc
)

1276 
ch™ged
 = 1;

1279 i‡(
ch™ged
)

1280 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PFC
;

1282 
ªt
 = 
	`ixgbe_∆_ª∂y
(0, 
DCB_C_PFC_SCFG
, 
DCB_A_PFC_CFG
, 
öfo
);

1283 i‡(
ªt
)

1284 
îr
;

1286 
îr
:

1287 
	`dev_put
(
√tdev
);

1288  
ªt
;

1289 
	}
}

1291 
	$ixgbe_dcb_gpfccfg
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1293 *
d©a
;

1294 
sk_buff
 *
dcb_skb
 = 
NULL
;

1295 
∆©å
 *
tb
[
IXGBE_DCB_PFC_A_UP_MAX
 + 1], *
√°
;

1296 
√t_devi˚
 *
√tdev
 = 
NULL
;

1297 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

1298 
ªt
 = -
ENOMEM
;

1299 
i
;

1301 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_PFC_CFG
])

1302  -
EINVAL
;

1304 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

1305 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

1306 i‡(!
√tdev
)

1307  -
EINVAL
;

1309 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

1310 i‡(
ªt
)

1311 
îr_out
;

1313 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1315 
ªt
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IXGBE_DCB_PFC_A_UP_MAX
,

1316 
öfo
->
©ås
[
DCB_A_PFC_CFG
], 
dcb_pfc_up_√°
);

1317 i‡(
ªt
)

1318 
îr
;

1320 
dcb_skb
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

1321 i‡(!
dcb_skb
)

1322 
îr
;

1324 
d©a
 = 
	`gílmsg_put_ª∂y
(
dcb_skb
, 
öfo
, &
dcb_Ámûy
, 0,

1325 
DCB_C_PFC_GCFG
);

1326 i‡(!
d©a
)

1327 
îr
;

1329 
√°
 = 
	`∆a_√°_°¨t
(
dcb_skb
, 
DCB_A_PFC_CFG
);

1330 i‡(!
√°
)

1331 
îr
;

1333 
i
 = 
PFC_A_UP_0
; i < 
PFC_A_UP_MAX
; i++) {

1334 i‡(!
tb
[
i
] && !tb[
PFC_A_UP_ALL
])

1337 
ªt
 = 
	`∆a_put_u8
(
dcb_skb
, 
i
,

1338 
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
i
-
PFC_A_UP_0
].
dcb_pfc
);

1339 i‡(
ªt
) {

1340 
	`∆a_√°_ˇn˚l
(
dcb_skb
, 
√°
);

1341 
îr
;

1345 
	`∆a_√°_íd
(
dcb_skb
, 
√°
);

1347 
	`gílmsg_íd
(
dcb_skb
, 
d©a
);

1349 
ªt
 = 
	`gílmsg_ª∂y
(
dcb_skb
, 
öfo
);

1350 i‡(
ªt
)

1351 
îr
;

1353 
	`dev_put
(
√tdev
);

1356 
îr
:

1357 
	`DPRINTK
(
DRV
, 
ERR
, "Error in getÖfc stats.\n");

1358 
	`k‰ì
(
dcb_skb
);

1359 
îr_out
:

1360 
	`dev_put
(
√tdev
);

1361  
ªt
;

1362 
	}
}

1365 #ifde‡
CONFIG_DCB


1366 
u8
 
	$ixgbe_dcb∆_£t_Æl
(
√t_devi˚
 *
√tdev
)

1368 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1369 
ªt
;

1371 i‡(!
ad≠ãr
->
dcb_£t_bôm≠
)

1372  
DCB_NO_HW_CHG
;

1377 i‡(
ad≠ãr
->
dcb_£t_bôm≠
 & 
BIT_RESETLINK
) {

1378 
	`ã°_™d_£t_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
))

1379 
	`m¶ìp
(1);

1381 i‡(
	`√tif_ru¬ög
(
√tdev
))

1382 
	`ixgbe_down
(
ad≠ãr
);

1385 
ªt
 = 
	`ixgbe_c›y_dcb_cfg
(&
ad≠ãr
->
ãmp_dcb_cfg
, &ad≠ãr->
dcb_cfg
,

1386 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
);

1387 i‡(
ªt
) {

1388 i‡(
ad≠ãr
->
dcb_£t_bôm≠
 & 
BIT_RESETLINK
)

1389 
	`˛ór_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
);

1390  
DCB_NO_HW_CHG
;

1393 i‡(
ad≠ãr
->
dcb_cfg
.
pfc_mode_íabÀ
) {

1394 i‡((
ad≠ãr
->
hw
.
mac
.
ty≥
 !
ixgbe_mac_82598EB
) &&

1395 (
ad≠ãr
->
hw
.
fc
.
cuºít_mode
 !
ixgbe_fc_pfc
))

1396 
ad≠ãr
->
œ°_lfc_mode
 =ád≠ãr->
hw
.
fc
.
cuºít_mode
;

1397 
ad≠ãr
->
hw
.
fc
.
ªque°ed_mode
 = 
ixgbe_fc_pfc
;

1399 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 !
ixgbe_mac_82598EB
)

1400 
ad≠ãr
->
hw
.
fc
.
ªque°ed_mode
 =ád≠ãr->
œ°_lfc_mode
;

1402 
ad≠ãr
->
hw
.
fc
.
ªque°ed_mode
 = 
ixgbe_fc_n⁄e
;

1405 i‡(
ad≠ãr
->
dcb_£t_bôm≠
 & 
BIT_RESETLINK
) {

1406 i‡(
	`√tif_ru¬ög
(
√tdev
))

1407 
	`ixgbe_up
(
ad≠ãr
);

1408 
ªt
 = 
DCB_HW_CHG_RST
;

1409 } i‡(
ad≠ãr
->
dcb_£t_bôm≠
 & 
BIT_PFC
) {

1410 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

1411 
	`ixgbe_dcb_c⁄fig_pfc_82598
(&
ad≠ãr
->
hw
,

1412 &
ad≠ãr
->
dcb_cfg
);

1413 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

1414 
	`ixgbe_dcb_c⁄fig_pfc_82599
(&
ad≠ãr
->
hw
,

1415 &
ad≠ãr
->
dcb_cfg
);

1416 
ªt
 = 
DCB_HW_CHG
;

1418 i‡(
ad≠ãr
->
dcb_cfg
.
pfc_mode_íabÀ
)

1419 
ad≠ãr
->
hw
.
fc
.
cuºít_mode
 = 
ixgbe_fc_pfc
;

1421 i‡(
ad≠ãr
->
dcb_£t_bôm≠
 & 
BIT_RESETLINK
)

1422 
	`˛ór_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
);

1423 
ad≠ãr
->
dcb_£t_bôm≠
 = 0x00;

1424  
ªt
;

1425 
	}
}

1427 
	$ixgbe_dcb_£t_Æl
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1429 
√t_devi˚
 *
√tdev
 = 
NULL
;

1430 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

1431 
ªt
 = -
ENOMEM
;

1432 
u8
 
vÆue
;

1433 
u8
 
ªtvÆ
 = 0;

1435 i‡(!
öfo
->
©ås
[
DCB_A_IFNAME
] || !öfo->©ås[
DCB_A_SET_ALL
])

1436 
îr
;

1438 
√tdev
 = 
	`dev_gë_by_«me
(&
öô_√t
,

1439 
	`∆a_d©a
(
öfo
->
©ås
[
DCB_A_IFNAME
]));

1440 i‡(!
√tdev
)

1441 
îr
;

1443 
ªt
 = 
	`ixgbe_dcb_check_ad≠ãr
(
√tdev
);

1444 i‡(
ªt
)

1445 
îr_out
;

1447 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1449 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_CAPABLE
)) {

1450 
ªt
 = -
EINVAL
;

1451 
îr_out
;

1454 
vÆue
 = 
	`∆a_gë_u8
(
öfo
->
©ås
[
DCB_A_SET_ALL
]);

1455 i‡((
vÆue
 & 1) != value) {

1456 
	`DPRINTK
(
DRV
, 
ERR
, "VÆuêi†nŸ 1 o∏0, iài†%d.\n", 
vÆue
);

1458 i‡(!
ad≠ãr
->
dcb_£t_bôm≠
) {

1459 
ªtvÆ
 = 1;

1460 
out
;

1463 
	`ã°_™d_£t_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
))

1464 
	`m¶ìp
(1);

1466 
ªt
 = 
	`ixgbe_c›y_dcb_cfg
(&
ad≠ãr
->
ãmp_dcb_cfg
,

1467 &
ad≠ãr
->
dcb_cfg
,

1468 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
);

1469 i‡(
ªt
) {

1470 
	`˛ór_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
);

1471 
îr_out
;

1474 
	`ixgbe_down
(
ad≠ãr
);

1475 
	`ixgbe_up
(
ad≠ãr
);

1476 
ad≠ãr
->
dcb_£t_bôm≠
 = 0x00;

1477 
	`˛ór_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
);

1480 
out
:

1481 
ªt
 = 
	`ixgbe_∆_ª∂y
(
ªtvÆ
, 
DCB_C_SET_ALL
, 
DCB_A_SET_ALL
, 
öfo
);

1482 i‡(
ªt
)

1483 
îr_out
;

1485 
îr_out
:

1486 
	`dev_put
(
√tdev
);

1487 
îr
:

1488  
ªt
;

1489 
	}
}

1492 #ifde‡
CONFIG_DCB


1493 
u8
 
	$ixgbe_dcb∆_gëˇp
(
√t_devi˚
 *
√tdev
, 
ˇpid
, 
u8
 *
ˇp
)

1495 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1496 
u8
 
rvÆ
 = 0;

1498 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

1499 
ˇpid
) {

1500 
DCB_CAP_ATTR_PG
:

1501 *
ˇp
 = 
åue
;

1503 
DCB_CAP_ATTR_PFC
:

1504 *
ˇp
 = 
åue
;

1506 
DCB_CAP_ATTR_UP2TC
:

1507 *
ˇp
 = 
Ál£
;

1509 
DCB_CAP_ATTR_PG_TCS
:

1510 *
ˇp
 = 0x80;

1512 
DCB_CAP_ATTR_PFC_TCS
:

1513 *
ˇp
 = 0x80;

1515 
DCB_CAP_ATTR_GSP
:

1516 *
ˇp
 = 
åue
;

1519 
rvÆ
 = -
EINVAL
;

1523 
rvÆ
 = -
EINVAL
;

1526  
rvÆ
;

1527 
	}
}

1529 
u8
 
	$ixgbe_dcb∆_gënumtcs
(
√t_devi˚
 *
√tdev
, 
tcid
, 
u8
 *
num
)

1531 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1532 
u8
 
rvÆ
 = 0;

1534 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

1535 
tcid
) {

1536 
DCB_NUMTCS_ATTR_PG
:

1537 *
num
 = 
MAX_TRAFFIC_CLASS
;

1539 
DCB_NUMTCS_ATTR_PFC
:

1540 *
num
 = 
MAX_TRAFFIC_CLASS
;

1543 
rvÆ
 = -
EINVAL
;

1547 
rvÆ
 = -
EINVAL
;

1550  
rvÆ
;

1551 
	}
}

1553 
u8
 
	$ixgbe_dcb∆_£äumtcs
(
√t_devi˚
 *
√tdev
, 
tcid
, 
u8
 
num
)

1555  -
EINVAL
;

1556 
	}
}

1558 
u8
 
	$ixgbe_dcb∆_gëpfc°©e
(
√t_devi˚
 *
√tdev
)

1560 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1562  
ad≠ãr
->
dcb_cfg
.
pfc_mode_íabÀ
;

1563 
	}
}

1565 
	$ixgbe_dcb∆_£çfc°©e
(
√t_devi˚
 *
√tdev
, 
u8
 
°©e
)

1567 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1569 
ad≠ãr
->
ãmp_dcb_cfg
.
pfc_mode_íabÀ
 = 
°©e
;

1570 i‡(
ad≠ãr
->
ãmp_dcb_cfg
.
pfc_mode_íabÀ
 !=

1571 
ad≠ãr
->
dcb_cfg
.
pfc_mode_íabÀ
)

1572 
ad≠ãr
->
dcb_£t_bôm≠
 |
BIT_PFC
;

1574 
	}
}

1579 #ifde‡
CONFIG_DCB


1580 
dcb∆_π∆_›s
 
	gdcb∆_›s
 = {

1581 .
gë°©e
 = 
ixgbe_dcb∆_gë_°©e
,

1582 .
	g£t°©e
 = 
ixgbe_dcb∆_£t_°©e
,

1583 .
	ggë≥rmhwaddr
 = 
ixgbe_dcb∆_gë_≥rm_hw_addr
,

1584 .
	g£çgtccfgtx
 = 
ixgbe_dcb∆_£t_pg_tc_cfg_tx
,

1585 .
	g£çgbwgcfgtx
 = 
ixgbe_dcb∆_£t_pg_bwg_cfg_tx
,

1586 .
	g£çgtccfgrx
 = 
ixgbe_dcb∆_£t_pg_tc_cfg_rx
,

1587 .
	g£çgbwgcfgrx
 = 
ixgbe_dcb∆_£t_pg_bwg_cfg_rx
,

1588 .
	ggëpgtccfgtx
 = 
ixgbe_dcb∆_gë_pg_tc_cfg_tx
,

1589 .
	ggëpgbwgcfgtx
 = 
ixgbe_dcb∆_gë_pg_bwg_cfg_tx
,

1590 .
	ggëpgtccfgrx
 = 
ixgbe_dcb∆_gë_pg_tc_cfg_rx
,

1591 .
	ggëpgbwgcfgrx
 = 
ixgbe_dcb∆_gë_pg_bwg_cfg_rx
,

1592 .
	g£çfccfg
 = 
ixgbe_dcb∆_£t_pfc_cfg
,

1593 .
	ggëpfccfg
 = 
ixgbe_dcb∆_gë_pfc_cfg
,

1594 .
	g£èŒ
 = 
ixgbe_dcb∆_£t_Æl
,

1595 .
	ggëˇp
 = 
ixgbe_dcb∆_gëˇp
,

1596 .
	ggënumtcs
 = 
ixgbe_dcb∆_gënumtcs
,

1597 .
	g£äumtcs
 = 
ixgbe_dcb∆_£äumtcs
,

1598 .
	ggëpfc°©e
 = 
ixgbe_dcb∆_gëpfc°©e
,

1599 .
	g£çfc°©e
 = 
ixgbe_dcb∆_£çfc°©e
,

1604 
gíl_›s
 
	gixgbe_dcb_gíl_c_g°©e
 = {

1605 .
cmd
 = 
DCB_C_GSTATE
,

1606 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1607 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1608 .
	gdoô
 = 
ixgbe_dcb_g°©e
,

1609 .
	gdumpô
 = 
NULL
,

1613 
gíl_›s
 
	gixgbe_dcb_gíl_c_s°©e
 = {

1614 .
cmd
 = 
DCB_C_SSTATE
,

1615 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1616 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1617 .
	gdoô
 = 
ixgbe_dcb_s°©e
,

1618 .
	gdumpô
 = 
NULL
,

1622 
gíl_›s
 
	gixgbe_dcb_gíl_c_•gtx
 = {

1623 .
cmd
 = 
DCB_C_PGTX_SCFG
,

1624 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1625 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1626 .
	gdoô
 = 
ixgbe_dcb_pgtx_scfg
,

1627 .
	gdumpô
 = 
NULL
,

1631 
gíl_›s
 
	gixgbe_dcb_gíl_c_•grx
 = {

1632 .
cmd
 = 
DCB_C_PGRX_SCFG
,

1633 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1634 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1635 .
	gdoô
 = 
ixgbe_dcb_pgrx_scfg
,

1636 .
	gdumpô
 = 
NULL
,

1640 
gíl_›s
 
	gixgbe_dcb_gíl_c_•fc
 = {

1641 .
cmd
 = 
DCB_C_PFC_SCFG
,

1642 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1643 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1644 .
	gdoô
 = 
ixgbe_dcb_•fccfg
,

1645 .
	gdumpô
 = 
NULL
,

1649 
gíl_›s
 
	gixgbe_dcb_gíl_c_gpgtx
 = {

1650 .
cmd
 = 
DCB_C_PGTX_GCFG
,

1651 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1652 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1653 .
	gdoô
 = 
ixgbe_dcb_pgtx_gcfg
,

1654 .
	gdumpô
 = 
NULL
,

1658 
gíl_›s
 
	gixgbe_dcb_gíl_c_gpgrx
 = {

1659 .
cmd
 = 
DCB_C_PGRX_GCFG
,

1660 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1661 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1662 .
	gdoô
 = 
ixgbe_dcb_pgrx_gcfg
,

1663 .
	gdumpô
 = 
NULL
,

1667 
gíl_›s
 
	gixgbe_dcb_gíl_c_gpfc
 = {

1668 .
cmd
 = 
DCB_C_PFC_GCFG
,

1669 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1670 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1671 .
	gdoô
 = 
ixgbe_dcb_gpfccfg
,

1672 .
	gdumpô
 = 
NULL
,

1677 
gíl_›s
 
	gixgbe_dcb_gíl_c_glök_•d
 = {

1678 .
cmd
 = 
DCB_C_GLINK_SPD
,

1679 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1680 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1681 .
	gdoô
 = 
ixgbe_dcb_glök_•d
,

1682 .
	gdumpô
 = 
NULL
,

1686 
gíl_›s
 
	gixgbe_dcb_gíl_c_¶ök_•d
 = {

1687 .
cmd
 = 
DCB_C_SLINK_SPD
,

1688 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1689 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1690 .
	gdoô
 = 
ixgbe_dcb_¶ök_•d
,

1691 .
	gdumpô
 = 
NULL
,

1695 
gíl_›s
 
	gixgbe_dcb_gíl_c_£t_Æl
= {

1696 .
cmd
 = 
DCB_C_SET_ALL
,

1697 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1698 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1699 .
	gdoô
 = 
ixgbe_dcb_£t_Æl
,

1700 .
	gdumpô
 = 
NULL
,

1704 
gíl_›s
 
	gixgbe_dcb_gíl_c_g≥rm_hwaddr
 = {

1705 .
cmd
 = 
DCB_C_GPERM_HWADDR
,

1706 .
	gÊags
 = 
GENL_ADMIN_PERM
,

1707 .
	gpﬁicy
 = 
dcb_gíl_pﬁicy
,

1708 .
	gdoô
 = 
ixgbe_dcb_g≥rm_hwaddr
,

1709 .
	gdumpô
 = 
NULL
,

1721 
	$ixgbe_dcb_√éök_ªgi°î
()

1723 
ªt
 = 1;

1732 
ªt
 = 
	`gíl_ªgi°î_Ámûy
(&
dcb_Ámûy
);

1733 i‡(
ªt
)

1734  
ªt
;

1736 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_g°©e
);

1737 i‡(
ªt
)

1738 
îr
;

1740 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_s°©e
);

1741 i‡(
ªt
)

1742 
îr
;

1744 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_•gtx
);

1745 i‡(
ªt
)

1746 
îr
;

1748 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_•grx
);

1749 i‡(
ªt
)

1750 
îr
;

1752 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_•fc
);

1753 i‡(
ªt
)

1754 
îr
;

1756 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_gpfc
);

1757 i‡(
ªt
)

1758 
îr
;

1760 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_gpgtx
);

1761 i‡(
ªt
)

1762 
îr
;

1764 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_gpgrx
);

1765 i‡(
ªt
)

1766 
îr
;

1769 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_glök_•d
);

1770 i‡(
ªt
)

1771 
îr
;

1773 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_¶ök_•d
);

1774 i‡(
ªt
)

1775 
îr
;

1777 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_£t_Æl
);

1778 i‡(
ªt
)

1779 
îr
;

1781 
ªt
 = 
	`gíl_ªgi°î_›s
(&
dcb_Ámûy
, &
ixgbe_dcb_gíl_c_g≥rm_hwaddr
);

1782 i‡(
ªt
)

1783 
îr
;

1787 
îr
:

1788 
	`gíl_uƒegi°î_Ámûy
(&
dcb_Ámûy
);

1789  
ªt
;

1790 
	}
}

1792 
	$ixgbe_dcb_√éök_uƒegi°î
()

1794  
	`gíl_uƒegi°î_Ámûy
(&
dcb_Ámûy
);

1795 
	}
}

	@ixgbe_ethtool.c

30 
	~<löux/ty≥s.h
>

31 
	~<löux/moduÀ.h
>

32 
	~<löux/pci.h
>

33 
	~<löux/√tdevi˚.h
>

34 
	~<löux/ëhtoﬁ.h
>

35 
	~<löux/vmÆloc.h
>

36 #ifde‡
SIOCETHTOOL


37 
	~<asm/uac˚ss.h
>

39 
	~"ixgbe.h
"

41 #i‚de‡
ETH_GSTRING_LEN


42 
	#ETH_GSTRING_LEN
 32

	)

45 
	#IXGBE_ALL_RAR_ENTRIES
 16

	)

47 #ifde‡
ETHTOOL_OPS_COMPAT


48 
	~"kcom∑t_ëhtoﬁ.c
"

50 #ifde‡
ETHTOOL_GSTATS


51 
	sixgbe_°©s
 {

52 
	m°©_°rög
[
ETH_GSTRING_LEN
];

53 
	msizeof_°©
;

54 
	m°©_off£t
;

57 
	#IXGBE_STAT
(
m
Ë(((
ixgbe_ad≠ãr
 *)0)->m), \

58 
	`off£tof
(
ixgbe_ad≠ãr
, 
m
)

	)

59 
ixgbe_°©s
 
	gixgbe_g°rögs_°©s
[] = {

60 {"rx_∑ckës", 
IXGBE_STAT
(
√t_°©s
.
rx_∑ckës
)},

61 {"tx_∑ckës", 
IXGBE_STAT
(
√t_°©s
.
tx_∑ckës
)},

62 {"rx_byãs", 
IXGBE_STAT
(
√t_°©s
.
rx_byãs
)},

63 {"tx_byãs", 
IXGBE_STAT
(
√t_°©s
.
tx_byãs
)},

64 {"lsc_öt", 
IXGBE_STAT
(
lsc_öt
)},

65 {"tx_busy", 
IXGBE_STAT
(
tx_busy
)},

66 {"n⁄_e›_descs", 
IXGBE_STAT
(
n⁄_e›_descs
)},

67 {"rx_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
rx_îr‹s
)},

68 {"tx_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
tx_îr‹s
)},

69 {"rx_dr›≥d", 
IXGBE_STAT
(
√t_°©s
.
rx_dr›≥d
)},

70 #i‚de‡
CONFIG_IXGBE_NAPI


71 {"rx_dr›≥d_backlog", 
IXGBE_STAT
(
rx_dr›≥d_backlog
)},

73 {"tx_dr›≥d", 
IXGBE_STAT
(
√t_°©s
.
tx_dr›≥d
)},

74 {"mu…iˇ°", 
IXGBE_STAT
(
√t_°©s
.
mu…iˇ°
)},

75 {"brﬂdˇ°", 
IXGBE_STAT
(
°©s
.
b¥c
)},

76 {"rx_no_buf„r_cou¡", 
IXGBE_STAT
(
°©s
.
∫bc
[0]) },

77 {"cﬁlisi⁄s", 
IXGBE_STAT
(
√t_°©s
.
cﬁlisi⁄s
)},

78 {"rx_ovî_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
rx_ovî_îr‹s
)},

79 {"rx_¸c_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
rx_¸c_îr‹s
)},

80 {"rx_‰ame_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
rx_‰ame_îr‹s
)},

81 {"rx_fifo_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
rx_fifo_îr‹s
)},

82 {"rx_mis£d_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
rx_mis£d_îr‹s
)},

83 {"tx_ab‹ãd_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
tx_ab‹ãd_îr‹s
)},

84 {"tx_ˇºõr_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
tx_ˇºõr_îr‹s
)},

85 {"tx_fifo_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
tx_fifo_îr‹s
)},

86 {"tx_hóπbót_îr‹s", 
IXGBE_STAT
(
√t_°©s
.
tx_hóπbót_îr‹s
)},

87 {"tx_timeout_cou¡", 
IXGBE_STAT
(
tx_timeout_cou¡
)},

88 {"tx_ª°¨t_queue", 
IXGBE_STAT
(
ª°¨t_queue
)},

89 {"rx_l⁄g_Àngth_îr‹s", 
IXGBE_STAT
(
°©s
.
roc
)},

90 {"rx_sh‹t_Àngth_îr‹s", 
IXGBE_STAT
(
°©s
.
ruc
)},

91 #ifde‡
NETIF_F_TSO


92 {"tx_t˝4_£g_˘xt", 
IXGBE_STAT
(
hw_tso_˘xt
)},

93 #ifde‡
NETIF_F_TSO6


94 {"tx_t˝6_£g_˘xt", 
IXGBE_STAT
(
hw_tso6_˘xt
)},

97 {"tx_Êow_c⁄åﬁ_x⁄", 
IXGBE_STAT
(
°©s
.
lx⁄txc
)},

98 {"rx_Êow_c⁄åﬁ_x⁄", 
IXGBE_STAT
(
°©s
.
lx⁄rxc
)},

99 {"tx_Êow_c⁄åﬁ_xoff", 
IXGBE_STAT
(
°©s
.
lxof·xc
)},

100 {"rx_Êow_c⁄åﬁ_xoff", 
IXGBE_STAT
(
°©s
.
lxof‰xc
)},

101 {"rx_csum_ofÊﬂd_good", 
IXGBE_STAT
(
hw_csum_rx_good
)},

102 {"rx_csum_ofÊﬂd_îr‹s", 
IXGBE_STAT
(
hw_csum_rx_îr‹
)},

103 {"tx_csum_ofÊﬂd_˘xt", 
IXGBE_STAT
(
hw_csum_tx_good
)},

104 #i‚de‡
IXGBE_NO_LLI


105 {"low_œãncy_öãºu±", 
IXGBE_STAT
(
Œi_öt
)},

107 {"Æloc_rx_∑ge_Áûed", 
IXGBE_STAT
(
Æloc_rx_∑ge_Áûed
)},

108 {"Æloc_rx_buff_Áûed", 
IXGBE_STAT
(
Æloc_rx_buff_Áûed
)},

109 #i‚de‡
IXGBE_NO_LRO


110 {"Ão_aggªg©ed", 
IXGBE_STAT
(
Ão_°©s
.
cﬂl
)},

111 {"Ão_Êushed", 
IXGBE_STAT
(
Ão_°©s
.
Êushed
)},

112 {"Ão_ªcy˛ed", 
IXGBE_STAT
(
Ão_°©s
.
ªcy˛ed
)},

114 {"rx_no_dma_ªsour˚s", 
IXGBE_STAT
(
hw_rx_no_dma_ªsour˚s
)},

115 #i‚de‡
IXGBE_NO_HW_RSC


116 {"hw_rsc_cou¡", 
IXGBE_STAT
(
rsc_cou¡
)},

118 {"rx_Êm", 
IXGBE_STAT
(
Êm
)},

119 {"fdú_m©ch", 
IXGBE_STAT
(
°©s
.
fdúm©ch
)},

120 {"fdú_miss", 
IXGBE_STAT
(
°©s
.
fdúmiss
)},

123 
	#IXGBE_QUEUE_STATS_LEN
 \

124 ((((
ixgbe_ad≠ãr
 *)
	`√tdev_¥iv
(
√tdev
))->
num_tx_queues
 + \

125 ((
ixgbe_ad≠ãr
 *)
	`√tdev_¥iv
(
√tdev
))->
num_rx_queues
) * \

126 ((
ixgbe_queue_°©s
Ë/ (
u64
)))

	)

127 
	#IXGBE_PB_STATS_LEN
 ( \

128 (((
ixgbe_ad≠ãr
 *)
	`√tdev_¥iv
(
√tdev
))->
Êags
 & \

129 
IXGBE_FLAG_DCB_ENABLED
) ? \

130 ((((
ixgbe_ad≠ãr
 *)0)->
°©s
.
px⁄rxc
) + \

131 (((
ixgbe_ad≠ãr
 *)0)->
°©s
.
px⁄txc
) + \

132 (((
ixgbe_ad≠ãr
 *)0)->
°©s
.
pxof‰xc
) + \

133 (((
ixgbe_ad≠ãr
 *)0)->
°©s
.
pxof·xc
)) \

134 / (
u64
Ë: 0)

	)

135 
	#IXGBE_STATS_LEN
 (
IXGBE_GLOBAL_STATS_LEN
 + 
IXGBE_PB_STATS_LEN
 + 
IXGBE_QUEUE_STATS_LEN
)

	)

136 
	#IXGBE_GLOBAL_STATS_LEN
 
	`ARRAY_SIZE
(
ixgbe_g°rögs_°©s
)

	)

138 #ifde‡
ETHTOOL_TEST


139 c⁄° 
	gixgbe_g°rögs_ã°
[][
ETH_GSTRING_LEN
] = {

144 
	#IXGBE_TEST_LEN
 (
ixgbe_g°rögs_ã°
Ë/ 
ETH_GSTRING_LEN


	)

147 
	$ixgbe_gë_£âögs
(
√t_devi˚
 *
√tdev
,

148 
ëhtoﬁ_cmd
 *
ecmd
)

150 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

151 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

152 
u32
 
lök_•ìd
 = 0;

153 
boﬁ
 
lök_up
;

155 
ecmd
->
suµ‹ãd
 = 
SUPPORTED_10000ba£T_FuŒ
;

156 
ecmd
->
aut⁄eg
 = 
AUTONEG_ENABLE
;

157 
ecmd
->
å™s˚ivî
 = 
XCVR_EXTERNAL
;

158 i‡((
hw
->
phy
.
medü_ty≥
 =
ixgbe_medü_ty≥_c›≥r
) ||

159 (
hw
->
phy
.
mu…i•ìd_fibî
)) {

160 
ecmd
->
suµ‹ãd
 |(
SUPPORTED_1000ba£T_FuŒ
 |

161 
SUPPORTED_Aut⁄eg
);

163 
ecmd
->
advîtisög
 = 
ADVERTISED_Aut⁄eg
;

164 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_10GB_FULL
)

165 
ecmd
->
advîtisög
 |
ADVERTISED_10000ba£T_FuŒ
;

166 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_1GB_FULL
)

167 
ecmd
->
advîtisög
 |
ADVERTISED_1000ba£T_FuŒ
;

173 i‡(!(
ecmd
->
advîtisög
 & (
ADVERTISED_1000ba£T_FuŒ
 |

174 
ADVERTISED_10000ba£T_FuŒ
)))

175 
ecmd
->
advîtisög
 |(
ADVERTISED_10000ba£T_FuŒ
 |

176 
ADVERTISED_1000ba£T_FuŒ
);

178 i‡(
hw
->
phy
.
medü_ty≥
 =
ixgbe_medü_ty≥_c›≥r
) {

179 
ecmd
->
suµ‹ãd
 |
SUPPORTED_TP
;

180 
ecmd
->
advîtisög
 |
ADVERTISED_TP
;

181 
ecmd
->
p‹t
 = 
PORT_TP
;

183 
ecmd
->
suµ‹ãd
 |
SUPPORTED_FIBRE
;

184 
ecmd
->
advîtisög
 |
ADVERTISED_FIBRE
;

185 
ecmd
->
p‹t
 = 
PORT_FIBRE
;

187 } i‡(
hw
->
phy
.
medü_ty≥
 =
ixgbe_medü_ty≥_back∂™e
) {

189 
hw
->
devi˚_id
) {

190 
IXGBE_DEV_ID_82598
:

191 
ecmd
->
suµ‹ãd
 |(
SUPPORTED_1000ba£T_FuŒ
 |

192 
SUPPORTED_FIBRE
);

193 
ecmd
->
advîtisög
 = (
ADVERTISED_10000ba£T_FuŒ
 |

194 
ADVERTISED_1000ba£T_FuŒ
 |

195 
ADVERTISED_FIBRE
);

196 
ecmd
->
p‹t
 = 
PORT_FIBRE
;

198 
IXGBE_DEV_ID_82598_BX
:

199 
ecmd
->
suµ‹ãd
 = (
SUPPORTED_1000ba£T_FuŒ
 |

200 
SUPPORTED_FIBRE
);

201 
ecmd
->
advîtisög
 = (
ADVERTISED_1000ba£T_FuŒ
 |

202 
ADVERTISED_FIBRE
);

203 
ecmd
->
p‹t
 = 
PORT_FIBRE
;

204 
ecmd
->
aut⁄eg
 = 
AUTONEG_DISABLE
;

208 
ecmd
->
suµ‹ãd
 |
SUPPORTED_FIBRE
;

209 
ecmd
->
advîtisög
 = (
ADVERTISED_10000ba£T_FuŒ
 |

210 
ADVERTISED_FIBRE
);

211 
ecmd
->
p‹t
 = 
PORT_FIBRE
;

212 
ecmd
->
aut⁄eg
 = 
AUTONEG_DISABLE
;

215 i‡(!
	`ö_öãºu±
()) {

216 
hw
->
mac
.
›s
.
	`check_lök
(hw, &
lök_•ìd
, &
lök_up
, 
Ál£
);

222 
lök_•ìd
 = 
ad≠ãr
->link_speed;

223 
lök_up
 = 
ad≠ãr
->link_up;

226 i‡(
lök_up
) {

227 
ecmd
->
•ìd
 = (
lök_•ìd
 =
IXGBE_LINK_SPEED_10GB_FULL
) ?

228 
SPEED_10000
 : 
SPEED_1000
;

229 
ecmd
->
du∂ex
 = 
DUPLEX_FULL
;

231 
ecmd
->
•ìd
 = -1;

232 
ecmd
->
du∂ex
 = -1;

236 
	}
}

238 
	$ixgbe_£t_£âögs
(
√t_devi˚
 *
√tdev
,

239 
ëhtoﬁ_cmd
 *
ecmd
)

241 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

242 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

243 
u32
 
advîti£d
, 
ﬁd
;

244 
s32
 
îr
 = 0;

246 i‡((
hw
->
phy
.
medü_ty≥
 =
ixgbe_medü_ty≥_c›≥r
) ||

247 (
hw
->
phy
.
mu…i•ìd_fibî
)) {

251 i‡(
ecmd
->
aut⁄eg
 =
AUTONEG_DISABLE
)

252  -
EINVAL
;

254 
ﬁd
 = 
hw
->
phy
.
aut⁄eg_advîti£d
;

255 
advîti£d
 = 0;

256 i‡(
ecmd
->
advîtisög
 & 
ADVERTISED_10000ba£T_FuŒ
)

257 
advîti£d
 |
IXGBE_LINK_SPEED_10GB_FULL
;

259 i‡(
ecmd
->
advîtisög
 & 
ADVERTISED_1000ba£T_FuŒ
)

260 
advîti£d
 |
IXGBE_LINK_SPEED_1GB_FULL
;

262 i‡(
ﬁd
 =
advîti£d
)

263  
îr
;

265 
hw
->
mac
.
autŸry_ª°¨t
 = 
åue
;

266 
îr
 = 
hw
->
mac
.
›s
.
	`£tup_lök_•ìd
(hw, 
advîti£d
, 
åue
,Årue);

267 i‡(
îr
) {

268 
	`DPRINTK
(
PROBE
, 
INFO
,

269 "£tu∞lök faûed wôh codê%d\n", 
îr
);

270 
hw
->
mac
.
›s
.
	`£tup_lök_•ìd
(hw, 
ﬁd
, 
åue
,Årue);

274 i‡((
ecmd
->
aut⁄eg
 =
AUTONEG_ENABLE
) ||

275 (
ecmd
->
advîtisög
 !
ADVERTISED_10000ba£T_FuŒ
) ||

276 (
ecmd
->
•ìd
 +Écmd->
du∂ex
 !
SPEED_10000
 + 
DUPLEX_FULL
))

277  -
EINVAL
;

280  
îr
;

281 
	}
}

283 
	$ixgbe_gë_∑u£∑øm
(
√t_devi˚
 *
√tdev
,

284 
ëhtoﬁ_∑u£∑øm
 *
∑u£
)

286 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

287 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

294 i‡(
hw
->
fc
.
dißbÀ_fc_aut⁄eg
 || (hw->fc.
cuºít_mode
 =
ixgbe_fc_n⁄e
))

295 
∑u£
->
aut⁄eg
 = 0;

297 
∑u£
->
aut⁄eg
 = 1;

299 #ifde‡
CONFIG_DCB


300 i‡(
hw
->
fc
.
cuºít_mode
 =
ixgbe_fc_pfc
) {

301 
∑u£
->
rx_∑u£
 = 0;

302 
∑u£
->
tx_∑u£
 = 0;

307 i‡(
hw
->
fc
.
cuºít_mode
 =
ixgbe_fc_rx_∑u£
) {

308 
∑u£
->
rx_∑u£
 = 1;

309 } i‡(
hw
->
fc
.
cuºít_mode
 =
ixgbe_fc_tx_∑u£
) {

310 
∑u£
->
tx_∑u£
 = 1;

311 } i‡(
hw
->
fc
.
cuºít_mode
 =
ixgbe_fc_fuŒ
) {

312 
∑u£
->
rx_∑u£
 = 1;

313 
∑u£
->
tx_∑u£
 = 1;

315 
	}
}

317 
	$ixgbe_£t_∑u£∑øm
(
√t_devi˚
 *
√tdev
,

318 
ëhtoﬁ_∑u£∑øm
 *
∑u£
)

320 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

321 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

322 
ixgbe_fc_öfo
 
fc
;

324 i‡(
ad≠ãr
->
dcb_cfg
.
pfc_mode_íabÀ
 ||

325 ((
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) &&

326 (
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
)))

327  -
EINVAL
;

329 
fc
 = 
hw
->fc;

331 i‡(
∑u£
->
aut⁄eg
 !
AUTONEG_ENABLE
)

332 
fc
.
dißbÀ_fc_aut⁄eg
 = 
åue
;

334 
fc
.
dißbÀ_fc_aut⁄eg
 = 
Ál£
;

336 i‡(
∑u£
->
rx_∑u£
 &&Öau£->
tx_∑u£
)

337 
fc
.
ªque°ed_mode
 = 
ixgbe_fc_fuŒ
;

338 i‡(
∑u£
->
rx_∑u£
 && !∑u£->
tx_∑u£
)

339 
fc
.
ªque°ed_mode
 = 
ixgbe_fc_rx_∑u£
;

340 i‡(!
∑u£
->
rx_∑u£
 &&Öau£->
tx_∑u£
)

341 
fc
.
ªque°ed_mode
 = 
ixgbe_fc_tx_∑u£
;

342 i‡(!
∑u£
->
rx_∑u£
 && !∑u£->
tx_∑u£
)

343 
fc
.
ªque°ed_mode
 = 
ixgbe_fc_n⁄e
;

345  -
EINVAL
;

347 
ad≠ãr
->
œ°_lfc_mode
 = 
fc
.
ªque°ed_mode
;

350 i‡(
	`memcmp
(&
fc
, &
hw
->fc, (
ixgbe_fc_öfo
))) {

351 
hw
->
fc
 = fc;

352 i‡(
	`√tif_ru¬ög
(
√tdev
))

353 
	`ixgbe_ªöô_locked
(
ad≠ãr
);

355 
	`ixgbe_ª£t
(
ad≠ãr
);

359 
	}
}

361 
u32
 
	$ixgbe_gë_rx_csum
(
√t_devi˚
 *
√tdev
)

363 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

364  (
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_CSUM_ENABLED
);

365 
	}
}

367 
	$ixgbe_£t_rx_csum
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

369 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

370 i‡(
d©a
)

371 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_RX_CSUM_ENABLED
;

373 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_RX_CSUM_ENABLED
;

375 i‡(
	`√tif_ru¬ög
(
√tdev
))

376 
	`ixgbe_ªöô_locked
(
ad≠ãr
);

378 
	`ixgbe_ª£t
(
ad≠ãr
);

381 
	}
}

383 
u32
 
	$ixgbe_gë_tx_csum
(
√t_devi˚
 *
√tdev
)

385  (
√tdev
->
„©uªs
 & 
NETIF_F_IP_CSUM
) != 0;

386 
	}
}

388 
	$ixgbe_£t_tx_csum
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

390 i‡(
d©a
)

391 #ifde‡
NETIF_F_IPV6_CSUM


392 
√tdev
->
„©uªs
 |(
NETIF_F_IP_CSUM
 | 
NETIF_F_IPV6_CSUM
);

394 
√tdev
->
„©uªs
 &~(
NETIF_F_IP_CSUM
 | 
NETIF_F_IPV6_CSUM
);

396 
√tdev
->
„©uªs
 |
NETIF_F_IP_CSUM
;

398 
√tdev
->
„©uªs
 &~
NETIF_F_IP_CSUM
;

402 
	}
}

404 #ifde‡
NETIF_F_TSO


405 
	$ixgbe_£t_tso
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

407 #i‚de‡
HAVE_NETDEV_VLAN_FEATURES


408 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

410 i‡(
d©a
) {

411 
√tdev
->
„©uªs
 |
NETIF_F_TSO
;

412 #ifde‡
NETIF_F_TSO6


413 
√tdev
->
„©uªs
 |
NETIF_F_TSO6
;

416 
	`√tif_tx_°›_Æl_queues
(
√tdev
);

417 
√tdev
->
„©uªs
 &~
NETIF_F_TSO
;

418 #ifde‡
NETIF_F_TSO6


419 
√tdev
->
„©uªs
 &~
NETIF_F_TSO6
;

421 #i‚de‡
HAVE_NETDEV_VLAN_FEATURES


422 #ifde‡
NETIF_F_HW_VLAN_TX


424 i‡(
ad≠ãr
->
vlgΩ
) {

425 
i
;

426 
√t_devi˚
 *
v_√tdev
;

427 
i
 = 0; i < 
VLAN_GROUP_ARRAY_LEN
; i++) {

428 
v_√tdev
 =

429 
	`vœn_group_gë_devi˚
(
ad≠ãr
->
vlgΩ
, 
i
);

430 i‡(
v_√tdev
) {

431 
v_√tdev
->
„©uªs
 &~
NETIF_F_TSO
;

432 #ifde‡
NETIF_F_TSO6


433 
v_√tdev
->
„©uªs
 &~
NETIF_F_TSO6
;

435 
	`vœn_group_£t_devi˚
(
ad≠ãr
->
vlgΩ
, 
i
,

436 
v_√tdev
);

442 
	`√tif_tx_°¨t_Æl_queues
(
√tdev
);

445 
	}
}

448 
u32
 
	$ixgbe_gë_msgÀvñ
(
√t_devi˚
 *
√tdev
)

450 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

451  
ad≠ãr
->
msg_íabÀ
;

452 
	}
}

454 
	$ixgbe_£t_msgÀvñ
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

456 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

457 
ad≠ãr
->
msg_íabÀ
 = 
d©a
;

458 
	}
}

460 
	$ixgbe_gë_ªgs_Àn
(
√t_devi˚
 *
√tdev
)

462 
	#IXGBE_REGS_LEN
 1128

	)

463  
IXGBE_REGS_LEN
 * (
u32
);

464 
	}
}

466 
	#IXGBE_GET_STAT
(
_A_
, 
_R_
Ë_A_->
°©s
.
	)
_R_

468 
	$ixgbe_gë_ªgs
(
√t_devi˚
 *
√tdev
, 
ëhtoﬁ_ªgs
 *
ªgs
,

469 *
p
)

471 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

472 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

473 
u32
 *
ªgs_buff
 = 
p
;

474 
u8
 
i
;

476 
	`mem£t
(
p
, 0, 
IXGBE_REGS_LEN
 * (
u32
));

478 
ªgs
->
vîsi⁄
 = (1 << 24Ë| 
hw
->
ªvisi⁄_id
 << 16 | hw->
devi˚_id
;

481 
ªgs_buff
[0] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL
);

482 
ªgs_buff
[1] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_STATUS
);

483 
ªgs_buff
[2] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL_EXT
);

484 
ªgs_buff
[3] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ESDP
);

485 
ªgs_buff
[4] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EODSDP
);

486 
ªgs_buff
[5] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LEDCTL
);

487 
ªgs_buff
[6] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FRTIMER
);

488 
ªgs_buff
[7] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TCPTIMER
);

491 
ªgs_buff
[8] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEC
);

492 
ªgs_buff
[9] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EERD
);

493 
ªgs_buff
[10] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FLA
);

494 
ªgs_buff
[11] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEMNGCTL
);

495 
ªgs_buff
[12] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EEMNGDATA
);

496 
ªgs_buff
[13] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FLMNGCTL
);

497 
ªgs_buff
[14] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FLMNGDATA
);

498 
ªgs_buff
[15] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FLMNGCNT
);

499 
ªgs_buff
[16] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FLOP
);

500 
ªgs_buff
[17] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GRC
);

505 
ªgs_buff
[18] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EICS
);

506 
ªgs_buff
[19] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EICS
);

507 
ªgs_buff
[20] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EIMS
);

508 
ªgs_buff
[21] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EIMC
);

509 
ªgs_buff
[22] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EIAC
);

510 
ªgs_buff
[23] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EIAM
);

511 
ªgs_buff
[24] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_EITR
(0));

512 
ªgs_buff
[25] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_IVAR
(0));

513 
ªgs_buff
[26] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSIXT
);

514 
ªgs_buff
[27] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSIXPBA
);

515 
ªgs_buff
[28] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PBACL
(0));

516 
ªgs_buff
[29] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GPIE
);

519 
ªgs_buff
[30] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PFCTOP
);

520 
ªgs_buff
[31] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCTTV
(0));

521 
ªgs_buff
[32] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCTTV
(1));

522 
ªgs_buff
[33] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCTTV
(2));

523 
ªgs_buff
[34] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCTTV
(3));

524 
i
 = 0; i < 8; i++)

525 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

526 
ªgs_buff
[35 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCRTL_82599
(i));

528 
ªgs_buff
[35 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCRTL
(i));

529 
i
 = 0; i < 8; i++)

530 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

531 
ªgs_buff
[43 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCRTH_82599
(i));

533 
ªgs_buff
[43 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FCRTH
(i));

534 
ªgs_buff
[51] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCRTV
);

535 
ªgs_buff
[52] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TFCS
);

538 
i
 = 0; i < 64; i++)

539 
ªgs_buff
[53 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RDBAL
(i));

540 
i
 = 0; i < 64; i++)

541 
ªgs_buff
[117 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RDBAH
(i));

542 
i
 = 0; i < 64; i++)

543 
ªgs_buff
[181 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RDLEN
(i));

544 
i
 = 0; i < 64; i++)

545 
ªgs_buff
[245 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RDH
(i));

546 
i
 = 0; i < 64; i++)

547 
ªgs_buff
[309 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RDT
(i));

548 
i
 = 0; i < 64; i++)

549 
ªgs_buff
[373 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXDCTL
(i));

550 
i
 = 0; i < 16; i++)

551 
ªgs_buff
[437 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_SRRCTL
(i));

552 
i
 = 0; i < 16; i++)

553 
ªgs_buff
[453 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_DCA_RXCTRL
(i));

554 
ªgs_buff
[469] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RDRXCTL
);

555 
i
 = 0; i < 8; i++)

556 
ªgs_buff
[470 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXPBSIZE
(i));

557 
ªgs_buff
[478] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCTRL
);

558 
ªgs_buff
[479] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DROPEN
);

561 
ªgs_buff
[480] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCSUM
);

562 
ªgs_buff
[481] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RFCTL
);

563 
i
 = 0; i < 16; i++)

564 
ªgs_buff
[482 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAL
(i));

565 
i
 = 0; i < 16; i++)

566 
ªgs_buff
[498 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RAH
(i));

567 
ªgs_buff
[514] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PSRTYPE
(0));

568 
ªgs_buff
[515] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

569 
ªgs_buff
[516] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_VLNCTRL
);

570 
ªgs_buff
[517] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MCSTCTRL
);

571 
ªgs_buff
[518] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MRQC
);

572 
ªgs_buff
[519] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_VMD_CTL
);

573 
i
 = 0; i < 8; i++)

574 
ªgs_buff
[520 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_IMIR
(i));

575 
i
 = 0; i < 8; i++)

576 
ªgs_buff
[528 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_IMIREXT
(i));

577 
ªgs_buff
[536] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_IMIRVP
);

580 
i
 = 0; i < 32; i++)

581 
ªgs_buff
[537 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDBAL
(i));

582 
i
 = 0; i < 32; i++)

583 
ªgs_buff
[569 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDBAH
(i));

584 
i
 = 0; i < 32; i++)

585 
ªgs_buff
[601 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDLEN
(i));

586 
i
 = 0; i < 32; i++)

587 
ªgs_buff
[633 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDH
(i));

588 
i
 = 0; i < 32; i++)

589 
ªgs_buff
[665 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDT
(i));

590 
i
 = 0; i < 32; i++)

591 
ªgs_buff
[697 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(i));

592 
i
 = 0; i < 32; i++)

593 
ªgs_buff
[729 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDWBAL
(i));

594 
i
 = 0; i < 32; i++)

595 
ªgs_buff
[761 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDWBAH
(i));

596 
ªgs_buff
[793] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DTXCTL
);

597 
i
 = 0; i < 16; i++)

598 
ªgs_buff
[794 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_DCA_TXCTRL
(i));

599 
ªgs_buff
[810] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TIPG
);

600 
i
 = 0; i < 8; i++)

601 
ªgs_buff
[811 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXPBSIZE
(i));

602 
ªgs_buff
[819] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MNGTXMAP
);

605 
ªgs_buff
[820] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_WUC
);

606 
ªgs_buff
[821] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_WUFC
);

607 
ªgs_buff
[822] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_WUS
);

608 
ªgs_buff
[823] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_IPAV
);

609 
ªgs_buff
[824] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_IP4AT
);

610 
ªgs_buff
[825] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_IP6AT
);

611 
ªgs_buff
[826] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_WUPL
);

612 
ªgs_buff
[827] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_WUPM
);

613 
ªgs_buff
[828] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_FHFT
(0));

616 
ªgs_buff
[829] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RMCS
);

617 
ªgs_buff
[830] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DPMCS
);

618 
ªgs_buff
[831] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PDPMCS
);

619 
ªgs_buff
[832] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RUPPBMR
);

620 
i
 = 0; i < 8; i++)

621 
ªgs_buff
[833 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RT2CR
(i));

622 
i
 = 0; i < 8; i++)

623 
ªgs_buff
[841 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RT2SR
(i));

624 
i
 = 0; i < 8; i++)

625 
ªgs_buff
[849 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDTQ2TCCR
(i));

626 
i
 = 0; i < 8; i++)

627 
ªgs_buff
[857 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDTQ2TCSR
(i));

628 
i
 = 0; i < 8; i++)

629 
ªgs_buff
[865 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDPT2TCCR
(i));

630 
i
 = 0; i < 8; i++)

631 
ªgs_buff
[873 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDPT2TCSR
(i));

634 
ªgs_buff
[881] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
¸˚ºs
);

635 
ªgs_buff
[882] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
ûÀºc
);

636 
ªgs_buff
[883] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
îrbc
);

637 
ªgs_buff
[884] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
m•dc
);

638 
i
 = 0; i < 8; i++)

639 
ªgs_buff
[885 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
mpc
[i]);

640 
ªgs_buff
[893] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
mlfc
);

641 
ªgs_buff
[894] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
mrfc
);

642 
ªgs_buff
[895] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
æec
);

643 
ªgs_buff
[896] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
lx⁄txc
);

644 
ªgs_buff
[897] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
lx⁄rxc
);

645 
ªgs_buff
[898] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
lxof·xc
);

646 
ªgs_buff
[899] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
lxof‰xc
);

647 
i
 = 0; i < 8; i++)

648 
ªgs_buff
[900 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
px⁄txc
[i]);

649 
i
 = 0; i < 8; i++)

650 
ªgs_buff
[908 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
px⁄rxc
[i]);

651 
i
 = 0; i < 8; i++)

652 
ªgs_buff
[916 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
pxof·xc
[i]);

653 
i
 = 0; i < 8; i++)

654 
ªgs_buff
[924 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
pxof‰xc
[i]);

655 
ªgs_buff
[932] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
¥c64
);

656 
ªgs_buff
[933] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
¥c127
);

657 
ªgs_buff
[934] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
¥c255
);

658 
ªgs_buff
[935] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
¥c511
);

659 
ªgs_buff
[936] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
¥c1023
);

660 
ªgs_buff
[937] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
¥c1522
);

661 
ªgs_buff
[938] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
g¥c
);

662 
ªgs_buff
[939] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
b¥c
);

663 
ªgs_buff
[940] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
m¥c
);

664 
ªgs_buff
[941] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
g±c
);

665 
ªgs_buff
[942] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
g‹c
);

666 
ªgs_buff
[944] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
gŸc
);

667 
i
 = 0; i < 8; i++)

668 
ªgs_buff
[946 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
∫bc
[i]);

669 
ªgs_buff
[954] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
ruc
);

670 
ªgs_buff
[955] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
rfc
);

671 
ªgs_buff
[956] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
roc
);

672 
ªgs_buff
[957] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
rjc
);

673 
ªgs_buff
[958] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
mng¥c
);

674 
ªgs_buff
[959] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
mngpdc
);

675 
ªgs_buff
[960] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
mng±c
);

676 
ªgs_buff
[961] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
t‹
);

677 
ªgs_buff
[963] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
çr
);

678 
ªgs_buff
[964] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
çt
);

679 
ªgs_buff
[965] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
±c64
);

680 
ªgs_buff
[966] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
±c127
);

681 
ªgs_buff
[967] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
±c255
);

682 
ªgs_buff
[968] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
±c511
);

683 
ªgs_buff
[969] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
±c1023
);

684 
ªgs_buff
[970] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
±c1522
);

685 
ªgs_buff
[971] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
m±c
);

686 
ªgs_buff
[972] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
b±c
);

687 
ªgs_buff
[973] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
xec
);

688 
i
 = 0; i < 16; i++)

689 
ªgs_buff
[974 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
q¥c
[i]);

690 
i
 = 0; i < 16; i++)

691 
ªgs_buff
[990 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
q±c
[i]);

692 
i
 = 0; i < 16; i++)

693 
ªgs_buff
[1006 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
qbrc
[i]);

694 
i
 = 0; i < 16; i++)

695 
ªgs_buff
[1022 + 
i
] = 
	`IXGBE_GET_STAT
(
ad≠ãr
, 
qbtc
[i]);

698 
ªgs_buff
[1038] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GCFIG
);

699 
ªgs_buff
[1039] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GLCTL
);

700 
ªgs_buff
[1040] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GLSTA
);

701 
ªgs_buff
[1041] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GDBG0
);

702 
ªgs_buff
[1042] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GDBG1
);

703 
ªgs_buff
[1043] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GANA
);

704 
ªgs_buff
[1044] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GANLP
);

705 
ªgs_buff
[1045] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GANNP
);

706 
ªgs_buff
[1046] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCS1GANLPNP
);

707 
ªgs_buff
[1047] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_HLREG0
);

708 
ªgs_buff
[1048] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_HLREG1
);

709 
ªgs_buff
[1049] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PAP
);

710 
ªgs_buff
[1050] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MACA
);

711 
ªgs_buff
[1051] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_APAE
);

712 
ªgs_buff
[1052] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ARD
);

713 
ªgs_buff
[1053] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AIS
);

714 
ªgs_buff
[1054] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSCA
);

715 
ªgs_buff
[1055] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSRWD
);

716 
ªgs_buff
[1056] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MLADD
);

717 
ªgs_buff
[1057] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MHADD
);

718 
ªgs_buff
[1058] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TREG
);

719 
ªgs_buff
[1059] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCSS1
);

720 
ªgs_buff
[1060] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCSS2
);

721 
ªgs_buff
[1061] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_XPCSS
);

722 
ªgs_buff
[1062] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_SERDESC
);

723 
ªgs_buff
[1063] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MACS
);

724 
ªgs_buff
[1064] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC
);

725 
ªgs_buff
[1065] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LINKS
);

726 
ªgs_buff
[1066] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC2
);

727 
ªgs_buff
[1067] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_AUTOC3
);

728 
ªgs_buff
[1068] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ANLP1
);

729 
ªgs_buff
[1069] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ANLP2
);

730 
ªgs_buff
[1070] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ATLASCTL
);

733 
ªgs_buff
[1071] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RDSTATCTL
);

734 
i
 = 0; i < 8; i++)

735 
ªgs_buff
[1072 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RDSTAT
(i));

736 
ªgs_buff
[1080] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RDHMPN
);

737 
i
 = 0; i < 4; i++)

738 
ªgs_buff
[1081 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RIC_DW
(i));

739 
ªgs_buff
[1085] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RDPROBE
);

740 
ªgs_buff
[1086] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TDSTATCTL
);

741 
i
 = 0; i < 8; i++)

742 
ªgs_buff
[1087 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TDSTAT
(i));

743 
ªgs_buff
[1095] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TDHMPN
);

744 
i
 = 0; i < 4; i++)

745 
ªgs_buff
[1096 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TIC_DW
(i));

746 
ªgs_buff
[1100] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TDPROBE
);

747 
ªgs_buff
[1101] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TXBUFCTRL
);

748 
ªgs_buff
[1102] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TXBUFDATA0
);

749 
ªgs_buff
[1103] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TXBUFDATA1
);

750 
ªgs_buff
[1104] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TXBUFDATA2
);

751 
ªgs_buff
[1105] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TXBUFDATA3
);

752 
ªgs_buff
[1106] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXBUFCTRL
);

753 
ªgs_buff
[1107] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXBUFDATA0
);

754 
ªgs_buff
[1108] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXBUFDATA1
);

755 
ªgs_buff
[1109] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXBUFDATA2
);

756 
ªgs_buff
[1110] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXBUFDATA3
);

757 
i
 = 0; i < 8; i++)

758 
ªgs_buff
[1111 + 
i
] = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PCIE_DIAG
(i));

759 
ªgs_buff
[1119] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RFVAL
);

760 
ªgs_buff
[1120] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MDFTC1
);

761 
ªgs_buff
[1121] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MDFTC2
);

762 
ªgs_buff
[1122] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MDFTFIFO1
);

763 
ªgs_buff
[1123] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MDFTFIFO2
);

764 
ªgs_buff
[1124] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MDFTS
);

765 
ªgs_buff
[1125] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PCIEECCCTL
);

766 
ªgs_buff
[1126] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PBTXECC
);

767 
ªgs_buff
[1127] = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PBRXECC
);

768 
	}
}

770 
	$ixgbe_gë_ì¥om_Àn
(
√t_devi˚
 *
√tdev
)

772 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

773  
ad≠ãr
->
hw
.
ì¥om
.
w‹d_size
 * 2;

774 
	}
}

776 
	$ixgbe_gë_ì¥om
(
√t_devi˚
 *
√tdev
,

777 
ëhtoﬁ_ì¥om
 *
ì¥om
, 
u8
 *
byãs
)

779 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

780 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

781 
u16
 *
ì¥om_buff
;

782 
fú°_w‹d
, 
œ°_w‹d
, 
ì¥om_Àn
;

783 
ªt_vÆ
 = 0;

784 
u16
 
i
;

786 i‡(
ì¥om
->
Àn
 == 0)

787  -
EINVAL
;

789 
ì¥om
->
magic
 = 
hw
->
víd‹_id
 | (hw->
devi˚_id
 << 16);

791 
fú°_w‹d
 = 
ì¥om
->
off£t
 >> 1;

792 
œ°_w‹d
 = (
ì¥om
->
off£t
 +Éïrom->
Àn
 - 1) >> 1;

793 
ì¥om_Àn
 = 
œ°_w‹d
 - 
fú°_w‹d
 + 1;

795 
ì¥om_buff
 = 
	`kmÆloc
((
u16
Ë* 
ì¥om_Àn
, 
GFP_KERNEL
);

796 i‡(!
ì¥om_buff
)

797  -
ENOMEM
;

799 
i
 = 0; i < 
ì¥om_Àn
; i++) {

800 i‡((
ªt_vÆ
 = 
	`ixgbe_ªad_ì¥om
(
hw
, 
fú°_w‹d
 + 
i
,

801 &
ì¥om_buff
[
i
])))

806 
i
 = 0; i < 
ì¥om_Àn
; i++)

807 
	`À16_to_˝us
(&
ì¥om_buff
[
i
]);

809 
	`mem˝y
(
byãs
, (
u8
 *)
ì¥om_buff
 + (
ì¥om
->
off£t
 & 1),Éïrom->
Àn
);

810 
	`k‰ì
(
ì¥om_buff
);

812  
ªt_vÆ
;

813 
	}
}

815 
	$ixgbe_£t_ì¥om
(
√t_devi˚
 *
√tdev
,

816 
ëhtoﬁ_ì¥om
 *
ì¥om
, 
u8
 *
byãs
)

818 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

819 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

820 
u16
 *
ì¥om_buff
;

821 *
±r
;

822 
max_Àn
, 
fú°_w‹d
, 
œ°_w‹d
, 
ªt_vÆ
 = 0;

823 
u16
 
i
;

825 i‡(
ì¥om
->
Àn
 == 0)

826  -
EOPNOTSUPP
;

828 i‡(
ì¥om
->
magic
 !(
hw
->
víd‹_id
 | (hw->
devi˚_id
 << 16)))

829  -
EFAULT
;

831 
max_Àn
 = 
hw
->
ì¥om
.
w‹d_size
 * 2;

833 
fú°_w‹d
 = 
ì¥om
->
off£t
 >> 1;

834 
œ°_w‹d
 = (
ì¥om
->
off£t
 +Éïrom->
Àn
 - 1) >> 1;

835 
ì¥om_buff
 = 
	`kmÆloc
(
max_Àn
, 
GFP_KERNEL
);

836 i‡(!
ì¥om_buff
)

837  -
ENOMEM
;

839 
±r
 = (*)
ì¥om_buff
;

841 i‡(
ì¥om
->
off£t
 & 1) {

844 
ªt_vÆ
 = 
	`ixgbe_ªad_ì¥om
(
hw
, 
fú°_w‹d
, &
ì¥om_buff
[0]);

845 
±r
++;

847 i‡(((
ì¥om
->
off£t
 +Éïrom->
Àn
Ë& 1Ë&& (
ªt_vÆ
 == 0)) {

850 
ªt_vÆ
 = 
	`ixgbe_ªad_ì¥om
(
hw
, 
œ°_w‹d
,

851 &
ì¥om_buff
[
œ°_w‹d
 - 
fú°_w‹d
]);

855 
i
 = 0; i < 
œ°_w‹d
 - 
fú°_w‹d
 + 1; i++)

856 
	`À16_to_˝us
(&
ì¥om_buff
[
i
]);

858 
	`mem˝y
(
±r
, 
byãs
, 
ì¥om
->
Àn
);

860 
i
 = 0; i <(
œ°_w‹d
 - 
fú°_w‹d
); i++)

861 
ªt_vÆ
 |
	`ixgbe_wrôe_ì¥om
(
hw
, 
fú°_w‹d
 + 
i
, 
ì¥om_buff
[i]);

864 
	`ixgbe_upd©e_ì¥om_checksum
(
hw
);

866 
	`k‰ì
(
ì¥om_buff
);

867  
ªt_vÆ
;

868 
	}
}

870 
	$ixgbe_gë_drvöfo
(
√t_devi˚
 *
√tdev
,

871 
ëhtoﬁ_drvöfo
 *
drvöfo
)

873 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

874 
fúmw¨e_vîsi⁄
[32];

876 
	`°∫˝y
(
drvöfo
->
drivî
, 
ixgbe_drivî_«me
, 32);

877 
	`°∫˝y
(
drvöfo
->
vîsi⁄
, 
ixgbe_drivî_vîsi⁄
, 32);

879 
	`•rötf
(
fúmw¨e_vîsi⁄
, "%d.%d-%d",

880 (
ad≠ãr
->
ì¥om_vîsi⁄
 & 0xF000) >> 12,

881 (
ad≠ãr
->
ì¥om_vîsi⁄
 & 0x0FF0) >> 4,

882 
ad≠ãr
->
ì¥om_vîsi⁄
 & 0x000F);

884 
	`°∫˝y
(
drvöfo
->
fw_vîsi⁄
, 
fúmw¨e_vîsi⁄
, 32);

885 
	`°∫˝y
(
drvöfo
->
bus_öfo
, 
	`pci_«me
(
ad≠ãr
->
pdev
), 32);

886 
drvöfo
->
n_°©s
 = 
IXGBE_STATS_LEN
;

887 
drvöfo
->
ã°öfo_Àn
 = 
IXGBE_TEST_LEN
;

888 
drvöfo
->
ªgdump_Àn
 = 
	`ixgbe_gë_ªgs_Àn
(
√tdev
);

889 
	}
}

891 
	$ixgbe_gë_rög∑øm
(
√t_devi˚
 *
√tdev
,

892 
ëhtoﬁ_rög∑øm
 *
rög
)

894 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

895 
ixgbe_rög
 *
tx_rög
 = 
ad≠ãr
->tx_ring;

896 
ixgbe_rög
 *
rx_rög
 = 
ad≠ãr
->rx_ring;

898 
rög
->
rx_max_≥ndög
 = 
IXGBE_MAX_RXD
;

899 
rög
->
tx_max_≥ndög
 = 
IXGBE_MAX_TXD
;

900 
rög
->
rx_möi_max_≥ndög
 = 0;

901 
rög
->
rx_jumbo_max_≥ndög
 = 0;

902 
rög
->
rx_≥ndög
 = 
rx_rög
->
cou¡
;

903 
rög
->
tx_≥ndög
 = 
tx_rög
->
cou¡
;

904 
rög
->
rx_möi_≥ndög
 = 0;

905 
rög
->
rx_jumbo_≥ndög
 = 0;

906 
	}
}

908 
	$ixgbe_£t_rög∑øm
(
√t_devi˚
 *
√tdev
,

909 
ëhtoﬁ_rög∑øm
 *
rög
)

911 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

912 
ixgbe_rög
 *
ãmp_tx_rög
, *
ãmp_rx_rög
;

913 
i
, 
îr
;

914 
u32
 
√w_rx_cou¡
, 
√w_tx_cou¡
;

915 
boﬁ
 
√ed_upd©e
 = 
Ál£
;

917 i‡((
rög
->
rx_möi_≥ndög
Ë|| (rög->
rx_jumbo_≥ndög
))

918  -
EINVAL
;

920 
√w_rx_cou¡
 = 
	`max
(
rög
->
rx_≥ndög
, (
u32
)
IXGBE_MIN_RXD
);

921 
√w_rx_cou¡
 = 
	`mö
“ew_rx_cou¡, (
u32
)
IXGBE_MAX_RXD
);

922 
√w_rx_cou¡
 = 
	`ALIGN
“ew_rx_cou¡, 
IXGBE_REQ_RX_DESCRIPTOR_MULTIPLE
);

924 
√w_tx_cou¡
 = 
	`max
(
rög
->
tx_≥ndög
, (
u32
)
IXGBE_MIN_TXD
);

925 
√w_tx_cou¡
 = 
	`mö
“ew_tx_cou¡, (
u32
)
IXGBE_MAX_TXD
);

926 
√w_tx_cou¡
 = 
	`ALIGN
“ew_tx_cou¡, 
IXGBE_REQ_TX_DESCRIPTOR_MULTIPLE
);

928 i‡((
√w_tx_cou¡
 =
ad≠ãr
->
tx_rög
->
cou¡
) &&

929 (
√w_rx_cou¡
 =
ad≠ãr
->
rx_rög
->
cou¡
)) {

934 
	`ã°_™d_£t_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
))

935 
	`m¶ìp
(1);

937 
ãmp_tx_rög
 = 
	`kˇŒoc
(
ad≠ãr
->
num_tx_queues
,

938 (
ixgbe_rög
), 
GFP_KERNEL
);

939 i‡(!
ãmp_tx_rög
) {

940 
îr
 = -
ENOMEM
;

941 
îr_£tup
;

944 i‡(
√w_tx_cou¡
 !
ad≠ãr
->
tx_rög_cou¡
) {

945 
	`mem˝y
(
ãmp_tx_rög
, 
ad≠ãr
->
tx_rög
,

946 
ad≠ãr
->
num_tx_queues
 * (
ixgbe_rög
));

947 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

948 
ãmp_tx_rög
[
i
].
cou¡
 = 
√w_tx_cou¡
;

949 
îr
 = 
	`ixgbe_£tup_tx_ªsour˚s
(
ad≠ãr
,

950 &
ãmp_tx_rög
[
i
]);

951 i‡(
îr
) {

952 
i
) {

953 
i
--;

954 
	`ixgbe_‰ì_tx_ªsour˚s
(
ad≠ãr
,

955 &
ãmp_tx_rög
[
i
]);

957 
îr_£tup
;

960 
√ed_upd©e
 = 
åue
;

963 
ãmp_rx_rög
 = 
	`kˇŒoc
(
ad≠ãr
->
num_rx_queues
,

964 (
ixgbe_rög
), 
GFP_KERNEL
);

965 i‡((!
ãmp_rx_rög
Ë&& (
√ed_upd©e
)) {

966 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

967 
	`ixgbe_‰ì_tx_ªsour˚s
(
ad≠ãr
, &
ãmp_tx_rög
[
i
]);

968 
	`k‰ì
(
ãmp_tx_rög
);

969 
îr
 = -
ENOMEM
;

970 
îr_£tup
;

973 i‡(
√w_rx_cou¡
 !
ad≠ãr
->
rx_rög_cou¡
) {

974 
	`mem˝y
(
ãmp_rx_rög
, 
ad≠ãr
->
rx_rög
,

975 
ad≠ãr
->
num_rx_queues
 * (
ixgbe_rög
));

976 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

977 
ãmp_rx_rög
[
i
].
cou¡
 = 
√w_rx_cou¡
;

978 
îr
 = 
	`ixgbe_£tup_rx_ªsour˚s
(
ad≠ãr
,

979 &
ãmp_rx_rög
[
i
]);

980 i‡(
îr
) {

981 
i
) {

982 
i
--;

983 
	`ixgbe_‰ì_rx_ªsour˚s
(
ad≠ãr
,

984 &
ãmp_rx_rög
[
i
]);

986 
îr_£tup
;

989 
√ed_upd©e
 = 
åue
;

993 i‡(
√ed_upd©e
) {

994 i‡(
	`√tif_ru¬ög
(
√tdev
))

995 
	`ixgbe_down
(
ad≠ãr
);

998 i‡(
√w_tx_cou¡
 !
ad≠ãr
->
tx_rög_cou¡
) {

999 
	`k‰ì
(
ad≠ãr
->
tx_rög
);

1000 
ad≠ãr
->
tx_rög
 = 
ãmp_tx_rög
;

1001 
ãmp_tx_rög
 = 
NULL
;

1002 
ad≠ãr
->
tx_rög_cou¡
 = 
√w_tx_cou¡
;

1006 i‡(
√w_rx_cou¡
 !
ad≠ãr
->
rx_rög_cou¡
) {

1007 
	`k‰ì
(
ad≠ãr
->
rx_rög
);

1008 
ad≠ãr
->
rx_rög
 = 
ãmp_rx_rög
;

1009 
ãmp_rx_rög
 = 
NULL
;

1010 
ad≠ãr
->
rx_rög_cou¡
 = 
√w_rx_cou¡
;

1015 
îr
 = 0;

1016 i‡(
	`√tif_ru¬ög
(
√tdev
))

1017 
	`ixgbe_up
(
ad≠ãr
);

1019 
îr_£tup
:

1020 
	`˛ór_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
);

1021  
îr
;

1022 
	}
}

1024 #i‚de‡
HAVE_ETHTOOL_GET_SSET_COUNT


1025 
	$ixgbe_gë_°©s_cou¡
(
√t_devi˚
 *
√tdev
)

1027  
IXGBE_STATS_LEN
;

1028 
	}
}

1031 
	$ixgbe_gë_s£t_cou¡
(
√t_devi˚
 *
√tdev
, 
s£t
)

1033 
s£t
) {

1034 
ETH_SS_TEST
:

1035  
IXGBE_TEST_LEN
;

1036 
ETH_SS_STATS
:

1037  
IXGBE_STATS_LEN
;

1038 #ifde‡
NETIF_F_NTUPLE


1039 
ETH_SS_NTUPLE_FILTERS
:

1040  (
ETHTOOL_MAX_NTUPLE_LIST_ENTRY
 *

1041 
ETHTOOL_MAX_NTUPLE_STRING_PER_ENTRY
);

1044  -
EOPNOTSUPP
;

1046 
	}
}

1050 
	$ixgbe_gë_ëhtoﬁ_°©s
(
√t_devi˚
 *
√tdev
,

1051 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
)

1053 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1054 
u64
 *
queue_°©
;

1055 
°©_cou¡
 = (
ixgbe_queue_°©s
Ë/ (
u64
);

1056 
j
, 
k
;

1057 
i
;

1059 
	`ixgbe_upd©e_°©s
(
ad≠ãr
);

1060 
i
 = 0; i < 
IXGBE_GLOBAL_STATS_LEN
; i++) {

1061 *
p
 = (*)
ad≠ãr
 + 
ixgbe_g°rögs_°©s
[
i
].
°©_off£t
;

1062 
d©a
[
i
] = (
ixgbe_g°rögs_°©s
[i].
sizeof_°©
 ==

1063 (
u64
)Ë? *(u64 *)
p
 : *(
u32
 *)p;

1065 
j
 = 0; j < 
ad≠ãr
->
num_tx_queues
; j++) {

1066 
queue_°©
 = (
u64
 *)&
ad≠ãr
->
tx_rög
[
j
].
°©s
;

1067 
k
 = 0; k < 
°©_cou¡
; k++)

1068 
d©a
[
i
 + 
k
] = 
queue_°©
[k];

1069 
i
 +
k
;

1071 
j
 = 0; j < 
ad≠ãr
->
num_rx_queues
; j++) {

1072 
queue_°©
 = (
u64
 *)&
ad≠ãr
->
rx_rög
[
j
].
°©s
;

1073 
k
 = 0; k < 
°©_cou¡
; k++)

1074 
d©a
[
i
 + 
k
] = 
queue_°©
[k];

1075 
i
 +
k
;

1077 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

1078 
j
 = 0; j < 
MAX_TX_PACKET_BUFFERS
; j++) {

1079 
d©a
[
i
++] = 
ad≠ãr
->
°©s
.
px⁄txc
[
j
];

1080 
d©a
[
i
++] = 
ad≠ãr
->
°©s
.
pxof·xc
[
j
];

1082 
j
 = 0; j < 
MAX_RX_PACKET_BUFFERS
; j++) {

1083 
d©a
[
i
++] = 
ad≠ãr
->
°©s
.
px⁄rxc
[
j
];

1084 
d©a
[
i
++] = 
ad≠ãr
->
°©s
.
pxof‰xc
[
j
];

1087 
	}
}

1089 
	$ixgbe_gë_°rögs
(
√t_devi˚
 *
√tdev
, 
u32
 
°rög£t
,

1090 
u8
 *
d©a
)

1092 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1093 *
p
 = (*)
d©a
;

1094 
i
;

1096 
°rög£t
) {

1097 
ETH_SS_TEST
:

1098 
	`mem˝y
(
d©a
, *
ixgbe_g°rögs_ã°
,

1099 
IXGBE_TEST_LEN
 * 
ETH_GSTRING_LEN
);

1101 
ETH_SS_STATS
:

1102 
i
 = 0; i < 
IXGBE_GLOBAL_STATS_LEN
; i++) {

1103 
	`mem˝y
(
p
, 
ixgbe_g°rögs_°©s
[
i
].
°©_°rög
,

1104 
ETH_GSTRING_LEN
);

1105 
p
 +
ETH_GSTRING_LEN
;

1107 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

1108 
	`•rötf
(
p
, "tx_queue_%u_∑ckës", 
i
);

1109 
p
 +
ETH_GSTRING_LEN
;

1110 
	`•rötf
(
p
, "tx_queue_%u_byãs", 
i
);

1111 
p
 +
ETH_GSTRING_LEN
;

1113 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

1114 
	`•rötf
(
p
, "rx_queue_%u_∑ckës", 
i
);

1115 
p
 +
ETH_GSTRING_LEN
;

1116 
	`•rötf
(
p
, "rx_queue_%u_byãs", 
i
);

1117 
p
 +
ETH_GSTRING_LEN
;

1119 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

1120 
i
 = 0; i < 
MAX_TX_PACKET_BUFFERS
; i++) {

1121 
	`•rötf
(
p
, "tx_pb_%u_px⁄", 
i
);

1122 
p
 +
ETH_GSTRING_LEN
;

1123 
	`•rötf
(
p
, "tx_pb_%u_pxoff", 
i
);

1124 
p
 +
ETH_GSTRING_LEN
;

1126 
i
 = 0; i < 
MAX_RX_PACKET_BUFFERS
; i++) {

1127 
	`•rötf
(
p
, "rx_pb_%u_px⁄", 
i
);

1128 
p
 +
ETH_GSTRING_LEN
;

1129 
	`•rötf
(
p
, "rx_pb_%u_pxoff", 
i
);

1130 
p
 +
ETH_GSTRING_LEN
;

1136 
	}
}

1138 
	$ixgbe_lök_ã°
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1140 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1141 
boﬁ
 
lök_up
;

1142 
u32
 
lök_•ìd
 = 0;

1143 *
d©a
 = 0;

1145 
hw
->
mac
.
›s
.
	`check_lök
(hw, &
lök_•ìd
, &
lök_up
, 
åue
);

1146 i‡(
lök_up
)

1147  *
d©a
;

1149 *
d©a
 = 1;

1150  *
d©a
;

1151 
	}
}

1154 
	sixgbe_ªg_ã°
 {

1155 
u16
 
	mªg
;

1156 
u8
 
	m¨øy_Àn
;

1157 
u8
 
	mã°_ty≥
;

1158 
u32
 
	mmask
;

1159 
u32
 
	mwrôe
;

1172 
	#PATTERN_TEST
 1

	)

1173 
	#SET_READ_TEST
 2

	)

1174 
	#WRITE_NO_TEST
 3

	)

1175 
	#TABLE32_TEST
 4

	)

1176 
	#TABLE64_TEST_LO
 5

	)

1177 
	#TABLE64_TEST_HI
 6

	)

1180 
ixgbe_ªg_ã°
 
	gªg_ã°_82599
[] = {

1181 { 
IXGBE_FCRTL_82599
(0), 1, 
PATTERN_TEST
, 0x8007FFF0, 0x8007FFF0 },

1182 { 
IXGBE_FCRTH_82599
(0), 1, 
PATTERN_TEST
, 0x8007FFF0, 0x8007FFF0 },

1183 { 
IXGBE_PFCTOP
, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1184 { 
IXGBE_VLNCTRL
, 1, 
PATTERN_TEST
, 0x00000000, 0x00000000 },

1185 { 
IXGBE_RDBAL
(0), 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFF80 },

1186 { 
IXGBE_RDBAH
(0), 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1187 { 
IXGBE_RDLEN
(0), 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

1188 { 
IXGBE_RXDCTL
(0), 4, 
WRITE_NO_TEST
, 0, 
IXGBE_RXDCTL_ENABLE
 },

1189 { 
IXGBE_RDT
(0), 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

1190 { 
IXGBE_RXDCTL
(0), 4, 
WRITE_NO_TEST
, 0, 0 },

1191 { 
IXGBE_FCRTH
(0), 1, 
PATTERN_TEST
, 0x8007FFF0, 0x8007FFF0 },

1192 { 
IXGBE_FCTTV
(0), 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1193 { 
IXGBE_TDBAL
(0), 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1194 { 
IXGBE_TDBAH
(0), 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1195 { 
IXGBE_TDLEN
(0), 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFF80 },

1196 { 
IXGBE_RXCTRL
, 1, 
SET_READ_TEST
, 0x00000001, 0x00000001 },

1197 { 
IXGBE_RAL
(0), 16, 
TABLE64_TEST_LO
, 0xFFFFFFFF, 0xFFFFFFFF },

1198 { 
IXGBE_RAL
(0), 16, 
TABLE64_TEST_HI
, 0x8001FFFF, 0x800CFFFF },

1199 { 
IXGBE_MTA
(0), 128, 
TABLE32_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1204 
ixgbe_ªg_ã°
 
	gªg_ã°_82598
[] = {

1205 { 
IXGBE_FCRTL
(0), 1, 
PATTERN_TEST
, 0x8007FFF0, 0x8007FFF0 },

1206 { 
IXGBE_FCRTH
(0), 1, 
PATTERN_TEST
, 0x8007FFF0, 0x8007FFF0 },

1207 { 
IXGBE_PFCTOP
, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1208 { 
IXGBE_VLNCTRL
, 1, 
PATTERN_TEST
, 0x00000000, 0x00000000 },

1209 { 
IXGBE_RDBAL
(0), 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1210 { 
IXGBE_RDBAH
(0), 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1211 { 
IXGBE_RDLEN
(0), 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

1213 { 
IXGBE_RXDCTL
(0), 4, 
WRITE_NO_TEST
, 0, 
IXGBE_RXDCTL_ENABLE
 },

1215 { 
IXGBE_RDT
(0), 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

1216 { 
IXGBE_RXDCTL
(0), 4, 
WRITE_NO_TEST
, 0, 0 },

1217 { 
IXGBE_FCRTH
(0), 1, 
PATTERN_TEST
, 0x8007FFF0, 0x8007FFF0 },

1218 { 
IXGBE_FCTTV
(0), 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1219 { 
IXGBE_TIPG
, 1, 
PATTERN_TEST
, 0x000000FF, 0x000000FF },

1220 { 
IXGBE_TDBAL
(0), 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1221 { 
IXGBE_TDBAH
(0), 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1222 { 
IXGBE_TDLEN
(0), 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

1223 { 
IXGBE_RXCTRL
, 1, 
SET_READ_TEST
, 0x00000003, 0x00000003 },

1224 { 
IXGBE_DTXCTL
, 1, 
SET_READ_TEST
, 0x00000005, 0x00000005 },

1225 { 
IXGBE_RAL
(0), 16, 
TABLE64_TEST_LO
, 0xFFFFFFFF, 0xFFFFFFFF },

1226 { 
IXGBE_RAL
(0), 16, 
TABLE64_TEST_HI
, 0x800CFFFF, 0x800CFFFF },

1227 { 
IXGBE_MTA
(0), 128, 
TABLE32_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1231 
	#REG_PATTERN_TEST
(
R
, 
M
, 
W
) \

1233 
u32
 
∑t
, 
vÆ
, 
bef‹e
; \

1234 c⁄° 
u32
 
_ã°
[] = {0x5A5A5A5A, 0xA5A5A5A5, 0x00000000, 0xFFFFFFFF}; \

1235 
∑t
 = 0;Ö© < 
	`ARRAY_SIZE
(
_ã°
);Öat++) { \

1236 
bef‹e
 = 
	`ªadl
(
ad≠ãr
->
hw
.
hw_addr
 + 
R
); \

1237 
	`wrôñ
((
_ã°
[
∑t
] & 
W
), (
ad≠ãr
->
hw
.
hw_addr
 + 
R
)); \

1238 
vÆ
 = 
	`ªadl
(
ad≠ãr
->
hw
.
hw_addr
 + 
R
); \

1239 i‡(
vÆ
 !(
_ã°
[
∑t
] & 
W
 & 
M
)) { \

1240 
	`DPRINTK
(
DRV
, 
ERR
, "patternÅestÑeg %04X failed: got "\

1242 
R
, 
vÆ
, (
_ã°
[
∑t
] & 
W
 & 
M
)); \

1243 *
d©a
 = 
R
; \

1244 
	`wrôñ
(
bef‹e
, 
ad≠ãr
->
hw
.
hw_addr
 + 
R
); \

1247 
	`wrôñ
(
bef‹e
, 
ad≠ãr
->
hw
.
hw_addr
 + 
R
); \

1249 }

	)

1251 
	#REG_SET_AND_CHECK
(
R
, 
M
, 
W
) \

1253 
u32
 
vÆ
, 
bef‹e
; \

1254 
bef‹e
 = 
	`ªadl
(
ad≠ãr
->
hw
.
hw_addr
 + 
R
); \

1255 
	`wrôñ
((
W
 & 
M
), (
ad≠ãr
->
hw
.
hw_addr
 + 
R
)); \

1256 
vÆ
 = 
	`ªadl
(
ad≠ãr
->
hw
.
hw_addr
 + 
R
); \

1257 i‡((
W
 & 
M
Ë!(
vÆ
 & M)) { \

1258 
	`DPRINTK
(
DRV
, 
ERR
, "set/checkÑeg %04XÅest failed: got 0x%08X "\

1259 "ex≥˘ed 0x%08X\n", 
R
, (
vÆ
 & 
M
), (
W
 & M)); \

1260 *
d©a
 = 
R
; \

1261 
	`wrôñ
(
bef‹e
, (
ad≠ãr
->
hw
.
hw_addr
 + 
R
)); \

1264 
	`wrôñ
(
bef‹e
, (
ad≠ãr
->
hw
.
hw_addr
 + 
R
)); \

1265 }

	)

1267 
	$ixgbe_ªg_ã°
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1269 
ixgbe_ªg_ã°
 *
ã°
;

1270 
u32
 
vÆue
, 
bef‹e
, 
a·î
;

1271 
u32
 
i
, 
toggÀ
;

1273 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

1274 
toggÀ
 = 0x7FFFF30F;

1275 
ã°
 = 
ªg_ã°_82599
;

1277 
toggÀ
 = 0x7FFFF3FF;

1278 
ã°
 = 
ªg_ã°_82598
;

1287 
bef‹e
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_STATUS
);

1288 
vÆue
 = (
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_STATUS
Ë& 
toggÀ
);

1289 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_STATUS
, 
toggÀ
);

1290 
a·î
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_STATUS
Ë& 
toggÀ
;

1291 i‡(
vÆue
 !
a·î
) {

1292 
	`DPRINTK
(
DRV
, 
ERR
, "failed STATUSÑegisterÅest got: "

1293 "0x%08XÉx≥˘ed: 0x%08X\n", 
a·î
, 
vÆue
);

1294 *
d©a
 = 1;

1298 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_STATUS
, 
bef‹e
);

1304 
ã°
->
ªg
) {

1305 
i
 = 0; i < 
ã°
->
¨øy_Àn
; i++) {

1306 
ã°
->
ã°_ty≥
) {

1307 
PATTERN_TEST
:

1308 
	`REG_PATTERN_TEST
(
ã°
->
ªg
 + (
i
 * 0x40),

1309 
ã°
->
mask
,

1310 
ã°
->
wrôe
);

1312 
SET_READ_TEST
:

1313 
	`REG_SET_AND_CHECK
(
ã°
->
ªg
 + (
i
 * 0x40),

1314 
ã°
->
mask
,

1315 
ã°
->
wrôe
);

1317 
WRITE_NO_TEST
:

1318 
	`wrôñ
(
ã°
->
wrôe
,

1319 (
ad≠ãr
->
hw
.
hw_addr
 + 
ã°
->
ªg
)

1320 + (
i
 * 0x40));

1322 
TABLE32_TEST
:

1323 
	`REG_PATTERN_TEST
(
ã°
->
ªg
 + (
i
 * 4),

1324 
ã°
->
mask
,

1325 
ã°
->
wrôe
);

1327 
TABLE64_TEST_LO
:

1328 
	`REG_PATTERN_TEST
(
ã°
->
ªg
 + (
i
 * 8),

1329 
ã°
->
mask
,

1330 
ã°
->
wrôe
);

1332 
TABLE64_TEST_HI
:

1333 
	`REG_PATTERN_TEST
((
ã°
->
ªg
 + 4Ë+ (
i
 * 8),

1334 
ã°
->
mask
,

1335 
ã°
->
wrôe
);

1339 
ã°
++;

1342 *
d©a
 = 0;

1344 
	}
}

1346 
	$ixgbe_ì¥om_ã°
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1348 i‡(
	`ixgbe_vÆid©e_ì¥om_checksum
(&
ad≠ãr
->
hw
, 
NULL
))

1349 *
d©a
 = 1;

1351 *
d©a
 = 0;

1352  *
d©a
;

1353 
	}
}

1355 
úqªtu∫_t
 
	$ixgbe_ã°_öå
(
úq
, *
d©a
)

1357 
√t_devi˚
 *
√tdev
 = (√t_devi˚ *Ë
d©a
;

1358 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1360 
ad≠ãr
->
ã°_i¸
 |
	`IXGBE_READ_REG
(&ad≠ãr->
hw
, 
IXGBE_EICR
);

1362  
IRQ_HANDLED
;

1363 
	}
}

1365 
	$ixgbe_öå_ã°
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1367 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

1368 
u32
 
mask
, 
i
 = 0, 
sh¨ed_öt
 = 
åue
;

1369 
u32
 
úq
 = 
ad≠ãr
->
pdev
->irq;

1371 *
d©a
 = 0;

1374 i‡(
ad≠ãr
->
msix_íåõs
) {

1377 } i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSI_ENABLED
) {

1378 
sh¨ed_öt
 = 
Ál£
;

1379 i‡(
	`ªque°_úq
(
úq
, &
ixgbe_ã°_öå
, 0, 
√tdev
->
«me
,

1380 
√tdev
)) {

1381 *
d©a
 = 1;

1384 } i‡(!
	`ªque°_úq
(
úq
, &
ixgbe_ã°_öå
, 
IRQF_PROBE_SHARED
,

1385 
√tdev
->
«me
,Çetdev)) {

1386 
sh¨ed_öt
 = 
Ál£
;

1387 } i‡(
	`ªque°_úq
(
úq
, &
ixgbe_ã°_öå
, 
IRQF_SHARED
,

1388 
√tdev
->
«me
,Çetdev)) {

1389 *
d©a
 = 1;

1392 
	`DPRINTK
(
HW
, 
INFO
, "testing %s interrupt\n",

1393 (
sh¨ed_öt
 ? "shared" : "unshared"));

1396 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMC
, 0xFFFFFFFF);

1397 
	`m¶ìp
(10);

1400 ; 
i
 < 10; i++) {

1402 
mask
 = 1 << 
i
;

1404 i‡(!
sh¨ed_öt
) {

1412 
ad≠ãr
->
ã°_i¸
 = 0;

1413 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMC
,

1414 ~
mask
 & 0x00007FFF);

1415 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EICS
,

1416 ~
mask
 & 0x00007FFF);

1417 
	`m¶ìp
(10);

1419 i‡(
ad≠ãr
->
ã°_i¸
 & 
mask
) {

1420 *
d©a
 = 3;

1431 
ad≠ãr
->
ã°_i¸
 = 0;

1432 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMS
, 
mask
);

1433 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EICS
, 
mask
);

1434 
	`m¶ìp
(10);

1436 i‡(!(
ad≠ãr
->
ã°_i¸
 &
mask
)) {

1437 *
d©a
 = 4;

1441 i‡(!
sh¨ed_öt
) {

1449 
ad≠ãr
->
ã°_i¸
 = 0;

1450 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMC
,

1451 ~
mask
 & 0x00007FFF);

1452 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EICS
,

1453 ~
mask
 & 0x00007FFF);

1454 
	`m¶ìp
(10);

1456 i‡(
ad≠ãr
->
ã°_i¸
) {

1457 *
d©a
 = 5;

1464 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMC
, 0xFFFFFFFF);

1465 
	`m¶ìp
(10);

1468 
	`‰ì_úq
(
úq
, 
√tdev
);

1470  *
d©a
;

1471 
	}
}

1474 
	$ixgbe_‰ì_desc_rögs
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1476 
ixgbe_rög
 *
tx_rög
 = &
ad≠ãr
->
ã°_tx_rög
;

1477 
ixgbe_rög
 *
rx_rög
 = &
ad≠ãr
->
ã°_rx_rög
;

1478 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1479 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

1480 
u32
 
ªg_˘l
;

1481 
i
;

1486 
ªg_˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCTRL
);

1487 
ªg_˘l
 &~
IXGBE_RXCTRL_RXEN
;

1488 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCTRL
, 
ªg_˘l
);

1489 
ªg_˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXDCTL
(0));

1490 
ªg_˘l
 &~
IXGBE_RXDCTL_ENABLE
;

1491 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXDCTL
(0), 
ªg_˘l
);

1494 
ªg_˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(0));

1495 
ªg_˘l
 &~
IXGBE_TXDCTL_ENABLE
;

1496 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXDCTL
(0), 
ªg_˘l
);

1497 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

1498 
ªg_˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DMATXCTL
);

1499 
ªg_˘l
 &~
IXGBE_DMATXCTL_TE
;

1500 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_DMATXCTL
, 
ªg_˘l
);

1503 
	`ixgbe_ª£t
(
ad≠ãr
);

1505 i‡(
tx_rög
->
desc
 &&Åx_rög->
tx_buf„r_öfo
) {

1506 
i
 = 0; i < 
tx_rög
->
cou¡
; i++) {

1507 
ixgbe_tx_buf„r
 *
buf
 =

1508 &(
tx_rög
->
tx_buf„r_öfo
[
i
]);

1509 i‡(
buf
->
dma
) {

1510 
	`pci_unm≠_sögÀ
(
pdev
, 
buf
->
dma
, buf->
Àngth
,

1511 
PCI_DMA_TODEVICE
);

1512 
buf
->
dma
 = 0;

1514 i‡(
buf
->
skb
)

1515 
	`dev_k‰ì_skb
(
buf
->
skb
);

1519 i‡(
rx_rög
->
desc
 &&Ñx_rög->
rx_buf„r_öfo
) {

1520 
i
 = 0; i < 
rx_rög
->
cou¡
; i++) {

1521 
ixgbe_rx_buf„r
 *
buf
 =

1522 &(
rx_rög
->
rx_buf„r_öfo
[
i
]);

1523 i‡(
buf
->
dma
) {

1524 
	`pci_unm≠_sögÀ
(
pdev
, 
buf
->
dma
,

1525 
IXGBE_RXBUFFER_2048
,

1526 
PCI_DMA_FROMDEVICE
);

1527 
buf
->
dma
 = 0;

1529 i‡(
buf
->
skb
)

1530 
	`dev_k‰ì_skb
(
buf
->
skb
);

1534 i‡(
tx_rög
->
desc
) {

1535 
	`pci_‰ì_c⁄si°ít
(
pdev
, 
tx_rög
->
size
,Åx_rög->
desc
,

1536 
tx_rög
->
dma
);

1537 
tx_rög
->
desc
 = 
NULL
;

1539 i‡(
rx_rög
->
desc
) {

1540 
	`pci_‰ì_c⁄si°ít
(
pdev
, 
rx_rög
->
size
,Ñx_rög->
desc
,

1541 
rx_rög
->
dma
);

1542 
rx_rög
->
desc
 = 
NULL
;

1545 
	`k‰ì
(
tx_rög
->
tx_buf„r_öfo
);

1546 
tx_rög
->
tx_buf„r_öfo
 = 
NULL
;

1547 
	`k‰ì
(
rx_rög
->
rx_buf„r_öfo
);

1548 
rx_rög
->
rx_buf„r_öfo
 = 
NULL
;

1551 
	}
}

1553 
	$ixgbe_£tup_desc_rögs
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1555 
ixgbe_rög
 *
tx_rög
 = &
ad≠ãr
->
ã°_tx_rög
;

1556 
ixgbe_rög
 *
rx_rög
 = &
ad≠ãr
->
ã°_rx_rög
;

1557 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

1558 
u32
 
r˘l
, 
ªg_d©a
;

1559 
i
, 
ªt_vÆ
;

1563 i‡(!
tx_rög
->
cou¡
)

1564 
tx_rög
->
cou¡
 = 
IXGBE_DEFAULT_TXD
;

1566 
tx_rög
->
tx_buf„r_öfo
 = 
	`kˇŒoc
—x_rög->
cou¡
,

1567 (
ixgbe_tx_buf„r
),

1568 
GFP_KERNEL
);

1569 i‡(!(
tx_rög
->
tx_buf„r_öfo
)) {

1570 
ªt_vÆ
 = 1;

1571 
îr_nomem
;

1574 
tx_rög
->
size
 =Åx_rög->
cou¡
 * (
ixgbe_adv_tx_desc
);

1575 
tx_rög
->
size
 = 
	`ALIGN
(tx_ring->size, 4096);

1576 i‡(!(
tx_rög
->
desc
 = 
	`pci_Æloc_c⁄si°ít
(
pdev
,Åx_rög->
size
,

1577 &
tx_rög
->
dma
))) {

1578 
ªt_vÆ
 = 2;

1579 
îr_nomem
;

1581 
tx_rög
->
√xt_to_u£
 =Åx_rög->
√xt_to_˛ón
 = 0;

1583 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TDBAL
(0),

1584 ((
u64
Ë
tx_rög
->
dma
 & 0x00000000FFFFFFFF));

1585 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TDBAH
(0),

1586 ((
u64
Ë
tx_rög
->
dma
 >> 32));

1587 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TDLEN
(0),

1588 
tx_rög
->
cou¡
 * (
ixgbe_adv_tx_desc
));

1589 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TDH
(0), 0);

1590 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TDT
(0), 0);

1592 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
);

1593 
ªg_d©a
 |
IXGBE_HLREG0_TXPADEN
;

1594 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
, 
ªg_d©a
);

1596 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

1597 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_DMATXCTL
);

1598 
ªg_d©a
 |
IXGBE_DMATXCTL_TE
;

1599 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_DMATXCTL
, 
ªg_d©a
);

1601 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TXDCTL
(0));

1602 
ªg_d©a
 |
IXGBE_TXDCTL_ENABLE
;

1603 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TXDCTL
(0), 
ªg_d©a
);

1605 
i
 = 0; i < 
tx_rög
->
cou¡
; i++) {

1606 
ixgbe_adv_tx_desc
 *
desc
 = 
	`IXGBE_TX_DESC_ADV
(*
tx_rög
, 
i
);

1607 
sk_buff
 *
skb
;

1608 
size
 = 1024;

1610 
skb
 = 
	`Æloc_skb
(
size
, 
GFP_KERNEL
);

1611 i‡(!
skb
) {

1612 
ªt_vÆ
 = 3;

1613 
îr_nomem
;

1615 
	`skb_put
(
skb
, 
size
);

1621 
tx_rög
->
tx_buf„r_öfo
[
i
].
Àngth
 = 
skb
->
Àn
;

1623 
desc
->
ªad
.
cmd_ty≥_Àn
 = 
	`˝u_to_À32
(
skb
->
Àn
);

1624 
desc
->
ªad
.
cmd_ty≥_Àn
 |
	`˝u_to_À32
(
IXGBE_TXD_CMD_EOP
 |

1625 
IXGBE_TXD_CMD_IFCS
 |

1626 
IXGBE_TXD_CMD_RS
);

1627 
desc
->
ªad
.
ﬁöfo_°©us
 = 0;

1628 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

1629 
desc
->
ªad
.
ﬁöfo_°©us
 |=

1630 (
skb
->
Àn
 << 
IXGBE_ADVTXD_PAYLEN_SHIFT
);

1635 i‡(!
rx_rög
->
cou¡
)

1636 
rx_rög
->
cou¡
 = 
IXGBE_DEFAULT_RXD
;

1638 
rx_rög
->
rx_buf„r_öfo
 = 
	`kˇŒoc
‘x_rög->
cou¡
,

1639 (
ixgbe_rx_buf„r
),

1640 
GFP_KERNEL
);

1641 i‡(!(
rx_rög
->
rx_buf„r_öfo
)) {

1642 
ªt_vÆ
 = 4;

1643 
îr_nomem
;

1646 
rx_rög
->
size
 =Ñx_rög->
cou¡
 * (
ixgbe_adv_rx_desc
);

1647 
rx_rög
->
size
 = 
	`ALIGN
(rx_ring->size, 4096);

1648 i‡(!(
rx_rög
->
desc
 = 
	`pci_Æloc_c⁄si°ít
(
pdev
,Ñx_rög->
size
,

1649 &
rx_rög
->
dma
))) {

1650 
ªt_vÆ
 = 5;

1651 
îr_nomem
;

1653 
rx_rög
->
√xt_to_u£
 =Ñx_rög->
√xt_to_˛ón
 = 0;

1655 
r˘l
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_RXCTRL
);

1656 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_RXCTRL
, 
r˘l
 & ~
IXGBE_RXCTRL_RXEN
);

1657 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RDBAL
(0),

1658 ((
u64
)
rx_rög
->
dma
 & 0xFFFFFFFF));

1659 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RDBAH
(0),

1660 ((
u64
Ë
rx_rög
->
dma
 >> 32));

1661 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RDLEN
(0), 
rx_rög
->
size
);

1662 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RDH
(0), 0);

1663 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RDT
(0), 0);

1665 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_FCTRL
);

1666 
ªg_d©a
 |
IXGBE_FCTRL_BAM
 | 
IXGBE_FCTRL_SBP
 | 
IXGBE_FCTRL_MPE
;

1667 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_FCTRL
, 
ªg_d©a
);

1669 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
);

1670 
ªg_d©a
 &~
IXGBE_HLREG0_LPBK
;

1671 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
, 
ªg_d©a
);

1673 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_RDRXCTL
);

1674 
	#IXGBE_RDRXCTL_RDMTS_MASK
 0x00000003

	)

1676 
ªg_d©a
 &~
IXGBE_RDRXCTL_RDMTS_MASK
;

1677 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_RDRXCTL
, 
ªg_d©a
);

1679 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_MCSTCTRL
);

1680 
	#IXGBE_MCSTCTRL_MO_MASK
 0x00000003

	)

1681 
ªg_d©a
 &~
IXGBE_MCSTCTRL_MO_MASK
;

1682 
ªg_d©a
 |
ad≠ãr
->
hw
.
mac
.
mc_fûãr_ty≥
;

1683 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_MCSTCTRL
, 
ªg_d©a
);

1685 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RXDCTL
(0));

1686 
ªg_d©a
 |
IXGBE_RXDCTL_ENABLE
;

1687 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RXDCTL
(0), 
ªg_d©a
);

1688 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

1689 
j
 = 
ad≠ãr
->
rx_rög
[0].
ªg_idx
;

1690 
u32
 
k
;

1691 
k
 = 0; k < 10; k++) {

1692 i‡(
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
,

1693 
	`IXGBE_RXDCTL
(
j
)Ë& 
IXGBE_RXDCTL_ENABLE
)

1696 
	`m¶ìp
(1);

1700 
r˘l
 |
IXGBE_RXCTRL_RXEN
 | 
IXGBE_RXCTRL_DMBYPS
;

1701 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_RXCTRL
, 
r˘l
);

1703 
i
 = 0; i < 
rx_rög
->
cou¡
; i++) {

1704 
ixgbe_adv_rx_desc
 *
rx_desc
 = 
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
i
);

1705 
sk_buff
 *
skb
;

1707 
skb
 = 
	`Æloc_skb
(
IXGBE_RXBUFFER_2048
 + 
NET_IP_ALIGN
, 
GFP_KERNEL
);

1708 i‡(!
skb
) {

1709 
ªt_vÆ
 = 6;

1710 
îr_nomem
;

1712 
	`skb_ª£rve
(
skb
, 
NET_IP_ALIGN
);

1713 
rx_rög
->
rx_buf„r_öfo
[
i
].
skb
 = skb;

1714 
rx_rög
->
rx_buf„r_öfo
[
i
].
dma
 =

1715 
	`pci_m≠_sögÀ
(
pdev
, 
skb
->
d©a
, 
IXGBE_RXBUFFER_2048
,

1716 
PCI_DMA_FROMDEVICE
);

1717 
rx_desc
->
ªad
.
pkt_addr
 =

1718 
	`˝u_to_À64
(
rx_rög
->
rx_buf„r_öfo
[
i
].
dma
);

1719 
	`mem£t
(
skb
->
d©a
, 0x00, skb->
Àn
);

1724 
îr_nomem
:

1725 
	`ixgbe_‰ì_desc_rögs
(
ad≠ãr
);

1726  
ªt_vÆ
;

1727 
	}
}

1729 
	$ixgbe_£tup_lo›back_ã°
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1731 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1732 
u32
 
ªg_d©a
;

1737 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
);

1738 
ªg_d©a
 |
IXGBE_HLREG0_LPBK
;

1739 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
, 
ªg_d©a
);

1741 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_AUTOC
);

1742 
ªg_d©a
 &~
IXGBE_AUTOC_LMS_MASK
;

1743 
ªg_d©a
 |
IXGBE_AUTOC_LMS_10G_LINK_NO_AN
 | 
IXGBE_AUTOC_FLU
;

1744 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_AUTOC
, 
ªg_d©a
);

1747 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

1748 
u8
 
©œs
;

1750 
	`ixgbe_ªad_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1751 
IXGBE_ATLAS_PDN_LPBK
, &
©œs
);

1752 
©œs
 |
IXGBE_ATLAS_PDN_TX_REG_EN
;

1753 
	`ixgbe_wrôe_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1754 
IXGBE_ATLAS_PDN_LPBK
, 
©œs
);

1756 
	`ixgbe_ªad_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1757 
IXGBE_ATLAS_PDN_10G
, &
©œs
);

1758 
©œs
 |
IXGBE_ATLAS_PDN_TX_10G_QL_ALL
;

1759 
	`ixgbe_wrôe_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1760 
IXGBE_ATLAS_PDN_10G
, 
©œs
);

1762 
	`ixgbe_ªad_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1763 
IXGBE_ATLAS_PDN_1G
, &
©œs
);

1764 
©œs
 |
IXGBE_ATLAS_PDN_TX_1G_QL_ALL
;

1765 
	`ixgbe_wrôe_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1766 
IXGBE_ATLAS_PDN_1G
, 
©œs
);

1768 
	`ixgbe_ªad_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1769 
IXGBE_ATLAS_PDN_AN
, &
©œs
);

1770 
©œs
 |
IXGBE_ATLAS_PDN_TX_AN_QL_ALL
;

1771 
	`ixgbe_wrôe_™Æog_ªg8
(&
ad≠ãr
->
hw
,

1772 
IXGBE_ATLAS_PDN_AN
, 
©œs
);

1776 
	}
}

1778 
	$ixgbe_lo›back_˛ónup
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1780 
u32
 
ªg_d©a
;

1782 
ªg_d©a
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
);

1783 
ªg_d©a
 &~
IXGBE_HLREG0_LPBK
;

1784 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_HLREG0
, 
ªg_d©a
);

1785 
	}
}

1787 
	$ixgbe_¸óã_lbã°_‰ame
(
sk_buff
 *
skb
,

1788 
‰ame_size
)

1790 
	`mem£t
(
skb
->
d©a
, 0xFF, 
‰ame_size
);

1791 
‰ame_size
 &= ~1;

1792 
	`mem£t
(&
skb
->
d©a
[
‰ame_size
 / 2], 0xAA, frame_size / 2 - 1);

1793 
	`mem£t
(&
skb
->
d©a
[
‰ame_size
 / 2 + 10], 0xBE, 1);

1794 
	`mem£t
(&
skb
->
d©a
[
‰ame_size
 / 2 + 12], 0xAF, 1);

1795 
	}
}

1797 
	$ixgbe_check_lbã°_‰ame
(
sk_buff
 *
skb
,

1798 
‰ame_size
)

1800 
‰ame_size
 &= ~1;

1801 i‡(*(
skb
->
d©a
 + 3) == 0xFF) {

1802 i‡((*(
skb
->
d©a
 + 
‰ame_size
 / 2 + 10) == 0xBE) &&

1803 (*(
skb
->
d©a
 + 
‰ame_size
 / 2 + 12) == 0xAF)) {

1808 
	}
}

1810 
	$ixgbe_run_lo›back_ã°
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1812 
ixgbe_rög
 *
tx_rög
 = &
ad≠ãr
->
ã°_tx_rög
;

1813 
ixgbe_rög
 *
rx_rög
 = &
ad≠ãr
->
ã°_rx_rög
;

1814 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

1815 
i
, 
j
, 
k
, 
l
, 
lc
, 
good_˙t
, 
ªt_vÆ
 = 0;

1816 
time
;

1818 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RDT
(0), 
rx_rög
->
cou¡
 - 1);

1826 i‡(
rx_rög
->
cou¡
 <
tx_rög
->count)

1827 
lc
 = ((
tx_rög
->
cou¡
 / 64) * 2) + 1;

1829 
lc
 = ((
rx_rög
->
cou¡
 / 64) * 2) + 1;

1831 
k
 = 
l
 = 0;

1832 
j
 = 0; j <
lc
; j++) {

1833 
i
 = 0; i < 64; i++) {

1843 i‡(
	`u∆ikñy
(++
k
 =
tx_rög
->
cou¡
))

1844 
k
 = 0;

1846 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_TDT
(0), 
k
);

1847 
	`m¶ìp
(200);

1849 
time
 = 
jiffõs
;

1850 
good_˙t
 = 0;

1853 
	`pci_dma_sync_sögÀ_f‹_˝u
(
pdev
,

1854 
rx_rög
->
rx_buf„r_öfo
[
l
].
dma
,

1855 
IXGBE_RXBUFFER_2048
,

1856 
PCI_DMA_FROMDEVICE
);

1857 
ªt_vÆ
 = 
	`ixgbe_check_lbã°_‰ame
(

1858 
rx_rög
->
rx_buf„r_öfo
[
l
].
skb
, 1024);

1859 i‡(!
ªt_vÆ
)

1860 
good_˙t
++;

1861 i‡(++
l
 =
rx_rög
->
cou¡
)

1862 
l
 = 0;

1868 } 
good_˙t
 < 64 && 
jiffõs
 < (
time
 + 20));

1869 i‡(
good_˙t
 != 64) {

1871 
ªt_vÆ
 = 13;

1874 i‡(
jiffõs
 >(
time
 + 20)) {

1876 
ªt_vÆ
 = 14;

1881  
ªt_vÆ
;

1882 
	}
}

1884 
	$ixgbe_lo›back_ã°
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1886 *
d©a
 = 
	`ixgbe_£tup_desc_rögs
(
ad≠ãr
);

1887 i‡(*
d©a
)

1888 
out
;

1889 *
d©a
 = 
	`ixgbe_£tup_lo›back_ã°
(
ad≠ãr
);

1890 i‡(*
d©a
)

1891 
îr_lo›back
;

1892 *
d©a
 = 
	`ixgbe_run_lo›back_ã°
(
ad≠ãr
);

1893 
	`ixgbe_lo›back_˛ónup
(
ad≠ãr
);

1895 
îr_lo›back
:

1896 
	`ixgbe_‰ì_desc_rögs
(
ad≠ãr
);

1897 
out
:

1898  *
d©a
;

1899 
	}
}

1902 #i‚de‡
HAVE_ETHTOOL_GET_SSET_COUNT


1903 
	$ixgbe_düg_ã°_cou¡
(
√t_devi˚
 *
√tdev
)

1905  
IXGBE_TEST_LEN
;

1906 
	}
}

1909 
	$ixgbe_düg_ã°
(
√t_devi˚
 *
√tdev
,

1910 
ëhtoﬁ_ã°
 *
ëh_ã°
, 
u64
 *
d©a
)

1912 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1913 
boﬁ
 
if_ru¬ög
 = 
	`√tif_ru¬ög
(
√tdev
);

1915 
	`£t_bô
(
__IXGBE_TESTING
, &
ad≠ãr
->
°©e
);

1916 i‡(
ëh_ã°
->
Êags
 =
ETH_TEST_FL_OFFLINE
) {

1919 
	`DPRINTK
(
HW
, 
INFO
, "offlineÅesting starting\n");

1923 i‡(
	`ixgbe_lök_ã°
(
ad≠ãr
, &
d©a
[4]))

1924 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1926 i‡(
if_ru¬ög
)

1928 
	`dev_˛o£
(
√tdev
);

1930 
	`ixgbe_ª£t
(
ad≠ãr
);

1932 
	`DPRINTK
(
HW
, 
INFO
, "registerÅesting starting\n");

1933 i‡(
	`ixgbe_ªg_ã°
(
ad≠ãr
, &
d©a
[0]))

1934 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1936 
	`ixgbe_ª£t
(
ad≠ãr
);

1937 
	`DPRINTK
(
HW
, 
INFO
, "eepromÅesting starting\n");

1938 i‡(
	`ixgbe_ì¥om_ã°
(
ad≠ãr
, &
d©a
[1]))

1939 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1941 
	`ixgbe_ª£t
(
ad≠ãr
);

1942 
	`DPRINTK
(
HW
, 
INFO
, "interruptÅesting starting\n");

1943 i‡(
	`ixgbe_öå_ã°
(
ad≠ãr
, &
d©a
[2]))

1944 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1947 
	`ixgbe_ª£t
(
ad≠ãr
);

1948 
	`DPRINTK
(
HW
, 
INFO
, "loopbackÅesting starting\n");

1949 i‡(
	`ixgbe_lo›back_ã°
(
ad≠ãr
, &
d©a
[3]))

1950 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1953 
	`ixgbe_ª£t
(
ad≠ãr
);

1955 
	`˛ór_bô
(
__IXGBE_TESTING
, &
ad≠ãr
->
°©e
);

1956 i‡(
if_ru¬ög
)

1957 
	`dev_›í
(
√tdev
);

1959 
	`DPRINTK
(
HW
, 
INFO
, "onlineÅesting starting\n");

1961 i‡(
	`ixgbe_lök_ã°
(
ad≠ãr
, &
d©a
[4]))

1962 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1965 
d©a
[0] = 0;

1966 
d©a
[1] = 0;

1967 
d©a
[2] = 0;

1968 
d©a
[3] = 0;

1970 
	`˛ór_bô
(
__IXGBE_TESTING
, &
ad≠ãr
->
°©e
);

1972 
	`m¶ìp_öãºu±ibÀ
(4 * 1000);

1973 
	}
}

1975 
	$ixgbe_wﬁ_ex˛usi⁄
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

1976 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

1978 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1979 
ªtvÆ
 = 1;

1981 
hw
->
devi˚_id
) {

1982 
IXGBE_DEV_ID_82599_KX4
:

1983 
ªtvÆ
 = 0;

1986 
wﬁ
->
suµ‹ãd
 = 0;

1989  
ªtvÆ
;

1990 
	}
}

1992 
	$ixgbe_gë_wﬁ
(
√t_devi˚
 *
√tdev
,

1993 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

1995 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1997 
wﬁ
->
suµ‹ãd
 = 
WAKE_UCAST
 | 
WAKE_MCAST
 |

1998 
WAKE_BCAST
 | 
WAKE_MAGIC
;

1999 
wﬁ
->
wﬁ›ts
 = 0;

2001 i‡(
	`ixgbe_wﬁ_ex˛usi⁄
(
ad≠ãr
, 
wﬁ
) ||

2002 !
	`devi˚_ˇn_wakeup
(&
ad≠ãr
->
pdev
->
dev
))

2005 i‡(
ad≠ãr
->
wﬁ
 & 
IXGBE_WUFC_EX
)

2006 
wﬁ
->
wﬁ›ts
 |
WAKE_UCAST
;

2007 i‡(
ad≠ãr
->
wﬁ
 & 
IXGBE_WUFC_MC
)

2008 
wﬁ
->
wﬁ›ts
 |
WAKE_MCAST
;

2009 i‡(
ad≠ãr
->
wﬁ
 & 
IXGBE_WUFC_BC
)

2010 
wﬁ
->
wﬁ›ts
 |
WAKE_BCAST
;

2011 i‡(
ad≠ãr
->
wﬁ
 & 
IXGBE_WUFC_MAG
)

2012 
wﬁ
->
wﬁ›ts
 |
WAKE_MAGIC
;

2015 
	}
}

2017 
	$ixgbe_£t_wﬁ
(
√t_devi˚
 *
√tdev
, 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

2019 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2021 i‡(
wﬁ
->
wﬁ›ts
 & (
WAKE_PHY
 | 
WAKE_ARP
 | 
WAKE_MAGICSECURE
))

2022  -
EOPNOTSUPP
;

2024 i‡(
	`ixgbe_wﬁ_ex˛usi⁄
(
ad≠ãr
, 
wﬁ
))

2025  
wﬁ
->
wﬁ›ts
 ? -
EOPNOTSUPP
 : 0;

2027 
ad≠ãr
->
wﬁ
 = 0;

2029 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_UCAST
)

2030 
ad≠ãr
->
wﬁ
 |
IXGBE_WUFC_EX
;

2031 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_MCAST
)

2032 
ad≠ãr
->
wﬁ
 |
IXGBE_WUFC_MC
;

2033 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_BCAST
)

2034 
ad≠ãr
->
wﬁ
 |
IXGBE_WUFC_BC
;

2035 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_MAGIC
)

2036 
ad≠ãr
->
wﬁ
 |
IXGBE_WUFC_MAG
;

2038 
	`devi˚_£t_wakeup_íabÀ
(&
ad≠ãr
->
pdev
->
dev
,ád≠ãr->
wﬁ
);

2041 
	}
}

2043 
	$ixgbe_nway_ª£t
(
√t_devi˚
 *
√tdev
)

2045 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2047 i‡(
	`√tif_ru¬ög
(
√tdev
))

2048 
	`ixgbe_ªöô_locked
(
ad≠ãr
);

2051 
	}
}

2053 
	$ixgbe_phys_id
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

2055 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2056 
u32
 
Àd_ªg
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_LEDCTL
);

2057 
u32
 
i
;

2059 i‡(!
d©a
 || data > 300)

2060 
d©a
 = 300;

2062 
i
 = 0; i < (
d©a
 * 1000); i += 400) {

2063 
	`ixgbe_Àd_⁄
(&
ad≠ãr
->
hw
, 
IXGBE_LED_ON
);

2064 
	`m¶ìp_öãºu±ibÀ
(200);

2065 
	`ixgbe_Àd_off
(&
ad≠ãr
->
hw
, 
IXGBE_LED_ON
);

2066 
	`m¶ìp_öãºu±ibÀ
(200);

2070 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_LEDCTL
, 
Àd_ªg
);

2073 
	}
}

2075 
	$ixgbe_gë_cﬂÀs˚
(
√t_devi˚
 *
√tdev
,

2076 
ëhtoﬁ_cﬂÀs˚
 *
ec
)

2078 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2080 #i‚de‡
CONFIG_IXGBE_NAPI


2081 
ec
->
tx_max_cﬂÀs˚d_‰ames_úq
 = 
ad≠ãr
->
tx_rög
[0].
w‹k_limô
;

2082 
ec
->
rx_max_cﬂÀs˚d_‰ames_úq
 = 
ad≠ãr
->
rx_rög
[0].
w‹k_limô
;

2086 
ad≠ãr
->
ôr_£âög
) {

2089 
ec
->
rx_cﬂÀs˚_u£cs
 = 0;

2093 
ec
->
rx_cﬂÀs˚_u£cs
 = 1;

2097 
ec
->
rx_cﬂÀs˚_u£cs
 = 1000000/
ad≠ãr
->
eôr_∑øm
;

2101 
	}
}

2103 
ixgbe_wrôe_eôr
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
);

2105 
	$ixgbe_£t_cﬂÀs˚
(
√t_devi˚
 *
√tdev
,

2106 
ëhtoﬁ_cﬂÀs˚
 *
ec
)

2108 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2109 
ixgbe_q_ve˘‹
 *
q_ve˘‹
;

2110 
i
;

2112 #i‚de‡
CONFIG_IXGBE_NAPI


2113 i‡(
ec
->
tx_max_cﬂÀs˚d_‰ames_úq
)

2114 
ad≠ãr
->
tx_rög
[0].
w‹k_limô
 = 
ec
->
tx_max_cﬂÀs˚d_‰ames_úq
;

2116 i‡(
ec
->
rx_max_cﬂÀs˚d_‰ames_úq
)

2117 
ad≠ãr
->
rx_rög
[0].
w‹k_limô
 = 
ec
->
rx_max_cﬂÀs˚d_‰ames_úq
;

2120 i‡(
ec
->
rx_cﬂÀs˚_u£cs
 > 1) {

2122 i‡((1000000/
ec
->
rx_cﬂÀs˚_u£cs
 > 
IXGBE_MAX_INT_RATE
) ||

2123 (1000000/
ec
->
rx_cﬂÀs˚_u£cs
 < 
IXGBE_MIN_INT_RATE
))

2124  -
EINVAL
;

2127 
ad≠ãr
->
eôr_∑øm
 = 1000000/
ec
->
rx_cﬂÀs˚_u£cs
;

2130 
ad≠ãr
->
ôr_£âög
 =ád≠ãr->
eôr_∑øm
;

2132 
ad≠ãr
->
ôr_£âög
 &= ~1;

2133 } i‡(
ec
->
rx_cﬂÀs˚_u£cs
 == 1) {

2135 
ad≠ãr
->
eôr_∑øm
 = 20000;

2136 
ad≠ãr
->
ôr_£âög
 = 1;

2142 #i‚de‡
IXGBE_NO_HW_RSC


2143 i‡(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_ENABLED
)

2144 
ad≠ãr
->
eôr_∑øm
 = 
IXGBE_MAX_RSC_INT_RATE
;

2146 
ad≠ãr
->
eôr_∑øm
 = 
IXGBE_MAX_INT_RATE
;

2148 
ad≠ãr
->
eôr_∑øm
 = 
IXGBE_MAX_INT_RATE
;

2150 
ad≠ãr
->
ôr_£âög
 = 0;

2154 i‡(
ad≠ãr
->
Êags
 &

2155 (
IXGBE_FLAG_MSIX_ENABLED
 | 
IXGBE_FLAG_MSI_ENABLED
)) {

2156 
num_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

2157 
i
 = 0; i < 
num_ve˘‹s
; i++) {

2158 
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

2159 i‡(
q_ve˘‹
->
txr_cou¡
 && !q_ve˘‹->
rxr_cou¡
)

2161 
q_ve˘‹
->
eôr
 = (
ad≠ãr
->
eôr_∑øm
 >> 1);

2162 i‡(
q_ve˘‹
->
rxr_cou¡
)

2164 
q_ve˘‹
->
eôr
 = 
ad≠ãr
->
eôr_∑øm
;

2165 
	`ixgbe_wrôe_eôr
(
q_ve˘‹
);

2169 
q_ve˘‹
 = 
ad≠ãr
->q_vector[0];

2170 
q_ve˘‹
->
eôr
 = 
ad≠ãr
->
eôr_∑øm
;

2171 
	`ixgbe_wrôe_eôr
(
q_ve˘‹
);

2175 
	}
}

2177 #ifde‡
ETHTOOL_GFLAGS


2178 
	$ixgbe_£t_Êags
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

2180 
rc
;

2182 #i‡!
	`deföed
(
IXGBE_NO_HW_RSC
Ë|| !deföed(
IXGBE_NO_LRO
)

2183 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2185 
rc
 = 
	`ëhtoﬁ_›_£t_Êags
(
√tdev
, 
d©a
, 
ETH_FLAG_LRO
 | 
ETH_FLAG_NTUPLE
);

2186 i‡(
rc
)

2187  
rc
;

2189 #i‚de‡
IXGBE_NO_HW_RSC


2191 i‡(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_CAPABLE
) {

2193 i‡((!!(
d©a
 & 
ETH_FLAG_LRO
)) !=

2194 (!!(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_ENABLED
))) {

2195 
ad≠ãr
->
Êags2
 ^
IXGBE_FLAG2_RSC_ENABLED
;

2196 i‡(
	`√tif_ru¬ög
(
√tdev
))

2197 
	`ixgbe_ªöô_locked
(
ad≠ãr
);

2199 
	`ixgbe_ª£t
(
ad≠ãr
);

2204 #i‚de‡
IXGBE_NO_LRO


2206 i‡((!!(
d©a
 & 
ETH_FLAG_LRO
)) !=

2207 (!!(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_SWLRO_ENABLED
)))

2208 
ad≠ãr
->
Êags2
 ^
IXGBE_FLAG2_SWLRO_ENABLED
;

2213 
	}
}

2216 
ëhtoﬁ_›s
 
	gixgbe_ëhtoﬁ_›s
 = {

2217 .
gë_£âögs
 = 
ixgbe_gë_£âögs
,

2218 .
	g£t_£âögs
 = 
ixgbe_£t_£âögs
,

2219 .
	ggë_drvöfo
 = 
ixgbe_gë_drvöfo
,

2220 .
	ggë_ªgs_Àn
 = 
ixgbe_gë_ªgs_Àn
,

2221 .
	ggë_ªgs
 = 
ixgbe_gë_ªgs
,

2222 .
	ggë_wﬁ
 = 
ixgbe_gë_wﬁ
,

2223 .
	g£t_wﬁ
 = 
ixgbe_£t_wﬁ
,

2224 .
	gnway_ª£t
 = 
ixgbe_nway_ª£t
,

2225 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

2226 .
	ggë_ì¥om_Àn
 = 
ixgbe_gë_ì¥om_Àn
,

2227 .
	ggë_ì¥om
 = 
ixgbe_gë_ì¥om
,

2228 .
	g£t_ì¥om
 = 
ixgbe_£t_ì¥om
,

2229 .
	ggë_rög∑øm
 = 
ixgbe_gë_rög∑øm
,

2230 .
	g£t_rög∑øm
 = 
ixgbe_£t_rög∑øm
,

2231 .
	ggë_∑u£∑øm
 = 
ixgbe_gë_∑u£∑øm
,

2232 .
	g£t_∑u£∑øm
 = 
ixgbe_£t_∑u£∑øm
,

2233 .
	ggë_rx_csum
 = 
ixgbe_gë_rx_csum
,

2234 .
	g£t_rx_csum
 = 
ixgbe_£t_rx_csum
,

2235 .
	ggë_tx_csum
 = 
ixgbe_gë_tx_csum
,

2236 .
	g£t_tx_csum
 = 
ixgbe_£t_tx_csum
,

2237 .
	ggë_sg
 = 
ëhtoﬁ_›_gë_sg
,

2238 .
	g£t_sg
 = 
ëhtoﬁ_›_£t_sg
,

2239 .
	ggë_msgÀvñ
 = 
ixgbe_gë_msgÀvñ
,

2240 .
	g£t_msgÀvñ
 = 
ixgbe_£t_msgÀvñ
,

2241 #ifde‡
NETIF_F_TSO


2242 .
	ggë_tso
 = 
ëhtoﬁ_›_gë_tso
,

2243 .
	g£t_tso
 = 
ixgbe_£t_tso
,

2245 #i‚de‡
HAVE_ETHTOOL_GET_SSET_COUNT


2246 .
	g£lf_ã°_cou¡
 = 
ixgbe_düg_ã°_cou¡
,

2248 .
	g£lf_ã°
 = 
ixgbe_düg_ã°
,

2249 .
	ggë_°rögs
 = 
ixgbe_gë_°rögs
,

2250 .
	gphys_id
 = 
ixgbe_phys_id
,

2251 #i‚de‡
HAVE_ETHTOOL_GET_SSET_COUNT


2252 .
	ggë_°©s_cou¡
 = 
ixgbe_gë_°©s_cou¡
,

2254 .
	ggë_s£t_cou¡
 = 
ixgbe_gë_s£t_cou¡
,

2256 .
	ggë_ëhtoﬁ_°©s
 = 
ixgbe_gë_ëhtoﬁ_°©s
,

2257 #ifde‡
ETHTOOL_GPERMADDR


2258 .
	ggë_≥rm_addr
 = 
ëhtoﬁ_›_gë_≥rm_addr
,

2260 .
	ggë_cﬂÀs˚
 = 
ixgbe_gë_cﬂÀs˚
,

2261 .
	g£t_cﬂÀs˚
 = 
ixgbe_£t_cﬂÀs˚
,

2262 #ifde‡
ETHTOOL_GFLAGS


2263 .
	ggë_Êags
 = 
ëhtoﬁ_›_gë_Êags
,

2264 .
	g£t_Êags
 = 
ixgbe_£t_Êags
,

2268 
	$ixgbe_£t_ëhtoﬁ_›s
(
√t_devi˚
 *
√tdev
)

2270 
	`SET_ETHTOOL_OPS
(
√tdev
, &
ixgbe_ëhtoﬁ_›s
);

2271 
	}
}

	@ixgbe_fcoe.c

28 
	~"ixgbe.h
"

	@ixgbe_fcoe.h

28 #i‚de‡
_IXGBE_FCOE_H


29 
	#_IXGBE_FCOE_H


	)

	@ixgbe_main.c

32 
	~<löux/ty≥s.h
>

33 
	~<löux/moduÀ.h
>

34 
	~<löux/pci.h
>

35 
	~<löux/√tdevi˚.h
>

36 
	~<löux/vmÆloc.h
>

37 
	~<löux/°rög.h
>

38 
	~<löux/ö.h
>

39 
	~<löux/ù.h
>

40 
	~<löux/t˝.h
>

41 
	~<löux/pkt_sched.h
>

42 
	~<löux/ùv6.h
>

43 
	~<löux/öëdevi˚.h
>

44 #ifde‡
NETIF_F_TSO


45 
	~<√t/checksum.h
>

46 #ifde‡
NETIF_F_TSO6


47 
	~<√t/ù6_checksum.h
>

50 #ifde‡
SIOCETHTOOL


51 
	~<löux/ëhtoﬁ.h
>

53 #ifde‡
NETIF_F_HW_VLAN_TX


54 
	~<löux/if_vœn.h
>

58 
	~"ixgbe.h
"

59 
	~"../ö˛ude/ps.h
"

62 
	#IXGBE_NO_LRO
 1

	)

63 
	#IXGBE_NO_HW_RSC
 1

	)

66 
	gixgbe_drivî_«me
[] = "ixgbe";

67 c⁄° 
	gixgbe_drivî_°rög
[] =

69 
	#DRV_HW_PERF


	)

71 #i‚de‡
CONFIG_IXGBE_NAPI


72 
	#DRIVERNAPI


	)

74 
	#DRIVERNAPI
 "-NAPI"

	)

77 
	#FPGA


	)

79 
	#DRV_VERSION
 "2.0.38.2" 
DRIVERNAPI
 
DRV_HW_PERF
 
FPGA


	)

80 c⁄° 
	gixgbe_drivî_vîsi⁄
[] = 
DRV_VERSION
;

81 
	gixgbe_c›yright
[] = "Copyright (c) 1999-2009 Intel Corporation.";

90 
pci_devi˚_id
 
	gixgbe_pci_tbl
[] = {

91 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598
)},

92 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598_BX
)},

93 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598AF_DUAL_PORT
)},

94 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598AF_SINGLE_PORT
)},

95 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598AT
)},

96 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598AT2
)},

97 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598EB_CX4
)},

98 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598_CX4_DUAL_PORT
)},

99 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598_DA_DUAL_PORT
)},

100 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM
)},

101 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598EB_XF_LR
)},

102 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82598EB_SFP_LOM
)},

103 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82599_KX4
)},

104 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82599_XAUI_LOM
)},

105 {
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
IXGBE_DEV_ID_82599_SFP
)},

109 
MODULE_DEVICE_TABLE
(
pci
, 
ixgbe_pci_tbl
);

111 #ifde‡
IXGBE_DCA


112 
ixgbe_nŸify_dˇ
(
nŸifõr_block
 *, 
evít
,

113 *
p
);

114 
nŸifõr_block
 
	gdˇ_nŸifõr
 = {

115 .
nŸifõr_ˇŒ
 = 
ixgbe_nŸify_dˇ
,

116 .
	g√xt
 = 
NULL
,

117 .
	g¥i‹ôy
 = 0

121 
MODULE_AUTHOR
("Intel Corporation, <linux.nics@intel.com>");

122 
MODULE_DESCRIPTION
("Intel(R) 10 Gigabit PCI Express Network Driver");

123 
MODULE_LICENSE
("GPL");

124 
MODULE_VERSION
(
DRV_VERSION
);

126 
	#DEFAULT_DEBUG_LEVEL_SHIFT
 3

	)

128 
	$ixgbe_ªÀa£_hw_c⁄åﬁ
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

130 
u32
 
˘æ_ext
;

133 
˘æ_ext
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_CTRL_EXT
);

134 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_CTRL_EXT
,

135 
˘æ_ext
 & ~
IXGBE_CTRL_EXT_DRV_LOAD
);

136 
	}
}

138 
	$ixgbe_gë_hw_c⁄åﬁ
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

140 
u32
 
˘æ_ext
;

143 
˘æ_ext
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_CTRL_EXT
);

144 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_CTRL_EXT
,

145 
˘æ_ext
 | 
IXGBE_CTRL_EXT_DRV_LOAD
);

146 
	}
}

156 
	$ixgbe_£t_iv¨
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
s8
 
dúe˘i⁄
,

157 
u8
 
queue
, u8 
msix_ve˘‹
)

159 
u32
 
iv¨
, 
ödex
;

160 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

161 
hw
->
mac
.
ty≥
) {

162 
ixgbe_mac_82598EB
:

163 
msix_ve˘‹
 |
IXGBE_IVAR_ALLOC_VAL
;

164 i‡(
dúe˘i⁄
 == -1)

165 
dúe˘i⁄
 = 0;

166 
ödex
 = (((
dúe˘i⁄
 * 64Ë+ 
queue
) >> 2) & 0x1F;

167 
iv¨
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_IVAR
(
ödex
));

168 
iv¨
 &~(0xFF << (8 * (
queue
 & 0x3)));

169 
iv¨
 |(
msix_ve˘‹
 << (8 * (
queue
 & 0x3)));

170 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_IVAR
(
ödex
), 
iv¨
);

172 
ixgbe_mac_82599EB
:

173 i‡(
dúe˘i⁄
 == -1) {

175 
msix_ve˘‹
 |
IXGBE_IVAR_ALLOC_VAL
;

176 
ödex
 = ((
queue
 & 1) * 8);

177 
iv¨
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_IVAR_MISC
);

178 
iv¨
 &~(0xFF << 
ödex
);

179 
iv¨
 |(
msix_ve˘‹
 << 
ödex
);

180 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_IVAR_MISC
, 
iv¨
);

184 
msix_ve˘‹
 |
IXGBE_IVAR_ALLOC_VAL
;

185 
ödex
 = ((16 * (
queue
 & 1)Ë+ (8 * 
dúe˘i⁄
));

186 
iv¨
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_IVAR
(
queue
 >> 1));

187 
iv¨
 &~(0xFF << 
ödex
);

188 
iv¨
 |(
msix_ve˘‹
 << 
ödex
);

189 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_IVAR
(
queue
 >> 1), 
iv¨
);

195 
	}
}

197 
ölöe
 
	$ixgbe_úq_ª¨m_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

198 
u64
 
qmask
)

200 
u32
 
mask
;

202 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

203 
mask
 = (
IXGBE_EIMS_RTX_QUEUE
 & 
qmask
);

204 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EICS
, 
mask
);

206 
mask
 = (
qmask
 & 0xFFFFFFFF);

207 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_EICS_EX
(0), 
mask
);

208 
mask
 = (
qmask
 >> 32);

209 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_EICS_EX
(1), 
mask
);

211 
	}
}

213 
ölöe
 
boﬁ
 
	$ixgbe_check_tx_h™g
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

214 
ixgbe_rög
 *
tx_rög
,

215 
e›
)

217 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

218 
u32
 
hód
, 
èû
;

222 
hód
 = 
	`IXGBE_READ_REG
(
hw
, 
tx_rög
->head);

223 
èû
 = 
	`IXGBE_READ_REG
(
hw
, 
tx_rög
->tail);

224 
ad≠ãr
->
dëe˘_tx_hung
 = 
Ál£
;

225 i‡((
hód
 !
èû
) &&

226 
tx_rög
->
tx_buf„r_öfo
[
e›
].
time_°amp
 &&

227 
	`time_a·î
(
jiffõs
, 
tx_rög
->
tx_buf„r_öfo
[
e›
].
time_°amp
 + 
HZ
) &&

228 !(
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_TFCS
Ë& 
IXGBE_TFCS_TXOFF
)) {

230 
ixgbe_adv_tx_desc
 *
tx_desc
;

231 
tx_desc
 = 
	`IXGBE_TX_DESC_ADV
(*
tx_rög
, 
e›
);

232 
	`DPRINTK
(
DRV
, 
ERR
, "Detected Tx Unit Hang\n"

240 
tx_rög
->
queue_ödex
,

241 
hód
, 
èû
,

242 
tx_rög
->
√xt_to_u£
, 
e›
,

243 
tx_rög
->
tx_buf„r_öfo
[
e›
].
time_°amp
, 
jiffõs
);

244  
åue
;

247  
Ál£
;

248 
	}
}

250 
	#IXGBE_MAX_TXD_PWR
 14

	)

251 
	#IXGBE_MAX_DATA_PER_TXD
 (1 << 
IXGBE_MAX_TXD_PWR
)

	)

254 
	#TXD_USE_COUNT
(
S
Ë(((SË>> 
IXGBE_MAX_TXD_PWR
) + \

255 (((
S
Ë& (
IXGBE_MAX_DATA_PER_TXD
 - 1)Ë? 1 : 0))

	)

256 #ifde‡
MAX_SKB_FRAGS


257 
	#DESC_NEEDED
 (
	`TXD_USE_COUNT
(
IXGBE_MAX_DATA_PER_TXD
) + \

258 
MAX_SKB_FRAGS
 * 
	`TXD_USE_COUNT
(
PAGE_SIZE
Ë+ 1Ë

	)

260 
	#DESC_NEEDED
 
	`TXD_USE_COUNT
(
IXGBE_MAX_DATA_PER_TXD
)

	)

263 
ixgbe_tx_timeout
(
√t_devi˚
 *
√tdev
);

270 
boﬁ
 
	$ixgbe_˛ón_tx_úq
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

271 
ixgbe_rög
 *
tx_rög
,

272 *
w‹k_d⁄e
, 
w‹k_to_do
)

274 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

275 
i
, 
hód
, 
cou¡
 = 0;

277 
hód
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
tx_rög
->head);

278 
i
 = 
tx_rög
->
√xt_to_˛ón
;

280 i‡(
i
 <
hód
)

281 
cou¡
 = 
hód
 - 
i
;

283 
cou¡
 = 
tx_rög
->cou¡ - 
i
 + 
hód
;

285 (*
w‹k_d⁄e
Ë+
cou¡
;

286 
tx_rög
->
√xt_to_˛ón
 = 
hód
;

288 
	#TX_WAKE_THRESHOLD
 (
DESC_NEEDED
 * 2)

	)

289 i‡(
	`u∆ikñy
(
cou¡
 && 
	`√tif_ˇºõr_ok
(
√tdev
) &&

290 (
	`IXGBE_DESC_UNUSED
(
tx_rög
Ë>
TX_WAKE_THRESHOLD
))) {

294 
	`smp_mb
();

295 #ifde‡
HAVE_TX_MQ


296 i‡(
	`__√tif_subqueue_°›≥d
(
√tdev
, 
tx_rög
->
queue_ödex
) &&

297 !
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
)) {

298 
	`√tif_wake_subqueue
(
√tdev
, 
tx_rög
->
queue_ödex
);

299 ++
ad≠ãr
->
ª°¨t_queue
;

302 i‡(
	`√tif_queue_°›≥d
(
√tdev
) &&

303 !
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
)) {

304 
	`√tif_wake_queue
(
√tdev
);

305 ++
ad≠ãr
->
ª°¨t_queue
;

311 i‡(
ad≠ãr
->
dëe˘_tx_hung
) {

312 i‡(
	`ixgbe_check_tx_h™g
(
ad≠ãr
, 
tx_rög
, 
i
)) {

314 
	`DPRINTK
(
PROBE
, 
INFO
,

316 
ad≠ãr
->
tx_timeout_cou¡
 + 1);

317 
	`ixgbe_tx_timeout
(
ad≠ãr
->
√tdev
);

322  
cou¡
 > 0;

323 
	}
}

325 #ifde‡
IXGBE_DCA


326 
	$ixgbe_upd©e_rx_dˇ
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

327 
ixgbe_rög
 *
rx_rög
)

329 
u32
 
rx˘æ
;

330 
˝u
 = 
	`gë_˝u
();

331 
q
 = 
rx_rög
 - 
ad≠ãr
->rx_ring;

332 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

334 i‡(
rx_rög
->
˝u
 != cpu) {

335 
rx˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_DCA_RXCTRL
(
q
));

336 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

337 
rx˘æ
 &~
IXGBE_DCA_RXCTRL_CPUID_MASK
;

338 
rx˘æ
 |
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
);

339 } i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

340 
rx˘æ
 &~
IXGBE_DCA_RXCTRL_CPUID_MASK_82599
;

341 
rx˘æ
 |(
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
) <<

342 
IXGBE_DCA_RXCTRL_CPUID_SHIFT_82599
);

344 
rx˘æ
 |
IXGBE_DCA_RXCTRL_DESC_DCA_EN
;

345 
rx˘æ
 |
IXGBE_DCA_RXCTRL_HEAD_DCA_EN
;

346 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED_DATA
) {

348 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_PS_ENABLED
)

349 
rx˘æ
 |
IXGBE_DCA_RXCTRL_HEAD_DCA_EN
;

351 
rx˘æ
 |
IXGBE_DCA_RXCTRL_DATA_DCA_EN
;

353 
rx˘æ
 &~(
IXGBE_DCA_RXCTRL_DESC_RRO_EN
);

354 
rx˘æ
 &~(
IXGBE_DCA_RXCTRL_DESC_WRO_EN
 |

355 
IXGBE_DCA_RXCTRL_DESC_HSRO_EN
);

356 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_DCA_RXCTRL
(
q
), 
rx˘æ
);

357 
rx_rög
->
˝u
 = cpu;

359 
	`put_˝u
();

360 
	}
}

362 
	$ixgbe_upd©e_tx_dˇ
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

363 
ixgbe_rög
 *
tx_rög
)

365 
u32
 
tx˘æ
;

366 
˝u
 = 
	`gë_˝u
();

367 
q
 = 
tx_rög
 - 
ad≠ãr
->tx_ring;

368 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

370 i‡(
tx_rög
->
˝u
 != cpu) {

371 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

372 
tx˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_DCA_TXCTRL
(
q
));

373 
tx˘æ
 &~
IXGBE_DCA_TXCTRL_CPUID_MASK
;

374 
tx˘æ
 |
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
);

375 
tx˘æ
 |
IXGBE_DCA_TXCTRL_DESC_DCA_EN
;

376 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_DCA_TXCTRL
(
q
), 
tx˘æ
);

377 } i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

378 
tx˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_DCA_TXCTRL_82599
(
q
));

379 
tx˘æ
 &~
IXGBE_DCA_TXCTRL_CPUID_MASK_82599
;

380 
tx˘æ
 |(
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
) <<

381 
IXGBE_DCA_TXCTRL_CPUID_SHIFT_82599
);

382 
tx˘æ
 |
IXGBE_DCA_TXCTRL_DESC_DCA_EN
;

383 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_DCA_TXCTRL_82599
(
q
), 
tx˘æ
);

385 
tx_rög
->
˝u
 = cpu;

387 
	`put_˝u
();

388 
	}
}

390 
	$ixgbe_£tup_dˇ
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

392 
i
;

394 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
))

398 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_DCA_CTRL
, 2);

400 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

401 
ad≠ãr
->
tx_rög
[
i
].
˝u
 = -1;

402 
	`ixgbe_upd©e_tx_dˇ
(
ad≠ãr
, &ad≠ãr->
tx_rög
[
i
]);

404 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

405 
ad≠ãr
->
rx_rög
[
i
].
˝u
 = -1;

406 
	`ixgbe_upd©e_rx_dˇ
(
ad≠ãr
, &ad≠ãr->
rx_rög
[
i
]);

408 
	}
}

410 
	$__ixgbe_nŸify_dˇ
(
devi˚
 *
dev
, *
d©a
)

412 
√t_devi˚
 *
√tdev
 = 
	`dev_gë_drvd©a
(
dev
);

413 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

414 
evít
 = *(*)
d©a
;

416 
evít
) {

417 
DCA_PROVIDER_ADD
:

419 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

421 i‡(
	`dˇ_add_ªque°î
(
dev
) == 0) {

422 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCA_ENABLED
;

423 
	`ixgbe_£tup_dˇ
(
ad≠ãr
);

427 
DCA_PROVIDER_REMOVE
:

428 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
) {

429 
	`dˇ_ªmove_ªque°î
(
dev
);

430 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_DCA_ENABLED
;

431 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_DCA_CTRL
, 1);

437 
	}
}

450 
	$ixgbe_ª˚ive_skb
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
,

451 
sk_buff
 *
skb
, 
u16
 
vœn_èg
)

453 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

454 
ªt
;

456 
	`dev_k‰ì_skb
(
skb
);

459 #ifde‡
CONFIG_IXGBE_NAPI


460 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_IN_NETPOLL
)) {

461 #ifde‡
NETIF_F_HW_VLAN_TX


462 i‡(
ad≠ãr
->
vlgΩ
 && 
vœn_èg
)

463 
	`vœn_gro_ª˚ive
(&
q_ve˘‹
->
«pi
,

464 
ad≠ãr
->
vlgΩ
,

465 
vœn_èg
, 
skb
);

467 
	`«pi_gro_ª˚ive
(&
q_ve˘‹
->
«pi
, 
skb
);

469 
	`«pi_gro_ª˚ive
(&
q_ve˘‹
->
«pi
, 
skb
);

474 #ifde‡
NETIF_F_HW_VLAN_TX


475 i‡(
ad≠ãr
->
vlgΩ
 && 
vœn_èg
)

476 
ªt
 = 
	`vœn_hwac˚l_rx
(
skb
, 
ad≠ãr
->
vlgΩ
,

477 
vœn_èg
);

479 
ªt
 = 
	`√tif_rx
(
skb
);

481 
ªt
 = 
	`√tif_rx
(
skb
);

483 #i‚de‡
CONFIG_IXGBE_NAPI


484 i‡(
ªt
 =
NET_RX_DROP
)

485 
ad≠ãr
->
rx_dr›≥d_backlog
++;

487 #ifde‡
CONFIG_IXGBE_NAPI


500 
ölöe
 
	`ixgbe_rx_checksum
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

501 
ixgbe_adv_rx_desc
 *
rx_desc
,

502 
sk_buff
 *
skb
)

504 
u32
 
°©us_îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

505 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

508 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_CSUM_ENABLED
))

512 i‡((
°©us_îr
 & 
IXGBE_RXD_STAT_IPCS
) &&

513 (
°©us_îr
 & 
IXGBE_RXDADV_ERR_IPE
)) {

514 
ad≠ãr
->
hw_csum_rx_îr‹
++;

518 i‡(!(
°©us_îr
 & 
IXGBE_RXD_STAT_L4CS
))

521 i‡(
°©us_îr
 & 
IXGBE_RXDADV_ERR_TCPE
) {

522 
u16
 
pkt_öfo
 = 
rx_desc
->
wb
.
lowî
.
lo_dw‹d
.
hs_rss
.pkt_info;

527 i‡((
pkt_öfo
 & 
IXGBE_RXDADV_PKTTYPE_UDP
) &&

528 (
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
))

531 
ad≠ãr
->
hw_csum_rx_îr‹
++;

536 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

537 
ad≠ãr
->
hw_csum_rx_good
++;

540 
ölöe
 
	`ixgbe_ªÀa£_rx_desc
(
ixgbe_hw
 *
hw
,

541 
ixgbe_rög
 *
rx_rög
, 
u32
 
vÆ
)

549 
	`wmb
();

550 
	`wrôñ
(
vÆ
, 
hw
->
hw_addr
 + 
rx_rög
->
èû
);

553 
ölöe
 
u8
 *
	`∑ckë_buf
(
ixgbe_rög
 *
rög
, 
i
)

555  
rög
->
wödow
[
i
 >> 
IXGBE_SUBWINDOW_BITS
] +

556 (
i
 & 
IXGBE_SUBWINDOW_MASK
Ë* 
MAX_PACKET_SIZE
;

559 
ölöe
 
u64
 
	`∑ckë_dma
(
ixgbe_rög
 *
rög
, 
i
)

561  
rög
->
dma_wödow
[
i
 >> 
IXGBE_SUBWINDOW_BITS
] +

562 (
i
 & 
IXGBE_SUBWINDOW_MASK
Ë* 
MAX_PACKET_SIZE
;

569 
	`ixgbe_Æloc_rx_buf„rs
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

570 
ixgbe_rög
 *
rx_rög
,

571 
˛ó√d_cou¡
)

573 
ixgbe_adv_rx_desc
 *
rx_desc
;

574 
i
 = 
rx_rög
->
√xt_to_u£
;

576 
˛ó√d_cou¡
--) {

577 
__À64
 
addr
 = 
	`˝u_to_À64
(
	`∑ckë_dma
(
rx_rög
, 
i
));

579 
rx_desc
 = 
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
i
);

580 
rx_desc
->
ªad
.
pkt_addr
 = 
addr
;

581 
rx_desc
->
ªad
.
hdr_addr
 = 
addr
;

583 
i
 = (ò+ 1Ë% 
rx_rög
->
cou¡
;

584 i‡(
i
 =
rx_rög
->
queued
)

585 
	`¥ötk
("ERR:Çext_to_use == queued?\n");

588 i‡(
rx_rög
->
√xt_to_u£
 !
i
) {

589 
rx_rög
->
√xt_to_u£
 = 
i
;

590 
	`ixgbe_ªÀa£_rx_desc
(&
ad≠ãr
->
hw
, 
rx_rög
, 
i
);

592 
	`¥ötk
("ERR: descriptor isÇot updated!\n");

595 
ölöe
 
u16
 
	`ixgbe_gë_hdr_öfo
(
ixgbe_adv_rx_desc
 *
rx_desc
)

597  
rx_desc
->
wb
.
lowî
.
lo_dw‹d
.
hs_rss
.
hdr_öfo
;

600 #i‡!
	`deföed
(
IXGBE_NO_LRO
Ë|| !deföed(
IXGBE_NO_HW_RSC
)

609 
ölöe
 
sk_buff
 *
	`ixgbe_å™sf‹m_rsc_queue
(sk_buf‡*
skb
)

611 
‰ag_li°_size
 = 0;

613 
skb
->
¥ev
) {

614 
sk_buff
 *
¥ev
 = 
skb
->prev;

615 
‰ag_li°_size
 +
skb
->
Àn
;

616 
skb
->
¥ev
 = 
NULL
;

617 
skb
 = 
¥ev
;

620 
	`skb_shöfo
(
skb
)->
‰ag_li°
 = skb->
√xt
;

621 
skb
->
√xt
 = 
NULL
;

622 
skb
->
Àn
 +
‰ag_li°_size
;

623 
skb
->
d©a_Àn
 +
‰ag_li°_size
;

624 
skb
->
åuesize
 +
‰ag_li°_size
;

625  
skb
;

629 #i‚de‡
IXGBE_NO_LRO


636 
ölöe
 
boﬁ
 
	`ixgbe_ˇn_Ão
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

637 
ixgbe_adv_rx_desc
 *
rx_desc
)

639 
u16
 
pkt_öfo
 = 
rx_desc
->
wb
.
lowî
.
lo_dw‹d
.
hs_rss
.pkt_info;

641  (
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_SWLRO_ENABLED
) &&

642 !(
ad≠ãr
->
√tdev
->
Êags
 & 
IFF_PROMISC
) &&

643 (
pkt_öfo
 & 
IXGBE_RXDADV_PKTTYPE_IPV4
) &&

644 (
pkt_öfo
 & 
IXGBE_RXDADV_PKTTYPE_TCP
);

653 
	`ixgbe_Ão_Êush
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
,

654 
ixgbe_Ão_desc
 *
Ãod
)

656 
ixgbe_Ão_li°
 *
Ãﬁi°
 = 
q_ve˘‹
->lrolist;

657 
ùhdr
 *
ùh
;

658 
t˝hdr
 *
th
;

659 
sk_buff
 *
skb
;

660 
u32
 *
ts_±r
;

662 
	`hli°_dñ
(&
Ãod
->
Ão_node
);

663 
Ãﬁi°
->
a˘ive_˙t
--;

665 
skb
 = 
Ãod
->skb;

666 
Ãod
->
skb
 = 
NULL
;

668 i‡(
Ãod
->
≠≥nd_˙t
) {

670 
skb
 = 
	`ixgbe_å™sf‹m_rsc_queue
(skb);

673 
ùh
 = (
ùhdr
 *)
skb
->
d©a
;

674 
ùh
->
tŸ_Àn
 = 
	`¡ohs
(
skb
->
Àn
);

675 
ùh
->
check
 = 0;

676 
ùh
->
check
 = 
	`ù_Á°_csum
((*)ùh, iph->
ihl
);

679 
th
 = (
t˝hdr
 *Ë((*)
skb
->
d©a
 + (*
ùh
));

680 
th
->
ack_£q
 = 
Ãod
->ack_seq;

681 
th
->
psh
 = 
Ãod
->psh;

682 
th
->
wödow
 = 
Ãod
->window;

683 
th
->
check
 = 0;

686 i‡(
Ãod
->
›t_byãs
) {

687 
ts_±r
 = (
u32
 *)(
th
 + 1);

688 
ts_±r
[1] = 
	`ht⁄l
(
Ãod
->
tsvÆ
);

689 
ts_±r
[2] = 
Ãod
->
t£¸
;

693 #ifde‡
NETIF_F_TSO


694 
	`skb_shöfo
(
skb
)->
gso_size
 = 
Ãod
->
mss
;

696 
	`ixgbe_ª˚ive_skb
(
q_ve˘‹
, 
skb
, 
Ãod
->
vœn_èg
);

697 
Ãﬁi°
->
°©s
.
Êushed
++;

700 
	`hli°_add_hód
(&
Ãod
->
Ão_node
, &
Ãﬁi°
->
‰ì
);

703 
	`ixgbe_Ão_Êush_Æl
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
)

705 
ixgbe_Ão_desc
 *
Ãod
;

706 
hli°_node
 *
node
, *
node2
;

707 
ixgbe_Ão_li°
 *
Ãﬁi°
 = 
q_ve˘‹
->lrolist;

709 
	`hli°_f‹_óch_íåy_ß„
(
Ãod
, 
node
, 
node2
, &
Ãﬁi°
->
a˘ive
, 
Ão_node
)

710 
	`ixgbe_Ão_Êush
(
q_ve˘‹
, 
Ãod
);

716 
u16
 
	`ixgbe_Ão_hódî_ok
(
sk_buff
 *
√w_skb
, 
ùhdr
 *
ùh
,

717 
t˝hdr
 *
th
)

719 
›t_byãs
, 
t˝_d©a_Àn
;

720 
u32
 *
ts_±r
 = 
NULL
;

723 i‡(
	`INET_ECN_is_˚
(
	`ùv4_gë_dsfõld
(
ùh
)))

727 i‡((
ùh
->
ihl
 << 2) != (*iph))

731 i‡(
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_MF
|
IP_OFFSET
))

735 i‡(
th
->
fö
 ||Åh->
syn
 ||Åh->
r°
 ||

736 
th
->
urg
 ||Åh->
e˚
 ||Åh->
cwr
 || !th->
ack
)

740 i‡(
√w_skb
->
ù_summed
 !
CHECKSUM_UNNECESSARY
)

748 
›t_byãs
 = (
th
->
doff
 << 2) - (*th);

749 i‡(
›t_byãs
 != 0) {

750 
ts_±r
 = (
u32
 *)(
th
 + 1);

751 i‡((
›t_byãs
 !
TCPOLEN_TSTAMP_ALIGNED
) ||

752 (*
ts_±r
 !
	`¡ohl
((
TCPOPT_NOP
 << 24) |

753 (
TCPOPT_NOP
 << 16Ë| (
TCPOPT_TIMESTAMP
 << 8) |

754 
TCPOLEN_TIMESTAMP
))) {

759 
t˝_d©a_Àn
 = 
	`¡ohs
(
ùh
->
tŸ_Àn
Ë- (
th
->
doff
 << 2) - (*iph);

761  
t˝_d©a_Àn
;

774 
sk_buff
 *
	`ixgbe_Ão_queue
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
,

775 
sk_buff
 *
√w_skb
,

776 
u16
 
èg
)

778 
sk_buff
 *
Ão_skb
;

779 
ixgbe_Ão_desc
 *
Ãod
;

780 
hli°_node
 *
node
;

781 
skb_sh¨ed_öfo
 *
√w_skb_öfo
 = 
	`skb_shöfo
(
√w_skb
);

782 
ixgbe_Ão_li°
 *
Ãﬁi°
 = 
q_ve˘‹
->lrolist;

783 
ùhdr
 *
ùh
 = (ùhd∏*)
√w_skb
->
d©a
;

784 
t˝hdr
 *
th
 = (t˝hd∏*)(
ùh
 + 1);

785 
t˝_d©a_Àn
 = 
	`ixgbe_Ão_hódî_ok
(
√w_skb
, 
ùh
, 
th
);

786 
u16
 
›t_byãs
 = (
th
->
doff
 << 2) - (*th);

787 
u32
 *
ts_±r
 = (
›t_byãs
 ? (u32 *)(
th
 + 1Ë: 
NULL
);

788 
u32
 
£q
 = 
	`¡ohl
(
th
->seq);

794 
	`hli°_f‹_óch_íåy
(
Ãod
, 
node
, &
Ãﬁi°
->
a˘ive
, 
Ão_node
) {

795 i‡(
Ãod
->
sour˚_p‹t
 !
th
->
sour˚
 ||

796 
Ãod
->
de°_p‹t
 !
th
->
de°
 ||

797 
Ãod
->
sour˚_ù
 !
ùh
->
ßddr
 ||

798 
Ãod
->
de°_ù
 !
ùh
->
daddr
 ||

799 
Ãod
->
vœn_èg
 !
èg
)

803 i‡(
t˝_d©a_Àn
 < 0 || (t˝_d©a_À¿+ 
Ãod
->
Àn
) > 65535) {

804 
	`ixgbe_Ão_Êush
(
q_ve˘‹
, 
Ãod
);

809 i‡(
£q
 !
Ãod
->
√xt_£q
) {

810 
	`ixgbe_Ão_Êush
(
q_ve˘‹
, 
Ãod
);

811 
t˝_d©a_Àn
 = -1;

815 i‡(
Ãod
->
›t_byãs
 || opt_bytes) {

816 
u32
 
tsvÆ
 = 
	`¡ohl
(*(
ts_±r
 + 1));

818 i‡(
›t_byãs
 !
Ãod
->opt_bytes ||

819 
Ãod
->
tsvÆ
 >ÅsvÆ || *(
ts_±r
 + 2) == 0) {

820 
	`ixgbe_Ão_Êush
(
q_ve˘‹
, 
Ãod
);

821 
t˝_d©a_Àn
 = -1;

825 
Ãod
->
tsvÆ
 =Åsval;

826 
Ãod
->
t£¸
 = *(
ts_±r
 + 2);

830 
	`__pskb_åim
(
√w_skb
, 
	`¡ohs
(
ùh
->
tŸ_Àn
));

832 
	`skb_puŒ
(
√w_skb
, 
	`¡ohs
(
ùh
->
tŸ_Àn
Ë- 
t˝_d©a_Àn
);

834 
Ãod
->
√xt_£q
 +
t˝_d©a_Àn
;

835 
Ãod
->
ack_£q
 = 
th
->ack_seq;

836 
Ãod
->
wödow
 = 
th
->window;

837 
Ãod
->
Àn
 +
t˝_d©a_Àn
;

838 
Ãod
->
psh
 |
th
->psh;

839 
Ãod
->
≠≥nd_˙t
++;

840 
Ãﬁi°
->
°©s
.
cﬂl
++;

842 i‡(
t˝_d©a_Àn
 > 
Ãod
->
mss
)

843 
Ãod
->
mss
 = 
t˝_d©a_Àn
;

845 
Ão_skb
 = 
Ãod
->
skb
;

848 i‡(!
	`skb_hódÀn
(
√w_skb
) &&

849 ((
	`skb_shöfo
(
Ão_skb
)->
ƒ_‰ags
 +

850 
	`skb_shöfo
(
√w_skb
)->
ƒ_‰ags
Ë<
MAX_SKB_FRAGS
 )) {

851 
skb_sh¨ed_öfo
 *
Ão_skb_öfo
 = 
	`skb_shöfo
(
Ão_skb
);

854 
	`mem˝y
(
Ão_skb_öfo
->
‰ags
 +Üro_skb_öfo->
ƒ_‰ags
,

855 
√w_skb_öfo
->
‰ags
,

856 
√w_skb_öfo
->
ƒ_‰ags
 * (
skb_‰ag_t
));

858 
Ão_skb_öfo
->
ƒ_‰ags
 +
√w_skb_öfo
->nr_frags;

859 
Ão_skb
->
Àn
 +
t˝_d©a_Àn
;

860 
Ão_skb
->
d©a_Àn
 +
t˝_d©a_Àn
;

861 
Ão_skb
->
åuesize
 +
t˝_d©a_Àn
;

863 
√w_skb_öfo
->
ƒ_‰ags
 = 0;

864 
√w_skb
->
åuesize
 -
t˝_d©a_Àn
;

865 
√w_skb
->
Àn
 =Çew_skb->
d©a_Àn
 = 0;

866 } i‡(
t˝_d©a_Àn
) {

868 
√w_skb
->
¥ev
 = 
Ão_skb
;

869 
Ão_skb
->
√xt
 = 
√w_skb
;

870 
Ãod
->
skb
 = 
√w_skb
 ;

873 i‡(
Ãod
->
psh
)

874 
	`ixgbe_Ão_Êush
(
q_ve˘‹
, 
Ãod
);

877 i‡(!
√w_skb
->
Àn
) {

878 
√w_skb
->
d©a
 = 
	`skb_mac_hódî
(new_skb);

879 
	`__pskb_åim
(
√w_skb
, 0);

880 
√w_skb
->
¥Ÿocﬁ
 = 0;

881 
Ãﬁi°
->
°©s
.
ªcy˛ed
++;

882  
√w_skb
;

885  
NULL
;

889 i‡(
t˝_d©a_Àn
 > 0 && !
	`hli°_em±y
(&
Ãﬁi°
->
‰ì
Ë&& !
th
->
psh
) {

890 
Ãod
 = 
	`hli°_íåy
(
Ãﬁi°
->
‰ì
.
fú°
, 
ixgbe_Ão_desc
,

891 
Ão_node
);

893 
Ãod
->
skb
 = 
√w_skb
;

894 
Ãod
->
sour˚_ù
 = 
ùh
->
ßddr
;

895 
Ãod
->
de°_ù
 = 
ùh
->
daddr
;

896 
Ãod
->
sour˚_p‹t
 = 
th
->
sour˚
;

897 
Ãod
->
de°_p‹t
 = 
th
->
de°
;

898 
Ãod
->
vœn_èg
 = 
èg
;

899 
Ãod
->
Àn
 = 
√w_skb
->len;

900 
Ãod
->
√xt_£q
 = 
£q
 + 
t˝_d©a_Àn
;

901 
Ãod
->
ack_£q
 = 
th
->ack_seq;

902 
Ãod
->
wödow
 = 
th
->window;

903 
Ãod
->
mss
 = 
t˝_d©a_Àn
;

904 
Ãod
->
›t_byãs
 = opt_bytes;

905 
Ãod
->
psh
 = 0;

906 
Ãod
->
≠≥nd_˙t
 = 0;

909 i‡(
›t_byãs
) {

910 
Ãod
->
tsvÆ
 = 
	`¡ohl
(*(
ts_±r
 + 1));

911 
Ãod
->
t£¸
 = *(
ts_±r
 + 2);

914 
	`hli°_dñ
(&
Ãod
->
Ão_node
);

916 
	`hli°_add_hód
(&
Ãod
->
Ão_node
, &
Ãﬁi°
->
a˘ive
);

917 
Ãﬁi°
->
a˘ive_˙t
++;

918 
Ãﬁi°
->
°©s
.
cﬂl
++;

919  
NULL
;

923 
	`ixgbe_ª˚ive_skb
(
q_ve˘‹
, 
√w_skb
, 
èg
);

924  
NULL
;

927 
	`ixgbe_Ão_rög_exô
(
ixgbe_Ão_li°
 *
Ãﬁi°
)

929 
hli°_node
 *
node
, *
node2
;

930 
ixgbe_Ão_desc
 *
Ãod
;

932 
	`hli°_f‹_óch_íåy_ß„
(
Ãod
, 
node
, 
node2
, &
Ãﬁi°
->
a˘ive
,

933 
Ão_node
) {

934 
	`hli°_dñ
(&
Ãod
->
Ão_node
);

935 
	`k‰ì
(
Ãod
);

938 
	`hli°_f‹_óch_íåy_ß„
(
Ãod
, 
node
, 
node2
, &
Ãﬁi°
->
‰ì
,

939 
Ão_node
) {

940 
	`hli°_dñ
(&
Ãod
->
Ão_node
);

941 
	`k‰ì
(
Ãod
);

945 
	`ixgbe_Ão_rög_öô
(
ixgbe_Ão_li°
 *
Ãﬁi°
)

947 
j
, 
byãs
;

948 
ixgbe_Ão_desc
 *
Ãod
;

950 
byãs
 = (
ixgbe_Ão_desc
);

952 
	`INIT_HLIST_HEAD
(&
Ãﬁi°
->
‰ì
);

953 
	`INIT_HLIST_HEAD
(&
Ãﬁi°
->
a˘ive
);

955 
j
 = 0; j < 
IXGBE_LRO_MAX
; j++) {

956 
Ãod
 = 
	`kzÆloc
(
byãs
, 
GFP_KERNEL
);

957 i‡(
Ãod
 !
NULL
) {

958 
	`INIT_HLIST_NODE
(&
Ãod
->
Ão_node
);

959 
	`hli°_add_hód
(&
Ãod
->
Ão_node
, &
Ãﬁi°
->
‰ì
);

966 #i‚de‡
IXGBE_NO_HW_RSC


967 
ölöe
 
u32
 
	`ixgbe_gë_rsc_cou¡
(
ixgbe_adv_rx_desc
 *
rx_desc
)

969  (
	`À32_to_˝u
(
rx_desc
->
wb
.
lowî
.
lo_dw‹d
.
d©a
) &

970 
IXGBE_RXDADV_RSCCNT_MASK
) >>

971 
IXGBE_RXDADV_RSCCNT_SHIFT
;

977 
	`ixgbe_rx_°©us_ödiˇti⁄
(
u32
 
°©îr
,

978 
ixgbe_ad≠ãr
 *
ad≠ãr
)

980 
ad≠ãr
->
hw
.
mac
.
ty≥
) {

981 
ixgbe_mac_82599EB
:

982 i‡(
°©îr
 & 
IXGBE_RXD_STAT_FLM
)

983 
ad≠ãr
->
Êm
++;

984 #i‚de‡
IXGBE_NO_LLI


985 i‡(
°©îr
 & 
IXGBE_RXD_STAT_DYNINT
)

986 
ad≠ãr
->
Œi_öt
++;

989 
ixgbe_mac_82598EB
:

990 #i‚de‡
IXGBE_NO_LLI


991 i‡(
°©îr
 & 
IXGBE_RXD_STAT_DYNINT
)

992 
ad≠ãr
->
Œi_öt
++;

1001 
	`ixgbe_xmô_b©ch
(
ixgbe_rög
 *
tx_rög
,

1002 
num_to_xmô
, 
ps_pkt_öfo
 *
öfo
, *
buf
)

1004 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
tx_rög
->adapter;

1005 
ixgbe_tx_buf„r
 *
bi
;

1006 
ixgbe_adv_tx_desc
 *
tx_desc
 = 
NULL
;

1007 
qidx
, 
√xt_qidx
;

1008 
i
 = 0;

1009 
À·
, 
˙t
;

1010 
tŸÆ_byãs
 = 0;

1011 
u8
 *
d°
;

1013 c⁄° 
u32
 
cmd_ty≥_Àn
 = 
IXGBE_ADVTXD_DTYP_DATA
 |

1014 
IXGBE_ADVTXD_DCMD_DEXT
 |

1015 
IXGBE_TXD_CMD_EOP
 |

1017 
IXGBE_TXD_CMD_IFCS
;

1019 
qidx
 = 
tx_rög
->
√xt_to_u£
;

1021 i‡(
tx_rög
->
√xt_to_˛ón
 <tx_rög->
√xt_to_u£
)

1022 
À·
 = 
tx_rög
->
cou¡
 -Åx_rög->
√xt_to_u£
 +Åx_rög->
√xt_to_˛ón
 - 1;

1024 
À·
 = 
tx_rög
->
√xt_to_˛ón
 -Åx_rög->
√xt_to_u£
 - 1;

1026 i‡(
À·
 < 
num_to_xmô
) {

1027 
tmp
;

1028 
	`ixgbe_˛ón_tx_úq
(
ad≠ãr
, 
tx_rög
, &
tmp
, 0);

1031 i‡(
tx_rög
->
√xt_to_˛ón
 <tx_rög->
√xt_to_u£
)

1032 
À·
 = 
tx_rög
->
cou¡
 -Åx_rög->
√xt_to_u£
 +Åx_rög->
√xt_to_˛ón
 - 1;

1034 
À·
 = 
tx_rög
->
√xt_to_˛ón
 -Åx_rög->
√xt_to_u£
 - 1;

1037 
˙t
 = 
	`mö
(
num_to_xmô
, 
À·
);

1038 i‡(
˙t
 == 0)

1039  
˙t
;

1041 
d°
 = 
	`∑ckë_buf
(
tx_rög
, 
qidx
);

1043 
	`¥e„tch¡a
(&
tx_rög
->
tx_buf„r_öfo
[
qidx
 + 0]);

1044 
	`¥e„tch¡a
(&
tx_rög
->
tx_buf„r_öfo
[
qidx
 + 4]);

1046 
	`¥e„tch¡a
(
buf
 + 
öfo
[0].
off£t
 + 64 * 0);

1047 
	`¥e„tch¡a
(
buf
 + 
öfo
[0].
off£t
 + 64 * 1);

1048 
	`¥e„tch¡a
(
buf
 + 
öfo
[0].
off£t
 + 64 * 2);

1049 
	`¥e„tch¡a
(
buf
 + 
öfo
[0].
off£t
 + 64 * 3);

1051 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 0);

1052 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 1);

1053 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 2);

1054 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 3);

1055 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 4);

1056 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 5);

1057 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 6);

1058 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 7);

1060 
i
 = 0; i < 
˙t
; i++) {

1061 
Àn
 = 
öfo
[
i
].len;

1063 
d°
 = 
	`∑ckë_buf
(
tx_rög
, 
qidx
);

1065 
	`¥e„tch¡a
(&
tx_rög
->
tx_buf„r_öfo
[
qidx
 + 8]);

1066 
	`¥e„tch¡a
(
d°
 + 
MAX_PACKET_SIZE
 * 8);

1067 
	`¥e„tch¡a
(
buf
 + 
öfo
[
i
].
off£t
 + 64 * 4);

1069 
√xt_qidx
 = (
qidx
 + 1Ë% 
tx_rög
->
cou¡
;

1071 
	`mem˝y_Æig√d
(
d°
, 
buf
 + 
öfo
[
i
].
off£t
, 
Àn
);

1073 
tx_desc
 = 
	`IXGBE_TX_DESC_ADV
(*
tx_rög
, 
qidx
);

1075 
tx_desc
->
ªad
.
buf„r_addr
 =

1076 
	`˝u_to_À64
(
	`∑ckë_dma
(
tx_rög
, 
qidx
));

1078 
tx_desc
->
ªad
.
cmd_ty≥_Àn
 =

1079 
	`˝u_to_À32
(
cmd_ty≥_Àn
 | 
Àn
);

1081 
tx_desc
->
ªad
.
ﬁöfo_°©us
 = 
	`˝u_to_À32
(
Àn
 << 
IXGBE_ADVTXD_PAYLEN_SHIFT
);

1083 
bi
 = &
tx_rög
->
tx_buf„r_öfo
[
qidx
];

1084 
bi
->
time_°amp
 = 
jiffõs
;

1085 
bi
->
Àngth
 = 
Àn
;

1086 
bi
->
√xt_to_w©ch
 = 
qidx
;

1088 
tŸÆ_byãs
 +
Àn
;

1090 
qidx
 = 
√xt_qidx
;

1092 i‡(
i
 % 256 == 255) {

1093 
	`wmb
();

1094 
	`wrôñ
(
qidx
, 
ad≠ãr
->
hw
.
hw_addr
 + 
tx_rög
->
èû
);

1098 
tx_rög
->
√xt_to_u£
 = 
qidx
;

1100 
tx_rög
->
tŸÆ_∑ckës
 +
˙t
;

1101 
tx_rög
->
tŸÆ_byãs
 +=Åotal_bytes;

1102 
tx_rög
->
°©s
.
∑ckës
 +
˙t
;

1103 
tx_rög
->
°©s
.
byãs
 +
tŸÆ_byãs
;

1111 
	`wmb
();

1112 
	`wrôñ
(
qidx
, 
ad≠ãr
->
hw
.
hw_addr
 + 
tx_rög
->
èû
);

1114  
˙t
;

1117 
boﬁ
 
	`ixgbe_˛ón_rx_úq
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
,

1118 
ixgbe_rög
 *
rx_rög
,

1119 *
w‹k_d⁄e
, 
w‹k_to_do
)

1121 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
rx_rög
->adapter;

1122 
ixgbe_adv_rx_desc
 *
rx_desc
;

1124 
i
;

1125 
u32
 
Àn
, 
°©îr
;

1126 
boﬁ
 
˛ó√d
 = 
Ál£
;

1127 
˛ó√d_cou¡
 = 0;

1128 
tŸÆ_rx_byãs
 = 0, 
tŸÆ_rx_∑ckës
 = 0;

1130 
i
 = 
rx_rög
->
√xt_to_˛ón
;

1131 
w‹k_to_do
 -*
w‹k_d⁄e
;

1133 
rx_desc
 = 
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
i
);

1134 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

1136 (
°©îr
 & 
IXGBE_RXD_STAT_DD
Ë&& (
˛ó√d_cou¡
 < 
w‹k_to_do
)) {

1137 
ixgbe_rx_buf„r
 *
bi
 = &
rx_rög
->
rx_buf„r_öfo
[
i
];

1139 i‡(
i
 % 4 == 0)

1140 
	`¥e„tch¡a
(
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
i
 + 8));

1142 i‡(
	`likñy
(
°©îr
 & 
IXGBE_RXD_STAT_EOP
)) {

1143 i‡(
	`u∆ikñy
(
°©îr
 & 
IXGBE_RXDADV_ERR_FRAME_ERR_MASK
))

1144 
Àn
 = 0;

1146 
	`¥ötk
("foundÇon-EOPÖackets!\n");

1147 
Àn
 = 0;

1150 
Àn
 = 
	`À16_to_˝u
(
rx_desc
->
wb
.
uµî
.
Àngth
);

1152 
bi
->
Àngth
 = 
Àn
;

1154 
i
 = (ò+ 1Ë% 
rx_rög
->
cou¡
;

1155 
rx_desc
 = 
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
i
);

1156 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

1158 
˛ó√d
 = 
åue
;

1159 
˛ó√d_cou¡
++;

1161 
tŸÆ_rx_∑ckës
++;

1162 
tŸÆ_rx_byãs
 +
Àn
;

1165 *
w‹k_d⁄e
 +
˛ó√d_cou¡
;

1166 
rx_rög
->
√xt_to_˛ón
 = 
i
;

1168 i‡(
rx_rög
->
queued
 <rx_rög->
√xt_to_u£
)

1169 
˛ó√d_cou¡
 = 
rx_rög
->
cou¡
 -Ñx_rög->
√xt_to_u£
 +Ñx_rög->
queued
 - 1;

1171 
˛ó√d_cou¡
 = 
rx_rög
->
queued
 -Ñx_rög->
√xt_to_u£
 - 1;

1173 i‡(
˛ó√d_cou¡
 > 0)

1174 
	`ixgbe_Æloc_rx_buf„rs
(
ad≠ãr
, 
rx_rög
, 
˛ó√d_cou¡
);

1176 
rx_rög
->
°©s
.
∑ckës
 +
tŸÆ_rx_∑ckës
;

1177 
rx_rög
->
°©s
.
byãs
 +
tŸÆ_rx_byãs
;

1178 
rx_rög
->
tŸÆ_∑ckës
 +
tŸÆ_rx_∑ckës
;

1179 
rx_rög
->
tŸÆ_byãs
 +
tŸÆ_rx_byãs
;

1181  
˛ó√d
;

1192 
	`ixgbe_wrôe_eôr
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
)

1194 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1195 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1196 
v_idx
 = 
q_ve˘‹
->v_idx;

1197 
u32
 
ôr_ªg
 = 
	`EITR_INTS_PER_SEC_TO_REG
(
q_ve˘‹
->
eôr
);

1199 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

1201 
ôr_ªg
 |= (itr_reg << 16);

1202 } i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

1207 
ôr_ªg
 |
IXGBE_EITR_CNT_WDIS
;

1209 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_EITR
(
v_idx
), 
ôr_ªg
);

1212 #ifde‡
CONFIG_IXGBE_NAPI


1213 
	`ixgbe_˛ón_rx⁄ly
(
«pi_°ru˘
 *, );

1222 
	`ixgbe_c⁄figuª_msix
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1224 
ixgbe_q_ve˘‹
 *
q_ve˘‹
;

1225 
i
, 
j
, 
q_ve˘‹s
, 
v_idx
, 
r_idx
;

1226 
u32
 
mask
;

1228 
q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

1234 
v_idx
 = 0; v_idx < 
q_ve˘‹s
; v_idx++) {

1235 
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
v_idx
];

1237 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
rxr_idx
,

1238 
ad≠ãr
->
num_rx_queues
);

1240 
i
 = 0; i < 
q_ve˘‹
->
rxr_cou¡
; i++) {

1241 
j
 = 
ad≠ãr
->
rx_rög
[
r_idx
].
ªg_idx
;

1242 
	`ixgbe_£t_iv¨
(
ad≠ãr
, 0, 
j
, 
v_idx
);

1243 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
rxr_idx
,

1244 
ad≠ãr
->
num_rx_queues
,

1245 
r_idx
 + 1);

1247 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
txr_idx
,

1248 
ad≠ãr
->
num_tx_queues
);

1250 
i
 = 0; i < 
q_ve˘‹
->
txr_cou¡
; i++) {

1251 
j
 = 
ad≠ãr
->
tx_rög
[
r_idx
].
ªg_idx
;

1252 
	`ixgbe_£t_iv¨
(
ad≠ãr
, 1, 
j
, 
v_idx
);

1253 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
txr_idx
,

1254 
ad≠ãr
->
num_tx_queues
,

1255 
r_idx
 + 1);

1259 i‡(
q_ve˘‹
->
txr_cou¡
 && !q_ve˘‹->
rxr_cou¡
)

1260 
q_ve˘‹
->
eôr
 = (
ad≠ãr
->
eôr_∑øm
 >> 1);

1261 i‡(
q_ve˘‹
->
rxr_cou¡
)

1263 
q_ve˘‹
->
eôr
 = 
ad≠ãr
->
eôr_∑øm
;

1265 
	`ixgbe_wrôe_eôr
(
q_ve˘‹
);

1268 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

1269 
	`ixgbe_£t_iv¨
(
ad≠ãr
, -1, 
IXGBE_IVAR_OTHER_CAUSES_INDEX
,

1270 
v_idx
);

1271 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

1272 
	`ixgbe_£t_iv¨
(
ad≠ãr
, -1, 1, 
v_idx
);

1273 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_EITR
(
v_idx
), 1950);

1274 #ifde‡
IXGBE_TCP_TIMER


1275 
	`ixgbe_£t_iv¨
(
ad≠ãr
, -1, 0, ++
v_idx
);

1279 
mask
 = 
IXGBE_EIMS_ENABLE_MASK
;

1280 
mask
 &~(
IXGBE_EIMS_OTHER
 |

1281 
IXGBE_EIMS_LSC
);

1283 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIAC
, 
mask
);

1286 
	eœãncy_ønge
 {

1287 
lowe°_œãncy
 = 0,

1288 
low_œãncy
 = 1,

1289 
bulk_œãncy
 = 2,

1290 
œãncy_övÆid
 = 255

1311 
u8
 
	`ixgbe_upd©e_ôr
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

1312 
u32
 
eôr
, 
u8
 
ôr_£âög
,

1313 
∑ckës
, 
byãs
)

1315 
ªtvÆ
 = 
ôr_£âög
;

1316 
u32
 
timïas£d_us
;

1317 
u64
 
byãs_≥röt
;

1319 i‡(
∑ckës
 == 0)

1320 
upd©e_ôr_d⁄e
;

1329 
timïas£d_us
 = 1000000/
eôr
;

1330 
byãs_≥röt
 = 
byãs
 / 
timïas£d_us
;

1332 
ôr_£âög
) {

1333 
lowe°_œãncy
:

1334 i‡(
byãs_≥röt
 > 
ad≠ãr
->
eôr_low
) {

1335 
ªtvÆ
 = 
low_œãncy
;

1338 
low_œãncy
:

1339 i‡(
byãs_≥röt
 > 
ad≠ãr
->
eôr_high
) {

1340 
ªtvÆ
 = 
bulk_œãncy
;

1342 i‡(
byãs_≥röt
 <
ad≠ãr
->
eôr_low
) {

1343 
ªtvÆ
 = 
lowe°_œãncy
;

1346 
bulk_œãncy
:

1347 i‡(
byãs_≥röt
 <
ad≠ãr
->
eôr_high
) {

1348 
ªtvÆ
 = 
low_œãncy
;

1353 
upd©e_ôr_d⁄e
:

1354  
ªtvÆ
;

1357 
	`ixgbe_£t_ôr_msix
(
ixgbe_q_ve˘‹
 *
q_ve˘‹
)

1359 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1360 
u32
 
√w_ôr
;

1361 
u8
 
cuºít_ôr
, 
ªt_ôr
;

1362 
i
, 
r_idx
;

1363 
ixgbe_rög
 *
rx_rög
 = 
NULL
, *
tx_rög
 = NULL;

1365 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
);

1366 
i
 = 0; i < 
q_ve˘‹
->
txr_cou¡
; i++) {

1367 
tx_rög
 = &(
ad≠ãr
->tx_rög[
r_idx
]);

1368 
ªt_ôr
 = 
	`ixgbe_upd©e_ôr
(
ad≠ãr
, 
q_ve˘‹
->
eôr
,

1369 
q_ve˘‹
->
tx_ôr
,

1370 
tx_rög
->
tŸÆ_∑ckës
,

1371 
tx_rög
->
tŸÆ_byãs
);

1374 
q_ve˘‹
->
tx_ôr
 = ((q_ve˘‹->tx_ô∏> 
ªt_ôr
) ?

1375 
q_ve˘‹
->
tx_ôr
 - 1 : 
ªt_ôr
);

1376 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
,

1377 
r_idx
 + 1);

1380 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
);

1381 
i
 = 0; i < 
q_ve˘‹
->
rxr_cou¡
; i++) {

1382 
rx_rög
 = &(
ad≠ãr
->rx_rög[
r_idx
]);

1383 
ªt_ôr
 = 
	`ixgbe_upd©e_ôr
(
ad≠ãr
, 
q_ve˘‹
->
eôr
,

1384 
q_ve˘‹
->
rx_ôr
,

1385 
rx_rög
->
tŸÆ_∑ckës
,

1386 
rx_rög
->
tŸÆ_byãs
);

1389 
q_ve˘‹
->
rx_ôr
 = ((q_ve˘‹->rx_ô∏> 
ªt_ôr
) ?

1390 
q_ve˘‹
->
rx_ôr
 - 1 : 
ªt_ôr
);

1391 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
,

1392 
r_idx
 + 1);

1395 
cuºít_ôr
 = 
	`max
(
q_ve˘‹
->
rx_ôr
, q_ve˘‹->
tx_ôr
);

1397 
cuºít_ôr
) {

1399 
lowe°_œãncy
:

1400 
√w_ôr
 = 100000;

1402 
low_œãncy
:

1403 
√w_ôr
 = 20000;

1405 
bulk_œãncy
:

1407 
√w_ôr
 = 8000;

1411 i‡(
√w_ôr
 !
q_ve˘‹
->
eôr
) {

1414 
√w_ôr
 = ((
q_ve˘‹
->
eôr
 * 90)/100) + ((new_itr * 10)/100);

1417 
q_ve˘‹
->
eôr
 = 
√w_ôr
;

1419 
	`ixgbe_wrôe_eôr
(
q_ve˘‹
);

1425 
	`ixgbe_check_Án_Áûuª
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
u32
 
ei¸
)

1427 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1429 i‡((
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FAN_FAIL_CAPABLE
) &&

1430 (
ei¸
 & 
IXGBE_EICR_GPI_SDP1
)) {

1431 
	`DPRINTK
(
PROBE
, 
CRIT
, "Fan has stopped,ÑeplaceÅheádapter\n");

1433 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EICR
, 
IXGBE_EICR_GPI_SDP1
);

1437 
	`ixgbe_check_sÂ_evít
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
u32
 
ei¸
)

1439 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1441 i‡(
ei¸
 & 
IXGBE_EICR_GPI_SDP1
) {

1443 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EICR
, 
IXGBE_EICR_GPI_SDP1
);

1444 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

1445 
	`scheduÀ_w‹k
(&
ad≠ãr
->
mu…i•ìd_fibî_èsk
);

1446 } i‡(
ei¸
 & 
IXGBE_EICR_GPI_SDP2
) {

1448 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EICR
, 
IXGBE_EICR_GPI_SDP2
);

1449 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

1450 
	`scheduÀ_w‹k
(&
ad≠ãr
->
sÂ_c⁄fig_moduÀ_èsk
);

1457 
	`ixgbe_check_lsc
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1459 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1461 
ad≠ãr
->
lsc_öt
++;

1462 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_NEED_LINK_UPDATE
;

1463 
ad≠ãr
->
lök_check_timeout
 = 
jiffõs
;

1464 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
)) {

1465 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIMC
, 
IXGBE_EIMC_LSC
);

1466 
	`scheduÀ_w‹k
(&
ad≠ãr
->
w©chdog_èsk
);

1470 
úqªtu∫_t
 
	`ixgbe_msix_lsc
(
úq
, *
d©a
)

1472 
√t_devi˚
 *
√tdev
 = 
d©a
;

1473 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1474 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1475 
u32
 
ei¸
;

1482 
ei¸
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EICS
);

1483 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EICR
, 
ei¸
);

1485 i‡(
ei¸
 & 
IXGBE_EICR_LSC
)

1486 
	`ixgbe_check_lsc
(
ad≠ãr
);

1488 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

1489 i‡(
ei¸
 & 
IXGBE_EICR_ECC
) {

1490 
	`DPRINTK
(
LINK
, 
INFO
, "Received unrecoverable ECC Err, "

1492 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EICR
, 
IXGBE_EICR_ECC
);

1495 i‡(
ei¸
 & 
IXGBE_EICR_FLOW_DIR
) {

1496 
i
;

1497 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EICR
, 
IXGBE_EICR_FLOW_DIR
);

1499 
	`√tif_tx_°›_Æl_queues
(
√tdev
);

1500 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

1501 
ixgbe_rög
 *
tx_rög
 =

1502 &
ad≠ãr
->
tx_rög
[
i
];

1503 i‡(
	`ã°_™d_˛ór_bô
(
__IXGBE_FDIR_INIT_DONE
,

1504 &
tx_rög
->
ªöô_°©e
))

1505 
	`scheduÀ_w‹k
(&
ad≠ãr
->
fdú_ªöô_èsk
);

1510 
	`ixgbe_check_Án_Áûuª
(
ad≠ãr
, 
ei¸
);

1512 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

1513 
	`ixgbe_check_sÂ_evít
(
ad≠ãr
, 
ei¸
);

1516 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

1517 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIMS
, 
ei¸
 &

1518 ~(
IXGBE_EIMS_LSC
 | 
IXGBE_EIMS_RTX_QUEUE
));

1520  
IRQ_HANDLED
;

1523 #ifde‡
IXGBE_TCP_TIMER


1524 
úqªtu∫_t
 
	`ixgbe_msix_pba
(
úq
, *
d©a
)

1526 
√t_devi˚
 *
√tdev
 = 
d©a
;

1527 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1528 
i
;

1530 
u32
 
pba
 = 
	`ªadl
(
ad≠ãr
->
msix_addr
 + 
IXGBE_MSIXPBA
);

1531 
i
 = 0; i < 
MAX_MSIX_COUNT
; i++) {

1532 i‡(
pba
 & (1 << 
i
))

1533 
ad≠ãr
->
msix_h™dÀrs
[
i
](
úq
, 
d©a
, 
ªgs
);

1535 
ad≠ãr
->
pba_zîo
[
i
]++;

1538 
ad≠ãr
->
msix_pba
++;

1539  
IRQ_HANDLED
;

1542 
úqªtu∫_t
 
	`ixgbe_msix_t˝_timî
(
úq
, *
d©a
)

1544 
√t_devi˚
 *
√tdev
 = 
d©a
;

1545 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1547 
ad≠ãr
->
msix_t˝_timî
++;

1549  
IRQ_HANDLED
;

1553 
ölöe
 
	`ixgbe_úq_íabÀ_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

1554 
u64
 
qmask
)

1556 
u32
 
mask
;

1557 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1559 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

1560 
mask
 = (
IXGBE_EIMS_RTX_QUEUE
 & 
qmask
);

1561 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIMS
, 
mask
);

1563 
mask
 = (
qmask
 & 0xFFFFFFFF);

1564 i‡(
mask
)

1565 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_EIMS_EX
(0), 
mask
);

1566 
mask
 = (
qmask
 >> 32);

1567 i‡(
mask
)

1568 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_EIMS_EX
(1), 
mask
);

1573 
ölöe
 
	`ixgbe_úq_dißbÀ_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

1574 
u64
 
qmask
)

1576 
u32
 
mask
;

1577 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

1579 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

1580 
mask
 = (
IXGBE_EIMS_RTX_QUEUE
 & 
qmask
);

1581 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIMC
, 
mask
);

1583 
mask
 = (
qmask
 & 0xFFFFFFFF);

1584 i‡(
mask
)

1585 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_EIMC_EX
(0), 
mask
);

1586 
mask
 = (
qmask
 >> 32);

1587 i‡(
mask
)

1588 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_EIMC_EX
(1), 
mask
);

1593 
úqªtu∫_t
 
	`ixgbe_msix_˛ón_tx
(
úq
, *
d©a
)

1595 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
d©a
;

1596 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1597 
ixgbe_rög
 *
tx_rög
;

1598 
i
, 
r_idx
;

1600 i‡(!
q_ve˘‹
->
txr_cou¡
)

1601  
IRQ_HANDLED
;

1603 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
);

1604 
i
 = 0; i < 
q_ve˘‹
->
txr_cou¡
; i++) {

1605 
tx_rög
 = &(
ad≠ãr
->tx_rög[
r_idx
]);

1606 
tx_rög
->
tŸÆ_byãs
 = 0;

1607 
tx_rög
->
tŸÆ_∑ckës
 = 0;

1608 #i‚de‡
CONFIG_IXGBE_NAPI


1609 
	`ixgbe_˛ón_tx_úq
(
ad≠ãr
, 
tx_rög
);

1610 #i‡
	`deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

1611 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1612 
	`ixgbe_upd©e_tx_dˇ
(
ad≠ãr
, 
tx_rög
);

1615 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
,

1616 
r_idx
 + 1);

1619 #ifde‡
CONFIG_IXGBE_NAPI


1621 
	`ixgbe_úq_dißbÀ_queues
(
ad≠ãr
, ((
u64
)1 << 
q_ve˘‹
->
v_idx
));

1622 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

1631  
IRQ_HANDLED
;

1639 
úqªtu∫_t
 
	`ixgbe_msix_˛ón_rx
(
úq
, *
d©a
)

1641 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
d©a
;

1642 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1643 
ixgbe_rög
 *
rx_rög
;

1644 
r_idx
;

1645 
i
;

1647 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
);

1648 
i
 = 0; i < 
q_ve˘‹
->
rxr_cou¡
; i++) {

1649 
rx_rög
 = &(
ad≠ãr
->rx_rög[
r_idx
]);

1650 
rx_rög
->
tŸÆ_byãs
 = 0;

1651 
rx_rög
->
tŸÆ_∑ckës
 = 0;

1652 #i‚de‡
CONFIG_IXGBE_NAPI


1653 
	`ixgbe_˛ón_rx_úq
(
q_ve˘‹
, 
rx_rög
);

1655 #i‡
	`deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

1656 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1657 
	`ixgbe_upd©e_rx_dˇ
(
ad≠ãr
, 
rx_rög
);

1660 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
,

1661 
r_idx
 + 1);

1664 i‡(
ad≠ãr
->
ôr_£âög
 & 1)

1665 
	`ixgbe_£t_ôr_msix
(
q_ve˘‹
);

1667 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
,

1668 
r_idx
 + 1);

1671 i‡(!
q_ve˘‹
->
rxr_cou¡
)

1672  
IRQ_HANDLED
;

1675 
	`ixgbe_úq_dißbÀ_queues
(
ad≠ãr
, ((
u64
)1 << 
q_ve˘‹
->
v_idx
));

1676 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

1679  
IRQ_HANDLED
;

1682 
úqªtu∫_t
 
	`ixgbe_msix_˛ón_m™y
(
úq
, *
d©a
)

1684 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
d©a
;

1685 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1686 
ixgbe_rög
 *
rög
;

1687 
r_idx
;

1688 
i
;

1690 i‡(!
q_ve˘‹
->
txr_cou¡
 && !q_ve˘‹->
rxr_cou¡
)

1691  
IRQ_HANDLED
;

1693 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
);

1694 
i
 = 0; i < 
q_ve˘‹
->
txr_cou¡
; i++) {

1695 
rög
 = &(
ad≠ãr
->
tx_rög
[
r_idx
]);

1696 
rög
->
tŸÆ_byãs
 = 0;

1697 
rög
->
tŸÆ_∑ckës
 = 0;

1698 #i‚de‡
CONFIG_IXGBE_NAPI


1699 
	`ixgbe_˛ón_tx_úq
(
ad≠ãr
, 
rög
);

1700 #i‡
	`deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

1701 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1702 
	`ixgbe_upd©e_tx_dˇ
(
ad≠ãr
, 
rög
);

1705 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
,

1706 
r_idx
 + 1);

1709 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
);

1710 
i
 = 0; i < 
q_ve˘‹
->
rxr_cou¡
; i++) {

1711 
rög
 = &(
ad≠ãr
->
rx_rög
[
r_idx
]);

1712 
rög
->
tŸÆ_byãs
 = 0;

1713 
rög
->
tŸÆ_∑ckës
 = 0;

1714 #i‚de‡
CONFIG_IXGBE_NAPI


1715 
	`ixgbe_˛ón_rx_úq
(
q_ve˘‹
, 
rög
);

1717 #i‡
	`deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

1718 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1719 
	`ixgbe_upd©e_rx_dˇ
(
ad≠ãr
, 
rög
);

1722 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
,

1723 
r_idx
 + 1);

1726 i‡(
ad≠ãr
->
ôr_£âög
 & 1)

1727 
	`ixgbe_£t_ôr_msix
(
q_ve˘‹
);

1729 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
,

1730 
r_idx
 + 1);

1734 
	`ixgbe_úq_dißbÀ_queues
(
ad≠ãr
, ((
u64
)1 << 
q_ve˘‹
->
v_idx
));

1735 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

1738  
IRQ_HANDLED
;

1741 
	`c›y_rx_∑ckës
(
ixgbe_rög
 *
rx_rög
,

1742 
n
,

1743 
ps_pkt_öfo
 *
öfo
,

1744 *
pkt_buf
,

1745 
off£t
);

1748 
	`rx_kî√l
(
√t_devi˚
 *
dev
, 
ixgbe_rög
 *
rx_rög
)

1750 
sk_buff
 *
skb
;

1751 
ps_pkt_öfo
 
öfo
;

1752 
ªt
;

1754 
skb
 = 
	`√tdev_Æloc_skb
(
dev
, 
rx_rög
->
rx_buf_Àn
 + 
NET_IP_ALIGN
);

1756 i‡(
skb
 =
NULL
) {

1757 
	`¥ötk
(
KERN_ERR
 "netdev_alloc_skb() failed!\n");

1761 
	`skb_ª£rve
(
skb
, 
NET_IP_ALIGN
);

1763 
ªt
 = 
	`c›y_rx_∑ckës
(
rx_rög
, 1, &
öfo
, 
skb
->
d©a
, 0);

1764 i‡(!
ªt
) {

1765 
	`dev_k‰ì_skb_™y
(
skb
);

1769 
	`skb_put
(
skb
, 
öfo
.
Àn
);

1770 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

1771 
	`√tif_rx
(
skb
);

1776 #ifde‡
CONFIG_IXGBE_NAPI


1785 
	`ixgbe_˛ón_rx⁄ly
(
«pi_°ru˘
 *
«pi
, 
budgë
)

1787 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 =

1788 
	`c⁄èöî_of
(
«pi
, 
ixgbe_q_ve˘‹
,Çapi);

1789 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1790 
ixgbe_rög
 *
rx_rög
 = 
NULL
;

1791 
w‹k_d⁄e
 = 0;

1792 
r_idx
;

1794 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
);

1795 
rx_rög
 = &(
ad≠ãr
->rx_rög[
r_idx
]);

1796 #ifde‡
IXGBE_DCA


1797 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1798 
	`ixgbe_upd©e_rx_dˇ
(
ad≠ãr
, 
rx_rög
);

1801 
	`•ö_lock
(&
rx_rög
->
lock
);

1802 i‡(
rx_rög
->
wq
) {

1803 
	`wake_up_öãºu±ibÀ
(
rx_rög
->
wq
);

1805 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_KERNEL_ENABLE
) {

1806 
w‹k_d⁄e
 < 
budgë
) {

1807 i‡(!
	`rx_kî√l
(
ad≠ãr
->
√tdev
, 
rx_rög
))

1809 
w‹k_d⁄e
++;

1816 #i‚de‡
HAVE_NETDEV_NAPI_LIST


1817 i‡(!
	`√tif_ru¬ög
(
ad≠ãr
->
√tdev
))

1818 
w‹k_d⁄e
 = 0;

1822 i‡(
w‹k_d⁄e
 < 
budgë
) {

1823 
	`«pi_com∂ëe
(
«pi
);

1824 i‡(
ad≠ãr
->
ôr_£âög
 & 1)

1825 
	`ixgbe_£t_ôr_msix
(
q_ve˘‹
);

1827 i‡(!
rx_rög
->
wq
 && 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_KERNEL_ENABLE
) {

1828 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

1829 
	`ixgbe_úq_íabÀ_queues
(
ad≠ãr
,

1830 ((
u64
)1 << 
q_ve˘‹
->
v_idx
));

1834 
	`•ö_u∆ock
(&
rx_rög
->
lock
);

1836  
w‹k_d⁄e
;

1847 
	`ixgbe_˛ón_rxtx_m™y
(
«pi_°ru˘
 *
«pi
, 
tŸÆ_budgë
)

1849 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 =

1850 
	`c⁄èöî_of
(
«pi
, 
ixgbe_q_ve˘‹
,Çapi);

1851 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1852 
ixgbe_rög
 *
rög
 = 
NULL
;

1853 
w‹k_d⁄e
 = 0, 
tŸÆ_w‹k
 = 0, 
i
;

1854 
budgë
;

1855 
r_idx
;

1856 
boﬁ
 
rx_˛ón_com∂ëe
 = 
åue
, 
tx_˛ón_com∂ëe
 =Årue;

1858 
budgë
 = 
tŸÆ_budgë
 / (
q_ve˘‹
->
rxr_cou¡
 + q_ve˘‹->
txr_cou¡
 ? : 1);

1859 
budgë
 = 
	`max
(budget, 1);

1861 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
);

1862 
i
 = 0; i < 
q_ve˘‹
->
txr_cou¡
; i++) {

1863 
w‹k_d⁄e
 = 0;

1864 
rög
 = &(
ad≠ãr
->
tx_rög
[
r_idx
]);

1865 #ifde‡
IXGBE_DCA


1866 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1867 
	`ixgbe_upd©e_tx_dˇ
(
ad≠ãr
, 
rög
);

1869 
	`ixgbe_˛ón_tx_úq
(
ad≠ãr
, 
rög
, &
w‹k_d⁄e
, 
budgë
);

1870 
tŸÆ_w‹k
 +
w‹k_d⁄e
;

1871 
tx_˛ón_com∂ëe
 &(
w‹k_d⁄e
 < 
budgë
);

1872 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
,

1873 
r_idx
 + 1);

1876 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
);

1877 
i
 = 0; i < 
q_ve˘‹
->
rxr_cou¡
; i++) {

1878 
w‹k_d⁄e
 = 0;

1879 
rög
 = &(
ad≠ãr
->
rx_rög
[
r_idx
]);

1880 #ifde‡
IXGBE_DCA


1881 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1882 
	`ixgbe_upd©e_rx_dˇ
(
ad≠ãr
, 
rög
);

1884 
	`ixgbe_˛ón_rx_úq
(
q_ve˘‹
, 
rög
, &
w‹k_d⁄e
, 
budgë
);

1885 
tŸÆ_w‹k
 +
w‹k_d⁄e
;

1886 
rx_˛ón_com∂ëe
 &(
w‹k_d⁄e
 < 
budgë
);

1887 
r_idx
 = 
	`föd_√xt_bô
(
q_ve˘‹
->
rxr_idx
, 
ad≠ãr
->
num_rx_queues
,

1888 
r_idx
 + 1);

1891 i‡(!
tx_˛ón_com∂ëe
 || !
rx_˛ón_com∂ëe
)

1892 
w‹k_d⁄e
 = 
tŸÆ_budgë
;

1895 i‡(
w‹k_d⁄e
 < 
budgë
) {

1896 
	`«pi_com∂ëe
(
«pi
);

1897 i‡(
ad≠ãr
->
ôr_£âög
 & 1)

1898 
	`ixgbe_£t_ôr_msix
(
q_ve˘‹
);

1899 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

1900 
	`ixgbe_úq_íabÀ_queues
(
ad≠ãr
, ((
u64
)1 << 
q_ve˘‹
->
v_idx
));

1903  
tŸÆ_w‹k
;

1914 
	`ixgbe_˛ón_tx⁄ly
(
«pi_°ru˘
 *
«pi
, 
budgë
)

1916 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 =

1917 
	`c⁄èöî_of
(
«pi
, 
ixgbe_q_ve˘‹
,Çapi);

1918 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

1919 
ixgbe_rög
 *
tx_rög
 = 
NULL
;

1920 
w‹k_d⁄e
 = 0;

1921 
r_idx
;

1923 
r_idx
 = 
	`föd_fú°_bô
(
q_ve˘‹
->
txr_idx
, 
ad≠ãr
->
num_tx_queues
);

1924 
tx_rög
 = &(
ad≠ãr
->tx_rög[
r_idx
]);

1925 #ifde‡
IXGBE_DCA


1926 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
)

1927 
	`ixgbe_upd©e_tx_dˇ
(
ad≠ãr
, 
tx_rög
);

1930 
	`ixgbe_˛ón_tx_úq
(
ad≠ãr
, 
tx_rög
, &
w‹k_d⁄e
, 
budgë
);

1932 #i‚de‡
HAVE_NETDEV_NAPI_LIST


1933 i‡(!
	`√tif_ru¬ög
(
ad≠ãr
->
√tdev
))

1934 
w‹k_d⁄e
 = 0;

1938 i‡(
w‹k_d⁄e
 < 
budgë
) {

1939 
	`«pi_com∂ëe
(
«pi
);

1940 i‡(
ad≠ãr
->
ôr_£âög
 & 1)

1941 
	`ixgbe_£t_ôr_msix
(
q_ve˘‹
);

1942 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

1943 
	`ixgbe_úq_íabÀ_queues
(
ad≠ãr
, ((
u64
)1 << 
q_ve˘‹
->
v_idx
));

1946  
w‹k_d⁄e
;

1950 
ölöe
 
	`m≠_ve˘‹_to_rxq
(
ixgbe_ad≠ãr
 *
a
, 
v_idx
,

1951 
r_idx
)

1953 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
a
->q_ve˘‹[
v_idx
];

1955 
	`£t_bô
(
r_idx
, 
q_ve˘‹
->
rxr_idx
);

1956 
q_ve˘‹
->
rxr_cou¡
++;

1959 
ölöe
 
	`m≠_ve˘‹_to_txq
(
ixgbe_ad≠ãr
 *
a
, 
v_idx
,

1960 
t_idx
)

1962 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
a
->q_ve˘‹[
v_idx
];

1964 
	`£t_bô
(
t_idx
, 
q_ve˘‹
->
txr_idx
);

1965 
q_ve˘‹
->
txr_cou¡
++;

1978 
	`ixgbe_m≠_rögs_to_ve˘‹s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

1980 
q_ve˘‹s
;

1981 
v_°¨t
 = 0;

1982 
rxr_idx
 = 0, 
txr_idx
 = 0;

1983 
rxr_ªmaöög
 = 
ad≠ãr
->
num_rx_queues
;

1986 
txr_ªmaöög
 = 
ad≠ãr
->
num_tx_queues
;

1989 
txr_ªmaöög
 = 0;

1992 
i
, 
j
;

1993 
rqpv
, 
tqpv
;

1994 
îr
 = 0;

1997 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
))

1998 
out
;

2000 
q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

2006 i‡(
q_ve˘‹s
 =
ad≠ãr
->
num_rx_queues
 ) {

2007 ; 
rxr_idx
 < 
rxr_ªmaöög
; 
v_°¨t
++,Ñxr_idx++)

2008 
	`m≠_ve˘‹_to_rxq
(
ad≠ãr
, 
v_°¨t
, 
rxr_idx
);

2010 ; 
txr_idx
 < 
txr_ªmaöög
; 
v_°¨t
++,Åxr_idx++)

2011 
	`m≠_ve˘‹_to_txq
(
ad≠ãr
, 
v_°¨t
, 
txr_idx
);

2013 
out
;

2022 
i
 = 
v_°¨t
; i < 
q_ve˘‹s
; i++) {

2023 
rqpv
 = 
	`DIV_ROUND_UP
(
rxr_ªmaöög
, 
q_ve˘‹s
 - 
i
);

2024 
j
 = 0; j < 
rqpv
; j++) {

2025 
	`m≠_ve˘‹_to_rxq
(
ad≠ãr
, 
i
, 
rxr_idx
);

2026 
rxr_idx
++;

2027 
rxr_ªmaöög
--;

2031 
i
 = 
v_°¨t
; i < 
q_ve˘‹s
; i++) {

2032 
tqpv
 = 
	`DIV_ROUND_UP
(
txr_ªmaöög
, 
q_ve˘‹s
 - 
i
);

2033 
j
 = 0; j < 
tqpv
; j++) {

2034 
	`m≠_ve˘‹_to_txq
(
ad≠ãr
, 
i
, 
txr_idx
);

2035 
txr_idx
++;

2036 
txr_ªmaöög
--;

2040 
out
:

2041  
îr
;

2051 
	`ixgbe_ªque°_msix_úqs
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2053 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

2054 
	`úqªtu∫_t
 (*
h™dÀr
)(, *);

2055 
i
, 
ve˘‹
, 
q_ve˘‹s
, 
îr
;

2056 
ri
 = 0, 
ti
 = 0;

2059 
q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

2061 
	#SET_HANDLER
(
_v
Ë(((_v)->
rxr_cou¡
 && (_v)->
txr_cou¡
) \

2062 ? &
ixgbe_msix_˛ón_m™y
 : \

2063 (
_v
)->
rxr_cou¡
 ? &
ixgbe_msix_˛ón_rx
 : \

2064 (
_v
)->
txr_cou¡
 ? &
ixgbe_msix_˛ón_tx
 : \

2065 
NULL
)

	)

2066 
ve˘‹
 = 0; ve˘‹ < 
q_ve˘‹s
; vector++) {

2067 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
ve˘‹
];

2068 
h™dÀr
 = 
	`SET_HANDLER
(
q_ve˘‹
);

2070 i‡(
h™dÀr
 =&
ixgbe_msix_˛ón_rx
) {

2071 
	`•rötf
(
q_ve˘‹
->
«me
, "%s-%s-%d",

2072 
√tdev
->
«me
, "rx", 
ri
++);

2073 } i‡(
h™dÀr
 =&
ixgbe_msix_˛ón_tx
) {

2074 
	`•rötf
(
q_ve˘‹
->
«me
, "%s-%s-%d",

2075 
√tdev
->
«me
, "tx", 
ti
++);

2076 } i‡(
h™dÀr
 =&
ixgbe_msix_˛ón_m™y
) {

2077 
	`•rötf
(
q_ve˘‹
->
«me
, "%s-%s-%d",

2078 
√tdev
->
«me
, "TxRx", 
ve˘‹
);

2083 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
msix_íåõs
[
ve˘‹
].vector,

2084 
h™dÀr
, 0, 
q_ve˘‹
->
«me
,

2085 
q_ve˘‹
);

2086 i‡(
îr
) {

2087 
	`DPRINTK
(
PROBE
, 
ERR
,

2089 "Eº‹: %d\n", 
îr
);

2090 
‰ì_queue_úqs
;

2094 
	`•rötf
(
ad≠ãr
->
lsc_öt_«me
, "%s:lsc", 
√tdev
->
«me
);

2095 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
msix_íåõs
[
ve˘‹
].vector,

2096 &
ixgbe_msix_lsc
, 0, 
ad≠ãr
->
lsc_öt_«me
, 
√tdev
);

2097 i‡(
îr
) {

2098 
	`DPRINTK
(
PROBE
, 
ERR
,

2099 "ªque°_úq f‹ msix_ls¯Áûed: %d\n", 
îr
);

2100 
‰ì_queue_úqs
;

2103 #ifde‡
IXGBE_TCP_TIMER


2104 
ve˘‹
++;

2105 
	`•rötf
(
ad≠ãr
->
t˝_timî_«me
, "%s:timî", 
√tdev
->
«me
);

2106 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
msix_íåõs
[
ve˘‹
].vector,

2107 &
ixgbe_msix_t˝_timî
, 0, 
ad≠ãr
->
t˝_timî_«me
,

2108 
√tdev
);

2109 i‡(
îr
) {

2110 
	`DPRINTK
(
PROBE
, 
ERR
,

2111 "ªque°_úq f‹ msix_t˝_timî faûed: %d\n", 
îr
);

2113 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[--
ve˘‹
].ve˘‹, 
√tdev
);

2114 
‰ì_queue_úqs
;

2120 
‰ì_queue_úqs
:

2121 
i
 = 
ve˘‹
 - 1; i >= 0; i--)

2122 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[--
ve˘‹
].vector,

2123 
ad≠ãr
->
q_ve˘‹
[
i
]);

2124 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_MSIX_ENABLED
;

2125 
	`pci_dißbÀ_msix
(
ad≠ãr
->
pdev
);

2126 
	`k‰ì
(
ad≠ãr
->
msix_íåõs
);

2127 
ad≠ãr
->
msix_íåõs
 = 
NULL
;

2128  
îr
;

2131 
	`ixgbe_£t_ôr
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2133 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_vector[0];

2134 
u8
 
cuºít_ôr
;

2135 
u32
 
√w_ôr
 = 
q_ve˘‹
->
eôr
;

2136 
ixgbe_rög
 *
rx_rög
 = &
ad≠ãr
->rx_ring[0];

2137 
ixgbe_rög
 *
tx_rög
 = &
ad≠ãr
->tx_ring[0];

2139 
q_ve˘‹
->
tx_ôr
 = 
	`ixgbe_upd©e_ôr
(
ad≠ãr
, 
√w_ôr
,

2140 
q_ve˘‹
->
tx_ôr
,

2141 
tx_rög
->
tŸÆ_∑ckës
,

2142 
tx_rög
->
tŸÆ_byãs
);

2143 
q_ve˘‹
->
rx_ôr
 = 
	`ixgbe_upd©e_ôr
(
ad≠ãr
, 
√w_ôr
,

2144 
q_ve˘‹
->
rx_ôr
,

2145 
rx_rög
->
tŸÆ_∑ckës
,

2146 
rx_rög
->
tŸÆ_byãs
);

2148 
cuºít_ôr
 = 
	`max
(
q_ve˘‹
->
rx_ôr
, q_ve˘‹->
tx_ôr
);

2150 
cuºít_ôr
) {

2152 
lowe°_œãncy
:

2153 
√w_ôr
 = 100000;

2155 
low_œãncy
:

2156 
√w_ôr
 = 20000;

2158 
bulk_œãncy
:

2159 
√w_ôr
 = 8000;

2165 i‡(
√w_ôr
 !
q_ve˘‹
->
eôr
) {

2168 
√w_ôr
 = ((
q_ve˘‹
->
eôr
 * 90)/100) + ((new_itr * 10)/100);

2171 
q_ve˘‹
->
eôr
 = 
√w_ôr
;

2173 
	`ixgbe_wrôe_eôr
(
q_ve˘‹
);

2183 
ölöe
 
	`ixgbe_úq_íabÀ
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
boﬁ
 
queues
, boﬁ 
Êush
)

2185 
u32
 
mask
;

2186 
u64
 
qmask
;

2188 
mask
 = (
IXGBE_EIMS_ENABLE_MASK
 & ~
IXGBE_EIMS_RTX_QUEUE
);

2189 
qmask
 = ~0;

2192 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_NEED_LINK_UPDATE
)

2193 
mask
 &~
IXGBE_EIMS_LSC
;

2194 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FAN_FAIL_CAPABLE
)

2195 
mask
 |
IXGBE_EIMS_GPI_SDP1
;

2196 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

2197 
mask
 |
IXGBE_EIMS_ECC
;

2198 
mask
 |
IXGBE_EIMS_GPI_SDP1
;

2199 
mask
 |
IXGBE_EIMS_GPI_SDP2
;

2201 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
 ||

2202 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)

2203 
mask
 |
IXGBE_EIMS_FLOW_DIR
;

2205 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMS
, 
mask
);

2206 i‡(
queues
)

2207 
	`ixgbe_úq_íabÀ_queues
(
ad≠ãr
, 
qmask
);

2208 i‡(
Êush
)

2209 
	`IXGBE_WRITE_FLUSH
(&
ad≠ãr
->
hw
);

2217 
úqªtu∫_t
 
	`ixgbe_öå
(
úq
, *
d©a
)

2219 
√t_devi˚
 *
√tdev
 = 
d©a
;

2220 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2221 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2222 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_vector[0];

2223 
u32
 
ei¸
;

2229 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIMC
, 
IXGBE_IRQ_CLEAR_MASK
);

2233 
ei¸
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EICR
);

2234 i‡(!
ei¸
) {

2242 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

2243 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
åue
,Årue);

2244  
IRQ_NONE
;

2247 i‡(
ei¸
 & 
IXGBE_EICR_LSC
)

2248 
	`ixgbe_check_lsc
(
ad≠ãr
);

2250 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

2251 i‡(
ei¸
 & 
IXGBE_EICR_ECC
)

2252 
	`DPRINTK
(
LINK
, 
INFO
, "Received unrecoverable ECC Err, "

2254 
	`ixgbe_check_sÂ_evít
(
ad≠ãr
, 
ei¸
);

2257 
	`ixgbe_check_Án_Áûuª
(
ad≠ãr
, 
ei¸
);

2259 #ifde‡
CONFIG_IXGBE_NAPI


2260 i‡(
	`«pi_scheduÀ_¥ï
(&(
q_ve˘‹
->
«pi
))) {

2261 
ad≠ãr
->
tx_rög
[0].
tŸÆ_∑ckës
 = 0;

2262 
ad≠ãr
->
tx_rög
[0].
tŸÆ_byãs
 = 0;

2263 
ad≠ãr
->
rx_rög
[0].
tŸÆ_∑ckës
 = 0;

2264 
ad≠ãr
->
rx_rög
[0].
tŸÆ_byãs
 = 0;

2266 
	`__«pi_scheduÀ
(&(
q_ve˘‹
->
«pi
));

2273 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

2274 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
Ál£
, false);

2276 
ad≠ãr
->
tx_rög
[0].
tŸÆ_∑ckës
 = 0;

2277 
ad≠ãr
->
tx_rög
[0].
tŸÆ_byãs
 = 0;

2278 
ad≠ãr
->
rx_rög
[0].
tŸÆ_∑ckës
 = 0;

2279 
ad≠ãr
->
rx_rög
[0].
tŸÆ_byãs
 = 0;

2280 
	`ixgbe_˛ón_tx_úq
(
ad≠ãr
,ád≠ãr->
tx_rög
);

2281 
	`ixgbe_˛ón_rx_úq
(
q_ve˘‹
, 
ad≠ãr
->
rx_rög
);

2284 i‡(
ad≠ãr
->
ôr_£âög
 & 1)

2285 
	`ixgbe_£t_ôr
(
ad≠ãr
);

2292 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

2293 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
åue
, 
Ál£
);

2295  
IRQ_HANDLED
;

2298 
ölöe
 
	`ixgbe_ª£t_q_ve˘‹s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2300 
i
, 
q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

2302 
i
 = 0; i < 
q_ve˘‹s
; i++) {

2303 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

2304 
	`bôm≠_zîo
(
q_ve˘‹
->
rxr_idx
, 
MAX_RX_QUEUES
);

2305 
	`bôm≠_zîo
(
q_ve˘‹
->
txr_idx
, 
MAX_TX_QUEUES
);

2306 
q_ve˘‹
->
rxr_cou¡
 = 0;

2307 
q_ve˘‹
->
txr_cou¡
 = 0;

2308 
q_ve˘‹
->
eôr
 = 
ad≠ãr
->
eôr_∑øm
;

2319 
	`ixgbe_ªque°_úq
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2321 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

2322 
îr
;

2324 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

2325 
îr
 = 
	`ixgbe_ªque°_msix_úqs
(
ad≠ãr
);

2326 } i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSI_ENABLED
) {

2327 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
pdev
->
úq
, &
ixgbe_öå
, 0,

2328 
√tdev
->
«me
,Çetdev);

2330 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
pdev
->
úq
, &
ixgbe_öå
, 
IRQF_SHARED
,

2331 
√tdev
->
«me
,Çetdev);

2334 i‡(
îr
)

2335 
	`DPRINTK
(
PROBE
, 
ERR
, "ªque°_úq faûed, Eº‹ %d\n", 
îr
);

2337  
îr
;

2340 
	`ixgbe_‰ì_úq
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2342 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

2344 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

2345 
i
, 
q_ve˘‹s
;

2347 
q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
;

2349 
i
 = 
q_ve˘‹s
 - 1;

2350 #ifde‡
IXGBE_TCP_TIMER


2351 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[
i
].
ve˘‹
, 
√tdev
);

2352 
i
--;

2354 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[
i
].
ve˘‹
, 
√tdev
);

2355 
i
--;

2357 ; 
i
 >= 0; i--) {

2358 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[
i
].
ve˘‹
,

2359 
ad≠ãr
->
q_ve˘‹
[
i
]);

2362 
	`ixgbe_ª£t_q_ve˘‹s
(
ad≠ãr
);

2364 
	`‰ì_úq
(
ad≠ãr
->
pdev
->
úq
, 
√tdev
);

2372 
ölöe
 
	`ixgbe_úq_dißbÀ
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2374 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

2375 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMC
, ~0);

2377 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_EIMC
, 0xFFFF0000);

2378 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_EIMC_EX
(0), ~0);

2379 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_EIMC_EX
(1), ~0);

2381 
	`IXGBE_WRITE_FLUSH
(&
ad≠ãr
->
hw
);

2382 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

2383 
i
;

2384 
i
 = 0; i < 
ad≠ãr
->
num_msix_ve˘‹s
; i++)

2385 
	`synchr⁄ize_úq
(
ad≠ãr
->
msix_íåõs
[
i
].
ve˘‹
);

2387 
	`synchr⁄ize_úq
(
ad≠ãr
->
pdev
->
úq
);

2395 
	`ixgbe_c⁄figuª_msi_™d_Àgacy
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2397 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2399 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_EITR
(0),

2400 
	`EITR_INTS_PER_SEC_TO_REG
(
ad≠ãr
->
eôr_∑øm
));

2402 
	`ixgbe_£t_iv¨
(
ad≠ãr
, 0, 0, 0);

2403 
	`ixgbe_£t_iv¨
(
ad≠ãr
, 1, 0, 0);

2405 
	`m≠_ve˘‹_to_rxq
(
ad≠ãr
, 0, 0);

2406 
	`m≠_ve˘‹_to_txq
(
ad≠ãr
, 0, 0);

2408 
	`DPRINTK
(
HW
, 
INFO
, "Legacy interrupt IVAR setup done\n");

2417 
	`ixgbe_c⁄figuª_tx
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2419 
u64
 
tdba
;

2420 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2421 
u32
 
i
, 
j
, 
tdÀn
, 
tx˘æ
;

2422 
u32
 
mask
;

2425 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

2426 
ixgbe_rög
 *
rög
 = &
ad≠ãr
->
tx_rög
[
i
];

2427 
j
 = 
rög
->
ªg_idx
;

2428 
tdba
 = 
rög
->
dma
;

2429 
tdÀn
 = 
rög
->
cou¡
 * (
ixgbe_adv_tx_desc
);

2430 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TDBAL
(
j
),

2431 (
tdba
 & 
	`DMA_BIT_MASK
(32)));

2432 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TDBAH
(
j
), (
tdba
 >> 32));

2433 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TDLEN
(
j
), 
tdÀn
);

2434 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TDH
(
j
), 0);

2435 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TDT
(
j
), 0);

2436 
ad≠ãr
->
tx_rög
[
i
].
hód
 = 
	`IXGBE_TDH
(
j
);

2437 
ad≠ãr
->
tx_rög
[
i
].
èû
 = 
	`IXGBE_TDT
(
j
);

2441 
tx˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_DCA_TXCTRL
(
j
));

2442 
tx˘æ
 &~
IXGBE_DCA_TXCTRL_TX_WB_RO_EN
;

2443 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_DCA_TXCTRL
(
j
), 
tx˘æ
);

2446 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

2447 
u32
 
πtdcs
;

2450 
πtdcs
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RTTDCS
);

2451 
πtdcs
 |
IXGBE_RTTDCS_ARBDIS
;

2452 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDCS
, 
πtdcs
);

2455 
mask
 = 
IXGBE_FLAG_VMDQ_ENABLED
;

2456 
mask
 |
IXGBE_FLAG_DCB_ENABLED
;

2457 
ad≠ãr
->
Êags
 & 
mask
) {

2459 (
IXGBE_FLAG_VMDQ_ENABLED
):

2460 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MTQC
,

2461 (
IXGBE_MTQC_VT_ENA
 | 
IXGBE_MTQC_64VF
));

2464 (
IXGBE_FLAG_DCB_ENABLED
):

2465 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MTQC
,

2466 (
IXGBE_MTQC_RT_ENA
 | 
IXGBE_MTQC_8TC_8TQ
));

2470 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MTQC
, 
IXGBE_MTQC_64Q_1PB
);

2475 
πtdcs
 &~
IXGBE_RTTDCS_ARBDIS
;

2476 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RTTDCS
, 
πtdcs
);

2480 
	#IXGBE_SRRCTL_BSIZEHDRSIZE_SHIFT
 2

	)

2482 
	`ixgbe_c⁄figuª_§r˘l
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
ödex
)

2484 
ixgbe_rög
 *
rx_rög
;

2485 
u32
 
§r˘l
;

2486 
queue0
 = 0;

2487 
mask
;

2488 
ixgbe_rög_„©uª
 *
„©uª
 = 
ad≠ãr
->
rög_„©uª
;

2490 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

2491 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

2492 
dcb_i
 = 
„©uª
[
RING_F_DCB
].
ödi˚s
;

2493 i‡(
dcb_i
 == 8)

2494 
queue0
 = 
ödex
 >> 4;

2495 i‡(
dcb_i
 == 4)

2496 
queue0
 = 
ödex
 >> 5;

2498 
	`DPRINTK
(
PROBE
, 
ERR
, "Invalid DCB configuration");

2500 
queue0
 = 
ödex
;

2503 
mask
 = (Ë
„©uª
[
RING_F_RXQ
].mask;

2504 
queue0
 = 
ödex
 & 
mask
;

2505 
ödex
 = index & 
mask
;

2508 
rx_rög
 = &
ad≠ãr
->rx_rög[
queue0
];

2510 
§r˘l
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_SRRCTL
(
ödex
));

2512 
§r˘l
 &~
IXGBE_SRRCTL_BSIZEHDR_MASK
;

2513 
§r˘l
 &~
IXGBE_SRRCTL_BSIZEPKT_MASK
;

2515 
§r˘l
 |(
IXGBE_RX_HDR_SIZE
 << 
IXGBE_SRRCTL_BSIZEHDRSIZE_SHIFT
) &

2516 
IXGBE_SRRCTL_BSIZEHDR_MASK
;

2518 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_PS_ENABLED
) {

2519 #i‡(
PAGE_SIZE
 / 2Ë> 
IXGBE_MAX_RXBUFFER


2520 
§r˘l
 |
IXGBE_MAX_RXBUFFER
 >> 
IXGBE_SRRCTL_BSIZEPKT_SHIFT
;

2522 
§r˘l
 |(
PAGE_SIZE
 / 2Ë>> 
IXGBE_SRRCTL_BSIZEPKT_SHIFT
;

2524 
§r˘l
 |
IXGBE_SRRCTL_DESCTYPE_HDR_SPLIT_ALWAYS
;

2526 
§r˘l
 |
	`ALIGN
(
rx_rög
->
rx_buf_Àn
, 1024) >>

2527 
IXGBE_SRRCTL_BSIZEPKT_SHIFT
;

2528 
§r˘l
 |
IXGBE_SRRCTL_DESCTYPE_ADV_ONEBUF
;

2530 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_SRRCTL
(
ödex
), 
§r˘l
);

2534 
u32
 
	`ixgbe_£tup_mrqc
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2536 
u32
 
mrqc
 = 0;

2537 
mask
;

2539 i‡(!(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
))

2540  
mrqc
;

2542 
mask
 = 
ad≠ãr
->
Êags
 & (
IXGBE_FLAG_RSS_ENABLED


2543 | 
IXGBE_FLAG_DCB_ENABLED


2546 
mask
) {

2547 (
IXGBE_FLAG_RSS_ENABLED
):

2548 
mrqc
 = 
IXGBE_MRQC_RSSEN
;

2550 (
IXGBE_FLAG_DCB_ENABLED
):

2551 
mrqc
 = 
IXGBE_MRQC_RT8TCEN
;

2557  
mrqc
;

2566 
	`ixgbe_c⁄figuª_rx
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2568 
u64
 
rdba
;

2569 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2570 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

2571 
max_‰ame
 = 
√tdev
->
mtu
 + 
ETH_HLEN
 + 
ETH_FCS_LEN
;

2572 
i
, 
j
;

2573 
u32
 
rdÀn
, 
rx˘æ
, 
rxcsum
;

2574 c⁄° 
u32
 
£ed
[10] = { 0xE291D73D, 0x1805EC6C, 0x2A94B30D,

2577 
u32
 
f˘æ
, 
hÃeg0
;

2578 
u32
 
ªè
 = 0, 
mrqc
 = 0;

2579 
u32
 
rdrx˘l
;

2580 #i‚de‡
IXGBE_NO_HW_RSC


2581 
u32
 
rsc˘æ
;

2583 
rx_buf_Àn
;

2586 i‡(
√tdev
->
mtu
 > 
ETH_DATA_LEN
) {

2587 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_PS_CAPABLE
)

2588 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_RX_PS_ENABLED
;

2590 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_RX_PS_ENABLED
;

2592 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_1BUF_CAPABLE
) {

2593 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_RX_PS_ENABLED
;

2595 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_RX_PS_ENABLED
;

2599 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_PS_ENABLED
) {

2600 
rx_buf_Àn
 = 
IXGBE_RX_HDR_SIZE
;

2601 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

2603 
u32
 
p§ty≥
 = 
IXGBE_PSRTYPE_TCPHDR
 |

2604 
IXGBE_PSRTYPE_UDPHDR
 |

2605 
IXGBE_PSRTYPE_IPV4HDR
 |

2606 
IXGBE_PSRTYPE_IPV6HDR
 |

2607 
IXGBE_PSRTYPE_L2HDR
;

2608 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_PSRTYPE
(0), 
p§ty≥
);

2611 #i‚de‡
IXGBE_NO_HW_RSC


2612 i‡(!(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_ENABLED
) &&

2613 (
√tdev
->
mtu
 <
ETH_DATA_LEN
))

2615 i‡(
√tdev
->
mtu
 <
ETH_DATA_LEN
)

2617 
rx_buf_Àn
 = 
MAXIMUM_ETHERNET_VLAN_SIZE
;

2619 
rx_buf_Àn
 = 
	`ALIGN
(
max_‰ame
, 1024);

2622 
f˘æ
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_FCTRL
);

2623 
f˘æ
 |
IXGBE_FCTRL_BAM
;

2624 
f˘æ
 |
IXGBE_FCTRL_DPF
;

2625 
f˘æ
 |
IXGBE_FCTRL_PMCF
;

2626 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_FCTRL
, 
f˘æ
);

2628 
hÃeg0
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_HLREG0
);

2629 i‡(
ad≠ãr
->
√tdev
->
mtu
 <
ETH_DATA_LEN
)

2630 
hÃeg0
 &~
IXGBE_HLREG0_JUMBOEN
;

2632 
hÃeg0
 |
IXGBE_HLREG0_JUMBOEN
;

2633 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_HLREG0
, 
hÃeg0
);

2636 
rx˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCTRL
);

2637 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCTRL
, 
rx˘æ
 & ~
IXGBE_RXCTRL_RXEN
);

2639 
rdÀn
 = 
ad≠ãr
->
rx_rög
[0].
cou¡
 * (
ixgbe_adv_rx_desc
);

2644 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

2645 
rdba
 = 
ad≠ãr
->
rx_rög
[
i
].
dma
;

2646 
j
 = 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
;

2647 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RDBAL
(
j
), (
rdba
 & 
	`DMA_BIT_MASK
(32)));

2648 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RDBAH
(
j
), (
rdba
 >> 32));

2649 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RDLEN
(
j
), 
rdÀn
);

2650 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RDH
(
j
), 0);

2651 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RDT
(
j
), 0);

2652 
ad≠ãr
->
rx_rög
[
i
].
hód
 = 
	`IXGBE_RDH
(
j
);

2653 
ad≠ãr
->
rx_rög
[
i
].
èû
 = 
	`IXGBE_RDT
(
j
);

2654 
ad≠ãr
->
rx_rög
[
i
].
rx_buf_Àn
 =Ñx_buf_len;

2656 
	`ixgbe_c⁄figuª_§r˘l
(
ad≠ãr
, 
j
);

2659 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

2670 
rdrx˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RDRXCTL
);

2671 
rdrx˘l
 |
IXGBE_RDRXCTL_MVMEN
;

2672 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RDRXCTL
, 
rdrx˘l
);

2676 
mrqc
 = 
	`ixgbe_£tup_mrqc
(
ad≠ãr
);

2678 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RSS_ENABLED
) {

2680 
i
 = 0, 
j
 = 0; i < 128; i++, j++) {

2681 i‡(
j
 =
ad≠ãr
->
rög_„©uª
[
RING_F_RXQ
].
ödi˚s
)

2682 
j
 = 0;

2685 
ªè
 = (ªè << 8Ë| (
j
 * 0x11);

2686 i‡((
i
 & 3) == 3)

2687 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RETA
(
i
 >> 2), 
ªè
);

2691 
i
 = 0; i < 10; i++)

2692 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RSSRK
(
i
), 
£ed
[i]);

2694 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

2695 
mrqc
 |
IXGBE_MRQC_RSSEN
;

2697 
mrqc
 |
IXGBE_MRQC_RSS_FIELD_IPV4


2698 | 
IXGBE_MRQC_RSS_FIELD_IPV4_TCP


2699 | 
IXGBE_MRQC_RSS_FIELD_IPV4_UDP


2700 | 
IXGBE_MRQC_RSS_FIELD_IPV6


2701 | 
IXGBE_MRQC_RSS_FIELD_IPV6_TCP


2702 | 
IXGBE_MRQC_RSS_FIELD_IPV6_UDP
;

2704 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MRQC
, 
mrqc
);

2706 
rxcsum
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCSUM
);

2708 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RSS_ENABLED
 ||

2709 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_CSUM_ENABLED
) {

2712 
rxcsum
 |
IXGBE_RXCSUM_PCSD
;

2714 i‡(!(
rxcsum
 & 
IXGBE_RXCSUM_PCSD
)) {

2717 
rxcsum
 |
IXGBE_RXCSUM_IPPCSE
;

2720 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCSUM
, 
rxcsum
);

2722 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

2723 
rdrx˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RDRXCTL
);

2724 #i‚de‡
IXGBE_NO_HW_RSC


2725 i‡(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_ENABLED
)

2726 
rdrx˘l
 &~
IXGBE_RDRXCTL_RSCFRSTSIZE
;

2728 
rdrx˘l
 |
IXGBE_RDRXCTL_CRCSTRIP
;

2729 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RDRXCTL
, 
rdrx˘l
);

2732 #i‚de‡
IXGBE_NO_HW_RSC


2733 i‡(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_ENABLED
) {

2735 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

2736 
j
 = 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
;

2737 
rsc˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RSCCTL
(
j
));

2738 
rsc˘æ
 |
IXGBE_RSCCTL_RSCEN
;

2744 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_PS_ENABLED
) {

2745 #i‡(
MAX_SKB_FRAGS
 > 16)

2746 
rsc˘æ
 |
IXGBE_RSCCTL_MAXDESC_16
;

2747 #ñi‡(
MAX_SKB_FRAGS
 > 8)

2748 
rsc˘æ
 |
IXGBE_RSCCTL_MAXDESC_8
;

2749 #ñi‡(
MAX_SKB_FRAGS
 > 4)

2750 
rsc˘æ
 |
IXGBE_RSCCTL_MAXDESC_4
;

2752 
rsc˘æ
 |
IXGBE_RSCCTL_MAXDESC_1
;

2755 i‡(
rx_buf_Àn
 < 
IXGBE_RXBUFFER_4096
)

2756 
rsc˘æ
 |
IXGBE_RSCCTL_MAXDESC_16
;

2757 i‡(
rx_buf_Àn
 < 
IXGBE_RXBUFFER_8192
)

2758 
rsc˘æ
 |
IXGBE_RSCCTL_MAXDESC_8
;

2760 
rsc˘æ
 |
IXGBE_RSCCTL_MAXDESC_4
;

2764 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RSCCTL
(
j
), 
rsc˘æ
);

2768 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_PSRTYPE
(0),

2769 (
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_PSRTYPE
(0)) |

2770 
IXGBE_PSRTYPE_TCPHDR
));

2773 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RSCDBU
,

2774 (
IXGBE_RSCDBU_RSCACKDIS
 | 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RSCDBU
)));

2779 #ifde‡
NETIF_F_HW_VLAN_TX


2780 
	`ixgbe_vœn_rx_ªgi°î
(
√t_devi˚
 *
√tdev
,

2781 
vœn_group
 *
gΩ
)

2783 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2784 
u32
 
˘æ
;

2785 
i
, 
j
;

2787 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

2788 
	`ixgbe_úq_dißbÀ
(
ad≠ãr
);

2789 
ad≠ãr
->
vlgΩ
 = 
gΩ
;

2791 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

2793 
˘æ
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_VLNCTRL
);

2794 
˘æ
 |
IXGBE_VLNCTRL_VME
 | 
IXGBE_VLNCTRL_VFE
;

2795 
˘æ
 &~
IXGBE_VLNCTRL_CFIEN
;

2796 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_VLNCTRL
, 
˘æ
);

2797 } i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

2799 
˘æ
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
IXGBE_VLNCTRL
);

2800 
˘æ
 |
IXGBE_VLNCTRL_VFE
;

2801 
˘æ
 &~
IXGBE_VLNCTRL_CFIEN
;

2802 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_VLNCTRL
, 
˘æ
);

2803 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

2804 
j
 = 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
;

2805 
˘æ
 = 
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RXDCTL
(
j
));

2806 
˘æ
 |
IXGBE_RXDCTL_VME
;

2807 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_RXDCTL
(
j
), 
˘æ
);

2811 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

2812 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
åue
,Årue);

2815 
	`ixgbe_vœn_rx_add_vid
(
√t_devi˚
 *
√tdev
, 
u16
 
vid
)

2817 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2818 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2819 
i
;

2820 #i‚de‡
HAVE_NETDEV_VLAN_FEATURES


2821 
√t_devi˚
 *
v_√tdev
;

2825 i‡(
hw
->
mac
.
›s
.
£t_v·a
) {

2826 
hw
->
mac
.
›s
.
	`£t_v·a
(hw, 
vid
, 0, 
åue
);

2827 i‡((
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_VMDQ_ENABLED
) &&

2828 (
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
)) {

2830 
i
 = 1; i < 
ad≠ãr
->
num_rx_poﬁs
; i++) {

2831 
hw
->
mac
.
›s
.
	`£t_v·a
(hw, 
vid
, 
	`VMDQ_P
(
i
), 
åue
);

2835 #i‚de‡
HAVE_NETDEV_VLAN_FEATURES


2840 
v_√tdev
 = 
	`vœn_group_gë_devi˚
(
ad≠ãr
->
vlgΩ
, 
vid
);

2841 
v_√tdev
->
„©uªs
 |
ad≠ãr
->
√tdev
->features;

2842 
	`vœn_group_£t_devi˚
(
ad≠ãr
->
vlgΩ
, 
vid
, 
v_√tdev
);

2846 
	`ixgbe_vœn_rx_kûl_vid
(
√t_devi˚
 *
√tdev
, 
u16
 
vid
)

2848 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2849 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2850 
i
;

2853 i‡(!
vid
)

2856 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

2857 
	`ixgbe_úq_dißbÀ
(
ad≠ãr
);

2859 
	`vœn_group_£t_devi˚
(
ad≠ãr
->
vlgΩ
, 
vid
, 
NULL
);

2861 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

2862 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
åue
,Årue);

2864 i‡(
hw
->
mac
.
›s
.
£t_v·a
) {

2865 
hw
->
mac
.
›s
.
	`£t_v·a
(hw, 
vid
, 0, 
Ál£
);

2866 i‡((
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_VMDQ_ENABLED
) &&

2867 (
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
)) {

2869 
i
 = 1; i < 
ad≠ãr
->
num_rx_poﬁs
; i++) {

2870 
hw
->
mac
.
›s
.
	`£t_v·a
(hw, 
vid
, 
	`VMDQ_P
(
i
), 
Ál£
);

2876 
	`ixgbe_ª°‹e_vœn
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

2878 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2880 
	`ixgbe_vœn_rx_ªgi°î
(
ad≠ãr
->
√tdev
,ád≠ãr->
vlgΩ
);

2883 i‡(
hw
->
mac
.
›s
.
£t_v·a
)

2884 
hw
->
mac
.
›s
.
	`£t_v·a
(hw, 0, 0, 
åue
);

2886 i‡(
ad≠ãr
->
vlgΩ
) {

2887 
u16
 
vid
;

2888 
vid
 = 0; vid < 
VLAN_GROUP_ARRAY_LEN
; vid++) {

2889 i‡(!
	`vœn_group_gë_devi˚
(
ad≠ãr
->
vlgΩ
, 
vid
))

2891 
	`ixgbe_vœn_rx_add_vid
(
ad≠ãr
->
√tdev
, 
vid
);

2898 
u8
 *
	`ixgbe_addr_li°_ôr
(
ixgbe_hw
 *
hw
, u8 **
mc_addr_±r
, 
u32
 *
vmdq
)

2900 #ifde‡
NETDEV_HW_ADDR_T_MULTICAST


2901 
√tdev_hw_addr
 *
mc_±r
;

2903 
dev_mc_li°
 *
mc_±r
;

2905 
u8
 *
addr
 = *
mc_addr_±r
;

2907 *
vmdq
 = 0;

2909 #ifde‡
NETDEV_HW_ADDR_T_MULTICAST


2910 
mc_±r
 = 
	`c⁄èöî_of
(
addr
, 
√tdev_hw_addr
,áddr[0]);

2911 i‡(
mc_±r
->
li°
.
√xt
) {

2912 
√tdev_hw_addr
 *
ha
;

2914 
ha
 = 
	`li°_íåy
(
mc_±r
->
li°
.
√xt
, 
√tdev_hw_addr
,Üist);

2915 *
mc_addr_±r
 = 
ha
->
addr
;

2918 
mc_±r
 = 
	`c⁄èöî_of
(
addr
, 
dev_mc_li°
, 
dmi_addr
[0]);

2919 i‡(
mc_±r
->
√xt
)

2920 *
mc_addr_±r
 = 
mc_±r
->
√xt
->
dmi_addr
;

2923 *
mc_addr_±r
 = 
NULL
;

2925  
addr
;

2937 
	`ixgbe_£t_rx_mode
(
√t_devi˚
 *
√tdev
)

2939 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2940 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

2941 #i‡
	`deföed
(
HAVE_SET_RX_MODE
Ë&& deföed(
HAVE_NETDEV_HW_ADDR
)

2942 
√tdev_hw_addr
 *
ha
;

2944 
u32
 
f˘æ
, 
v ˘æ
;

2945 
u8
 *
addr_li°
 = 
NULL
;

2946 
addr_cou¡
 = 0;

2950 
f˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

2951 
v ˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_VLNCTRL
);

2953 i‡(
√tdev
->
Êags
 & 
IFF_PROMISC
) {

2954 
hw
->
addr_˘æ
.
u£r_£t_¥omisc
 = 1;

2955 
f˘æ
 |(
IXGBE_FCTRL_UPE
 | 
IXGBE_FCTRL_MPE
);

2956 
v ˘æ
 &~
IXGBE_VLNCTRL_VFE
;

2958 i‡(
√tdev
->
Êags
 & 
IFF_ALLMULTI
) {

2959 
f˘æ
 |
IXGBE_FCTRL_MPE
;

2960 
f˘æ
 &~
IXGBE_FCTRL_UPE
;

2962 
f˘æ
 &~(
IXGBE_FCTRL_UPE
 | 
IXGBE_FCTRL_MPE
);

2964 
v ˘æ
 |
IXGBE_VLNCTRL_VFE
;

2965 
hw
->
addr_˘æ
.
u£r_£t_¥omisc
 = 0;

2966 
f˘æ
 &~(
IXGBE_FCTRL_UPE
 | 
IXGBE_FCTRL_MPE
);

2969 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCTRL
, 
f˘æ
);

2970 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_VLNCTRL
, 
v ˘æ
);

2972 #ifde‡
HAVE_SET_RX_MODE


2974 #ifde‡
HAVE_NETDEV_HW_ADDR


2979 
addr_li°
 = 
NULL
;

2980 
addr_cou¡
 = 0;

2982 
addr_cou¡
 = 
√tdev
->
uc_cou¡
;

2983 i‡(
addr_cou¡
)

2984 
addr_li°
 = 
√tdev
->
uc_li°
->
dmi_addr
;

2986 i‡(
hw
->
mac
.
›s
.
upd©e_uc_addr_li°
)

2987 
hw
->
mac
.
›s
.
	`upd©e_uc_addr_li°
(hw, 
addr_li°
, 
addr_cou¡
,

2988 
ixgbe_addr_li°_ôr
);

2989 #ifde‡
HAVE_NETDEV_HW_ADDR


2990 i‡(
√tdev
->
uc
.
cou¡
) {

2992 
	`li°_f‹_óch_íåy
(
ha
, &
√tdev
->
uc
.
li°
,Üist) {

2993 
	`ixgbe_add_uc_addr
(
hw
, 
ha
->
addr
, 0);

3000 
addr_cou¡
 = 
	`√tdev_mc_cou¡
(
√tdev
);

3001 i‡(
addr_cou¡
) {

3002 #ifde‡
NETDEV_HW_ADDR_T_MULTICAST


3003 
ha
 = 
	`li°_fú°_íåy
(&
√tdev
->
mc
.
li°
, 
√tdev_hw_addr
,Üist);

3004 
addr_li°
 = 
ha
->
addr
;

3006 
addr_li°
 = 
√tdev
->
mc_li°
->
dmi_addr
;

3009 i‡(
hw
->
mac
.
›s
.
upd©e_mc_addr_li°
)

3010 
hw
->
mac
.
›s
.
	`upd©e_mc_addr_li°
(hw, 
addr_li°
, 
addr_cou¡
,

3011 
ixgbe_addr_li°_ôr
);

3014 
	`ixgbe_«pi_íabÀ_Æl
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3016 #ifde‡
CONFIG_IXGBE_NAPI


3017 
q_idx
;

3018 
ixgbe_q_ve˘‹
 *
q_ve˘‹
;

3019 
q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

3022 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
))

3023 
q_ve˘‹s
 = 1;

3025 
q_idx
 = 0; q_idx < 
q_ve˘‹s
; q_idx++) {

3026 
«pi_°ru˘
 *
«pi
;

3027 
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
q_idx
];

3028 
«pi
 = &
q_ve˘‹
->napi;

3029 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

3030 i‡(!
q_ve˘‹
->
rxr_cou¡
 || !q_ve˘‹->
txr_cou¡
) {

3031 i‡(
q_ve˘‹
->
txr_cou¡
 == 1)

3032 
«pi
->
pﬁl
 = &
ixgbe_˛ón_tx⁄ly
;

3033 i‡(
q_ve˘‹
->
rxr_cou¡
 == 1)

3034 
«pi
->
pﬁl
 = &
ixgbe_˛ón_rx⁄ly
;

3038 
	`«pi_íabÀ
(
«pi
);

3043 
	`ixgbe_«pi_dißbÀ_Æl
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3045 #ifde‡
CONFIG_IXGBE_NAPI


3046 
q_idx
;

3047 
ixgbe_q_ve˘‹
 *
q_ve˘‹
;

3048 
q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

3051 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
))

3052 
q_ve˘‹s
 = 1;

3054 
q_idx
 = 0; q_idx < 
q_ve˘‹s
; q_idx++) {

3055 
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
q_idx
];

3056 
	`«pi_dißbÀ
(&
q_ve˘‹
->
«pi
);

3069 
	`ixgbe_c⁄figuª_dcb
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3071 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

3072 
u32
 
txd˘l
, 
v ˘æ
;

3073 
s32
 
îr
;

3074 
i
, 
j
;

3076 
îr
 = 
	`ixgbe_dcb_check_c⁄fig
(&
ad≠ãr
->
dcb_cfg
);

3077 i‡(
îr
)

3078 
	`DPRINTK
(
DRV
, 
ERR
, "err in dcb_check_config\n");

3079 
îr
 = 
	`ixgbe_dcb_ˇlcuœã_tc_¸edôs
(&
ad≠ãr
->
dcb_cfg
, 
DCB_TX_CONFIG
);

3080 i‡(
îr
)

3081 
	`DPRINTK
(
DRV
, 
ERR
, "err in dcb_calculate_tc_credits (TX)\n");

3082 
îr
 = 
	`ixgbe_dcb_ˇlcuœã_tc_¸edôs
(&
ad≠ãr
->
dcb_cfg
, 
DCB_RX_CONFIG
);

3083 i‡(
îr
)

3084 
	`DPRINTK
(
DRV
, 
ERR
, "err in dcb_calculate_tc_credits (RX)\n");

3087 
	`ixgbe_dcb_hw_c⁄fig
(&
ad≠ãr
->
hw
, &ad≠ãr->
dcb_cfg
);

3089 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

3090 
j
 = 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
;

3091 
txd˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
));

3093 
txd˘l
 |= 32;

3094 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
), 
txd˘l
);

3097 
v ˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_VLNCTRL
);

3098 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

3099 
v ˘æ
 |
IXGBE_VLNCTRL_VME
 | 
IXGBE_VLNCTRL_VFE
;

3100 
v ˘æ
 &~
IXGBE_VLNCTRL_CFIEN
;

3101 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_VLNCTRL
, 
v ˘æ
);

3102 } i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

3103 
v ˘æ
 |
IXGBE_VLNCTRL_VFE
;

3104 
v ˘æ
 &~
IXGBE_VLNCTRL_CFIEN
;

3105 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_VLNCTRL
, 
v ˘æ
);

3106 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

3107 
j
 = 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
;

3108 
v ˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXDCTL
(
j
));

3109 
v ˘æ
 |
IXGBE_RXDCTL_VME
;

3110 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXDCTL
(
j
), 
v ˘æ
);

3113 i‡(
hw
->
mac
.
›s
.
£t_v·a
)

3114 
hw
->
mac
.
›s
.
	`£t_v·a
(hw, 0, 0, 
åue
);

3117 #i‚de‡
IXGBE_NO_LLI


3118 
	`ixgbe_c⁄figuª_Œi_82599
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3120 
u16
 
p‹t
;

3122 i‡(
ad≠ãr
->
Œi_ëy≥
) {

3123 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_L34T_IMIR
(0),

3124 (
IXGBE_IMIR_LLI_EN_82599
 | 
IXGBE_IMIR_SIZE_BP_82599
 |

3125 
IXGBE_IMIR_CTRL_BP_82599
));

3126 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_ETQS
(0), 
IXGBE_ETQS_LLI
);

3127 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_ETQF
(0),

3128 (
ad≠ãr
->
Œi_ëy≥
 | 
IXGBE_ETQF_FILTER_EN
));

3131 i‡(
ad≠ãr
->
Œi_p‹t
) {

3132 
p‹t
 = 
	`¡ohs
((
u16
)
ad≠ãr
->
Œi_p‹t
);

3133 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_L34T_IMIR
(0),

3134 (
IXGBE_IMIR_LLI_EN_82599
 | 
IXGBE_IMIR_SIZE_BP_82599
 |

3135 
IXGBE_IMIR_CTRL_BP_82599
));

3136 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_FTQF
(0),

3137 (
IXGBE_FTQF_POOL_MASK_EN
 |

3138 (
IXGBE_FTQF_PRIORITY_MASK
 <<

3139 
IXGBE_FTQF_PRIORITY_SHIFT
) |

3140 (
IXGBE_FTQF_DEST_PORT_MASK
 <<

3141 
IXGBE_FTQF_5TUPLE_MASK_SHIFT
)));

3142 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_SDPQF
(0), (
p‹t
 << 16));

3145 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_LLI_PUSH
) {

3146 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_L34T_IMIR
(0),

3147 (
IXGBE_IMIR_LLI_EN_82599
 | 
IXGBE_IMIR_SIZE_BP_82599
 |

3148 
IXGBE_IMIR_CTRL_PSH_82599
 | 
IXGBE_IMIR_CTRL_SYN_82599
 |

3149 
IXGBE_IMIR_CTRL_URG_82599
 | 
IXGBE_IMIR_CTRL_ACK_82599
 |

3150 
IXGBE_IMIR_CTRL_RST_82599
 | 
IXGBE_IMIR_CTRL_FIN_82599
));

3151 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_FTQF
(0),

3152 (
IXGBE_FTQF_POOL_MASK_EN
 |

3153 (
IXGBE_FTQF_PRIORITY_MASK
 <<

3154 
IXGBE_FTQF_PRIORITY_SHIFT
) |

3155 (
IXGBE_FTQF_5TUPLE_MASK_MASK
 <<

3156 
IXGBE_FTQF_5TUPLE_MASK_SHIFT
)));

3158 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_LLITHRESH
, 0xfc000000);

3159 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_SYNQF
, 0x80000100);

3162 i‡(
ad≠ãr
->
Œi_size
) {

3163 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_L34T_IMIR
(0),

3164 (
IXGBE_IMIR_LLI_EN_82599
 | 
IXGBE_IMIR_CTRL_BP_82599
));

3165 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_LLITHRESH
,ád≠ãr->
Œi_size
);

3166 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_FTQF
(0),

3167 (
IXGBE_FTQF_POOL_MASK_EN
 |

3168 (
IXGBE_FTQF_PRIORITY_MASK
 <<

3169 
IXGBE_FTQF_PRIORITY_SHIFT
) |

3170 (
IXGBE_FTQF_5TUPLE_MASK_MASK
 <<

3171 
IXGBE_FTQF_5TUPLE_MASK_SHIFT
)));

3174 i‡(
ad≠ãr
->
Œi_vœn_¥i
) {

3175 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_IMIRVP
,

3176 (
IXGBE_IMIRVP_PRIORITY_EN
 | 
ad≠ãr
->
Œi_vœn_¥i
));

3180 
	`ixgbe_c⁄figuª_Œi
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3182 
u16
 
p‹t
;

3184 i‡(
ad≠ãr
->
Œi_p‹t
) {

3186 
p‹t
 = 
	`¡ohs
((
u16
)
ad≠ãr
->
Œi_p‹t
);

3187 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_IMIR
(0),

3188 (
p‹t
 | 
IXGBE_IMIR_PORT_IM_EN
));

3189 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_IMIREXT
(0),

3190 (
IXGBE_IMIREXT_SIZE_BP
 |

3191 
IXGBE_IMIREXT_CTRL_BP
));

3194 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_LLI_PUSH
) {

3196 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_IMIR
(1),

3197 (
IXGBE_IMIR_PORT_BP
 | 
IXGBE_IMIR_PORT_IM_EN
));

3198 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_IMIREXT
(1),

3199 (
IXGBE_IMIREXT_SIZE_BP
 |

3200 
IXGBE_IMIREXT_CTRL_PSH
));

3203 i‡(
ad≠ãr
->
Œi_size
) {

3205 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_IMIR
(2),

3206 (
IXGBE_IMIR_PORT_BP
 | 
IXGBE_IMIR_PORT_IM_EN
));

3207 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
	`IXGBE_IMIREXT
(2),

3208 (
ad≠ãr
->
Œi_size
 | 
IXGBE_IMIREXT_CTRL_BP
));

3213 
	`ixgbe_c⁄figuª
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3215 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

3216 
i
;

3217 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

3219 
	`ixgbe_£t_rx_mode
(
√tdev
);

3221 #ifde‡
NETIF_F_HW_VLAN_TX


3222 
	`ixgbe_ª°‹e_vœn
(
ad≠ãr
);

3224 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

3225 
	`√tif_£t_gso_max_size
(
√tdev
, 32768);

3226 
	`ixgbe_c⁄figuª_dcb
(
ad≠ãr
);

3228 
	`√tif_£t_gso_max_size
(
√tdev
, 65536);

3231 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
)

3232 
	`ixgbe_öô_fdú_sig«tuª_82599
(
hw
, 
ad≠ãr
->
fdú_pbÆloc
);

3233 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)

3234 
	`ixgbe_öô_fdú_≥r„˘_82599
(
hw
, 
ad≠ãr
->
fdú_pbÆloc
);

3236 
	`ixgbe_c⁄figuª_tx
(
ad≠ãr
);

3237 
	`ixgbe_c⁄figuª_rx
(
ad≠ãr
);

3239 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

3240 
ixgbe_rög
 *
rög
 = &
ad≠ãr
->
rx_rög
[
i
];

3241 
	`ixgbe_Æloc_rx_buf„rs
(
ad≠ãr
, 
rög
,Ñög->
cou¡
 - 1);

3245 
ölöe
 
boﬁ
 
	`ixgbe_is_sÂ
(
ixgbe_hw
 *
hw
)

3247 
hw
->
phy
.
ty≥
) {

3248 
ixgbe_phy_sÂ_avago
:

3249 
ixgbe_phy_sÂ_·l
:

3250 
ixgbe_phy_sÂ_öãl
:

3251 
ixgbe_phy_sÂ_unknown
:

3252 
ixgbe_phy_tw_tyco
:

3253 
ixgbe_phy_tw_unknown
:

3254  
åue
;

3256  
Ál£
;

3264 
	`ixgbe_sÂ_lök_c⁄fig
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3266 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

3268 i‡(
hw
->
phy
.
mu…i•ìd_fibî
) {

3278 
hw
->
mac
.
›s
.
	`£tup_sÂ
(hw);

3279 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_IN_SFP_LINK_TASK
))

3280 
	`scheduÀ_w‹k
(&
ad≠ãr
->
mu…i•ìd_fibî_èsk
);

3287 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_IN_SFP_MOD_TASK
))

3288 
	`scheduÀ_w‹k
(&
ad≠ãr
->
sÂ_c⁄fig_moduÀ_èsk
);

3298 
	`ixgbe_n⁄_sÂ_lök_c⁄fig
(
ixgbe_hw
 *
hw
)

3300 
u32
 
aut⁄eg
;

3301 
boﬁ
 
lök_up
 = 
Ál£
;

3302 
u32
 
ªt
 = 
IXGBE_ERR_LINK_SETUP
;

3304 i‡(
hw
->
mac
.
›s
.
check_lök
)

3305 
ªt
 = 
hw
->
mac
.
›s
.
	`check_lök
(hw, &
aut⁄eg
, &
lök_up
, 
Ál£
);

3307 i‡(
ªt
)

3308 
lök_cfg_out
;

3310 
aut⁄eg
 = 
hw
->
phy
.
aut⁄eg_advîti£d
;

3311 i‡((!
aut⁄eg
Ë&& (
hw
->
mac
.
›s
.
gë_lök_ˇ∑bûôõs
))

3312 
ªt
 = 
hw
->
mac
.
›s
.
	`gë_lök_ˇ∑bûôõs
(hw, &
aut⁄eg
,

3313 &
hw
->
mac
.
aut⁄eg
);

3314 i‡(
ªt
)

3315 
lök_cfg_out
;

3317 i‡(
hw
->
mac
.
›s
.
£tup_lök_•ìd
)

3318 
ªt
 = 
hw
->
mac
.
›s
.
	`£tup_lök_•ìd
(hw, 
aut⁄eg
, 
åue
, 
lök_up
);

3319 
lök_cfg_out
:

3320  
ªt
;

3323 
	#IXGBE_MAX_RX_DESC_POLL
 10

	)

3325 
ölöe
 
	`ixgbe_rx_desc_queue_íabÀ
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

3326 
rxr
)

3328 
j
 = 
ad≠ãr
->
rx_rög
[
rxr
].
ªg_idx
;

3329 
k
;

3331 
k
 = 0; k < 
IXGBE_MAX_RX_DESC_POLL
; k++) {

3332 i‡(
	`IXGBE_READ_REG
(&
ad≠ãr
->
hw
,

3333 
	`IXGBE_RXDCTL
(
j
)Ë& 
IXGBE_RXDCTL_ENABLE
)

3336 
	`m¶ìp
(1);

3338 i‡(
k
 >
IXGBE_MAX_RX_DESC_POLL
) {

3339 
	`DPRINTK
(
DRV
, 
ERR
, "RXDCTL.ENABLE on Rx queue %d "

3340 "nŸ së wôhöÅhêpﬁlögÖîiod\n", 
rxr
);

3342 
	`ixgbe_ªÀa£_rx_desc
(&
ad≠ãr
->
hw
, &ad≠ãr->
rx_rög
[
rxr
],

3343 (
ad≠ãr
->
rx_rög
[
rxr
].
cou¡
 - 1));

3346 
	`ixgbe_up_com∂ëe
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3348 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

3349 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

3350 
i
, 
j
 = 0;

3351 
max_‰ame
 = 
√tdev
->
mtu
 + 
ETH_HLEN
 + 
ETH_FCS_LEN
;

3352 
îr
;

3353 #ifde‡
IXGBE_TCP_TIMER


3354 
u32
 
t˝_timî
;

3356 
u32
 
txd˘l
, 
rxd˘l
, 
mhadd
;

3357 
u32
 
dm©x˘l
;

3358 
u32
 
gpõ
;

3360 
	`ixgbe_gë_hw_c⁄åﬁ
(
ad≠ãr
);

3362 #ifde‡
CONFIG_NETDEVICES_MULTIQUEUE


3363 i‡(
ad≠ãr
->
num_tx_queues
 > 1)

3364 
√tdev
->
„©uªs
 |
NETIF_F_MULTI_QUEUE
;

3367 i‡((
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) ||

3368 (
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSI_ENABLED
)) {

3369 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

3370 
gpõ
 = (
IXGBE_GPIE_MSIX_MODE
 | 
IXGBE_GPIE_EIAME
 |

3371 
IXGBE_GPIE_PBA_SUPPORT
 | 
IXGBE_GPIE_OCD
);

3374 
gpõ
 = 0;

3378 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GPIE
, 
gpõ
);

3379 #ifde‡
IXGBE_TCP_TIMER


3381 
t˝_timî
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TCPTIMER
);

3382 
t˝_timî
 |
IXGBE_TCPTIMER_DURATION_MASK
;

3383 
t˝_timî
 |(
IXGBE_TCPTIMER_KS
 |

3384 
IXGBE_TCPTIMER_COUNT_ENABLE
 |

3385 
IXGBE_TCPTIMER_LOOP
);

3386 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_TCPTIMER
, 
t˝_timî
);

3387 
t˝_timî
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TCPTIMER
);

3391 #ifde‡
CONFIG_IXGBE_NAPI


3392 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
)) {

3395 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIAM
, 
IXGBE_EICS_RTX_QUEUE
);

3400 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FAN_FAIL_CAPABLE
) {

3401 
gpõ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GPIE
);

3402 
gpõ
 |
IXGBE_SDP1_GPIEN
;

3403 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GPIE
, 
gpõ
);

3406 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

3407 
gpõ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GPIE
);

3408 
gpõ
 |
IXGBE_SDP1_GPIEN
;

3409 
gpõ
 |
IXGBE_SDP2_GPIEN
;

3410 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GPIE
, 
gpõ
);

3413 
mhadd
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MHADD
);

3414 i‡(
max_‰ame
 !(
mhadd
 >> 
IXGBE_MHADD_MFS_SHIFT
)) {

3415 
mhadd
 &~
IXGBE_MHADD_MFS_MASK
;

3416 
mhadd
 |
max_‰ame
 << 
IXGBE_MHADD_MFS_SHIFT
;

3418 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MHADD
, 
mhadd
);

3421 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

3422 
j
 = 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
;

3423 
txd˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
));

3430 
txd˘l
 &= ~0x3FFFFF;

3431 
txd˘l
 |= 0x100020;

3432 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
), 
txd˘l
);

3435 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

3437 
dm©x˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DMATXCTL
);

3438 
dm©x˘l
 |
IXGBE_DMATXCTL_TE
;

3439 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_DMATXCTL
, 
dm©x˘l
);

3442 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

3443 
waô_lo›
 = 10;

3444 
j
 = 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
;

3445 
txd˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
));

3446 
txd˘l
 |
IXGBE_TXDCTL_ENABLE
;

3447 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
), 
txd˘l
);

3449 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

3452 
	`m¶ìp
(1);

3453 
txd˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
));

3454 } --
waô_lo›
 &&

3455 !(
txd˘l
 & 
IXGBE_TXDCTL_ENABLE
));

3456 i‡(!
waô_lo›
)

3457 
	`DPRINTK
(
DRV
, 
ERR
, "CouldÇotÉnable "

3458 "Tx Queuê%d\n", 
j
);

3462 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

3463 
j
 = 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
;

3464 
rxd˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RXDCTL
(
j
));

3465 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

3477 
rxd˘l
 &= ~0x3FFFFF;

3478 
rxd˘l
 |= 0x100820;

3480 
rxd˘l
 |
IXGBE_RXDCTL_ENABLE
;

3481 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_RXDCTL
(
j
), 
rxd˘l
);

3482 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

3483 
	`ixgbe_rx_desc_queue_íabÀ
(
ad≠ãr
, 
i
);

3486 
rxd˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCTRL
);

3487 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

3488 
rxd˘l
 |(
IXGBE_RXCTRL_DMBYPS
 | 
IXGBE_RXCTRL_RXEN
);

3490 
rxd˘l
 |
IXGBE_RXCTRL_RXEN
;

3491 
	`ixgbe_íabÀ_rx_dma
(
hw
, 
rxd˘l
);

3493 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
)

3494 
	`ixgbe_c⁄figuª_msix
(
ad≠ãr
);

3496 
	`ixgbe_c⁄figuª_msi_™d_Àgacy
(
ad≠ãr
);

3497 #i‚de‡
IXGBE_NO_LLI


3499 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSI_ENABLED
 ||

3500 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

3501 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

3502 
	`ixgbe_c⁄figuª_Œi_82599
(
ad≠ãr
);

3504 
	`ixgbe_c⁄figuª_Œi
(
ad≠ãr
);

3508 
	`˛ór_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
);

3509 
	`ixgbe_«pi_íabÀ_Æl
(
ad≠ãr
);

3519 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_n⁄e
) {

3520 
îr
 = 
hw
->
phy
.
›s
.
	`idítify_sÂ
(hw);

3521 i‡(
îr
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
) {

3526 
	`ixgbe_down
(
ad≠ãr
);

3527 
	`scheduÀ_w‹k
(&
ad≠ãr
->
sÂ_c⁄fig_moduÀ_èsk
);

3528  
îr
;

3532 i‡(
	`ixgbe_is_sÂ
(
hw
)) {

3533 
	`ixgbe_sÂ_lök_c⁄fig
(
ad≠ãr
);

3535 
îr
 = 
	`ixgbe_n⁄_sÂ_lök_c⁄fig
(
hw
);

3536 i‡(
îr
)

3537 
	`DPRINTK
(
PROBE
, 
ERR
, "lök_c⁄fig FAILED %d\n", 
îr
);

3541 
	`√tif_tx_°¨t_Æl_queues
(
√tdev
);

3545 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_NEED_LINK_UPDATE
;

3546 
ad≠ãr
->
lök_check_timeout
 = 
jiffõs
;

3547 
	`mod_timî
(&
ad≠ãr
->
w©chdog_timî
, 
jiffõs
);

3548 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

3549 
	`£t_bô
(
__IXGBE_FDIR_INIT_DONE
,

3550 &(
ad≠ãr
->
tx_rög
[
i
].
ªöô_°©e
));

3554 
	`ixgbe_ªöô_locked
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3556 
	`WARN_ON
(
	`ö_öãºu±
());

3557 
	`ã°_™d_£t_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
))

3558 
	`m¶ìp
(1);

3559 
	`ixgbe_down
(
ad≠ãr
);

3560 
	`ixgbe_up
(
ad≠ãr
);

3561 
	`˛ór_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
);

3564 
	`ixgbe_up
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3566 
îr
;

3567 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

3569 
	`ixgbe_c⁄figuª
(
ad≠ãr
);

3571 
îr
 = 
	`ixgbe_up_com∂ëe
(
ad≠ãr
);

3574 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EICR
);

3575 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
åue
,Årue);

3577  
îr
;

3580 
	`ixgbe_ª£t
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3582 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

3583 
îr
;

3585 
îr
 = 
hw
->
mac
.
›s
.
	`öô_hw
(hw);

3586 
îr
) {

3588 
IXGBE_ERR_SFP_NOT_PRESENT
:

3590 
IXGBE_ERR_MASTER_REQUESTS_PENDING
:

3591 
	`DPRINTK
(
HW
, 
INFO
, "master disableÅimed out\n");

3593 
IXGBE_ERR_EEPROM_VERSION
:

3595 
	`DPRINTK
(
PROBE
, 
INFO
, "This device isáÖre-productionádapter/"

3602 
	`DPRINTK
(
PROBE
, 
ERR
, "H¨dw¨êEº‹: %d\n", 
îr
);

3606 i‡(
hw
->
mac
.
›s
.
£t_ør
)

3607 
hw
->
mac
.
›s
.
	`£t_ør
(hw, 0, hw->mac.
addr
, 0, 
IXGBE_RAH_AV
);

3615 
	`ixgbe_˛ón_rx_rög
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

3616 
ixgbe_rög
 *
rx_rög
)

3618 
size
;

3619 
i
;

3621 
	`•ö_lock
(&
rx_rög
->
lock
);

3625 
i
 = 0; i < 
rx_rög
->
cou¡
; i++) {

3626 
ixgbe_rx_buf„r
 *
rx_buf„r_öfo
;

3628 
rx_buf„r_öfo
 = &
rx_rög
->rx_buf„r_öfo[
i
];

3631 
size
 = (
ixgbe_rx_buf„r
Ë* 
rx_rög
->
cou¡
;

3632 
	`mem£t
(
rx_rög
->
rx_buf„r_öfo
, 0, 
size
);

3635 
	`mem£t
(
rx_rög
->
desc
, 0,Ñx_rög->
size
);

3637 
rx_rög
->
queued
 = 0;

3638 
rx_rög
->
√xt_to_˛ón
 = 0;

3639 
rx_rög
->
√xt_to_u£
 = 0;

3641 i‡(
rx_rög
->
hód
)

3642 
	`wrôñ
(0, 
ad≠ãr
->
hw
.
hw_addr
 + 
rx_rög
->
hód
);

3643 i‡(
rx_rög
->
èû
)

3644 
	`wrôñ
(0, 
ad≠ãr
->
hw
.
hw_addr
 + 
rx_rög
->
èû
);

3646 
	`•ö_u∆ock
(&
rx_rög
->
lock
);

3654 
	`ixgbe_˛ón_tx_rög
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

3655 
ixgbe_rög
 *
tx_rög
)

3657 
size
;

3659 
	`•ö_lock
(&
tx_rög
->
lock
);

3661 
size
 = (
ixgbe_tx_buf„r
Ë* 
tx_rög
->
cou¡
;

3662 
	`mem£t
(
tx_rög
->
tx_buf„r_öfo
, 0, 
size
);

3664 
	`mem£t
(
tx_rög
->
desc
, 0,Åx_rög->
size
);

3666 
tx_rög
->
√xt_to_u£
 = 0;

3667 
tx_rög
->
√xt_to_˛ón
 = 0;

3669 i‡(
tx_rög
->
hód
)

3670 
	`wrôñ
(0, 
ad≠ãr
->
hw
.
hw_addr
 + 
tx_rög
->
hód
);

3671 i‡(
tx_rög
->
èû
)

3672 
	`wrôñ
(0, 
ad≠ãr
->
hw
.
hw_addr
 + 
tx_rög
->
èû
);

3674 
	`•ö_u∆ock
(&
tx_rög
->
lock
);

3681 
	`ixgbe_˛ón_Æl_rx_rögs
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3683 
i
;

3685 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

3686 
	`ixgbe_˛ón_rx_rög
(
ad≠ãr
, &ad≠ãr->
rx_rög
[
i
]);

3693 
	`ixgbe_˛ón_Æl_tx_rögs
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3695 
i
;

3697 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

3698 
	`ixgbe_˛ón_tx_rög
(
ad≠ãr
, &ad≠ãr->
tx_rög
[
i
]);

3701 
	`ixgbe_down
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3703 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

3704 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

3705 
u32
 
rx˘æ
;

3706 
u32
 
txd˘l
;

3707 
i
, 
j
;

3710 
	`£t_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
);

3713 
rx˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RXCTRL
);

3714 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_RXCTRL
, 
rx˘æ
 & ~
IXGBE_RXCTRL_RXEN
);

3716 
	`√tif_tx_dißbÀ
(
√tdev
);

3718 
	`IXGBE_WRITE_FLUSH
(
hw
);

3719 
	`m¶ìp
(10);

3721 
	`√tif_tx_°›_Æl_queues
(
√tdev
);

3723 
	`ixgbe_úq_dißbÀ
(
ad≠ãr
);

3725 
	`ixgbe_«pi_dißbÀ_Æl
(
ad≠ãr
);

3727 
	`dñ_timî_sync
(&
ad≠ãr
->
w©chdog_timî
);

3731 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_IN_WATCHDOG_TASK
)

3732 
	`m¶ìp
(1);

3733 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
 ||

3734 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)

3735 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
fdú_ªöô_èsk
);

3738 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

3739 
j
 = 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
;

3740 
txd˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
));

3741 
	`IXGBE_WRITE_REG
(
hw
, 
	`IXGBE_TXDCTL
(
j
),

3742 (
txd˘l
 & ~
IXGBE_TXDCTL_ENABLE
));

3745 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

3746 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_DMATXCTL
,

3747 (
	`IXGBE_READ_REG
(
hw
, 
IXGBE_DMATXCTL
) &

3748 ~
IXGBE_DMATXCTL_TE
));

3750 
	`√tif_ˇºõr_off
(
√tdev
);

3752 #ifde‡
HAVE_PCI_ERS


3753 i‡(!
	`pci_ch™√l_ofÊöe
(
ad≠ãr
->
pdev
))

3755 
	`ixgbe_ª£t
(
ad≠ãr
);

3756 
	`ixgbe_˛ón_Æl_tx_rögs
(
ad≠ãr
);

3757 
	`ixgbe_˛ón_Æl_rx_rögs
(
ad≠ãr
);

3759 #ifde‡
IXGBE_DCA


3761 
	`ixgbe_£tup_dˇ
(
ad≠ãr
);

3765 #ifde‡
CONFIG_IXGBE_NAPI


3773 
	`ixgbe_pﬁl
(
«pi_°ru˘
 *
«pi
, 
budgë
)

3775 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 =

3776 
	`c⁄èöî_of
(
«pi
, 
ixgbe_q_ve˘‹
,Çapi);

3777 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

3778 
tx_˛ón_com∂ëe
, 
w‹k_d⁄e
 = 0;

3780 #ifde‡
IXGBE_DCA


3781 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
) {

3782 
	`ixgbe_upd©e_tx_dˇ
(
ad≠ãr
,ád≠ãr->
tx_rög
);

3783 
	`ixgbe_upd©e_rx_dˇ
(
ad≠ãr
,ád≠ãr->
rx_rög
);

3787 
tx_˛ón_com∂ëe
 = 
	`ixgbe_˛ón_tx_úq
(
ad≠ãr
,ád≠ãr->
tx_rög
, &
w‹k_d⁄e
, 
budgë
);

3788 
	`ixgbe_˛ón_rx_úq
(
q_ve˘‹
, 
ad≠ãr
->
rx_rög
, &
w‹k_d⁄e
, 
budgë
);

3790 i‡(!
tx_˛ón_com∂ëe
)

3791 
w‹k_d⁄e
 = 
budgë
;

3793 #i‚de‡
HAVE_NETDEV_NAPI_LIST


3794 i‡(!
	`√tif_ru¬ög
(
ad≠ãr
->
√tdev
))

3795 
w‹k_d⁄e
 = 0;

3799 i‡(
w‹k_d⁄e
 < 
budgë
) {

3800 
	`«pi_com∂ëe
(
«pi
);

3801 i‡(
ad≠ãr
->
ôr_£âög
 & 1)

3802 
	`ixgbe_£t_ôr
(
ad≠ãr
);

3803 i‡(!
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

3804 
	`ixgbe_úq_íabÀ_queues
(
ad≠ãr
, 
IXGBE_EIMS_RTX_QUEUE
);

3806  
w‹k_d⁄e
;

3814 
	`ixgbe_tx_timeout
(
√t_devi˚
 *
√tdev
)

3816 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

3819 
	`scheduÀ_w‹k
(&
ad≠ãr
->
ª£t_èsk
);

3822 
	`ixgbe_ª£t_èsk
(
w‹k_°ru˘
 *
w‹k
)

3824 
ixgbe_ad≠ãr
 *
ad≠ãr
;

3825 
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
, 
ixgbe_ad≠ãr
, 
ª£t_èsk
);

3828 i‡(
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
) ||

3829 
	`ã°_bô
(
__IXGBE_RESETTING
, &
ad≠ãr
->
°©e
))

3832 
ad≠ãr
->
tx_timeout_cou¡
++;

3834 
	`ixgbe_ªöô_locked
(
ad≠ãr
);

3847 
ölöe
 
boﬁ
 
	`ixgbe_£t_dcb_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3849 
boﬁ
 
ªt
 = 
Ál£
;

3850 
ixgbe_rög_„©uª
 *
f
 = &
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
];

3852 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
))

3853  
ªt
;

3855 #ifde‡
HAVE_TX_MQ


3856 
f
->
mask
 = 0x7 << 3;

3857 
ad≠ãr
->
num_rx_queues
 = 
f
->
ödi˚s
;

3858 
ad≠ãr
->
num_tx_queues
 = 
f
->
ödi˚s
;

3859 
ªt
 = 
åue
;

3861 
	`DPRINTK
(
DRV
, 
INFO
, "Kernel hasÇo multiqueue support, disabling DCB\n");

3862 
f
->
mask
 = 0;

3863 
f
->
ödi˚s
 = 0;

3866  
ªt
;

3877 
ölöe
 
boﬁ
 
	`ixgbe_£t_rss_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3879 
boﬁ
 
ªt
 = 
Ál£
;

3881 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RSS_ENABLED
) {

3882 
ixgbe_rög_„©uª
 *
f
;

3884 
f
 = &
ad≠ãr
->
rög_„©uª
[
RING_F_RXQ
];

3885 
f
->
mask
 = 0xF;

3886 
ad≠ãr
->
num_rx_queues
 = 
f
->
ödi˚s
;

3888 
f
 = &
ad≠ãr
->
rög_„©uª
[
RING_F_TXQ
];

3889 
ad≠ãr
->
num_tx_queues
 = 
f
->
ödi˚s
;

3891 
ªt
 = 
åue
;

3894  
ªt
;

3907 
boﬁ
 
ölöe
 
	`ixgbe_£t_fdú_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3909 
boﬁ
 
ªt
 = 
Ál£
;

3910 
ixgbe_rög_„©uª
 *
f_fdú
 = &
ad≠ãr
->
rög_„©uª
[
RING_F_FDIR
];

3912 
f_fdú
->
ödi˚s
 = 
	`mö
(()
	`num_⁄löe_˝us
(), f_fdir->indices);

3913 
f_fdú
->
mask
 = 0;

3916 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RSS_ENABLED
 &&

3917 ((
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
 ||

3918 (
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)))) {

3919 
ad≠ãr
->
num_rx_queues
 = 
f_fdú
->
ödi˚s
;

3920 #ifde‡
HAVE_TX_MQ


3921 
ad≠ãr
->
num_tx_queues
 = 
f_fdú
->
ödi˚s
;

3923 
ªt
 = 
åue
;

3925 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

3926 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

3928  
ªt
;

3942 
	`ixgbe_£t_num_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

3945 
ad≠ãr
->
num_rx_queues
 = 1;

3946 
ad≠ãr
->
num_tx_queues
 = 1;

3947 
ad≠ãr
->
num_rx_poﬁs
 =ád≠ãr->
num_rx_queues
;

3948 
ad≠ãr
->
num_rx_queues_≥r_poﬁ
 = 1;

3950 i‡(
	`ixgbe_£t_dcb_queues
(
ad≠ãr
))

3953 i‡(
	`ixgbe_£t_fdú_queues
(
ad≠ãr
))

3957 i‡(
	`ixgbe_£t_rss_queues
(
ad≠ãr
))

3961 
	`ixgbe_acquúe_msix_ve˘‹s
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

3962 
ve˘‹s
)

3964 
îr
, 
ve˘‹_thªshﬁd
;

3972 
ve˘‹_thªshﬁd
 = 
MIN_MSIX_COUNT
;

3979 
ve˘‹s
 >
ve˘‹_thªshﬁd
) {

3980 
îr
 = 
	`pci_íabÀ_msix
(
ad≠ãr
->
pdev
,ád≠ãr->
msix_íåõs
,

3981 
ve˘‹s
);

3982 i‡(!
îr
)

3984 i‡(
îr
 < 0)

3985 
ve˘‹s
 = 0;

3987 
ve˘‹s
 = 
îr
;

3990 i‡(
ve˘‹s
 < 
ve˘‹_thªshﬁd
) {

3995 
	`DPRINTK
(
HW
, 
DEBUG
, "UnableÅoállocate MSI-X interrupts\n");

3996 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_MSIX_ENABLED
;

3997 
	`k‰ì
(
ad≠ãr
->
msix_íåõs
);

3998 
ad≠ãr
->
msix_íåõs
 = 
NULL
;

4000 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MSIX_ENABLED
;

4006 
ad≠ãr
->
num_msix_ve˘‹s
 = 
	`mö
(
ve˘‹s
,

4007 
ad≠ãr
->
max_msix_q_ve˘‹s
 + 
NON_Q_VECTORS
);

4018 
ölöe
 
boﬁ
 
	`ixgbe_ˇche_rög_rss
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4020 
i
;

4022 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RSS_ENABLED
))

4023  
Ál£
;

4025 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

4026 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
 = i;

4027 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

4028 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
 = i;

4030  
åue
;

4040 
ölöe
 
boﬁ
 
	`ixgbe_ˇche_rög_dcb
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4042 
i
;

4043 
boﬁ
 
ªt
 = 
Ál£
;

4044 
dcb_i
 = 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
;

4046 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
))

4047  
Ál£
;

4050 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

4051 
i
 = 0; i < 
dcb_i
; i++) {

4052 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
 = i << 3;

4053 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
 = i << 2;

4055 
ªt
 = 
åue
;

4056 } i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

4057 i‡(
dcb_i
 == 8) {

4070 
i
 = 0; i < 3; i++) {

4071 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
 = i << 5;

4072 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
 = i << 4;

4074  ; 
i
 < 5; i++) {

4075 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
 = ((i + 2) << 4);

4076 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
 = i << 4;

4078  ; 
i
 < 
dcb_i
; i++) {

4079 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
 = ((i + 8) << 3);

4080 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
 = i << 4;

4082 
ªt
 = 
åue
;

4083 } i‡(
dcb_i
 == 4) {

4092 
ad≠ãr
->
tx_rög
[0].
ªg_idx
 = 0;

4093 
ad≠ãr
->
tx_rög
[1].
ªg_idx
 = 64;

4094 
ad≠ãr
->
tx_rög
[2].
ªg_idx
 = 96;

4095 
ad≠ãr
->
tx_rög
[3].
ªg_idx
 = 112;

4096 
i
 = 0 ; i < 
dcb_i
; i++)

4097 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
 = i << 5;

4098 
ªt
 = 
åue
;

4102  
ªt
;

4112 
boﬁ
 
ölöe
 
	`ixgbe_ˇche_rög_fdú
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4114 
i
;

4115 
boﬁ
 
ªt
 = 
Ál£
;

4117 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RSS_ENABLED
 &&

4118 ((
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
) ||

4119 (
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
))) {

4120 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

4121 
ad≠ãr
->
rx_rög
[
i
].
ªg_idx
 = i;

4122 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

4123 
ad≠ãr
->
tx_rög
[
i
].
ªg_idx
 = i;

4124 
ªt
 = 
åue
;

4127  
ªt
;

4141 
	`ixgbe_ˇche_rög_ªgi°î
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4144 
ad≠ãr
->
rx_rög
[0].
ªg_idx
 = 0;

4145 
ad≠ãr
->
tx_rög
[0].
ªg_idx
 = 0;

4147 i‡(
	`ixgbe_ˇche_rög_dcb
(
ad≠ãr
))

4150 i‡(
	`ixgbe_ˇche_rög_fdú
(
ad≠ãr
))

4153 i‡(
	`ixgbe_ˇche_rög_rss
(
ad≠ãr
))

4166 
	`ixgbe_Æloc_queues
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4168 
i
;

4170 
ad≠ãr
->
tx_rög
 = 
	`kˇŒoc
◊d≠ãr->
num_tx_queues
,

4171 (
ixgbe_rög
), 
GFP_KERNEL
);

4172 i‡(!
ad≠ãr
->
tx_rög
)

4173 
îr_tx_rög_Æloˇti⁄
;

4175 
ad≠ãr
->
rx_rög
 = 
	`kˇŒoc
◊d≠ãr->
num_rx_queues
,

4176 (
ixgbe_rög
), 
GFP_KERNEL
);

4178 i‡(!
ad≠ãr
->
rx_rög
)

4179 
îr_rx_rög_Æloˇti⁄
;

4181 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

4182 
ad≠ãr
->
tx_rög
[
i
].
cou¡
 =ád≠ãr->
tx_rög_cou¡
;

4183 
ad≠ãr
->
tx_rög
[
i
].
queue_ödex
 = i;

4184 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
)

4185 
ad≠ãr
->
tx_rög
[
i
].
©r_ßm∂e_øã
 =

4186 
ad≠ãr
->
©r_ßm∂e_øã
;

4187 
ad≠ãr
->
tx_rög
[
i
].
©r_cou¡
 = 0;

4188 
ad≠ãr
->
tx_rög
[
i
].adapter =ádapter;

4191 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

4192 
ad≠ãr
->
rx_rög
[
i
].
cou¡
 =ád≠ãr->
rx_rög_cou¡
;

4193 
ad≠ãr
->
rx_rög
[
i
].
queue_ödex
 = i;

4194 
ad≠ãr
->
rx_rög
[
i
].adapter =ádapter;

4197 
	`ixgbe_ˇche_rög_ªgi°î
(
ad≠ãr
);

4201 
îr_rx_rög_Æloˇti⁄
:

4202 
	`k‰ì
(
ad≠ãr
->
tx_rög
);

4203 
ad≠ãr
->
tx_rög
 = 
NULL
;

4204 
îr_tx_rög_Æloˇti⁄
:

4205  -
ENOMEM
;

4215 
	`ixgbe_£t_öãºu±_ˇ∑bûôy
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4217 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

4218 
îr
 = 0;

4219 
ve˘‹
, 
v_budgë
;

4221 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_CAPABLE
))

4222 
åy_msi
;

4230 
v_budgë
 = 
	`mö
(
ad≠ãr
->
num_rx_queues


4233 ()(
	`num_⁄löe_˝us
()

4236 )Ë+ 
NON_Q_VECTORS
;

4245 
v_budgë
 = 
	`mö
(v_budgë, ()
hw
->
mac
.
max_msix_ve˘‹s
);

4249 
ad≠ãr
->
msix_íåõs
 = 
	`kˇŒoc
(
v_budgë
,

4250 (
msix_íåy
), 
GFP_KERNEL
);

4251 i‡(
ad≠ãr
->
msix_íåõs
) {

4252 
ve˘‹
 = 0; ve˘‹ < 
v_budgë
; vector++)

4253 
ad≠ãr
->
msix_íåõs
[
ve˘‹
].
íåy
 = vector;

4255 
	`ixgbe_acquúe_msix_ve˘‹s
(
ad≠ãr
, 
v_budgë
);

4257 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
)

4258 
out
;

4262 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_DCB_ENABLED
;

4263 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_DCB_CAPABLE
;

4264 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

4265 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

4266 
ad≠ãr
->
©r_ßm∂e_øã
 = 0;

4267 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_RSS_ENABLED
;

4268 
	`ixgbe_£t_num_queues
(
ad≠ãr
);

4270 
åy_msi
:

4271 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSI_CAPABLE
))

4272 
out
;

4274 
îr
 = 
	`pci_íabÀ_msi
(
ad≠ãr
->
pdev
);

4275 i‡(!
îr
) {

4276 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MSI_ENABLED
;

4278 
	`DPRINTK
(
HW
, 
DEBUG
, "UnableÅoállocate MSI interrupt, "

4279 "ÁŒög backÅÿÀgacy. Eº‹: %d\n", 
îr
);

4281 
îr
 = 0;

4284 
out
:

4285 #ifde‡
HAVE_TX_MQ


4287 #ifde‡
CONFIG_NETDEVICES_MULTIQUEUE


4288 
ad≠ãr
->
√tdev
->
egªss_subqueue_cou¡
 =ád≠ãr->
num_tx_queues
;

4290 
ad≠ãr
->
√tdev
->
ªÆ_num_tx_queues
 =ád≠ãr->
num_tx_queues
;

4293  
îr
;

4303 
	`ixgbe_Æloc_q_ve˘‹s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4305 
v_idx
, 
num_q_ve˘‹s
;

4306 
ixgbe_q_ve˘‹
 *
q_ve˘‹
;

4307 
rx_ve˘‹s
;

4308 #ifde‡
CONFIG_IXGBE_NAPI


4309 (*
pﬁl
)(
«pi_°ru˘
 *, );

4312 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

4313 
num_q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

4314 
rx_ve˘‹s
 = 
ad≠ãr
->
num_rx_queues
;

4315 #ifde‡
CONFIG_IXGBE_NAPI


4316 
pﬁl
 = &
ixgbe_˛ón_rxtx_m™y
;

4319 
num_q_ve˘‹s
 = 1;

4320 
rx_ve˘‹s
 = 1;

4321 #ifde‡
CONFIG_IXGBE_NAPI


4322 
pﬁl
 = &
ixgbe_pﬁl
;

4326 
v_idx
 = 0; v_idx < 
num_q_ve˘‹s
; v_idx++) {

4327 
q_ve˘‹
 = 
	`kzÆloc
((
ixgbe_q_ve˘‹
), 
GFP_KERNEL
);

4328 i‡(!
q_ve˘‹
)

4329 
îr_out
;

4330 
q_ve˘‹
->
ad≠ãr
 =ádapter;

4331 
q_ve˘‹
->
eôr
 = 
ad≠ãr
->
eôr_∑øm
;

4332 
q_ve˘‹
->
v_idx
 = v_idx;

4333 #i‚de‡
IXGBE_NO_LRO


4334 i‡(
v_idx
 < 
rx_ve˘‹s
) {

4335 
size
 = (
ixgbe_Ão_li°
);

4336 
q_ve˘‹
->
Ãﬁi°
 = 
	`vmÆloc
(
size
);

4337 i‡(!
q_ve˘‹
->
Ãﬁi°
) {

4338 
	`k‰ì
(
q_ve˘‹
);

4339 
îr_out
;

4341 
	`mem£t
(
q_ve˘‹
->
Ãﬁi°
, 0, 
size
);

4342 
	`ixgbe_Ão_rög_öô
(
q_ve˘‹
->
Ãﬁi°
);

4345 #ifde‡
CONFIG_IXGBE_NAPI


4346 
	`√tif_«pi_add
(
ad≠ãr
->
√tdev
, &
q_ve˘‹
->
«pi
, (*
pﬁl
), 128);

4348 
ad≠ãr
->
q_ve˘‹
[
v_idx
] = q_vector;

4353 
îr_out
:

4354 
v_idx
) {

4355 
v_idx
--;

4356 
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
v_idx
];

4357 #ifde‡
CONFIG_IXGBE_NAPI


4358 
	`√tif_«pi_dñ
(&
q_ve˘‹
->
«pi
);

4360 #i‚de‡
IXGBE_NO_LRO


4361 i‡(
q_ve˘‹
->
Ãﬁi°
) {

4362 
	`ixgbe_Ão_rög_exô
(
q_ve˘‹
->
Ãﬁi°
);

4363 
	`v‰ì
(
q_ve˘‹
->
Ãﬁi°
);

4364 
q_ve˘‹
->
Ãﬁi°
 = 
NULL
;

4367 
	`k‰ì
(
q_ve˘‹
);

4368 
ad≠ãr
->
q_ve˘‹
[
v_idx
] = 
NULL
;

4370  -
ENOMEM
;

4381 
	`ixgbe_‰ì_q_ve˘‹s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4383 
v_idx
, 
num_q_ve˘‹s
;

4385 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

4386 
num_q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

4388 
num_q_ve˘‹s
 = 1;

4391 
v_idx
 = 0; v_idx < 
num_q_ve˘‹s
; v_idx++) {

4392 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
v_idx
];

4394 
ad≠ãr
->
q_ve˘‹
[
v_idx
] = 
NULL
;

4395 #ifde‡
CONFIG_IXGBE_NAPI


4396 
	`√tif_«pi_dñ
(&
q_ve˘‹
->
«pi
);

4398 #i‚de‡
IXGBE_NO_LRO


4399 i‡(
q_ve˘‹
->
Ãﬁi°
) {

4400 
	`ixgbe_Ão_rög_exô
(
q_ve˘‹
->
Ãﬁi°
);

4401 
	`v‰ì
(
q_ve˘‹
->
Ãﬁi°
);

4402 
q_ve˘‹
->
Ãﬁi°
 = 
NULL
;

4405 
	`k‰ì
(
q_ve˘‹
);

4409 
	`ixgbe_ª£t_öãºu±_ˇ∑bûôy
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4411 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

4412 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_MSIX_ENABLED
;

4413 
	`pci_dißbÀ_msix
(
ad≠ãr
->
pdev
);

4414 
	`k‰ì
(
ad≠ãr
->
msix_íåõs
);

4415 
ad≠ãr
->
msix_íåõs
 = 
NULL
;

4416 } i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSI_ENABLED
) {

4417 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_MSI_ENABLED
;

4418 
	`pci_dißbÀ_msi
(
ad≠ãr
->
pdev
);

4433 
	`ixgbe_öô_öãºu±_scheme
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4435 
îr
;

4438 
	`ixgbe_£t_num_queues
(
ad≠ãr
);

4440 
îr
 = 
	`ixgbe_£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

4441 i‡(
îr
) {

4442 
	`DPRINTK
(
PROBE
, 
ERR
, "UnableÅo setup interrupt capabilities\n");

4443 
îr_£t_öãºu±
;

4446 
îr
 = 
	`ixgbe_Æloc_q_ve˘‹s
(
ad≠ãr
);

4447 i‡(
îr
) {

4448 
	`DPRINTK
(
PROBE
, 
ERR
, "UnableÅoállocate memory for queue "

4450 
îr_Æloc_q_ve˘‹s
;

4453 
îr
 = 
	`ixgbe_Æloc_queues
(
ad≠ãr
);

4454 i‡(
îr
) {

4455 
	`DPRINTK
(
PROBE
, 
ERR
, "UnableÅoállocate memory for queues\n");

4456 
îr_Æloc_queues
;

4459 
	`DPRINTK
(
DRV
, 
INFO
, "Multiqueue %s: Rx Queue count = %u, "

4461 (
ad≠ãr
->
num_rx_queues
 > 1) ? "Enabled" :

4462 "DißbÀd", 
ad≠ãr
->
num_rx_queues
,ád≠ãr->
num_tx_queues
);

4464 
	`£t_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
);

4467 
îr_Æloc_queues
:

4468 
	`ixgbe_‰ì_q_ve˘‹s
(
ad≠ãr
);

4469 
îr_Æloc_q_ve˘‹s
:

4470 
	`ixgbe_ª£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

4471 
îr_£t_öãºu±
:

4472  
îr
;

4482 
	`ixgbe_˛ór_öãºu±_scheme
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4484 
	`k‰ì
(
ad≠ãr
->
tx_rög
);

4485 
	`k‰ì
(
ad≠ãr
->
rx_rög
);

4486 
ad≠ãr
->
tx_rög
 = 
NULL
;

4487 
ad≠ãr
->
rx_rög
 = 
NULL
;

4489 
	`ixgbe_‰ì_q_ve˘‹s
(
ad≠ãr
);

4490 
	`ixgbe_ª£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

4497 
	`ixgbe_sÂ_timî
(
d©a
)

4499 
ixgbe_ad≠ãr
 *
ad≠ãr
 = (ixgbe_ad≠ã∏*)
d©a
;

4503 
	`scheduÀ_w‹k
(&
ad≠ãr
->
sÂ_èsk
);

4510 
	`ixgbe_sÂ_èsk
(
w‹k_°ru˘
 *
w‹k
)

4512 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
,

4513 
ixgbe_ad≠ãr
,

4514 
sÂ_èsk
);

4515 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

4517 i‡((
hw
->
phy
.
ty≥
 =
ixgbe_phy_∆
) &&

4518 (
hw
->
phy
.
sÂ_ty≥
 =
ixgbe_sÂ_ty≥_nŸ_¥e£¡
)) {

4519 
s32
 
ªt
 = 
hw
->
phy
.
›s
.
	`idítify_sÂ
(hw);

4520 i‡(
ªt
 &&Ñë !
IXGBE_ERR_SFP_NOT_SUPPORTED
)

4521 
ªscheduÀ
;

4522 
ªt
 = 
hw
->
phy
.
›s
.
	`ª£t
(hw);

4523 i‡(
ªt
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
) {

4524 
	`DPRINTK
(
PROBE
, 
ERR
, "failedÅo initialize becauseán "

4528 
	`uƒegi°î_√tdev
(
ad≠ãr
->
√tdev
);

4529 
ad≠ãr
->
√tdev_ªgi°îed
 = 
Ál£
;

4531 
	`DPRINTK
(
PROBE
, 
INFO
, "detected SFP+: %d\n",

4532 
hw
->
phy
.
sÂ_ty≥
);

4535 
	`˛ór_bô
(
__IXGBE_SFP_MODULE_NOT_FOUND
, &
ad≠ãr
->
°©e
);

4538 
ªscheduÀ
:

4539 i‡(
	`ã°_bô
(
__IXGBE_SFP_MODULE_NOT_FOUND
, &
ad≠ãr
->
°©e
))

4540 
	`mod_timî
(&
ad≠ãr
->
sÂ_timî
,

4541 
	`round_jiffõs
(
jiffõs
 + (2 * 
HZ
)));

4552 
__devöô
 
	`ixgbe_sw_öô
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4554 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

4555 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4556 
îr
;

4560 
hw
->
víd‹_id
 = 
pdev
->
víd‹
;

4561 
hw
->
devi˚_id
 = 
pdev
->
devi˚
;

4562 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_REVISION_ID
, &
hw
->
ªvisi⁄_id
);

4563 
hw
->
subsy°em_víd‹_id
 = 
pdev
->
subsy°em_víd‹
;

4564 
hw
->
subsy°em_devi˚_id
 = 
pdev
->
subsy°em_devi˚
;

4566 
îr
 = 
	`ixgbe_öô_sh¨ed_code
(
hw
);

4567 i‡(
îr
) {

4568 
	`DPRINTK
(
PROBE
, 
ERR
, "öô_sh¨ed_codêÁûed: %d\n", 
îr
);

4569 
out
;

4573 
hw
->
mac
.
ty≥
) {

4574 
ixgbe_mac_82598EB
:

4575 i‡(
hw
->
devi˚_id
 =
IXGBE_DEV_ID_82598AT
)

4576 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_FAN_FAIL_CAPABLE
;

4577 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCA_CAPABLE
;

4578 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MSI_CAPABLE
;

4579 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MSIX_CAPABLE
;

4580 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_CAPABLE
)

4581 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MQ_CAPABLE
;

4582 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MQ_CAPABLE
)

4583 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCB_CAPABLE
;

4584 #ifde‡
IXGBE_RSS


4585 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MQ_CAPABLE
)

4586 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_RSS_CAPABLE
;

4588 #i‚de‡
IXGBE_NO_HW_RSC


4589 
ad≠ãr
->
Êags2
 &~
IXGBE_FLAG2_RSC_CAPABLE
;

4591 
ad≠ãr
->
max_msix_q_ve˘‹s
 = 
IXGBE_MAX_MSIX_Q_VECTORS_82598
;

4593 
ixgbe_mac_82599EB
:

4594 #i‚de‡
IXGBE_NO_HW_RSC


4595 
ad≠ãr
->
Êags2
 |
IXGBE_FLAG2_RSC_CAPABLE
;

4597 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCA_CAPABLE
;

4598 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MSI_CAPABLE
;

4599 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MSIX_CAPABLE
;

4600 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_CAPABLE
)

4601 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_MQ_CAPABLE
;

4602 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MQ_CAPABLE
)

4603 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCB_CAPABLE
;

4604 #ifde‡
IXGBE_RSS


4605 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MQ_CAPABLE
)

4606 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_RSS_CAPABLE
;

4608 
ad≠ãr
->
max_msix_q_ve˘‹s
 = 
IXGBE_MAX_MSIX_Q_VECTORS_82599
;

4615 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
 = 8;

4616 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_CAPABLE
) {

4617 
j
;

4618 
tc_c⁄figuøti⁄
 *
tc
;

4619 
j
 = 0; j < 
MAX_TRAFFIC_CLASS
; j++) {

4620 
tc
 = &
ad≠ãr
->
dcb_cfg
.
tc_c⁄fig
[
j
];

4621 
tc
->
∑th
[
DCB_TX_CONFIG
].
bwg_id
 = 0;

4622 
tc
->
∑th
[
DCB_TX_CONFIG
].
bwg_≥r˚¡
 = 12 + (
j
 & 1);

4623 
tc
->
∑th
[
DCB_RX_CONFIG
].
bwg_id
 = 0;

4624 
tc
->
∑th
[
DCB_RX_CONFIG
].
bwg_≥r˚¡
 = 12 + (
j
 & 1);

4625 
tc
->
dcb_pfc
 = 
pfc_dißbÀd
;

4627 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[
DCB_TX_CONFIG
][0] = 100;

4628 
ad≠ãr
->
dcb_cfg
.
bw_≥r˚¡age
[
DCB_RX_CONFIG
][0] = 100;

4629 
ad≠ãr
->
dcb_cfg
.
rx_pba_cfg
 = 
pba_equÆ
;

4630 
ad≠ãr
->
dcb_cfg
.
pfc_mode_íabÀ
 = 
Ál£
;

4631 
ad≠ãr
->
dcb_cfg
.
round_robö_íabÀ
 = 
Ál£
;

4632 
ad≠ãr
->
dcb_£t_bôm≠
 = 0x00;

4634 #ifde‡
CONFIG_DCB


4635 
	`ixgbe_c›y_dcb_cfg
(&
ad≠ãr
->
dcb_cfg
, &ad≠ãr->
ãmp_dcb_cfg
,

4636 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
);

4642 
hw
->
fc
.
ªque°ed_mode
 = 
ixgbe_fc_fuŒ
;

4643 
hw
->
fc
.
cuºít_mode
 = 
ixgbe_fc_fuŒ
;

4644 
ad≠ãr
->
œ°_lfc_mode
 = 
hw
->
fc
.
cuºít_mode
;

4645 
hw
->
fc
.
high_w©î
 = 
IXGBE_DEFAULT_FCRTH
;

4646 
hw
->
fc
.
low_w©î
 = 
IXGBE_DEFAULT_FCRTL
;

4647 
hw
->
fc
.
∑u£_time
 = 
IXGBE_DEFAULT_FCPAUSE
;

4648 
hw
->
fc
.
£nd_x⁄
 = 
åue
;

4649 
hw
->
fc
.
dißbÀ_fc_aut⁄eg
 = 
Ál£
;

4652 
ad≠ãr
->
eôr_low
 = 10;

4653 
ad≠ãr
->
eôr_high
 = 20;

4656 
ad≠ãr
->
tx_rög_cou¡
 = 
IXGBE_DEFAULT_TXD
;

4657 
ad≠ãr
->
rx_rög_cou¡
 = 
IXGBE_DEFAULT_RXD
;

4660 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_RX_CSUM_ENABLED
;

4662 
	`£t_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
);

4663 
out
:

4664  
îr
;

4674 
	`ixgbe_£tup_tx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

4675 
ixgbe_rög
 *
tx_rög
)

4677 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4678 
size
;

4679 
i
;

4681 
size
 = (
ixgbe_tx_buf„r
Ë* 
tx_rög
->
cou¡
;

4682 
tx_rög
->
tx_buf„r_öfo
 = 
	`vmÆloc_node
(
size
, 
ad≠ãr
->
numa_node
);

4683 i‡(!
tx_rög
->
tx_buf„r_öfo
) {

4684 
	`DPRINTK
(
PROBE
, 
ERR
,

4687 
Æloc_bi_Áûed
;

4689 
	`mem£t
(
tx_rög
->
tx_buf„r_öfo
, 0, 
size
);

4692 
tx_rög
->
size
 =Åx_rög->
cou¡
 * (
ixgbe_adv_tx_desc
);

4693 
tx_rög
->
size
 = 
	`ALIGN
(tx_ring->size, 4096);

4695 
tx_rög
->
desc
 = 
	`pci_Æloc_c⁄si°ít
(
pdev
,Åx_rög->
size
,

4696 &
tx_rög
->
dma
);

4697 i‡(!
tx_rög
->
desc
) {

4698 
	`DPRINTK
(
PROBE
, 
ERR
, "UnableÅoállocate memory forÅhe "

4700 
Æloc_desc_Áûed
;

4703 
tx_rög
->
√xt_to_u£
 = 0;

4704 
tx_rög
->
√xt_to_˛ón
 = 0;

4705 #i‚de‡
CONFIG_IXGBE_NAPI


4706 
tx_rög
->
w‹k_limô
 =Åx_rög->
cou¡
;

4709 
size
 = 
	`ALIGN
(
IXGBE_SUBWINDOW_SIZE
 * 
MAX_PACKET_SIZE
, 4096);

4710 
tx_rög
->
wödow_size
 = 
size
;

4712 
i
 = 0; i <(
tx_rög
->
cou¡
 - 1Ë/ 
IXGBE_SUBWINDOW_SIZE
; i++) {

4713 
tx_rög
->
wödow
[
i
] = 
	`pci_Æloc_c⁄si°ít
(
pdev
,

4714 
size
,

4715 &
tx_rög
->
dma_wödow
[
i
]);

4724 i‡(!
tx_rög
->
wödow
[
i
]) {

4725 
	`DPRINTK
(
PROBE
, 
ERR
,

4728 
Æloc_wödow_Áûed
;

4732 
	`•ö_lock_öô
(&
tx_rög
->
lock
);

4736 
Æloc_wödow_Áûed
:

4737 
i
 = 0; i < 
IXGBE_MAX_SUBWINDOWS
; i++) {

4738 i‡(
tx_rög
->
wödow
[
i
]) {

4739 
	`pci_‰ì_c⁄si°ít
(
pdev
,

4740 
tx_rög
->
size
,

4741 
tx_rög
->
wödow
[
i
],

4742 
tx_rög
->
dma_wödow
[
i
]);

4743 
tx_rög
->
wödow
[
i
] = 
NULL
;

4744 
tx_rög
->
dma_wödow
[
i
] = 0;

4748 
	`pci_‰ì_c⁄si°ít
(
pdev
, 
tx_rög
->
size
,Åx_rög->
desc
,Åx_rög->
dma
);

4749 
tx_rög
->
desc
 = 
NULL
;

4751 
Æloc_desc_Áûed
:

4752 
	`v‰ì
(
tx_rög
->
tx_buf„r_öfo
);

4753 
tx_rög
->
tx_buf„r_öfo
 = 
NULL
;

4755 
Æloc_bi_Áûed
:

4756  -
ENOMEM
;

4769 
	`ixgbe_£tup_Æl_tx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4771 
i
, 
îr
 = 0;

4773 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

4774 
îr
 = 
	`ixgbe_£tup_tx_ªsour˚s
(
ad≠ãr
, &ad≠ãr->
tx_rög
[
i
]);

4775 i‡(!
îr
)

4777 
	`DPRINTK
(
PROBE
, 
ERR
, "AŒoˇti⁄ f‹ Tx Queuê%u faûed\n", 
i
);

4780  
îr
;

4790 
	`ixgbe_£tup_rx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

4791 
ixgbe_rög
 *
rx_rög
)

4793 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4794 
size
;

4795 
i
;

4797 
size
 = (
ixgbe_rx_buf„r
Ë* 
rx_rög
->
cou¡
;

4798 
rx_rög
->
rx_buf„r_öfo
 = 
	`vmÆloc_node
(
size
, 
ad≠ãr
->
numa_node
);

4799 i‡(!
rx_rög
->
rx_buf„r_öfo
) {

4800 
	`DPRINTK
(
PROBE
, 
ERR
,

4803 
Æloc_bi_Áûed
;

4805 
	`mem£t
(
rx_rög
->
rx_buf„r_öfo
, 0, 
size
);

4808 
rx_rög
->
size
 =Ñx_rög->
cou¡
 * (
ixgbe_adv_rx_desc
);

4809 
rx_rög
->
size
 = 
	`ALIGN
(rx_ring->size, 4096);

4811 
rx_rög
->
desc
 = 
	`pci_Æloc_c⁄si°ít
(
pdev
,Ñx_rög->
size
, &rx_rög->
dma
);

4813 i‡(!
rx_rög
->
desc
) {

4814 
	`DPRINTK
(
PROBE
, 
ERR
,

4817 
Æloc_desc_Áûed
;

4820 
rx_rög
->
√xt_to_˛ón
 = 0;

4821 
rx_rög
->
√xt_to_u£
 = 0;

4822 #i‚de‡
CONFIG_IXGBE_NAPI


4823 
rx_rög
->
w‹k_limô
 =Ñx_rög->
cou¡
 / 2;

4826 
rx_rög
->
queued
 = 0;

4828 
size
 = 
	`ALIGN
(
IXGBE_SUBWINDOW_SIZE
 * 
MAX_PACKET_SIZE
, 4096);

4829 
rx_rög
->
wödow_size
 = 
size
;

4831 
i
 = 0; i <(
rx_rög
->
cou¡
 - 1Ë/ 
IXGBE_SUBWINDOW_SIZE
; i++) {

4832 
rx_rög
->
wödow
[
i
] = 
	`pci_Æloc_c⁄si°ít
(
pdev
,

4833 
size
,

4834 &
rx_rög
->
dma_wödow
[
i
]);

4843 i‡(!
rx_rög
->
wödow
[
i
]) {

4844 
	`DPRINTK
(
PROBE
, 
ERR
,

4847 
Æloc_wödow_Áûed
;

4851 
	`•ö_lock_öô
(&
rx_rög
->
lock
);

4855 
Æloc_wödow_Áûed
:

4856 
i
 = 0; i < 
IXGBE_MAX_SUBWINDOWS
; i++) {

4857 i‡(
rx_rög
->
wödow
[
i
]) {

4858 
	`pci_‰ì_c⁄si°ít
(
pdev
,

4859 
rx_rög
->
size
,

4860 
rx_rög
->
wödow
[
i
],

4861 
rx_rög
->
dma_wödow
[
i
]);

4862 
rx_rög
->
wödow
[
i
] = 
NULL
;

4863 
rx_rög
->
dma_wödow
[
i
] = 0;

4867 
	`pci_‰ì_c⁄si°ít
(
pdev
, 
rx_rög
->
size
,Ñx_rög->
desc
,Ñx_rög->
dma
);

4868 
rx_rög
->
desc
 = 
NULL
;

4870 
Æloc_desc_Áûed
:

4871 
	`v‰ì
(
rx_rög
->
rx_buf„r_öfo
);

4872 
rx_rög
->
rx_buf„r_öfo
 = 
NULL
;

4874 
Æloc_bi_Áûed
:

4875  -
ENOMEM
;

4888 
	`ixgbe_£tup_Æl_rx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4890 
i
, 
îr
 = 0;

4892 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

4893 
îr
 = 
	`ixgbe_£tup_rx_ªsour˚s
(
ad≠ãr
, &ad≠ãr->
rx_rög
[
i
]);

4894 i‡(!
îr
)

4896 
	`DPRINTK
(
PROBE
, 
ERR
, "AŒoˇti⁄ f‹ Rx Queuê%u faûed\n", 
i
);

4899  
îr
;

4909 
	`ixgbe_‰ì_tx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

4910 
ixgbe_rög
 *
tx_rög
)

4912 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4913 
i
;

4915 
	`ixgbe_˛ón_tx_rög
(
ad≠ãr
, 
tx_rög
);

4917 
	`v‰ì
(
tx_rög
->
tx_buf„r_öfo
);

4918 
tx_rög
->
tx_buf„r_öfo
 = 
NULL
;

4920 
	`pci_‰ì_c⁄si°ít
(
pdev
, 
tx_rög
->
size
,Åx_rög->
desc
,Åx_rög->
dma
);

4921 
tx_rög
->
desc
 = 
NULL
;

4922 
tx_rög
->
dma
 = 0;

4924 
i
 = 0; i < 
IXGBE_MAX_SUBWINDOWS
; i++) {

4925 i‡(
tx_rög
->
wödow
[
i
]) {

4926 
	`pci_‰ì_c⁄si°ít
(
pdev
,

4927 
tx_rög
->
wödow_size
,

4928 
tx_rög
->
wödow
[
i
],

4929 
tx_rög
->
dma_wödow
[
i
]);

4930 
tx_rög
->
wödow
[
i
] = 
NULL
;

4931 
tx_rög
->
dma_wödow
[
i
] = 0;

4942 
	`ixgbe_‰ì_Æl_tx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4944 
i
;

4946 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

4947 i‡(
ad≠ãr
->
tx_rög
[
i
].
desc
)

4948 
	`ixgbe_‰ì_tx_ªsour˚s
(
ad≠ãr
, &ad≠ãr->
tx_rög
[
i
]);

4958 
	`ixgbe_‰ì_rx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

4959 
ixgbe_rög
 *
rx_rög
)

4961 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4962 
i
;

4964 
	`ixgbe_˛ón_rx_rög
(
ad≠ãr
, 
rx_rög
);

4966 
	`v‰ì
(
rx_rög
->
rx_buf„r_öfo
);

4967 
rx_rög
->
rx_buf„r_öfo
 = 
NULL
;

4969 
	`pci_‰ì_c⁄si°ít
(
pdev
, 
rx_rög
->
size
,Ñx_rög->
desc
,Ñx_rög->
dma
);

4970 
rx_rög
->
desc
 = 
NULL
;

4971 
rx_rög
->
dma
 = 0;

4973 
i
 = 0; i < 
IXGBE_MAX_SUBWINDOWS
; i++) {

4974 i‡(
rx_rög
->
wödow
[
i
]) {

4975 
	`pci_‰ì_c⁄si°ít
(
pdev
,

4976 
rx_rög
->
wödow_size
,

4977 
rx_rög
->
wödow
[
i
],

4978 
rx_rög
->
dma_wödow
[
i
]);

4979 
rx_rög
->
wödow
[
i
] = 
NULL
;

4980 
rx_rög
->
dma_wödow
[
i
] = 0;

4991 
	`ixgbe_‰ì_Æl_rx_ªsour˚s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

4993 
i
;

4995 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

4996 i‡(
ad≠ãr
->
rx_rög
[
i
].
desc
)

4997 
	`ixgbe_‰ì_rx_ªsour˚s
(
ad≠ãr
, &ad≠ãr->
rx_rög
[
i
]);

5007 
	`ixgbe_ch™ge_mtu
(
√t_devi˚
 *
√tdev
, 
√w_mtu
)

5009 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5010 
max_‰ame
 = 
√w_mtu
 + 
ETH_HLEN
 + 
ETH_FCS_LEN
;

5013 i‡((
√w_mtu
 < 68Ë|| (
max_‰ame
 > 
IXGBE_MAX_JUMBO_FRAME_SIZE
))

5014  -
EINVAL
;

5016 
	`DPRINTK
(
PROBE
, 
INFO
, "changing MTU from %dÅo %d\n",

5017 
√tdev
->
mtu
, 
√w_mtu
);

5019 
√tdev
->
mtu
 = 
√w_mtu
;

5021 i‡(
	`√tif_ru¬ög
(
√tdev
))

5022 
	`ixgbe_ªöô_locked
(
ad≠ãr
);

5039 
	`ixgbe_›í
(
√t_devi˚
 *
√tdev
)

5041 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5042 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5043 
îr
;

5046 i‡(
	`ã°_bô
(
__IXGBE_TESTING
, &
ad≠ãr
->
°©e
))

5047  -
EBUSY
;

5049 
	`√tif_ˇºõr_off
(
√tdev
);

5052 
îr
 = 
	`ixgbe_£tup_Æl_tx_ªsour˚s
(
ad≠ãr
);

5053 i‡(
îr
)

5054 
îr_£tup_tx
;

5057 
îr
 = 
	`ixgbe_£tup_Æl_rx_ªsour˚s
(
ad≠ãr
);

5058 i‡(
îr
)

5059 
îr_£tup_rx
;

5061 
	`ixgbe_c⁄figuª
(
ad≠ãr
);

5068 
	`ixgbe_m≠_rögs_to_ve˘‹s
(
ad≠ãr
);

5070 
îr
 = 
	`ixgbe_up_com∂ëe
(
ad≠ãr
);

5071 i‡(
îr
)

5072 
îr_£tup_rx
;

5075 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_EICR
);

5077 
îr
 = 
	`ixgbe_ªque°_úq
(
ad≠ãr
);

5078 i‡(
îr
)

5079 
îr_ªq_úq
;

5081 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
åue
,Årue);

5087 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FAN_FAIL_CAPABLE
) {

5088 
u32
 
esdp
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ESDP
);

5089 i‡(
esdp
 & 
IXGBE_ESDP_SDP1
)

5090 
	`DPRINTK
(
DRV
, 
CRIT
,

5094 
	`dev_£t_¥omiscuôy
(
√tdev
, 1);

5098 
îr_ªq_úq
:

5099 
	`ixgbe_down
(
ad≠ãr
);

5100 
	`ixgbe_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

5101 
	`ixgbe_‰ì_úq
(
ad≠ãr
);

5102 
îr_£tup_rx
:

5103 
	`ixgbe_‰ì_Æl_rx_ªsour˚s
(
ad≠ãr
);

5104 
îr_£tup_tx
:

5105 
	`ixgbe_‰ì_Æl_tx_ªsour˚s
(
ad≠ãr
);

5106 
	`ixgbe_ª£t
(
ad≠ãr
);

5108  
îr
;

5122 
	`ixgbe_˛o£
(
√t_devi˚
 *
√tdev
)

5124 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5126 
	`ixgbe_down
(
ad≠ãr
);

5127 
	`ixgbe_‰ì_úq
(
ad≠ãr
);

5129 
	`ixgbe_‰ì_Æl_tx_ªsour˚s
(
ad≠ãr
);

5130 
	`ixgbe_‰ì_Æl_rx_ªsour˚s
(
ad≠ãr
);

5132 
	`ixgbe_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

5137 #ifde‡
CONFIG_PM


5138 
	`ixgbe_ªsume
(
pci_dev
 *
pdev
)

5140 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

5141 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5142 
u32
 
îr
;

5144 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D0
);

5145 
	`pci_ª°‹e_°©e
(
pdev
);

5146 
îr
 = 
	`pci_íabÀ_devi˚
(
pdev
);

5147 i‡(
îr
) {

5148 
	`¥ötk
(
KERN_ERR
 "ixgbe: CannotÉnable PCI device from "

5150  
îr
;

5152 
	`pci_£t_ma°î
(
pdev
);

5154 
	`pci_wake_‰om_d3
(
pdev
, 
Ál£
);

5156 
îr
 = 
	`ixgbe_öô_öãºu±_scheme
(
ad≠ãr
);

5157 i‡(
îr
) {

5158 
	`¥ötk
(
KERN_ERR
 "ixgbe: Cannot initialize interrupts for "

5160  
îr
;

5163 
	`ixgbe_ª£t
(
ad≠ãr
);

5165 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_WUS
, ~0);

5167 i‡(
	`√tif_ru¬ög
(
√tdev
)) {

5168 
îr
 = 
	`ixgbe_›í
(
ad≠ãr
->
√tdev
);

5169 i‡(
îr
)

5170  
îr
;

5173 
	`√tif_devi˚_©èch
(
√tdev
);

5178 
	`__ixgbe_shutdown
(
pci_dev
 *
pdev
, 
boﬁ
 *
íabÀ_wake
)

5180 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

5181 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5182 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5183 
u32
 
˘æ
, 
f˘æ
;

5184 
u32
 
wufc
 = 
ad≠ãr
->
wﬁ
;

5185 #ifde‡
CONFIG_PM


5186 
ªtvÆ
 = 0;

5189 
	`√tif_devi˚_dëach
(
√tdev
);

5191 i‡(
	`√tif_ru¬ög
(
√tdev
)) {

5192 
	`ixgbe_down
(
ad≠ãr
);

5193 
	`ixgbe_‰ì_úq
(
ad≠ãr
);

5194 
	`ixgbe_‰ì_Æl_tx_ªsour˚s
(
ad≠ãr
);

5195 
	`ixgbe_‰ì_Æl_rx_ªsour˚s
(
ad≠ãr
);

5198 
	`ixgbe_˛ór_öãºu±_scheme
(
ad≠ãr
);

5200 #ifde‡
CONFIG_PM


5201 
ªtvÆ
 = 
	`pci_ßve_°©e
(
pdev
);

5202 i‡(
ªtvÆ
)

5203  
ªtvÆ
;

5206 i‡(
wufc
) {

5207 
	`ixgbe_£t_rx_mode
(
√tdev
);

5210 i‡(
wufc
 & 
IXGBE_WUFC_MC
) {

5211 
f˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

5212 
f˘æ
 |
IXGBE_FCTRL_MPE
;

5213 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_FCTRL
, 
f˘æ
);

5216 
˘æ
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CTRL
);

5217 
˘æ
 |
IXGBE_CTRL_GIO_DIS
;

5218 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_CTRL
, 
˘æ
);

5220 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_WUFC
, 
wufc
);

5222 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_WUC
, 0);

5223 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_WUFC
, 0);

5226 i‡(
wufc
 && 
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
)

5227 
	`pci_wake_‰om_d3
(
pdev
, 
åue
);

5229 
	`pci_wake_‰om_d3
(
pdev
, 
Ál£
);

5231 *
íabÀ_wake
 = !!
wufc
;

5233 
	`ixgbe_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

5235 
	`pci_dißbÀ_devi˚
(
pdev
);

5240 #ifde‡
CONFIG_PM


5241 
	`ixgbe_su•íd
(
pci_dev
 *
pdev
, 
pm_mesßge_t
 
°©e
)

5243 
ªtvÆ
;

5244 
boﬁ
 
wake
;

5246 
ªtvÆ
 = 
	`__ixgbe_shutdown
(
pdev
, &
wake
);

5247 i‡(
ªtvÆ
)

5248  
ªtvÆ
;

5250 i‡(
wake
) {

5251 
	`pci_¥ï¨e_to_¶ìp
(
pdev
);

5253 
	`pci_wake_‰om_d3
(
pdev
, 
Ál£
);

5254 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D3hŸ
);

5261 #i‚de‡
USE_REBOOT_NOTIFIER


5262 
	`ixgbe_shutdown
(
pci_dev
 *
pdev
)

5264 
boﬁ
 
wake
;

5266 
	`__ixgbe_shutdown
(
pdev
, &
wake
);

5268 i‡(
sy°em_°©e
 =
SYSTEM_POWER_OFF
) {

5269 
	`pci_wake_‰om_d3
(
pdev
, 
wake
);

5270 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D3hŸ
);

5276 
	`ixgbe_upd©e_rxtx_°©s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

5278 
ixgbe_rög
 *
rög
;

5279 
i
;

5281 
ad≠ãr
->
√t_°©s
.
rx_∑ckës
 = 0;

5282 
ad≠ãr
->
√t_°©s
.
rx_byãs
 = 0;

5283 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

5284 
rög
 = &
ad≠ãr
->
rx_rög
[
i
];

5286 
ad≠ãr
->
√t_°©s
.
rx_∑ckës
 +
rög
->
°©s
.
∑ckës
;

5287 
ad≠ãr
->
√t_°©s
.
rx_byãs
 +
rög
->
°©s
.
byãs
;

5290 
ad≠ãr
->
√t_°©s
.
tx_∑ckës
 = 0;

5291 
ad≠ãr
->
√t_°©s
.
tx_byãs
 = 0;

5292 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

5293 
rög
 = &
ad≠ãr
->
tx_rög
[
i
];

5295 
ad≠ãr
->
√t_°©s
.
tx_∑ckës
 +
rög
->
°©s
.
∑ckës
;

5296 
ad≠ãr
->
√t_°©s
.
tx_byãs
 +
rög
->
°©s
.
byãs
;

5304 
	`ixgbe_upd©e_°©s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

5306 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5307 
u64
 
tŸÆ_mpc
 = 0;

5308 
u32
 
i
, 
mis£d_rx
 = 0, 
mpc
, 
b¥c
, 
lx⁄
, 
lxoff
, 
x⁄_off_tŸ
;

5309 #i‚de‡
IXGBE_NO_LRO


5310 
u32
 
Êushed
 = 0, 
cﬂl
 = 0, 
ªcy˛ed
 = 0;

5311 
num_q_ve˘‹s
 = 1;

5313 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
)

5314 
num_q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

5317 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

5318 
u64
 
rsc_cou¡
 = 0;

5319 
i
 = 0; i < 16; i++)

5320 
ad≠ãr
->
hw_rx_no_dma_ªsour˚s
 +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPRDC
(
i
));

5321 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

5322 
rsc_cou¡
 +
ad≠ãr
->
rx_rög
[
i
].rsc_count;

5323 
ad≠ãr
->
rsc_cou¡
 =Ñsc_count;

5326 #i‚de‡
IXGBE_NO_LRO


5327 
i
 = 0; i < 
num_q_ve˘‹s
; i++) {

5328 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

5329 i‡(!
q_ve˘‹
 || !q_ve˘‹->
Ãﬁi°
)

5331 
Êushed
 +
q_ve˘‹
->
Ãﬁi°
->
°©s
.flushed;

5332 
cﬂl
 +
q_ve˘‹
->
Ãﬁi°
->
°©s
.coal;

5333 
ªcy˛ed
 +
q_ve˘‹
->
Ãﬁi°
->
°©s
.recycled;

5335 
ad≠ãr
->
Ão_°©s
.
Êushed
 = flushed;

5336 
ad≠ãr
->
Ão_°©s
.
cﬂl
 = coal;

5337 
ad≠ãr
->
Ão_°©s
.
ªcy˛ed
 =Ñecycled;

5340 
ad≠ãr
->
°©s
.
¸˚ºs
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_CRCERRS
);

5341 
i
 = 0; i < 8; i++) {

5343 
mpc
 = 
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_MPC
(
i
));

5344 
mis£d_rx
 +
mpc
;

5345 
ad≠ãr
->
°©s
.
mpc
[
i
] += mpc;

5346 
tŸÆ_mpc
 +
ad≠ãr
->
°©s
.
mpc
[
i
];

5347 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

5348 
ad≠ãr
->
°©s
.
∫bc
[
i
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_RNBC
(i));

5349 
ad≠ãr
->
°©s
.
q±c
[
i
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPTC
(i));

5350 
ad≠ãr
->
°©s
.
qbtc
[
i
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBTC
(i));

5351 
ad≠ãr
->
°©s
.
q¥c
[
i
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QPRC
(i));

5352 
ad≠ãr
->
°©s
.
qbrc
[
i
] +
	`IXGBE_READ_REG
(
hw
, 
	`IXGBE_QBRC
(i));

5353 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

5354 
ad≠ãr
->
°©s
.
px⁄rxc
[
i
] +
	`IXGBE_READ_REG
(
hw
,

5355 
	`IXGBE_PXONRXCNT
(
i
));

5356 
ad≠ãr
->
°©s
.
pxof‰xc
[
i
] +
	`IXGBE_READ_REG
(
hw
,

5357 
	`IXGBE_PXOFFRXCNT
(
i
));

5359 
ad≠ãr
->
°©s
.
px⁄rxc
[
i
] +
	`IXGBE_READ_REG
(
hw
,

5360 
	`IXGBE_PXONRXC
(
i
));

5361 
ad≠ãr
->
°©s
.
pxof‰xc
[
i
] +
	`IXGBE_READ_REG
(
hw
,

5362 
	`IXGBE_PXOFFRXC
(
i
));

5365 
ad≠ãr
->
°©s
.
g¥c
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GPRC
);

5367 
ad≠ãr
->
°©s
.
g¥c
 -
mis£d_rx
;

5370 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

5371 
ad≠ãr
->
°©s
.
g‹c
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GORCL
);

5372 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GORCH
);

5373 
ad≠ãr
->
°©s
.
gŸc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GOTCL
);

5374 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GOTCH
);

5375 
ad≠ãr
->
°©s
.
t‹
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TORL
);

5376 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TORH
);

5377 
ad≠ãr
->
°©s
.
lx⁄rxc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXONRXCNT
);

5378 
ad≠ãr
->
°©s
.
lxof‰xc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXOFFRXCNT
);

5379 
ad≠ãr
->
°©s
.
fdúm©ch
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRMATCH
);

5380 
ad≠ãr
->
°©s
.
fdúmiss
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FDIRMISS
);

5382 
ad≠ãr
->
°©s
.
lx⁄rxc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXONRXC
);

5383 
ad≠ãr
->
°©s
.
lxof‰xc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXOFFRXC
);

5384 
ad≠ãr
->
°©s
.
g‹c
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GORCH
);

5385 
ad≠ãr
->
°©s
.
gŸc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GOTCH
);

5386 
ad≠ãr
->
°©s
.
t‹
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TORH
);

5388 
b¥c
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_BPRC
);

5389 
ad≠ãr
->
°©s
.
b¥c
 += bprc;

5390 
ad≠ãr
->
°©s
.
m¥c
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MPRC
);

5391 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

5392 
ad≠ãr
->
°©s
.
m¥c
 -
b¥c
;

5393 
ad≠ãr
->
°©s
.
roc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ROC
);

5394 
ad≠ãr
->
°©s
.
¥c64
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC64
);

5395 
ad≠ãr
->
°©s
.
¥c127
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC127
);

5396 
ad≠ãr
->
°©s
.
¥c255
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC255
);

5397 
ad≠ãr
->
°©s
.
¥c511
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC511
);

5398 
ad≠ãr
->
°©s
.
¥c1023
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC1023
);

5399 
ad≠ãr
->
°©s
.
¥c1522
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PRC1522
);

5400 
ad≠ãr
->
°©s
.
æec
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RLEC
);

5401 
lx⁄
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXONTXC
);

5402 
ad≠ãr
->
°©s
.
lx⁄txc
 +
lx⁄
;

5403 
lxoff
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_LXOFFTXC
);

5404 
ad≠ãr
->
°©s
.
lxof·xc
 +
lxoff
;

5405 
ad≠ãr
->
°©s
.
ruc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RUC
);

5406 
ad≠ãr
->
°©s
.
g±c
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GPTC
);

5407 
ad≠ãr
->
°©s
.
m±c
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MPTC
);

5411 
x⁄_off_tŸ
 = 
lx⁄
 + 
lxoff
;

5412 
ad≠ãr
->
°©s
.
g±c
 -
x⁄_off_tŸ
;

5413 
ad≠ãr
->
°©s
.
m±c
 -
x⁄_off_tŸ
;

5414 
ad≠ãr
->
°©s
.
gŸc
 -(
x⁄_off_tŸ
 * (
ETH_ZLEN
 + 
ETH_FCS_LEN
));

5415 
ad≠ãr
->
°©s
.
ruc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RUC
);

5416 
ad≠ãr
->
°©s
.
rfc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RFC
);

5417 
ad≠ãr
->
°©s
.
rjc
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RJC
);

5418 
ad≠ãr
->
°©s
.
çr
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TPR
);

5419 
ad≠ãr
->
°©s
.
çt
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_TPT
);

5420 
ad≠ãr
->
°©s
.
±c64
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC64
);

5421 
ad≠ãr
->
°©s
.
±c64
 -
x⁄_off_tŸ
;

5422 
ad≠ãr
->
°©s
.
±c127
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC127
);

5423 
ad≠ãr
->
°©s
.
±c255
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC255
);

5424 
ad≠ãr
->
°©s
.
±c511
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC511
);

5425 
ad≠ãr
->
°©s
.
±c1023
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC1023
);

5426 
ad≠ãr
->
°©s
.
±c1522
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_PTC1522
);

5427 
ad≠ãr
->
°©s
.
b±c
 +
	`IXGBE_READ_REG
(
hw
, 
IXGBE_BPTC
);

5430 
ad≠ãr
->
√t_°©s
.
mu…iˇ°
 =ád≠ãr->
°©s
.
m¥c
;

5433 
ad≠ãr
->
√t_°©s
.
rx_îr‹s
 =ád≠ãr->
°©s
.
¸˚ºs
 +

5434 
ad≠ãr
->
°©s
.
æec
;

5435 
ad≠ãr
->
√t_°©s
.
rx_dr›≥d
 = 0;

5436 
ad≠ãr
->
√t_°©s
.
rx_Àngth_îr‹s
 =ád≠ãr->
°©s
.
æec
;

5437 
ad≠ãr
->
√t_°©s
.
rx_¸c_îr‹s
 =ád≠ãr->
°©s
.
¸˚ºs
;

5438 
ad≠ãr
->
√t_°©s
.
rx_mis£d_îr‹s
 = 
tŸÆ_mpc
;

5440 
	`ixgbe_upd©e_rxtx_°©s
(
ad≠ãr
);

5447 
	`ixgbe_w©chdog
(
d©a
)

5449 
ixgbe_ad≠ãr
 *
ad≠ãr
 = (ixgbe_ad≠ã∏*)
d©a
;

5450 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5451 
u64
 
eics
 = 0;

5452 
i
;

5459 i‡(
	`ã°_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
))

5460 
w©chdog_sh‹t_cúcuô
;

5463 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
)) {

5469 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EICS
,

5470 (
IXGBE_EICS_TCP_TIMER
 | 
IXGBE_EICS_OTHER
));

5471 
w©chdog_ªscheduÀ
;

5475 
i
 = 0; i < 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
; i++) {

5476 
ixgbe_q_ve˘‹
 *
qv
 = 
ad≠ãr
->
q_ve˘‹
[
i
];

5477 i‡(
qv
->
rxr_cou¡
 || qv->
txr_cou¡
)

5478 
eics
 |((
u64
)1 << 
i
);

5482 
	`ixgbe_úq_ª¨m_queues
(
ad≠ãr
, 
eics
);

5484 
w©chdog_ªscheduÀ
:

5486 
	`mod_timî
(&
ad≠ãr
->
w©chdog_timî
, 
	`round_jiffõs
(
jiffõs
 + 2 * 
HZ
));

5488 
w©chdog_sh‹t_cúcuô
:

5489 
	`scheduÀ_w‹k
(&
ad≠ãr
->
w©chdog_èsk
);

5496 
	`ixgbe_mu…i•ìd_fibî_èsk
(
w‹k_°ru˘
 *
w‹k
)

5498 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
,

5499 
ixgbe_ad≠ãr
,

5500 
mu…i•ìd_fibî_èsk
);

5501 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5502 
u32
 
aut⁄eg
;

5504 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_IN_SFP_LINK_TASK
;

5505 
aut⁄eg
 = 
hw
->
phy
.
aut⁄eg_advîti£d
;

5506 i‡((!
aut⁄eg
Ë&& (
hw
->
mac
.
›s
.
gë_lök_ˇ∑bûôõs
))

5507 
hw
->
mac
.
›s
.
	`gë_lök_ˇ∑bûôõs
(hw, &
aut⁄eg
,

5508 &
hw
->
mac
.
aut⁄eg
);

5509 i‡(
hw
->
mac
.
›s
.
£tup_lök_•ìd
)

5510 
hw
->
mac
.
›s
.
	`£tup_lök_•ìd
(hw, 
aut⁄eg
, 
åue
,Årue);

5511 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_NEED_LINK_UPDATE
;

5512 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_IN_SFP_LINK_TASK
;

5519 
	`ixgbe_sÂ_c⁄fig_moduÀ_èsk
(
w‹k_°ru˘
 *
w‹k
)

5521 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
,

5522 
ixgbe_ad≠ãr
,

5523 
sÂ_c⁄fig_moduÀ_èsk
);

5524 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5525 
u32
 
îr
;

5527 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_IN_SFP_MOD_TASK
;

5528 
îr
 = 
hw
->
phy
.
›s
.
	`idítify_sÂ
(hw);

5529 i‡(
îr
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
) {

5530 
	`DPRINTK
(
PROBE
, 
ERR
, "failedÅoÜoad becauseán "

5532 
	`uƒegi°î_√tdev
(
ad≠ãr
->
√tdev
);

5533 
ad≠ãr
->
√tdev_ªgi°îed
 = 
Ál£
;

5541 
îr
 = 
hw
->
mac
.
›s
.
	`£tup_sÂ
(hw);

5542 i‡(
îr
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
) {

5543 
	`DPRINTK
(
PROBE
, 
ERR
, "failedÅoÜoad becauseán "

5545 
	`uƒegi°î_√tdev
(
ad≠ãr
->
√tdev
);

5546 
ad≠ãr
->
√tdev_ªgi°îed
 = 
Ál£
;

5550 i‡(!(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_IN_SFP_LINK_TASK
))

5552 
	`scheduÀ_w‹k
(&
ad≠ãr
->
mu…i•ìd_fibî_èsk
);

5553 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_IN_SFP_MOD_TASK
;

5560 
	`ixgbe_fdú_ªöô_èsk
(
w‹k_°ru˘
 *
w‹k
)

5562 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
,

5563 
ixgbe_ad≠ãr
,

5564 
fdú_ªöô_èsk
);

5565 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5566 
i
;

5568 i‡(
	`ixgbe_ªöô_fdú_èbÀs_82599
(
hw
) == 0) {

5569 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

5570 
	`£t_bô
(
__IXGBE_FDIR_INIT_DONE
,

5571 &(
ad≠ãr
->
tx_rög
[
i
].
ªöô_°©e
));

5573 
	`DPRINTK
(
PROBE
, 
ERR
, "failedÅo finish FDIRÑe-initialization, "

5577 
	`√tif_tx_°¨t_Æl_queues
(
ad≠ãr
->
√tdev
);

5584 
	`ixgbe_w©chdog_èsk
(
w‹k_°ru˘
 *
w‹k
)

5586 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
,

5587 
ixgbe_ad≠ãr
,

5588 
w©chdog_èsk
);

5589 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

5590 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

5591 
u32
 
lök_•ìd
 = 
ad≠ãr
->link_speed;

5592 
boﬁ
 
lök_up
 = 
ad≠ãr
->link_up;

5593 
i
;

5594 
ixgbe_rög
 *
tx_rög
;

5595 
some_tx_≥ndög
 = 0;

5597 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_IN_WATCHDOG_TASK
;

5599 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_NEED_LINK_UPDATE
) {

5600 i‡(
hw
->
mac
.
›s
.
check_lök
) {

5601 
hw
->
mac
.
›s
.
	`check_lök
(hw, &
lök_•ìd
, &
lök_up
, 
Ál£
);

5604 
lök_•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

5605 
lök_up
 = 
åue
;

5607 i‡(
lök_up
) {

5608 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

5609 
i
 = 0; i < 
MAX_TRAFFIC_CLASS
; i++)

5610 
hw
->
mac
.
›s
.
	`fc_íabÀ
(hw, 
i
);

5612 
hw
->
mac
.
›s
.
	`fc_íabÀ
(hw, 0);

5616 i‡(
lök_up
 ||

5617 
	`time_a·î
(
jiffõs
, (
ad≠ãr
->
lök_check_timeout
 +

5618 
IXGBE_TRY_LINK_TIMEOUT
))) {

5619 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_NEED_LINK_UPDATE
;

5620 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_EIMS
, 
IXGBE_EIMC_LSC
);

5622 
ad≠ãr
->
lök_up
 =Üink_up;

5623 
ad≠ãr
->
lök_•ìd
 =Üink_speed;

5626 i‡(
lök_up
) {

5627 i‡(!
	`√tif_ˇºõr_ok
(
√tdev
)) {

5628 
boﬁ
 
Êow_rx
, 
Êow_tx
;

5630 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

5631 
u32
 
mÊ˙
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MFLCN
);

5632 
u32
 
fccfg
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCCFG
);

5633 
Êow_rx
 = !!(
mÊ˙
 & 
IXGBE_MFLCN_RFCE
);

5634 
Êow_tx
 = !!(
fccfg
 & 
IXGBE_FCCFG_TFCE_802_3X
);

5636 
u32
 
‰˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_FCTRL
);

5637 
u32
 
rmcs
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_RMCS
);

5638 
Êow_rx
 = !!(
‰˘l
 & 
IXGBE_FCTRL_RFCE
);

5639 
Êow_tx
 = !!(
rmcs
 & 
IXGBE_RMCS_TFCE_802_3X
);

5641 
	`DPRINTK
(
LINK
, 
INFO
, "NIC Link is Up %s, "

5643 (
lök_•ìd
 =
IXGBE_LINK_SPEED_10GB_FULL
 ?

5645 (
lök_•ìd
 =
IXGBE_LINK_SPEED_1GB_FULL
 ?

5647 ((
Êow_rx
 && 
Êow_tx
) ? "RX/TX" :

5648 (
Êow_rx
 ? "RX" :

5649 (
Êow_tx
 ? "TX" : "None"))));

5651 
	`√tif_ˇºõr_⁄
(
√tdev
);

5652 
	`√tif_tx_wake_Æl_queues
(
√tdev
);

5655 
ad≠ãr
->
dëe˘_tx_hung
 = 
åue
;

5658 
ad≠ãr
->
lök_up
 = 
Ál£
;

5659 
ad≠ãr
->
lök_•ìd
 = 0;

5660 i‡(
	`√tif_ˇºõr_ok
(
√tdev
)) {

5661 
	`DPRINTK
(
LINK
, 
INFO
, "NIC Link is Down\n");

5662 
	`√tif_ˇºõr_off
(
√tdev
);

5663 
	`√tif_tx_°›_Æl_queues
(
√tdev
);

5667 i‡(!
	`√tif_ˇºõr_ok
(
√tdev
)) {

5668 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

5669 
tx_rög
 = &
ad≠ãr
->tx_rög[
i
];

5670 i‡(
tx_rög
->
√xt_to_u£
 !tx_rög->
√xt_to_˛ón
) {

5671 
some_tx_≥ndög
 = 1;

5676 i‡(
some_tx_≥ndög
) {

5682 
	`scheduÀ_w‹k
(&
ad≠ãr
->
ª£t_èsk
);

5686 
	`ixgbe_upd©e_°©s
(
ad≠ãr
);

5687 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_IN_WATCHDOG_TASK
;

5689 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_NEED_LINK_UPDATE
) {

5691 
	`mod_timî
(&
ad≠ãr
->
w©chdog_timî
, 
jiffõs
 + (
HZ
/10));

5696 
	`ixgbe_xmô_‰ame_ps
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√tdev
)

5698 
ixgbe_ad≠ãr
 *
ad≠ãr
;

5699 
ixgbe_rög
 *
tx_rög
;

5700 
r_idx
 = 0;

5702 
ps_pkt_öfo
 
öfo
;

5704 #ifde‡
HAVE_TX_MQ


5705 
r_idx
 = 
skb
->
queue_m≠pög
;

5707 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5708 
tx_rög
 = &
ad≠ãr
->tx_rög[
r_idx
];

5710 
öfo
.
off£t
 = 0;

5711 
öfo
.
Àn
 = 
skb
->len;

5713 
	`•ö_lock
(&
tx_rög
->
lock
);

5714 
	`ixgbe_xmô_b©ch
(
tx_rög
, 1, &
öfo
, 
skb
->
d©a
);

5715 
	`•ö_u∆ock
(&
tx_rög
->
lock
);

5717 
	`dev_k‰ì_skb_™y
(
skb
);

5718  
NETDEV_TX_OK
;

5722 
	`ixgbe_tso
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
ixgbe_rög
 *
tx_rög
,

5723 
sk_buff
 *
skb
, 
u32
 
tx_Êags
, 
u8
 *
hdr_Àn
)

5725 #ifde‡
NETIF_F_TSO


5726 
ixgbe_adv_tx_c⁄ãxt_desc
 *
c⁄ãxt_desc
;

5727 
i
;

5728 
îr
;

5729 
ixgbe_tx_buf„r
 *
tx_buf„r_öfo
;

5730 
u32
 
vœn_macù_Àns
 = 0, 
ty≥_tucmd_mlhl
;

5731 
u32
 
mss_l4Àn_idx
, 
l4Àn
;

5733 i‡(
	`skb_is_gso
(
skb
)) {

5734 i‡(
	`skb_hódî_˛⁄ed
(
skb
)) {

5735 
îr
 = 
	`pskb_ex∑nd_hód
(
skb
, 0, 0, 
GFP_ATOMIC
);

5736 i‡(
îr
)

5737  
îr
;

5739 
l4Àn
 = 
	`t˝_hdæí
(
skb
);

5740 *
hdr_Àn
 +
l4Àn
;

5742 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

5743 
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);

5744 
ùh
->
tŸ_Àn
 = 0;

5745 
ùh
->
check
 = 0;

5746 
	`t˝_hdr
(
skb
)->
check
 = ~
	`csum_t˝udp_magic
(
ùh
->
ßddr
,

5747 
ùh
->
daddr
, 0,

5748 
IPPROTO_TCP
,

5750 
ad≠ãr
->
hw_tso_˘xt
++;

5751 #ifde‡
NETIF_F_TSO6


5752 } i‡(
	`skb_shöfo
(
skb
)->
gso_ty≥
 =
SKB_GSO_TCPV6
) {

5753 
	`ùv6_hdr
(
skb
)->
∑ylﬂd_Àn
 = 0;

5754 
	`t˝_hdr
(
skb
)->
check
 =

5755 ~
	`csum_ùv6_magic
(&
	`ùv6_hdr
(
skb
)->
ßddr
,

5756 &
	`ùv6_hdr
(
skb
)->
daddr
,

5757 0, 
IPPROTO_TCP
, 0);

5758 
ad≠ãr
->
hw_tso6_˘xt
++;

5762 
i
 = 
tx_rög
->
√xt_to_u£
;

5764 
tx_buf„r_öfo
 = &
tx_rög
->tx_buf„r_öfo[
i
];

5765 
c⁄ãxt_desc
 = 
	`IXGBE_TX_CTXTDESC_ADV
(*
tx_rög
, 
i
);

5768 i‡(
tx_Êags
 & 
IXGBE_TX_FLAGS_VLAN
)

5769 
vœn_macù_Àns
 |=

5770 (
tx_Êags
 & 
IXGBE_TX_FLAGS_VLAN_MASK
);

5771 
vœn_macù_Àns
 |((
	`skb_√tw‹k_off£t
(
skb
)) <<

5772 
IXGBE_ADVTXD_MACLEN_SHIFT
);

5773 *
hdr_Àn
 +
	`skb_√tw‹k_off£t
(
skb
);

5774 
vœn_macù_Àns
 |=

5775 (
	`skb_å™•‹t_hódî
(
skb
Ë- 
	`skb_√tw‹k_hódî
(skb));

5776 *
hdr_Àn
 +=

5777 (
	`skb_å™•‹t_hódî
(
skb
Ë- 
	`skb_√tw‹k_hódî
(skb));

5778 
c⁄ãxt_desc
->
vœn_macù_Àns
 = 
	`˝u_to_À32
(vlan_macip_lens);

5779 
c⁄ãxt_desc
->
£qnum_£ed
 = 0;

5782 
ty≥_tucmd_mlhl
 = (
IXGBE_TXD_CMD_DEXT
 |

5783 
IXGBE_ADVTXD_DTYP_CTXT
);

5785 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

5786 
ty≥_tucmd_mlhl
 |
IXGBE_ADVTXD_TUCMD_IPV4
;

5787 
ty≥_tucmd_mlhl
 |
IXGBE_ADVTXD_TUCMD_L4T_TCP
;

5788 
c⁄ãxt_desc
->
ty≥_tucmd_mlhl
 = 
	`˝u_to_À32
(type_tucmd_mlhl);

5791 
mss_l4Àn_idx
 =

5792 (
	`skb_shöfo
(
skb
)->
gso_size
 << 
IXGBE_ADVTXD_MSS_SHIFT
);

5793 
mss_l4Àn_idx
 |(
l4Àn
 << 
IXGBE_ADVTXD_L4LEN_SHIFT
);

5795 
mss_l4Àn_idx
 |(1 << 
IXGBE_ADVTXD_IDX_SHIFT
);

5796 
c⁄ãxt_desc
->
mss_l4Àn_idx
 = 
	`˝u_to_À32
(mss_l4len_idx);

5798 
tx_buf„r_öfo
->
time_°amp
 = 
jiffõs
;

5799 
tx_buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

5801 
i
++;

5802 i‡(
i
 =
tx_rög
->
cou¡
)

5803 
i
 = 0;

5804 
tx_rög
->
√xt_to_u£
 = 
i
;

5806  
åue
;

5810  
Ál£
;

5813 
boﬁ
 
	`ixgbe_tx_csum
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

5814 
ixgbe_rög
 *
tx_rög
,

5815 
sk_buff
 *
skb
, 
u32
 
tx_Êags
)

5817 
ixgbe_adv_tx_c⁄ãxt_desc
 *
c⁄ãxt_desc
;

5818 
i
;

5819 
ixgbe_tx_buf„r
 *
tx_buf„r_öfo
;

5820 
u32
 
vœn_macù_Àns
 = 0, 
ty≥_tucmd_mlhl
 = 0;

5822 i‡(
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
 ||

5823 (
tx_Êags
 & 
IXGBE_TX_FLAGS_VLAN
)) {

5824 
i
 = 
tx_rög
->
√xt_to_u£
;

5825 
tx_buf„r_öfo
 = &
tx_rög
->tx_buf„r_öfo[
i
];

5826 
c⁄ãxt_desc
 = 
	`IXGBE_TX_CTXTDESC_ADV
(*
tx_rög
, 
i
);

5828 i‡(
tx_Êags
 & 
IXGBE_TX_FLAGS_VLAN
)

5829 
vœn_macù_Àns
 |(
tx_Êags
 &

5830 
IXGBE_TX_FLAGS_VLAN_MASK
);

5831 
vœn_macù_Àns
 |(
	`skb_√tw‹k_off£t
(
skb
) <<

5832 
IXGBE_ADVTXD_MACLEN_SHIFT
);

5833 i‡(
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
)

5834 
vœn_macù_Àns
 |(
	`skb_å™•‹t_hódî
(
skb
) -

5835 
	`skb_√tw‹k_hódî
(
skb
));

5837 
c⁄ãxt_desc
->
vœn_macù_Àns
 = 
	`˝u_to_À32
(vlan_macip_lens);

5838 
c⁄ãxt_desc
->
£qnum_£ed
 = 0;

5840 
ty≥_tucmd_mlhl
 |(
IXGBE_TXD_CMD_DEXT
 |

5841 
IXGBE_ADVTXD_DTYP_CTXT
);

5843 i‡(
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
) {

5844 
skb
->
¥Ÿocﬁ
) {

5845 
	`__c⁄°™t_ht⁄s
(
ETH_P_IP
):

5846 
ty≥_tucmd_mlhl
 |
IXGBE_ADVTXD_TUCMD_IPV4
;

5847 i‡(
	`ù_hdr
(
skb
)->
¥Ÿocﬁ
 =
IPPROTO_TCP
)

5848 
ty≥_tucmd_mlhl
 |=

5849 
IXGBE_ADVTXD_TUCMD_L4T_TCP
;

5851 #ifde‡
NETIF_F_IPV6_CSUM


5852 
	`__c⁄°™t_ht⁄s
(
ETH_P_IPV6
):

5854 i‡(
	`ùv6_hdr
(
skb
)->
√xthdr
 =
IPPROTO_TCP
)

5855 
ty≥_tucmd_mlhl
 |=

5856 
IXGBE_ADVTXD_TUCMD_L4T_TCP
;

5860 i‡(
	`u∆ikñy
(
	`√t_øãlimô
())) {

5861 
	`DPRINTK
(
PROBE
, 
WARNING
,

5863 
skb
->
¥Ÿocﬁ
);

5869 
c⁄ãxt_desc
->
ty≥_tucmd_mlhl
 = 
	`˝u_to_À32
(type_tucmd_mlhl);

5871 
c⁄ãxt_desc
->
mss_l4Àn_idx
 = 0;

5873 
tx_buf„r_öfo
->
time_°amp
 = 
jiffõs
;

5874 
tx_buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

5876 
ad≠ãr
->
hw_csum_tx_good
++;

5877 
i
++;

5878 i‡(
i
 =
tx_rög
->
cou¡
)

5879 
i
 = 0;

5880 
tx_rög
->
√xt_to_u£
 = 
i
;

5882  
åue
;

5885  
Ál£
;

5888 
	`ixgbe_tx_m≠
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

5889 
ixgbe_rög
 *
tx_rög
,

5890 
sk_buff
 *
skb
, 
u32
 
tx_Êags
,

5891 
fú°
)

5893 
ixgbe_tx_buf„r
 *
tx_buf„r_öfo
;

5894 
Àn
;

5895 
tŸÆ
 = 
skb
->
Àn
;

5896 
off£t
 = 0, 
size
, 
cou¡
 = 0, 
i
;

5897 #ifde‡
MAX_SKB_FRAGS


5898 
ƒ_‰ags
 = 
	`skb_shöfo
(
skb
)->nr_frags;

5899 
f
;

5902 
i
 = 
tx_rög
->
√xt_to_u£
;

5904 
Àn
 = 
	`mö
(
	`skb_hódÀn
(
skb
), 
tŸÆ
);

5905 
Àn
) {

5906 
tx_buf„r_öfo
 = &
tx_rög
->tx_buf„r_öfo[
i
];

5907 
size
 = 
	`mö
(
Àn
, ()
IXGBE_MAX_DATA_PER_TXD
);

5909 
tx_buf„r_öfo
->
Àngth
 = 
size
;

5915 
tx_buf„r_öfo
->
time_°amp
 = 
jiffõs
;

5916 
tx_buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

5918 
Àn
 -
size
;

5919 
tŸÆ
 -
size
;

5920 
off£t
 +
size
;

5921 
cou¡
++;

5922 
i
++;

5923 i‡(
i
 =
tx_rög
->
cou¡
)

5924 
i
 = 0;

5927 #ifde‡
MAX_SKB_FRAGS


5928 
f
 = 0; f < 
ƒ_‰ags
; f++) {

5929 
skb_‰ag_°ru˘
 *
‰ag
;

5931 
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[
f
];

5932 
Àn
 = 
	`mö
–()
‰ag
->
size
, 
tŸÆ
);

5933 
off£t
 = 
‰ag
->
∑ge_off£t
;

5935 
Àn
) {

5936 
tx_buf„r_öfo
 = &
tx_rög
->tx_buf„r_öfo[
i
];

5937 
size
 = 
	`mö
(
Àn
, ()
IXGBE_MAX_DATA_PER_TXD
);

5939 
tx_buf„r_öfo
->
Àngth
 = 
size
;

5947 
tx_buf„r_öfo
->
time_°amp
 = 
jiffõs
;

5948 
tx_buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

5950 
Àn
 -
size
;

5951 
tŸÆ
 -
size
;

5952 
off£t
 +
size
;

5953 
cou¡
++;

5954 
i
++;

5955 i‡(
i
 =
tx_rög
->
cou¡
)

5956 
i
 = 0;

5958 i‡(
tŸÆ
 == 0)

5962 i‡(
i
 == 0)

5963 
i
 = 
tx_rög
->
cou¡
 - 1;

5965 
i
 = i - 1;

5967 
tx_rög
->
tx_buf„r_öfo
[
fú°
].
√xt_to_w©ch
 = 
i
;

5969  
cou¡
;

5972 
	`ixgbe_tx_queue
(
ixgbe_ad≠ãr
 *
ad≠ãr
,

5973 
ixgbe_rög
 *
tx_rög
, 
tx_Êags
,

5974 
cou¡
, 
u32
 
∑yÀn
, 
u8
 
hdr_Àn
)

5976 
ixgbe_adv_tx_desc
 *
tx_desc
 = 
NULL
;

5977 
ixgbe_tx_buf„r
 *
tx_buf„r_öfo
;

5978 
u32
 
ﬁöfo_°©us
 = 0, 
cmd_ty≥_Àn
 = 0;

5979 
i
;

5981 
u32
 
txd_cmd
 = 
IXGBE_TXD_CMD_EOP
 | 
IXGBE_TXD_CMD_RS
 | 
IXGBE_TXD_CMD_IFCS
;

5983 
cmd_ty≥_Àn
 |
IXGBE_ADVTXD_DTYP_DATA
;

5985 
cmd_ty≥_Àn
 |
IXGBE_ADVTXD_DCMD_IFCS
 | 
IXGBE_ADVTXD_DCMD_DEXT
;

5987 i‡(
tx_Êags
 & 
IXGBE_TX_FLAGS_VLAN
)

5988 
cmd_ty≥_Àn
 |
IXGBE_ADVTXD_DCMD_VLE
;

5990 i‡(
tx_Êags
 & 
IXGBE_TX_FLAGS_TSO
) {

5991 
cmd_ty≥_Àn
 |
IXGBE_ADVTXD_DCMD_TSE
;

5993 
ﬁöfo_°©us
 |
IXGBE_TXD_POPTS_TXSM
 <<

5994 
IXGBE_ADVTXD_POPTS_SHIFT
;

5997 
ﬁöfo_°©us
 |(1 << 
IXGBE_ADVTXD_IDX_SHIFT
);

5998 i‡(
tx_Êags
 & 
IXGBE_TX_FLAGS_IPV4
)

5999 
ﬁöfo_°©us
 |
IXGBE_TXD_POPTS_IXSM
 <<

6000 
IXGBE_ADVTXD_POPTS_SHIFT
;

6002 } i‡(
tx_Êags
 & 
IXGBE_TX_FLAGS_CSUM
)

6003 
ﬁöfo_°©us
 |
IXGBE_TXD_POPTS_TXSM
 <<

6004 
IXGBE_ADVTXD_POPTS_SHIFT
;

6005 
ﬁöfo_°©us
 |((
∑yÀn
 - 
hdr_Àn
Ë<< 
IXGBE_ADVTXD_PAYLEN_SHIFT
);

6007 
i
 = 
tx_rög
->
√xt_to_u£
;

6008 
cou¡
--) {

6009 
tx_buf„r_öfo
 = &
tx_rög
->tx_buf„r_öfo[
i
];

6010 
tx_desc
 = 
	`IXGBE_TX_DESC_ADV
(*
tx_rög
, 
i
);

6012 
tx_desc
->
ªad
.
cmd_ty≥_Àn
 =

6013 
	`˝u_to_À32
(
cmd_ty≥_Àn
 | 
tx_buf„r_öfo
->
Àngth
);

6014 
tx_desc
->
ªad
.
ﬁöfo_°©us
 = 
	`˝u_to_À32
(olinfo_status);

6015 
i
++;

6016 i‡(
i
 =
tx_rög
->
cou¡
)

6017 
i
 = 0;

6020 
tx_desc
->
ªad
.
cmd_ty≥_Àn
 |
	`˝u_to_À32
(
txd_cmd
);

6028 
	`wmb
();

6030 
tx_rög
->
√xt_to_u£
 = 
i
;

6031 
	`wrôñ
(
i
, 
ad≠ãr
->
hw
.
hw_addr
 + 
tx_rög
->
èû
);

6034 
	`ixgbe_©r
(
ixgbe_ad≠ãr
 *
ad≠ãr
, 
sk_buff
 *
skb
,

6035 
queue
, 
u32
 
tx_Êags
)

6038 
ixgbe_©r_öput
 
©r_öput
;

6039 
t˝hdr
 *
th
;

6040 
udphdr
 *
uh
;

6041 
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);

6042 
ëhhdr
 *
ëh
 = (ëhhd∏*)
skb
->
d©a
;

6043 
u16
 
vœn_id
, 
§c_p‹t
, 
d°_p‹t
, 
Êex_byãs
;

6044 
u32
 
§c_ùv4_addr
, 
d°_ùv4_addr
;

6045 
u8
 
l4ty≥
 = 0;

6048 i‡(
ùh
->
¥Ÿocﬁ
 =
IPPROTO_TCP
) {

6049 
th
 = 
	`t˝_hdr
(
skb
);

6050 
§c_p‹t
 = 
th
->
sour˚
;

6051 
d°_p‹t
 = 
th
->
de°
;

6052 
l4ty≥
 |
IXGBE_ATR_L4TYPE_TCP
;

6054 } if(
ùh
->
¥Ÿocﬁ
 =
IPPROTO_UDP
) {

6055 
uh
 = 
	`udp_hdr
(
skb
);

6056 
§c_p‹t
 = 
uh
->
sour˚
;

6057 
d°_p‹t
 = 
uh
->
de°
;

6058 
l4ty≥
 |
IXGBE_ATR_L4TYPE_UDP
;

6065 
	`mem£t
(&
©r_öput
, 0, (
ixgbe_©r_öput
));

6067 
vœn_id
 = (
tx_Êags
 & 
IXGBE_TX_FLAGS_VLAN_MASK
) >>

6068 
IXGBE_TX_FLAGS_VLAN_SHIFT
;

6069 
§c_ùv4_addr
 = 
ùh
->
ßddr
;

6070 
d°_ùv4_addr
 = 
ùh
->
daddr
;

6071 
Êex_byãs
 = 
ëh
->
h_¥Ÿo
;

6073 
	`ixgbe_©r_£t_vœn_id_82599
(&
©r_öput
, 
vœn_id
);

6074 
	`ixgbe_©r_£t_§c_p‹t_82599
(&
©r_öput
, 
d°_p‹t
);

6075 
	`ixgbe_©r_£t_d°_p‹t_82599
(&
©r_öput
, 
§c_p‹t
);

6076 
	`ixgbe_©r_£t_Êex_byã_82599
(&
©r_öput
, 
Êex_byãs
);

6077 
	`ixgbe_©r_£t_l4ty≥_82599
(&
©r_öput
, 
l4ty≥
);

6079 
	`ixgbe_©r_£t_§c_ùv4_82599
(&
©r_öput
, 
d°_ùv4_addr
);

6080 
	`ixgbe_©r_£t_d°_ùv4_82599
(&
©r_öput
, 
§c_ùv4_addr
);

6083 
	`ixgbe_fdú_add_sig«tuª_fûãr_82599
(&
ad≠ãr
->
hw
, &
©r_öput
, 
queue
);

6086 
	`__ixgbe_maybe_°›_tx
(
√t_devi˚
 *
√tdev
,

6087 
ixgbe_rög
 *
tx_rög
, 
size
)

6089 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6091 
	`√tif_°›_subqueue
(
√tdev
, 
tx_rög
->
queue_ödex
);

6095 
	`smp_mb
();

6099 i‡(
	`likñy
(
	`IXGBE_DESC_UNUSED
(
tx_rög
Ë< 
size
))

6100  -
EBUSY
;

6103 
	`√tif_°¨t_subqueue
(
√tdev
, 
tx_rög
->
queue_ödex
);

6104 ++
ad≠ãr
->
ª°¨t_queue
;

6108 
	`ixgbe_maybe_°›_tx
(
√t_devi˚
 *
√tdev
,

6109 
ixgbe_rög
 *
tx_rög
, 
size
)

6111 i‡(
	`likñy
(
	`IXGBE_DESC_UNUSED
(
tx_rög
Ë>
size
))

6113  
	`__ixgbe_maybe_°›_tx
(
√tdev
, 
tx_rög
, 
size
);

6116 
	`ixgbe_xmô_‰ame
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√tdev
)

6118 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6119 
ixgbe_rög
 *
tx_rög
;

6120 
fú°
;

6121 
tx_Êags
 = 0;

6122 
u8
 
hdr_Àn
 = 0;

6123 
r_idx
 = 0, 
tso
;

6124 
cou¡
 = 0;

6126 #ifde‡
MAX_SKB_FRAGS


6127 
f
;

6130 #ifde‡
NETIF_F_HW_VLAN_TX


6131 i‡(
ad≠ãr
->
vlgΩ
 && 
	`vœn_tx_èg_¥e£¡
(
skb
)) {

6132 
tx_Êags
 |
	`vœn_tx_èg_gë
(
skb
);

6133 #ifde‡
HAVE_TX_MQ


6134 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

6135 i‡(
skb
->
queue_m≠pög
) {

6136 
tx_Êags
 &~
IXGBE_TX_FLAGS_VLAN_PRIO_MASK
;

6137 
tx_Êags
 |(
skb
->
queue_m≠pög
 << 13);

6139 
skb
->
queue_m≠pög
 = (
tx_Êags
 &

6140 
IXGBE_TX_FLAGS_VLAN_PRIO_MASK
) >> 13;

6144 
tx_Êags
 <<
IXGBE_TX_FLAGS_VLAN_SHIFT
;

6145 
tx_Êags
 |
IXGBE_TX_FLAGS_VLAN
;

6146 #ifde‡
HAVE_TX_MQ


6147 } i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) {

6148 i‡(
skb
->
¥i‹ôy
 !
TC_PRIO_CONTROL
) {

6149 
tx_Êags
 |(
skb
->
queue_m≠pög
 << 13);

6150 
tx_Êags
 <<
IXGBE_TX_FLAGS_VLAN_SHIFT
;

6151 
tx_Êags
 |
IXGBE_TX_FLAGS_VLAN
;

6153 
skb
->
queue_m≠pög
 =

6154 
ad≠ãr
->
rög_„©uª
[
RING_F_DCB
].
ödi˚s
-1;

6160 #ifde‡
HAVE_TX_MQ


6161 
r_idx
 = 
skb
->
queue_m≠pög
;

6163 
tx_rög
 = &
ad≠ãr
->tx_rög[
r_idx
];

6166 i‡(
	`skb_is_gso
(
skb
) ||

6167 (
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
) ||

6168 (
tx_Êags
 & 
IXGBE_TX_FLAGS_VLAN
))

6169 
cou¡
++;

6170 
cou¡
 +
	`TXD_USE_COUNT
(
	`skb_hódÀn
(
skb
));

6171 #ifde‡
MAX_SKB_FRAGS


6172 
f
 = 0; f < 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
; f++)

6173 
cou¡
 +
	`TXD_USE_COUNT
(
	`skb_shöfo
(
skb
)->
‰ags
[
f
].
size
);

6176 i‡(
	`ixgbe_maybe_°›_tx
(
√tdev
, 
tx_rög
, 
cou¡
)) {

6177 
ad≠ãr
->
tx_busy
++;

6178  
NETDEV_TX_BUSY
;

6181 
fú°
 = 
tx_rög
->
√xt_to_u£
;

6182 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

6183 
tx_Êags
 |
IXGBE_TX_FLAGS_IPV4
;

6184 
tso
 = 
	`ixgbe_tso
(
ad≠ãr
, 
tx_rög
, 
skb
, 
tx_Êags
, &
hdr_Àn
);

6185 i‡(
tso
 < 0) {

6186 
	`dev_k‰ì_skb_™y
(
skb
);

6187  
NETDEV_TX_OK
;

6190 i‡(
tso
)

6191 
tx_Êags
 |
IXGBE_TX_FLAGS_TSO
;

6192 i‡(
	`ixgbe_tx_csum
(
ad≠ãr
, 
tx_rög
, 
skb
, 
tx_Êags
) &&

6193 (
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
))

6194 
tx_Êags
 |
IXGBE_TX_FLAGS_CSUM
;

6197 i‡(
tx_rög
->
©r_ßm∂e_øã
) {

6198 ++
tx_rög
->
©r_cou¡
;

6199 i‡((
tx_rög
->
©r_cou¡
 >tx_rög->
©r_ßm∂e_øã
) &&

6200 
	`ã°_bô
(
__IXGBE_FDIR_INIT_DONE
, &
tx_rög
->
ªöô_°©e
)) {

6201 
	`ixgbe_©r
(
ad≠ãr
, 
skb
, 
tx_rög
->
queue_ödex
, 
tx_Êags
);

6202 
tx_rög
->
©r_cou¡
 = 0;

6205 
	`ixgbe_tx_queue
(
ad≠ãr
, 
tx_rög
, 
tx_Êags
,

6206 
	`ixgbe_tx_m≠
(
ad≠ãr
, 
tx_rög
, 
skb
, 
tx_Êags
, 
fú°
),

6207 
skb
->
Àn
, 
hdr_Àn
);

6209 
√tdev
->
å™s_°¨t
 = 
jiffõs
;

6211 
	`ixgbe_maybe_°›_tx
(
√tdev
, 
tx_rög
, 
DESC_NEEDED
);

6213  
NETDEV_TX_OK
;

6224 
√t_devi˚_°©s
 *
	`ixgbe_gë_°©s
(
√t_devi˚
 *
√tdev
)

6226 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6228 
	`ixgbe_upd©e_rxtx_°©s
(
ad≠ãr
);

6231  &
ad≠ãr
->
√t_°©s
;

6241 
	`ixgbe_£t_mac
(
√t_devi˚
 *
√tdev
, *
p
)

6243 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6244 
ixgbe_hw
 *
hw
 = &
ad≠ãr
->hw;

6245 
sockaddr
 *
addr
 = 
p
;

6247 i‡(!
	`is_vÆid_ëhî_addr
(
addr
->
ß_d©a
))

6248  -
EADDRNOTAVAIL
;

6250 
	`mem˝y
(
√tdev
->
dev_addr
, 
addr
->
ß_d©a
,Çëdev->
addr_Àn
);

6251 
	`mem˝y
(
hw
->
mac
.
addr
,áddr->
ß_d©a
, 
√tdev
->
addr_Àn
);

6253 i‡(
hw
->
mac
.
›s
.
£t_ør
)

6254 
hw
->
mac
.
›s
.
	`£t_ør
(hw, 0, hw->mac.
addr
, 0, 
IXGBE_RAH_AV
);

6259 #i‡
	`deföed
(
HAVE_NETDEV_STORAGE_ADDRESS
Ë&& deföed(
NETDEV_HW_ADDR_T_SAN
)

6267 
	`ixgbe_add_ßnmac_√tdev
(
√t_devi˚
 *
dev
)

6269 
îr
 = 0;

6270 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
dev
);

6271 
ixgbe_mac_öfo
 *
mac
 = &
ad≠ãr
->
hw
.mac;

6273 i‡(
	`is_vÆid_ëhî_addr
(
mac
->
ßn_addr
)) {

6274 
	`π∆_lock
();

6275 
îr
 = 
	`dev_addr_add
(
dev
, 
mac
->
ßn_addr
, 
NETDEV_HW_ADDR_T_SAN
);

6276 
	`π∆_u∆ock
();

6278  
îr
;

6288 
	`ixgbe_dñ_ßnmac_√tdev
(
√t_devi˚
 *
dev
)

6290 
îr
 = 0;

6291 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
dev
);

6292 
ixgbe_mac_öfo
 *
mac
 = &
ad≠ãr
->
hw
.mac;

6294 i‡(
	`is_vÆid_ëhî_addr
(
mac
->
ßn_addr
)) {

6295 
	`π∆_lock
();

6296 
îr
 = 
	`dev_addr_dñ
(
dev
, 
mac
->
ßn_addr
, 
NETDEV_HW_ADDR_T_SAN
);

6297 
	`π∆_u∆ock
();

6299  
îr
;

6303 #ifde‡
ETHTOOL_OPS_COMPAT


6310 
	`ixgbe_io˘l
(
√t_devi˚
 *
√tdev
, 
i‰eq
 *
i‰
, 
cmd
)

6312 
cmd
) {

6313 
SIOCETHTOOL
:

6314  
	`ëhtoﬁ_io˘l
(
i‰
);

6316  -
EOPNOTSUPP
;

6321 #ifde‡
CONFIG_NET_POLL_CONTROLLER


6327 
	`ixgbe_√çﬁl
(
√t_devi˚
 *
√tdev
)

6329 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6330 
i
;

6332 #i‚de‡
CONFIG_IXGBE_NAPI


6333 
	`ixgbe_úq_dißbÀ
(
ad≠ãr
);

6335 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_IN_NETPOLL
;

6336 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_MSIX_ENABLED
) {

6337 
num_q_ve˘‹s
 = 
ad≠ãr
->
num_msix_ve˘‹s
 - 
NON_Q_VECTORS
;

6338 
i
 = 0; i < 
num_q_ve˘‹s
; i++) {

6339 
ixgbe_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

6340 
	`ixgbe_msix_˛ón_m™y
(0, 
q_ve˘‹
);

6343 
	`ixgbe_öå
(
ad≠ãr
->
pdev
->
úq
, 
√tdev
);

6345 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_IN_NETPOLL
;

6346 #i‚de‡
CONFIG_IXGBE_NAPI


6347 
	`ixgbe_úq_íabÀ
(
ad≠ãr
, 
åue
,Årue);

6352 #ifde‡
HAVE_NETDEV_SELECT_QUEUE


6353 
u16
 
	`ixgbe_£À˘_queue
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

6355 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
dev
);

6357 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
)

6358  
	`smp_¥o˚ss‹_id
();

6360 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
)

6363  
	`skb_tx_hash
(
dev
, 
skb
);

6367 #ifde‡
HAVE_NET_DEVICE_OPS


6368 c⁄° 
√t_devi˚_›s
 
ixgbe_√tdev_›s
 = {

6369 .
ndo_›í
 = &
ixgbe_›í
,

6370 .
ndo_°›
 = &
ixgbe_˛o£
,

6371 .
ndo_°¨t_xmô
 = &
ixgbe_xmô_‰ame_ps
,

6372 .
ndo_gë_°©s
 = &
ixgbe_gë_°©s
,

6373 .
ndo_£t_rx_mode
 = &
ixgbe_£t_rx_mode
,

6374 .
ndo_£t_mu…iˇ°_li°
 = &
ixgbe_£t_rx_mode
,

6375 .
ndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

6376 .
ndo_£t_mac_addªss
 = &
ixgbe_£t_mac
,

6377 .
ndo_ch™ge_mtu
 = &
ixgbe_ch™ge_mtu
,

6378 #ifde‡
ETHTOOL_OPS_COMPAT


6379 .
ndo_do_io˘l
 = &
ixgbe_io˘l
,

6381 .
ndo_tx_timeout
 = &
ixgbe_tx_timeout
,

6382 .
ndo_vœn_rx_ªgi°î
 = &
ixgbe_vœn_rx_ªgi°î
,

6383 .
ndo_vœn_rx_add_vid
 = &
ixgbe_vœn_rx_add_vid
,

6384 .
ndo_vœn_rx_kûl_vid
 = &
ixgbe_vœn_rx_kûl_vid
,

6385 #ifde‡
CONFIG_NET_POLL_CONTROLLER


6386 .
ndo_pﬁl_c⁄åﬁÀr
 = &
ixgbe_√çﬁl
,

6388 .
ndo_£À˘_queue
 = &
ixgbe_£À˘_queue
,

6393 
	`ixgbe_assign_√tdev_›s
(
√t_devi˚
 *
dev
)

6395 
ixgbe_ad≠ãr
 *
ad≠ãr
;

6396 
ad≠ãr
 = 
	`√tdev_¥iv
(
dev
);

6397 #ifde‡
HAVE_NET_DEVICE_OPS


6398 
dev
->
√tdev_›s
 = &
ixgbe_√tdev_›s
;

6400 
dev
->
›í
 = &
ixgbe_›í
;

6401 
dev
->
°›
 = &
ixgbe_˛o£
;

6402 
dev
->
h¨d_°¨t_xmô
 = &
ixgbe_xmô_‰ame_ps
;

6403 
dev
->
gë_°©s
 = &
ixgbe_gë_°©s
;

6404 #ifde‡
HAVE_SET_RX_MODE


6405 
dev
->
£t_rx_mode
 = &
ixgbe_£t_rx_mode
;

6407 
dev
->
£t_mu…iˇ°_li°
 = &
ixgbe_£t_rx_mode
;

6408 
dev
->
£t_mac_addªss
 = &
ixgbe_£t_mac
;

6409 
dev
->
ch™ge_mtu
 = &
ixgbe_ch™ge_mtu
;

6410 #ifde‡
ETHTOOL_OPS_COMPAT


6411 
dev
->
do_io˘l
 = &
ixgbe_io˘l
;

6413 #ifde‡
HAVE_TX_TIMEOUT


6414 
dev
->
tx_timeout
 = &
ixgbe_tx_timeout
;

6416 #ifde‡
NETIF_F_HW_VLAN_TX


6417 
dev
->
vœn_rx_ªgi°î
 = &
ixgbe_vœn_rx_ªgi°î
;

6418 
dev
->
vœn_rx_add_vid
 = &
ixgbe_vœn_rx_add_vid
;

6419 
dev
->
vœn_rx_kûl_vid
 = &
ixgbe_vœn_rx_kûl_vid
;

6421 #ifde‡
CONFIG_NET_POLL_CONTROLLER


6422 
dev
->
pﬁl_c⁄åﬁÀr
 = &
ixgbe_√çﬁl
;

6424 #ifde‡
HAVE_NETDEV_SELECT_QUEUE


6425 
dev
->
£À˘_queue
 = &
ixgbe_£À˘_queue
;

6428 
	`ixgbe_£t_ëhtoﬁ_›s
(
dev
);

6429 
dev
->
w©chdog_timeo
 = 5 * 
HZ
;

6432 
	#MAX_ADAPTERS
 64

	)

6434 
ad≠ãrs_found
;

6435 
ixgbe_ad≠ãr
 *
ad≠ãrs
[
MAX_ADAPTERS
];

6448 
__devöô
 
	`ixgbe_¥obe
(
pci_dev
 *
pdev
,

6449 c⁄° 
pci_devi˚_id
 *
ít
)

6451 
√t_devi˚
 *
√tdev
;

6452 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
NULL
;

6453 
ixgbe_hw
 *
hw
 = 
NULL
;

6454 
i
, 
îr
, 
pci_usög_dac
;

6455 
u32
 
∑π_num
;

6457 
îr
 = 
	`pci_íabÀ_devi˚
(
pdev
);

6458 i‡(
îr
)

6459  
îr
;

6461 i‡(!
	`pci_£t_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(64)) &&

6462 !
	`pci_£t_c⁄si°ít_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(64))) {

6463 
pci_usög_dac
 = 1;

6465 
îr
 = 
	`pci_£t_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(32));

6466 i‡(
îr
) {

6467 
îr
 = 
	`pci_£t_c⁄si°ít_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(32));

6468 i‡(
îr
) {

6469 
	`dev_îr
(&
pdev
->
dev
, "No usable DMA "

6471 
îr_dma
;

6474 
pci_usög_dac
 = 0;

6477 
îr
 = 
	`pci_ªque°_ªgi⁄s
(
pdev
, 
ixgbe_drivî_«me
);

6478 i‡(
îr
) {

6479 
	`dev_îr
(&
pdev
->
dev
, "pci_ªque°_ªgi⁄†Áûed 0x%x\n", 
îr
);

6480 
îr_pci_ªg
;

6490 
hw
 = 
	`vmÆloc
((
ixgbe_hw
));

6491 i‡(!
hw
) {

6492 
	`¥ötk
(
KERN_INFO
 "UnableÅoállocate memory for LOs fix "

6495 
hw
->
víd‹_id
 = 
pdev
->
víd‹
;

6496 
hw
->
devi˚_id
 = 
pdev
->
devi˚
;

6497 
	`ixgbe_£t_mac_ty≥
(
hw
);

6498 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

6499 
	`pci_dißbÀ_lök_°©e
(
pdev
, 
PCIE_LINK_STATE_L0S
);

6500 
	`v‰ì
(
hw
);

6503 
	`pci_íabÀ_pcõ_îr‹_ªp‹tög
(
pdev
);

6505 
	`pci_£t_ma°î
(
pdev
);

6507 #ifde‡
HAVE_TX_MQ


6508 
√tdev
 = 
	`Æloc_ëhîdev_mq
((
ixgbe_ad≠ãr
), 
MAX_TX_QUEUES
);

6510 
√tdev
 = 
	`Æloc_ëhîdev
((
ixgbe_ad≠ãr
));

6512 i‡(!
√tdev
) {

6513 
îr
 = -
ENOMEM
;

6514 
îr_Æloc_ëhîdev
;

6517 
	`SET_NETDEV_DEV
(
√tdev
, &
pdev
->
dev
);

6519 
	`pci_£t_drvd©a
(
pdev
, 
√tdev
);

6520 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6522 
ad≠ãr
->
√tdev
 =Çetdev;

6523 
ad≠ãr
->
pdev
 =Ödev;

6524 
hw
 = &
ad≠ãr
->hw;

6525 
hw
->
back
 = 
ad≠ãr
;

6526 
ad≠ãr
->
msg_íabÀ
 = (1 << 
DEFAULT_DEBUG_LEVEL_SHIFT
) - 1;

6528 #ifde‡
HAVE_PCI_ERS


6533 
	`pci_ßve_°©e
(
pdev
);

6536 
hw
->
hw_addr
 = 
	`i‹em≠
(
	`pci_ªsour˚_°¨t
(
pdev
, 0),

6537 
	`pci_ªsour˚_Àn
(
pdev
, 0));

6538 i‡(!
hw
->
hw_addr
) {

6539 
îr
 = -
EIO
;

6540 
îr_i‹em≠
;

6543 
i
 = 1; i <= 5; i++) {

6544 i‡(
	`pci_ªsour˚_Àn
(
pdev
, 
i
) == 0)

6548 
	`ixgbe_assign_√tdev_›s
(
√tdev
);

6550 
	`°r˝y
(
√tdev
->
«me
, 
	`pci_«me
(
pdev
));

6552 
ad≠ãr
->
bd_numbî
 = 
ad≠ãrs_found
;

6554 #ifde‡
IXGBE_TCP_TIMER


6555 
ad≠ãr
->
msix_addr
 = 
	`i‹em≠
(
	`pci_ªsour˚_°¨t
(
pdev
, 3),

6556 
	`pci_ªsour˚_Àn
(
pdev
, 3));

6557 i‡(!
ad≠ãr
->
msix_addr
) {

6558 
îr
 = -
EIO
;

6559 
	`¥ötk
("Error in ioremap of BAR3\n");

6560 
îr_m≠_msix
;

6566 
	`öô_timî
(&
ad≠ãr
->
sÂ_timî
);

6567 
ad≠ãr
->
sÂ_timî
.
fun˘i⁄
 = &
ixgbe_sÂ_timî
;

6568 
ad≠ãr
->
sÂ_timî
.
d©a
 = ()ádapter;

6570 
	`INIT_WORK
(&
ad≠ãr
->
sÂ_èsk
, 
ixgbe_sÂ_èsk
);

6573 
	`INIT_WORK
(&
ad≠ãr
->
mu…i•ìd_fibî_èsk
, 
ixgbe_mu…i•ìd_fibî_èsk
);

6576 
	`INIT_WORK
(&
ad≠ãr
->
sÂ_c⁄fig_moduÀ_èsk
,

6577 
ixgbe_sÂ_c⁄fig_moduÀ_èsk
);

6580 
îr
 = 
	`ixgbe_sw_öô
(
ad≠ãr
);

6581 i‡(
îr
)

6582 
îr_sw_öô
;

6588 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FAN_FAIL_CAPABLE
) {

6589 
u32
 
esdp
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_ESDP
);

6590 i‡(
esdp
 & 
IXGBE_ESDP_SDP1
)

6591 
	`DPRINTK
(
PROBE
, 
CRIT
,

6596 
îr
 = 
hw
->
mac
.
›s
.
	`ª£t_hw
(hw);

6597 i‡(
îr
 =
IXGBE_ERR_SFP_NOT_PRESENT
 &&

6598 
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

6604 
	`£t_bô
(
__IXGBE_SFP_MODULE_NOT_FOUND
, &
ad≠ãr
->
°©e
);

6605 
	`mod_timî
(&
ad≠ãr
->
sÂ_timî
,

6606 
	`round_jiffõs
(
jiffõs
 + (2 * 
HZ
)));

6607 
îr
 = 0;

6608 } i‡(
îr
 =
IXGBE_ERR_SFP_NOT_SUPPORTED
) {

6609 
	`DPRINTK
(
PROBE
, 
ERR
, "failedÅoÜoad becauseán "

6611 
îr_sw_öô
;

6612 } i‡(
îr
) {

6613 
	`DPRINTK
(
PROBE
, 
ERR
, "HW Inô faûed: %d\n", 
îr
);

6614 
îr_sw_öô
;

6620 
	`ixgbe_check_›ti⁄s
(
ad≠ãr
);

6622 #ifde‡
MAX_SKB_FRAGS


6623 #ifde‡
NETIF_F_HW_VLAN_TX


6624 
√tdev
->
„©uªs
 = 
NETIF_F_SG
 |

6625 
NETIF_F_IP_CSUM
 |

6626 
NETIF_F_HW_VLAN_TX
 |

6627 
NETIF_F_HW_VLAN_RX
 |

6628 
NETIF_F_HW_VLAN_FILTER
;

6631 
√tdev
->
„©uªs
 = 
NETIF_F_SG
 | 
NETIF_F_IP_CSUM
;

6634 #ifde‡
NETIF_F_IPV6_CSUM


6635 
√tdev
->
„©uªs
 |
NETIF_F_IPV6_CSUM
;

6637 #ifde‡
NETIF_F_TSO


6638 
√tdev
->
„©uªs
 |
NETIF_F_TSO
;

6639 #ifde‡
NETIF_F_TSO6


6640 
√tdev
->
„©uªs
 |
NETIF_F_TSO6
;

6643 #ifde‡
NETIF_F_GRO


6644 
√tdev
->
„©uªs
 |
NETIF_F_GRO
;

6646 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
)

6647 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_RSS_ENABLED
;

6648 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_VMDQ_ENABLED
)

6649 
ad≠ãr
->
Êags
 &~(
IXGBE_FLAG_FDIR_HASH_CAPABLE


6650 | 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
);

6651 #i‚de‡
IXGBE_NO_HW_RSC


6652 i‡(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_CAPABLE
) {

6653 #ifde‡
NETIF_F_LRO


6654 
√tdev
->
„©uªs
 |
NETIF_F_LRO
;

6656 #i‚de‡
IXGBE_NO_LRO


6657 
ad≠ãr
->
Êags2
 &~
IXGBE_FLAG2_SWLRO_ENABLED
;

6659 
ad≠ãr
->
Êags2
 |
IXGBE_FLAG2_RSC_ENABLED
;

6662 #i‚de‡
IXGBE_NO_LRO


6663 #ifde‡
NETIF_F_LRO


6664 
√tdev
->
„©uªs
 |
NETIF_F_LRO
;

6666 
ad≠ãr
->
Êags2
 |
IXGBE_FLAG2_SWLRO_ENABLED
;

6668 #i‚de‡
IXGBE_NO_HW_RSC


6669 
ad≠ãr
->
Êags2
 &~
IXGBE_FLAG2_RSC_ENABLED
;

6672 #ifde‡
HAVE_NETDEV_VLAN_FEATURES


6673 #ifde‡
NETIF_F_TSO


6674 
√tdev
->
vœn_„©uªs
 |
NETIF_F_TSO
;

6675 #ifde‡
NETIF_F_TSO6


6676 
√tdev
->
vœn_„©uªs
 |
NETIF_F_TSO6
;

6679 
√tdev
->
vœn_„©uªs
 |
NETIF_F_IP_CSUM
;

6680 
√tdev
->
vœn_„©uªs
 |
NETIF_F_SG
;

6683 #ifde‡
CONFIG_DCB


6684 
√tdev
->
dcb∆_›s
 = &dcbnl_ops;

6687 i‡(
pci_usög_dac
)

6688 
√tdev
->
„©uªs
 |
NETIF_F_HIGHDMA
;

6692 i‡(
hw
->
ì¥om
.
›s
.
vÆid©e_checksum
 &&

6693 (
hw
->
ì¥om
.
›s
.
	`vÆid©e_checksum
(hw, 
NULL
) < 0)) {

6694 
	`DPRINTK
(
PROBE
, 
ERR
, "The EEPROM Checksum Is Not Valid\n");

6695 
îr
 = -
EIO
;

6696 
îr_sw_öô
;

6699 
	`mem˝y
(
√tdev
->
dev_addr
, 
hw
->
mac
.
≥rm_addr
,Çëdev->
addr_Àn
);

6700 #ifde‡
ETHTOOL_GPERMADDR


6701 
	`mem˝y
(
√tdev
->
≥rm_addr
, 
hw
->
mac
.≥rm_addr,Çëdev->
addr_Àn
);

6703 i‡(
	`ixgbe_vÆid©e_mac_addr
(
√tdev
->
≥rm_addr
)) {

6704 
	`DPRINTK
(
PROBE
, 
INFO
, "invalid MACáddress\n");

6705 
îr
 = -
EIO
;

6706 
îr_sw_öô
;

6709 i‡(
	`ixgbe_vÆid©e_mac_addr
(
√tdev
->
dev_addr
)) {

6710 
	`DPRINTK
(
PROBE
, 
INFO
, "invalid MACáddress\n");

6711 
îr
 = -
EIO
;

6712 
îr_sw_öô
;

6716 
	`öô_timî
(&
ad≠ãr
->
w©chdog_timî
);

6717 
ad≠ãr
->
w©chdog_timî
.
fun˘i⁄
 = &
ixgbe_w©chdog
;

6718 
ad≠ãr
->
w©chdog_timî
.
d©a
 = ()adapter;

6720 
	`INIT_WORK
(&
ad≠ãr
->
ª£t_èsk
, 
ixgbe_ª£t_èsk
);

6721 
	`INIT_WORK
(&
ad≠ãr
->
w©chdog_èsk
, 
ixgbe_w©chdog_èsk
);

6723 
îr
 = 
	`ixgbe_öô_öãºu±_scheme
(
ad≠ãr
);

6724 i‡(
îr
)

6725 
îr_sw_öô
;

6727 
pdev
->
devi˚
) {

6728 
IXGBE_DEV_ID_82599_KX4
:

6729 
ad≠ãr
->
wﬁ
 = (
IXGBE_WUFC_MAG
 | 
IXGBE_WUFC_EX
 |

6730 
IXGBE_WUFC_MC
 | 
IXGBE_WUFC_BC
);

6732 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_GRC
,

6733 (
	`IXGBE_READ_REG
(
hw
, 
IXGBE_GRC
Ë& ~
IXGBE_GRC_APME
));

6736 
ad≠ãr
->
wﬁ
 = 0;

6739 
	`devi˚_öô_wakeup
(&
ad≠ãr
->
pdev
->
dev
, 
åue
);

6740 
	`devi˚_£t_wakeup_íabÀ
(&
ad≠ãr
->
pdev
->
dev
,ád≠ãr->
wﬁ
);

6743 
	`ixgbe_ªad_ì¥om
(
hw
, 0x29, &
ad≠ãr
->
ì¥om_vîsi⁄
);

6746 
îr
 = 
hw
->
mac
.
›s
.
	`°¨t_hw
(hw);

6747 i‡(
îr
 =
IXGBE_ERR_EEPROM_VERSION
) {

6749 
	`DPRINTK
(
PROBE
, 
INFO
, "This device isáÖre-productionádapter/"

6756 i‡(
hw
->
mac
.
›s
.
gë_bus_öfo
)

6757 
hw
->
mac
.
›s
.
	`gë_bus_öfo
(hw);

6760 
	`°r˝y
(
√tdev
->
«me
, "xge%d");

6761 
îr
 = 
	`ªgi°î_√tdev
(
√tdev
);

6762 i‡(
îr
)

6763 
îr_ªgi°î
;

6765 
ad≠ãr
->
√tdev_ªgi°îed
 = 
åue
;

6768 
	`√tif_ˇºõr_off
(
√tdev
);

6770 
	`√tif_tx_°›_Æl_queues
(
√tdev
);

6772 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
 ||

6773 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)

6774 
	`INIT_WORK
(&
ad≠ãr
->
fdú_ªöô_èsk
, 
ixgbe_fdú_ªöô_èsk
);

6776 #ifde‡
IXGBE_DCA


6777 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_CAPABLE
) {

6778 
îr
 = 
	`dˇ_add_ªque°î
(&
pdev
->
dev
);

6779 
îr
) {

6781 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCA_ENABLED
;

6782 
	`ixgbe_£tup_dˇ
(
ad≠ãr
);

6786 
	`DPRINTK
(
PROBE
, 
INFO
, "No DCAÖrovider found. Please "

6790 
	`DPRINTK
(
PROBE
, 
INFO
, "DCAÑegistration failed: %d\n",

6791 
îr
);

6799 
	`DPRINTK
(
PROBE
, 
INFO
, "(PCI Express:%s:%s) ",

6800 ((
hw
->
bus
.
•ìd
 =
ixgbe_bus_•ìd_5000
) ? "5.0Gb/s":

6801 (
hw
->
bus
.
•ìd
 =
ixgbe_bus_•ìd_2500
) ? "2.5Gb/s":"Unknown"),

6802 (
hw
->
bus
.
width
 =
ixgbe_bus_width_pcõ_x8
) ? "Width x8" :

6803 (
hw
->
bus
.
width
 =
ixgbe_bus_width_pcõ_x4
) ? "Width x4" :

6804 (
hw
->
bus
.
width
 =
ixgbe_bus_width_pcõ_x1
) ? "Width x1" :

6808 
i
 = 0; i < 6; i++)

6809 
	`¥ötk
("%2.2x%c", 
√tdev
->
dev_addr
[
i
], i == 5 ? '\n' : ':');

6811 
	`ixgbe_ªad_pba_num
(
hw
, &
∑π_num
);

6812 i‡(
	`ixgbe_is_sÂ
(
hw
Ë&& hw->
phy
.
sÂ_ty≥
 !
ixgbe_sÂ_ty≥_nŸ_¥e£¡
)

6813 
	`DPRINTK
(
PROBE
, 
INFO
, "MAC: %d, PHY: %d, SFP+: %d, PBA No: %06x-%03x\n",

6814 
hw
->
mac
.
ty≥
, hw->
phy
.ty≥, hw->phy.
sÂ_ty≥
,

6815 (
∑π_num
 >> 8), (part_num & 0xff));

6817 
	`DPRINTK
(
PROBE
, 
INFO
, "MAC: %d, PHY: %d, PBA No: %06x-%03x\n",

6818 
hw
->
mac
.
ty≥
, hw->
phy
.type,

6819 (
∑π_num
 >> 8), (part_num & 0xff));

6821 i‡(
hw
->
bus
.
width
 <
ixgbe_bus_width_pcõ_x4
) {

6822 
	`DPRINTK
(
PROBE
, 
WARNING
, "PCI-Express bandwidthávailable for "

6825 
	`DPRINTK
(
PROBE
, 
WARNING
, "For optimalÖerformanceá x8 "

6829 #i‚de‡
IXGBE_NO_LRO


6830 i‡(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_SWLRO_ENABLED
)

6831 
	`DPRINTK
(
PROBE
, 
INFO
, "Internal LRO isÉnabled \n");

6833 
	`DPRINTK
(
PROBE
, 
INFO
, "LRO is disabled \n");

6835 #i‚de‡
IXGBE_NO_HW_RSC


6836 i‡(
ad≠ãr
->
Êags2
 & 
IXGBE_FLAG2_RSC_ENABLED
)

6837 
	`DPRINTK
(
PROBE
, 
INFO
, "HW RSC isÉnabled \n");

6839 #i‡
	`deföed
(
HAVE_NETDEV_STORAGE_ADDRESS
Ë&& deföed(
NETDEV_HW_ADDR_T_SAN
)

6841 
	`ixgbe_add_ßnmac_√tdev
(
√tdev
);

6846 
√tdev
->
„©uªs
 = 0;

6847 
√tdev
->
vœn_„©uªs
 = 0;

6850 
ad≠ãr
->
numa_node
 = (
pdev
->
bus
->
numbî
 & 0x80) ? 1 : 0;

6851 
	`£t_dev_node
(&
pdev
->
dev
, 
ad≠ãr
->
numa_node
);

6853 
	`DPRINTK
(
PROBE
, 
INFO
, "Intel(R) 10 Gigabit Network Connection\n");

6854 
	`DPRINTK
(
PROBE
, 
INFO
, "NUMAÇode = %d, flags = 0x%x\n",

6855 
ad≠ãr
->
numa_node
,ád≠ãr->
Êags
);

6857 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_RX_KERNEL_ENABLE
) {

6858 
	`DPRINTK
(
PROBE
, 
INFO
, "ReceivedÖackets will beÖassedÅo "

6861 
	`DPRINTK
(
PROBE
, 
INFO
, "ReceivedÖackets will be discarded "

6864 
ad≠ãrs
[
ad≠ãrs_found
] = 
ad≠ãr
;

6865 
ad≠ãrs_found
++;

6868 
îr_ªgi°î
:

6869 
	`ixgbe_˛ór_öãºu±_scheme
(
ad≠ãr
);

6870 
	`ixgbe_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

6871 
îr_sw_öô
:

6872 
	`˛ór_bô
(
__IXGBE_SFP_MODULE_NOT_FOUND
, &
ad≠ãr
->
°©e
);

6873 
	`dñ_timî_sync
(&
ad≠ãr
->
sÂ_timî
);

6874 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
sÂ_èsk
);

6875 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
mu…i•ìd_fibî_èsk
);

6876 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
sÂ_c⁄fig_moduÀ_èsk
);

6877 #ifde‡
IXGBE_TCP_TIMER


6878 
	`iounm≠
(
ad≠ãr
->
msix_addr
);

6879 
îr_m≠_msix
:

6881 
	`iounm≠
(
hw
->
hw_addr
);

6882 
îr_i‹em≠
:

6883 
	`‰ì_√tdev
(
√tdev
);

6884 
îr_Æloc_ëhîdev
:

6885 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

6886 
îr_pci_ªg
:

6887 
îr_dma
:

6888 
	`pci_dißbÀ_devi˚
(
pdev
);

6889  
îr
;

6901 
__devexô
 
	`ixgbe_ªmove
(
pci_dev
 *
pdev
)

6903 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

6904 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6906 
	`£t_bô
(
__IXGBE_DOWN
, &
ad≠ãr
->
°©e
);

6911 
	`˛ór_bô
(
__IXGBE_SFP_MODULE_NOT_FOUND
, &
ad≠ãr
->
°©e
);

6912 
	`dñ_timî_sync
(&
ad≠ãr
->
w©chdog_timî
);

6913 
	`dñ_timî_sync
(&
ad≠ãr
->
sÂ_timî
);

6914 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
w©chdog_èsk
);

6915 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
sÂ_èsk
);

6916 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
 ||

6917 
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)

6918 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
fdú_ªöô_èsk
);

6919 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
mu…i•ìd_fibî_èsk
);

6920 
	`ˇn˚l_w‹k_sync
(&
ad≠ãr
->
sÂ_c⁄fig_moduÀ_èsk
);

6921 
	`Êush_scheduÀd_w‹k
();

6923 #i‡
	`deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

6924 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCA_ENABLED
) {

6925 
ad≠ãr
->
Êags
 &~
IXGBE_FLAG_DCA_ENABLED
;

6926 
	`dˇ_ªmove_ªque°î
(&
pdev
->
dev
);

6927 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_DCA_CTRL
, 1);

6931 #i‡
	`deföed
(
HAVE_NETDEV_STORAGE_ADDRESS
Ë&& deföed(
NETDEV_HW_ADDR_T_SAN
)

6933 
	`ixgbe_dñ_ßnmac_√tdev
(
√tdev
);

6936 i‡(
ad≠ãr
->
√tdev_ªgi°îed
) {

6937 
	`uƒegi°î_√tdev
(
√tdev
);

6938 
ad≠ãr
->
√tdev_ªgi°îed
 = 
Ál£
;

6941 
	`ixgbe_˛ór_öãºu±_scheme
(
ad≠ãr
);

6942 
	`ixgbe_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

6944 #ifde‡
IXGBE_TCP_TIMER


6945 
	`iounm≠
(
ad≠ãr
->
msix_addr
);

6947 
	`iounm≠
(
ad≠ãr
->
hw
.
hw_addr
);

6948 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

6950 
	`DPRINTK
(
PROBE
, 
INFO
, "complete\n");

6951 
	`‰ì_√tdev
(
√tdev
);

6953 
	`pci_dißbÀ_pcõ_îr‹_ªp‹tög
(
pdev
);

6955 
	`pci_dißbÀ_devi˚
(
pdev
);

6958 
u16
 
	`ixgbe_ªad_pci_cfg_w‹d
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
)

6960 
u16
 
vÆue
;

6961 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
hw
->
back
;

6963 
	`pci_ªad_c⁄fig_w‹d
(
ad≠ãr
->
pdev
, 
ªg
, &
vÆue
);

6964  
vÆue
;

6967 
	`ixgbe_wrôe_pci_cfg_w‹d
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u16
 
vÆue
)

6969 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
hw
->
back
;

6971 
	`pci_wrôe_c⁄fig_w‹d
(
ad≠ãr
->
pdev
, 
ªg
, 
vÆue
);

6974 #ifde‡
HAVE_PCI_ERS


6983 
pci_îs_ªsu…_t
 
	`ixgbe_io_îr‹_dëe˘ed
(
pci_dev
 *
pdev
,

6984 
pci_ch™√l_°©e_t
 
°©e
)

6986 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

6987 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6989 
	`√tif_devi˚_dëach
(
√tdev
);

6991 i‡(
°©e
 =
pci_ch™√l_io_≥rm_Áûuª
)

6992  
PCI_ERS_RESULT_DISCONNECT
;

6994 i‡(
	`√tif_ru¬ög
(
√tdev
))

6995 
	`ixgbe_down
(
ad≠ãr
);

6996 
	`pci_dißbÀ_devi˚
(
pdev
);

6999  
PCI_ERS_RESULT_NEED_RESET
;

7008 
pci_îs_ªsu…_t
 
	`ixgbe_io_¶Ÿ_ª£t
(
pci_dev
 *
pdev
)

7010 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

7011 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

7012 
pci_îs_ªsu…_t
 
ªsu…
;

7014 i‡(
	`pci_íabÀ_devi˚
(
pdev
)) {

7015 
	`DPRINTK
(
PROBE
, 
ERR
,

7017 
ªsu…
 = 
PCI_ERS_RESULT_DISCONNECT
;

7019 
	`pci_£t_ma°î
(
pdev
);

7020 
	`pci_ª°‹e_°©e
(
pdev
);

7022 
	`pci_wake_‰om_d3
(
pdev
, 
Ál£
);

7024 
	`ixgbe_ª£t
(
ad≠ãr
);

7025 
	`IXGBE_WRITE_REG
(&
ad≠ãr
->
hw
, 
IXGBE_WUS
, ~0);

7026 
ªsu…
 = 
PCI_ERS_RESULT_RECOVERED
;

7029 
	`pci_˛ónup_´r_unc‹ª˘_îr‹_°©us
(
pdev
);

7031  
ªsu…
;

7041 
	`ixgbe_io_ªsume
(
pci_dev
 *
pdev
)

7043 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

7044 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

7046 i‡(
	`√tif_ru¬ög
(
√tdev
)) {

7047 i‡(
	`ixgbe_up
(
ad≠ãr
)) {

7048 
	`DPRINTK
(
PROBE
, 
INFO
, "ixgbe_up failedáfterÑeset\n");

7053 
	`√tif_devi˚_©èch
(
√tdev
);

7056 
pci_îr‹_h™dÀrs
 
ixgbe_îr_h™dÀr
 = {

7057 .
îr‹_dëe˘ed
 = 
ixgbe_io_îr‹_dëe˘ed
,

7058 .
¶Ÿ_ª£t
 = 
ixgbe_io_¶Ÿ_ª£t
,

7059 .
ªsume
 = 
ixgbe_io_ªsume
,

7063 
pci_drivî
 
ixgbe_drivî
 = {

7064 .
«me
 = 
ixgbe_drivî_«me
,

7065 .
id_èbÀ
 = 
ixgbe_pci_tbl
,

7066 .
¥obe
 = 
ixgbe_¥obe
,

7067 .
ªmove
 = 
	`__devexô_p
(
ixgbe_ªmove
),

7068 #ifde‡
CONFIG_PM


7069 .
su•íd
 = 
ixgbe_su•íd
,

7070 .
ªsume
 = 
ixgbe_ªsume
,

7072 #i‚de‡
USE_REBOOT_NOTIFIER


7073 .
shutdown
 = 
ixgbe_shutdown
,

7075 #ifde‡
HAVE_PCI_ERS


7076 .
îr_h™dÀr
 = &
ixgbe_îr_h™dÀr


7080 
boﬁ
 
	`ixgbe_is_ixgbe
(
pci_dev
 *
pcidev
)

7082 i‡(
	`pci_dev_drivî
(
pcidev
Ë!&
ixgbe_drivî
)

7083  
Ál£
;

7085  
åue
;

7088 #i‡
MAX_PACKET_SIZE
 * 
MAX_CHUNK_SIZE
 % 
PAGE_SIZE
 != 0

7089 #îr‹ 
mu°
 
be
 
a
 
mu…ùÀ
 
of
 
PAGE_SIZE
!

7092 
	`ps_›í
(
öode
 *öode, 
fûe
 *
fûp
)

7094 
ps_c⁄ãxt
 *
c⁄ãxt
;

7096 
c⁄ãxt
 = 
	`kmÆloc_node
((
ps_c⁄ãxt
),

7097 
GFP_USER
, 
	`numa_node_id
());

7098 i‡(!
c⁄ãxt
) {

7099 
	`¥ötk
(
KERN_ERR
 "Allocation ofÖs_context failed\n");

7100  -
ENOMEM
;

7103 
	`mem£t
(
c⁄ãxt
, 0, (
ps_c⁄ãxt
));

7105 
c⁄ãxt
->
öfo
 = 
	`kmÆloc_node
((
ps_pkt_öfo
Ë* 
MAX_CHUNK_SIZE
,

7106 
GFP_USER
, 
	`numa_node_id
());

7107 i‡(!
c⁄ãxt
->
öfo
) {

7108 
	`¥ötk
(
KERN_ERR
 "Allocation ofÖs_context->info failed\n");

7109  -
ENOMEM
;

7112 
	`öô_MUTEX
(&
c⁄ãxt
->
£m
);

7113 
	`öô_waôqueue_hód
(&
c⁄ãxt
->
wq
);

7115 
c⁄ãxt
->
num_©èched
 = 0;

7116 
c⁄ãxt
->
√xt_rög
 = 0;

7118 
c⁄ãxt
->
num_bufs
 = 0;

7120 
fûp
->
¥iv©e_d©a
 = 
c⁄ãxt
;

7125 
	`ps_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

7127 
ps_c⁄ãxt
 *
c⁄ãxt
 = 
fûp
->
¥iv©e_d©a
;

7128 
i
;

7130 i‡(!
c⁄ãxt
)

7133 
i
 = 0; i < 
c⁄ãxt
->
num_©èched
; i++) {

7134 
ixgbe_rög
 *
rx_rög
;

7136 
rx_rög
 = 
c⁄ãxt
->
rx_rögs
[
i
];

7137 
	`•ö_lock_bh
(&
rx_rög
->
lock
);

7139 
rx_rög
->
wq
 = 
NULL
;

7143 
	`ixgbe_úq_íabÀ_queues
(
rx_rög
->
ad≠ãr
, (
u64
)1 <<Ñx_rög->
ªg_idx
);

7145 
	`•ö_u∆ock_bh
(&
rx_rög
->
lock
);

7148 
	`k‰ì
(
c⁄ãxt
->
öfo
);

7149 
	`k‰ì
(
c⁄ãxt
);

7150 
fûp
->
¥iv©e_d©a
 = 
NULL
;

7155 
	`ps_vma_›í
(
vm_¨ó_°ru˘
 *
vma
)

7157 
fûe
 *
fûp
 = 
vma
->
vm_fûe
;

7158 
ps_c⁄ãxt
 *
c⁄ãxt
;

7159 
i
;

7161 i‡(!
fûp
) {

7162 
	`¥ötk
(
KERN_ERR
 "vma->vm_file == NULL\n");

7166 
c⁄ãxt
 = 
fûp
->
¥iv©e_d©a
;

7168 i‡(!
c⁄ãxt
) {

7169 
	`¥ötk
(
KERN_ERR
 "context == NULL\n");

7173 
i
 = 0; i < 
c⁄ãxt
->
num_bufs
; i++)

7174 i‡(
c⁄ãxt
->
ubufs
[
i
] =(*)
vma
->
vm_°¨t
)

7177 i‡(
i
 =
c⁄ãxt
->
num_bufs
) {

7178 
	`¥ötk
(
KERN_ERR
 "unknow¿addªss: %p\n", (*)
vma
->
vm_°¨t
);

7182 
c⁄ãxt
->
buf_ªf˙t
[
i
]++;

7185 
	`ps_vma_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

7187 
fûe
 *
fûp
 = 
vma
->
vm_fûe
;

7188 
ps_c⁄ãxt
 *
c⁄ãxt
;

7189 
i
;

7191 i‡(!
fûp
) {

7192 
	`¥ötk
(
KERN_ERR
 "vma->vm_file == NULL\n");

7196 
c⁄ãxt
 = 
fûp
->
¥iv©e_d©a
;

7198 i‡(!
c⁄ãxt
) {

7199 
	`¥ötk
(
KERN_ERR
 "context == NULL\n");

7203 
i
 = 0; i < 
c⁄ãxt
->
num_bufs
; i++)

7204 i‡(
c⁄ãxt
->
ubufs
[
i
] =(*)
vma
->
vm_°¨t
)

7207 i‡(
i
 =
c⁄ãxt
->
num_bufs
) {

7208 
	`¥ötk
(
KERN_ERR
 "unknow¿addªss: %p\n", (*)
vma
->
vm_°¨t
);

7212 i‡(--
c⁄ãxt
->
buf_ªf˙t
[
i
] <= 0) {

7213 *
addr
;

7214 
size
;

7216 
size
 = 
	`PAGE_ALIGN
(
MAX_PACKET_SIZE
 * 
MAX_CHUNK_SIZE
);

7217 
addr
 = 
c⁄ãxt
->
kbufs
[
i
];

7219 
size
 > 0) {

7220 
	`CÀ¨PageRe£rved
(
	`vmÆloc_to_∑ge
(
addr
));

7221 
addr
 +
PAGE_SIZE
;

7222 
size
 -
PAGE_SIZE
;

7225 
	`v‰ì
(
c⁄ãxt
->
kbufs
[
i
]);

7227 
i
 < 
c⁄ãxt
->
num_bufs
 - 1) {

7228 
c⁄ãxt
->
kbufs
[
i
] = context->kbufs[i + 1];

7229 
c⁄ãxt
->
ubufs
[
i
] = context->ubufs[i + 1];

7230 
c⁄ãxt
->
buf_ªf˙t
[
i
] = context->buf_refcnt[i + 1];

7231 
i
++;

7234 
c⁄ãxt
->
num_bufs
--;

7238 
vm_›î©i⁄s_°ru˘
 
ps_vm_›s
 = {

7239 .
›í
 = 
ps_vma_›í
,

7240 .
˛o£
 = 
ps_vma_˛o£
,

7243 
	`ps_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
)

7245 
ps_c⁄ãxt
 *
c⁄ãxt
 = 
fûp
->
¥iv©e_d©a
;

7246 
up
;

7247 *
buf
;

7248 *
kp
;

7249 
îr
 = 0;

7250 
size
;

7252 i‡(!
c⁄ãxt
) {

7253 
	`¥ötk
("ps_mmap() failed: context == NULL\n");

7254  -
EINVAL
;

7257 i‡(
c⁄ãxt
->
num_bufs
 >
MAX_BUFS
) {

7258 
	`¥ötk
("ps_mm≠(ËÁûed:Éx˚edög %d bufs\n", 
MAX_BUFS
);

7259  -
ENOMEM
;

7262 
size
 = 
	`PAGE_ALIGN
(
MAX_PACKET_SIZE
 * 
MAX_CHUNK_SIZE
);

7263 
buf
 = 
	`vmÆloc_node
(
size
, 
	`numa_node_id
());

7265 i‡(!
buf
) {

7266 
	`¥ötk
(
KERN_ERR
 "Allocation ofá mmaped buffer failed"

7268 
size
);

7269  -
ENOMEM
;

7272 
	`mem£t
(
buf
, 0, 
size
);

7274 i‡(
vma
->
vm_íd
 - vma->
vm_°¨t
 !
size
) {

7275 
	`¥ötk
("ps_mmap() failed: invalid size\n");

7276  -
EINVAL
;

7279 i‡(
vma
->
vm_pgoff
) {

7280 
	`¥ötk
("ps_mmap() failed: vma->vm_pgoff != 0\n");

7281  -
EINVAL
;

7284 
kp
 = 
buf
;

7285 
up
 = 
vma
->
vm_°¨t
; u∞< vma->
vm_íd
; u∞+
PAGE_SIZE
) {

7286 
∑ge
 *∑gê
	`vmÆloc_to_∑ge
(
kp
);

7287 
	`SëPageRe£rved
(
∑ge
);

7288 
îr
 = 
	`vm_ö£π_∑ge
(
vma
, 
up
, 
∑ge
);

7289 i‡(
îr
)

7291 
kp
 +
PAGE_SIZE
;

7294 i‡(
îr
) {

7295 
kp
 = 
buf
; 
size
 > 0; k∞+
PAGE_SIZE
, size -= PAGE_SIZE)

7296 
	`CÀ¨PageRe£rved
(
	`vmÆloc_to_∑ge
(
kp
));

7297 
	`v‰ì
(
buf
);

7298 
	`¥ötk
(
KERN_ERR
 "ps_mm≠(ËÁûed!Éº=%d\n", 
îr
);

7300 
i
 = 
c⁄ãxt
->
num_bufs
;

7302 
c⁄ãxt
->
kbufs
[
i
] = 
buf
;

7303 
c⁄ãxt
->
ubufs
[
i
] = (*)
vma
->
vm_°¨t
;

7304 
c⁄ãxt
->
num_bufs
++;

7306 
vma
->
vm_›s
 = &
ps_vm_›s
;

7307 
	`ps_vma_›í
(
vma
);

7310  
îr
;

7313 
	`ps_li°_devi˚s
(
ps_devi˚
 
__u£r
 *
devi˚s_u§
)

7315 
ps_devi˚
 *
devi˚s
;

7316 
i
;

7317 
n
;

7319 
devi˚s
 = 
	`kmÆloc
((
ps_devi˚
Ë* 
MAX_DEVICES
, 
GFP_USER
);

7320 i‡(!
devi˚s
) {

7321 
	`¥ötk
(
KERN_ERR
 "Allocation of devices failed\n");

7322  -
ENOMEM
;

7325 
n
 = 
	`mö
(
MAX_DEVICES
, 
ad≠ãrs_found
);

7327 
i
 = 0; i < 
n
; i++) {

7328 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
ad≠ãrs
[
i
];

7329 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

7330 
ö_devi˚
 *
ödev
;

7332 
	`°r˝y
(
devi˚s
[
i
].
«me
, 
√tdev
->name);

7333 
devi˚s
[
i
].
ifödex
 = i;

7334 
devi˚s
[
i
].
num_rx_queues
 = 
ad≠ãr
->num_rx_queues;

7335 
devi˚s
[
i
].
num_tx_queues
 = 
ad≠ãr
->num_tx_queues;

7336 
	`mem˝y
(
devi˚s
[
i
].
dev_addr
, 
√tdev
->dev_addr, 
ETH_ALEN
);

7338 
devi˚s
[
i
].
ù_addr
 = 0;

7340 
ödev
 = 
	`ö_dev_gë
(
√tdev
);

7341 i‡(!
ödev
)

7344 i‡(
ödev
->
iÁ_li°
)

7345 
devi˚s
[
i
].
ù_addr
 = 
ödev
->
iÁ_li°
->
iÁ_loˇl
;

7347 
	`ö_dev_put
(
ödev
);

7350 i‡(
	`c›y_to_u£r
(
devi˚s_u§
, 
devi˚s
,

7351 
n
 * (
ps_devi˚
)))

7352  -
EFAULT
;

7354 
	`k‰ì
(
devi˚s
);

7356  
n
;

7359 
	`ps_©èch_rx_devi˚
(
ps_c⁄ãxt
 *
c⁄ãxt
,

7360 
ps_queue
 
__u£r
 *
queue_u§
)

7362 
ps_queue
 
queue
;

7363 
ixgbe_ad≠ãr
 *
ad≠ãr
;

7364 
ixgbe_rög
 *
rx_rög
;

7366 i‡(
	`c›y_‰om_u£r
(&
queue
, 
queue_u§
, (
ps_queue
)))

7367  -
EFAULT
;

7369 i‡(
queue
.
ifödex
 < 0 || queue.ifödex >
ad≠ãrs_found
) {

7370 
	`¥ötk
(
KERN_ERR
 "ps_attach_rx_device(): invalid ifindex\n");

7371  -
EINVAL
;

7374 
ad≠ãr
 = 
ad≠ãrs
[
queue
.
ifödex
];

7375 i‡(
queue
.
qidx
 < 0 || queue.qidx >
ad≠ãr
->
num_rx_queues
) {

7376 
	`¥ötk
(
KERN_ERR
 "ps_attach_rx_device(): invalid qidx\n");

7377  -
EINVAL
;

7380 
rx_rög
 = &
ad≠ãr
->rx_rög[
queue
.
qidx
];

7381 i‡(!
rx_rög
) {

7382 
	`¥ötk
(
KERN_ERR
 "ps_attach_rx_device(): NULLÑx_ring[i]?\n");

7383  -
EINVAL
;

7386 
	`•ö_lock_bh
(&
rx_rög
->
lock
);

7388 i‡(
rx_rög
->
wq
) {

7389 
	`¥ötk
(
KERN_ERR
 "ps_attach_rx_device():álready held\n");

7390 
	`•ö_u∆ock_bh
(&
rx_rög
->
lock
);

7391  -
EBUSY
;

7394 
rx_rög
->
wq
 = &
c⁄ãxt
->wq;

7398 
	`ixgbe_úq_dißbÀ_queues
(
rx_rög
->
ad≠ãr
, (
u64
)1 <<Ñx_rög->
ªg_idx
);

7400 
	`•ö_u∆ock_bh
(&
rx_rög
->
lock
);

7402 
c⁄ãxt
->
rx_rögs
[c⁄ãxt->
num_©èched
] = 
rx_rög
;

7403 
c⁄ãxt
->
num_©èched
++;

7408 
	`ps_dëach_rx_devi˚
(
ps_c⁄ãxt
 *
c⁄ãxt
,

7409 
ps_queue
 
__u£r
 *
queue_u§
)

7411 
ps_queue
 
queue
;

7412 
ixgbe_ad≠ãr
 *
ad≠ãr
;

7413 
ixgbe_rög
 *
rx_rög
;

7414 
i
;

7416 i‡(
	`c›y_‰om_u£r
(&
queue
, 
queue_u§
, (
ps_queue
)))

7417  -
EFAULT
;

7419 i‡(
queue
.
ifödex
 < 0 || queue.ifödex >
ad≠ãrs_found
) {

7420 
	`¥ötk
(
KERN_ERR
 "ps_detach_rx_device(): invalid ifindex\n");

7421  -
EINVAL
;

7424 
ad≠ãr
 = 
ad≠ãrs
[
queue
.
ifödex
];

7425 i‡(
queue
.
qidx
 < 0 || queue.qidx >
ad≠ãr
->
num_rx_queues
) {

7426 
	`¥ötk
(
KERN_ERR
 "ps_detach_rx_device(): invalid qidx\n");

7427  -
EINVAL
;

7430 
rx_rög
 = &
ad≠ãr
->rx_rög[
queue
.
qidx
];

7431 i‡(!
rx_rög
) {

7432 
	`¥ötk
(
KERN_ERR
 "ps_detach_rx_device(): NULLÑx_ring[i]?\n");

7433  -
EINVAL
;

7436 
	`•ö_lock_bh
(&
rx_rög
->
lock
);

7438 i‡(!
rx_rög
->
wq
) {

7439 
	`¥ötk
(
KERN_ERR
 "ps_detach_rx_device():Çot held\n");

7440 
	`•ö_u∆ock_bh
(&
rx_rög
->
lock
);

7441  -
EBUSY
;

7444 i‡(
rx_rög
->
wq
 !&
c⁄ãxt
->wq) {

7445 
	`¥ötk
(
KERN_ERR
 "ps_detach_rx_device(): owned byánother\n");

7446 
	`•ö_u∆ock_bh
(&
rx_rög
->
lock
);

7447  -
EBUSY
;

7450 
rx_rög
->
wq
 = 
NULL
;

7454 
	`ixgbe_úq_íabÀ_queues
(
rx_rög
->
ad≠ãr
, (
u64
)1 <<Ñx_rög->
ªg_idx
);

7456 
	`•ö_u∆ock_bh
(&
rx_rög
->
lock
);

7458 
i
 = 0; i < 
c⁄ãxt
->
num_©èched
; i++)

7459 i‡(
c⁄ãxt
->
rx_rögs
[
i
] =
rx_rög
) {

7460 i‡(
c⁄ãxt
->
√xt_rög
 > 
i
)

7461 
c⁄ãxt
->
√xt_rög
--;

7463 
i
 + 1 < 
c⁄ãxt
->
num_©èched
) {

7464 
c⁄ãxt
->
rx_rögs
[
i
] = context->rx_rings[i + 1];

7465 
i
++;

7468 
c⁄ãxt
->
num_©èched
--;

7473 
	`¥ötk
(
KERN_CRIT
 "rx_ring isÇot found in context->rx_rings\n");

7477 
ölöe
 
	`mem˝y_Æig√d_rx
(*
to
, c⁄° *
‰om
, 
size_t
 
Àn
)

7479 i‡(
Àn
 <= 64) {

7480 
	`mem˝y
(
to
, 
‰om
, 64);

7481 } i‡(
Àn
 <= 128) {

7482 
	`mem˝y
(
to
, 
‰om
, 64);

7483 
	`mem˝y
((
uöt8_t
 *)
to
 + 64, (uöt8_à*)
‰om
 + 64, 64);

7485 
off£t
;

7487 
off£t
 = 0; off£à< 
Àn
; offset += 64) {

7488 i‡(
off£t
 + 128 < 
Àn
) {

7489 
	`¥e„tch¡a
((
uöt8_t
 *)
‰om
 + 
off£t
 + 128);

7490 
	`¥e„tcht0
((
uöt8_t
 *)
to
 + 
off£t
 + 128);

7493 
	`mem˝y
((
uöt8_t
 *)
to
 + 
off£t
,

7494 (
uöt8_t
 *)
‰om
 + 
off£t
,

7500 
	`c›y_rx_∑ckës
(
ixgbe_rög
 *
rx_rög
,

7501 
n
,

7502 
ps_pkt_öfo
 *
öfo
,

7503 *
pkt_buf
,

7504 
off£t
)

7506 
ixgbe_ad≠ãr
 *
ad≠ãr
 = 
rx_rög
->adapter;

7507 
ixgbe_adv_rx_desc
 *
rx_desc
;

7509 
u32
 
Àn
 = 64;

7510 
u32
 
°©îr
;

7512 
qidx
 = 
rx_rög
->
√xt_to_˛ón
;

7513 
√xt_qidx
 = 
rx_rög
->
√xt_to_˛ón
;

7514 
˙t
 = 0;

7515 
u8
 *
§c
;

7517 
tŸÆ_rx_∑ckës
 = 0;

7518 
tŸÆ_rx_byãs
 = 0;

7520 
§c
 = 
	`∑ckë_buf
(
rx_rög
, 
qidx
);

7522 
	`¥e„tcht0
(
pkt_buf
 + 
off£t
 + 64 * 0);

7523 
	`¥e„tcht0
(
pkt_buf
 + 
off£t
 + 64 * 1);

7525 
	`¥e„tch¡a
(
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
qidx
 + 0));

7526 
	`¥e„tch¡a
(
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
qidx
 + 1));

7528 
	`¥e„tch¡a
(
§c
 + 
MAX_PACKET_SIZE
 * 0);

7529 
	`¥e„tch¡a
(
§c
 + 
MAX_PACKET_SIZE
 * 1);

7530 
	`¥e„tch¡a
(
§c
 + 
MAX_PACKET_SIZE
 * 2);

7531 
	`¥e„tch¡a
(
§c
 + 
MAX_PACKET_SIZE
 * 3);

7533 
˙t
 < 
n
) {

7534 
rx_desc
 = 
	`IXGBE_RX_DESC_ADV
(*
rx_rög
, 
qidx
);

7535 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

7537 
§c
 = 
	`∑ckë_buf
(
rx_rög
, 
qidx
);

7539 
	`¥e„tch¡a
(
§c
 + 
MAX_PACKET_SIZE
 * 4);

7540 i‡(
Àn
 > 64)

7541 
	`¥e„tch¡a
(
§c
 + 
MAX_PACKET_SIZE
 * 4 + 64);

7543 
	`¥e„tch¡a
(
rx_desc
 + 2);

7544 
	`¥e„tcht0
(
pkt_buf
 + 
off£t
 + 64 * 2);

7546 
√xt_qidx
 = (
qidx
 + 1Ë% 
rx_rög
->
cou¡
;

7548 i‡(!(
°©îr
 & 
IXGBE_RXD_STAT_DD
))

7551 i‡(
	`u∆ikñy
(!(
°©îr
 & 
IXGBE_RXD_STAT_EOP
))) {

7552 
	`¥ötk
("foundÇon-EOPÖackets!\n");

7553 
√xt
;

7556 i‡(
	`u∆ikñy
(
°©îr
 & 
IXGBE_RXDADV_ERR_FRAME_ERR_MASK
)) {

7557 
	`¥ötk
("foundÉrror frames\n");

7558 
√xt
;

7561 
Àn
 = 
	`À16_to_˝u
(
rx_desc
->
wb
.
uµî
.
Àngth
);

7563 i‡(
	`u∆ikñy
(
Àn
 > 
MAX_PACKET_SIZE
)) {

7564 
	`¥ötk
("invalidÖacketÜength!\n");

7565 
√xt
;

7568 
	`mem˝y_Æig√d_rx
(
pkt_buf
 + 
off£t
, 
§c
, 
Àn
);

7570 
öfo
[
˙t
].
off£t
 = offset;

7571 
öfo
[
˙t
].
Àn
 =Üen;

7573 i‡(
°©îr
 & 
IXGBE_RXD_STAT_IPCS
) {

7574 i‡(
	`u∆ikñy
(
°©îr
 & 
IXGBE_RXDADV_ERR_IPE
))

7575 
öfo
[
˙t
].
checksum_rx
 = 
PS_CHECKSUM_RX_BAD
;

7577 
öfo
[
˙t
].
checksum_rx
 = 
PS_CHECKSUM_RX_GOOD
;

7579 
öfo
[
˙t
].
checksum_rx
 = 
PS_CHECKSUM_RX_UNKNOWN
;

7581 
˙t
++;

7583 
tŸÆ_rx_∑ckës
++;

7584 
tŸÆ_rx_byãs
 +
Àn
;

7585 
off£t
 = 
	`ALIGN
(off£à+ 
Àn
, 64);

7587 
√xt
:

7588 
rx_desc
->
ªad
.
pkt_addr
 =Ñx_desc->ªad.
hdr_addr
 =

7589 
	`˝u_to_À64
(
	`∑ckë_dma
(
rx_rög
, 
qidx
));

7591 
qidx
 = 
√xt_qidx
;

7594 i‡(
˙t
 > 0) {

7595 
rx_rög
->
queued
 = 
qidx
;

7596 
rx_rög
->
√xt_to_˛ón
 = 
qidx
;

7597 
rx_rög
->
√xt_to_u£
 =

7598 (
qidx
 =0Ë? (
rx_rög
->
cou¡
 - 1) : (qidx - 1);

7600 
rx_rög
->
°©s
.
∑ckës
 +
tŸÆ_rx_∑ckës
;

7601 
rx_rög
->
°©s
.
byãs
 +
tŸÆ_rx_byãs
;

7602 
rx_rög
->
tŸÆ_∑ckës
 +
tŸÆ_rx_∑ckës
;

7603 
rx_rög
->
tŸÆ_byãs
 +
tŸÆ_rx_byãs
;

7605 
	`ixgbe_ªÀa£_rx_desc
(&
ad≠ãr
->
hw
, 
rx_rög
,Ñx_rög->
√xt_to_u£
);

7608  
˙t
;

7611 
	`ps_ªcv_chunk
(
ps_c⁄ãxt
 *
c⁄ãxt
, 
ps_chunk
 
__u£r
 *
chunk_u§
)

7613 
ps_chunk
 
chunk
;

7614 
ixgbe_rög
 *
rx_rög
;

7616 *
kbuf
 = 
NULL
;

7618 
i
, 
j
;

7619 
ªt
;

7620 
tmp
;

7622 
off£t
;

7624 
	`DEFINE_WAIT
(
waô
);

7626 i‡(
	`c›y_‰om_u£r
(&
chunk
, 
chunk_u§
, (chunk)))

7627  -
EFAULT
;

7634 i‡(
chunk
.
˙t
 <0 || chunk.˙à> 
MAX_CHUNK_SIZE
)

7635  -
EINVAL
;

7637 i‡(!
	`ac˚ss_ok
(
VERIFY_WRITE
, 
chunk
.
öfo
,

7638 
chunk
.
˙t
 * (
ps_pkt_öfo
)))

7639  -
EFAULT
;

7641 
i
 = 0; i < 
c⁄ãxt
->
num_bufs
; i++)

7642 i‡(
c⁄ãxt
->
ubufs
[
i
] =
chunk
.
buf
) {

7643 
kbuf
 = 
c⁄ãxt
->
kbufs
[
i
];

7647 i‡(!
kbuf
)

7648  -
EFAULT
;

7650 i‡(
c⁄ãxt
->
num_©èched
 == 0)

7651  -
EINVAL
;

7653 
off£t
 = 
	`ALIGN
((
u64
)
kbuf
, 64) - (u64)kbuf;

7655 
ªåy
:

7656 i‡(
chunk
.
ªcv_blockög
)

7657 
	`¥ï¨e_to_waô
(&
c⁄ãxt
->
wq
, &
waô
, 
TASK_INTERRUPTIBLE
);

7659 
i
 = 0; i < 
c⁄ãxt
->
num_©èched
; i++) {

7660 
j
 = (
c⁄ãxt
->
√xt_rög
 + 
i
Ë% c⁄ãxt->
num_©èched
;

7661 
rx_rög
 = 
c⁄ãxt
->
rx_rögs
[
j
];

7663 i‡(
	`u∆ikñy
(!
rx_rög
 || !rx_rög->
desc
))

7666 
	`•ö_lock_bh
(&
rx_rög
->
lock
);

7667 
ªt
 = 
	`c›y_rx_∑ckës
(
rx_rög
,

7668 
chunk
.
˙t
,

7669 
c⁄ãxt
->
öfo
,

7670 
kbuf
,

7671 
off£t
);

7672 
	`•ö_u∆ock_bh
(&
rx_rög
->
lock
);

7674 i‡(
ªt
) {

7675 i‡(
chunk
.
ªcv_blockög
)

7676 
	`föish_waô
(&
c⁄ãxt
->
wq
, &
waô
);

7677 
found
;

7680 i‡(
chunk
.
ªcv_blockög
) {

7685 
	`ixgbe_úq_íabÀ_queues
(
rx_rög
->
ad≠ãr
,

7686 (
u64
)1 << 
rx_rög
->
ªg_idx
);

7690 i‡(
chunk
.
ªcv_blockög
) {

7691 
	`scheduÀ
();

7692 
	`föish_waô
(&
c⁄ãxt
->
wq
, &
waô
);

7694 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

7696  -
EINTR
;

7698 
ªåy
;

7700  -
EWOULDBLOCK
;

7702 
found
:

7703 
tmp
 = 
	`c›y_to_u£r
(
chunk
.
öfo
, 
c⁄ãxt
->info,

7704 
ªt
 * (
ps_pkt_öfo
));

7705 i‡(
tmp
) {

7706 
	`¥ötk
("copy_to_user failed - %ldÑequested %d failed\n",

7707 
ªt
 * (
ps_pkt_öfo
),

7708 
tmp
);

7709 
ªt
 = -
EFAULT
;

7716 
c⁄ãxt
->
√xt_rög
 = (c⁄ãxt->√xt_rög + 1Ë% c⁄ãxt->
num_©èched
;

7718 
	`put_u£r
(
rx_rög
->
ad≠ãr
->
bd_numbî
, &
chunk_u§
->
queue
.
ifödex
);

7719 
	`put_u£r
(
rx_rög
->
queue_ödex
, &
chunk_u§
->
queue
.
qidx
);

7720  
ªt
;

7723 
	`ps_£nd_chunk
(
ps_c⁄ãxt
 *
c⁄ãxt
, 
ps_chunk
 
__u£r
 *
chunk_u§
)

7725 
ps_chunk
 
chunk
;

7726 
ixgbe_ad≠ãr
 *
ad≠ãr
;

7727 
ixgbe_rög
 *
tx_rög
;

7729 *
kbuf
 = 
NULL
;

7731 
ªt
;

7732 
i
;

7734 i‡(
	`c›y_‰om_u£r
(&
chunk
, 
chunk_u§
, (chunk)))

7735  -
EFAULT
;

7737 i‡(
chunk
.
˙t
 <0 || chunk.˙à> 
MAX_CHUNK_SIZE
)

7738  -
EINVAL
;

7740 i‡(
chunk
.
queue
.
ifödex
 < 0 || chunk.queue.ifödex >
ad≠ãrs_found
)

7741  -
EINVAL
;

7743 
ad≠ãr
 = 
ad≠ãrs
[
chunk
.
queue
.
ifödex
];

7745 i‡(
chunk
.
queue
.
qidx
 < 0 || chunk.queue.qidx >
ad≠ãr
->
num_tx_queues
)

7746  -
EINVAL
;

7748 
tx_rög
 = &
ad≠ãr
->tx_rög[
chunk
.
queue
.
qidx
];

7750 
ªt
 = 
	`c›y_‰om_u£r
(
c⁄ãxt
->
öfo
, 
chunk
.info,

7751 
chunk
.
˙t
 * (
ps_pkt_öfo
));

7752 i‡(
ªt
) {

7753 
	`¥ötk
("copy_from_user(1) failed - %ldÑequested %d failed\n",

7754 
chunk
.
˙t
 * (
ps_pkt_öfo
),

7755 
ªt
);

7756  -
EFAULT
;

7759 
i
 = 0; i < 
c⁄ãxt
->
num_bufs
; i++)

7760 i‡(
c⁄ãxt
->
ubufs
[
i
] =
chunk
.
buf
) {

7761 
kbuf
 = 
c⁄ãxt
->
kbufs
[
i
];

7765 i‡(!
kbuf
)

7766  -
EFAULT
;

7768 
	`•ö_lock_bh
(&
tx_rög
->
lock
);

7769 
ªt
 = 
	`ixgbe_xmô_b©ch
(
tx_rög
, 
chunk
.
˙t
, 
c⁄ãxt
->
öfo
, 
kbuf
);

7770 
	`•ö_u∆ock_bh
(&
tx_rög
->
lock
);

7772  
ªt
;

7775 
	`ps_¶ow∑th_∑ckë
(
ps_c⁄ãxt
 *
c⁄ãxt
,

7776 
ps_∑ckë
 
__u£r
 *
pkt_u§
)

7778 
ps_∑ckë
 
pkt
;

7779 
ixgbe_ad≠ãr
 *
ad≠ãr
;

7781 
sk_buff
 *
skb
;

7782 
ªt
;

7784 i‡(
	`c›y_‰om_u£r
(&
pkt
, 
pkt_u§
, (pkt))) {

7785 
	`¥ötk
("1\n");

7786  -
EFAULT
;

7789 i‡(
pkt
.
Àn
 < 
ETH_HLEN
 ||Ökt.À¿> 
ETH_FRAME_LEN
) {

7790 
	`¥ötk
("2\n");

7791  -
EINVAL
;

7794 i‡(
pkt
.
ifödex
 < 0 ||Ökt.ifödex >
ad≠ãrs_found
) {

7795 
	`¥ötk
("3\n");

7796  -
EINVAL
;

7799 
ad≠ãr
 = 
ad≠ãrs
[
pkt
.
ifödex
];

7800 
skb
 = 
	`√tdev_Æloc_skb
(
ad≠ãr
->
√tdev
, 
pkt
.
Àn
 + 
NET_IP_ALIGN
);

7802 i‡(
skb
 =
NULL
) {

7803 
	`¥ötk
(
KERN_ERR
 "netdev_alloc_skb() failed!\n");

7804  -
ENOMEM
;

7807 
	`skb_ª£rve
(
skb
, 
NET_IP_ALIGN
);

7809 
ªt
 = 
	`c›y_‰om_u£r
(
skb
->
d©a
, 
pkt
.
buf
,Ökt.
Àn
);

7810 i‡(
ªt
) {

7811 
	`dev_k‰ì_skb_™y
(
skb
);

7812 
	`¥ötk
("4 %d %d\n", 
ªt
, 
pkt
.
Àn
);

7813  -
EFAULT
;

7816 
	`skb_put
(
skb
, 
pkt
.
Àn
);

7817 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
ad≠ãr
->
√tdev
);

7819 
	`loˇl_bh_dißbÀ
();

7820 
	`√tif_rx
(
skb
);

7821 
	`loˇl_bh_íabÀ
();

7826 
	`ps_io˘l
(
fûe
 *
fûp
,

7827 
cmd
, 
¨g
)

7829 
ªt
 = 0;

7830 
ps_c⁄ãxt
 *
c⁄ãxt
;

7836 
c⁄ãxt
 = 
fûp
->
¥iv©e_d©a
;

7837 i‡(!
c⁄ãxt
)

7838 
out
;

7846 
cmd
) {

7847 
PS_IOC_LIST_DEVICES
:

7848 
ªt
 = 
	`ps_li°_devi˚s
((
ps_devi˚
 
__u£r
 *)
¨g
);

7851 
PS_IOC_ATTACH_RX_DEVICE
:

7852 
ªt
 = 
	`ps_©èch_rx_devi˚
(
c⁄ãxt
, (
ps_queue
 
__u£r
 *)
¨g
);

7855 
PS_IOC_DETACH_RX_DEVICE
:

7856 
ªt
 = 
	`ps_dëach_rx_devi˚
(
c⁄ãxt
, (
ps_queue
 
__u£r
 *)
¨g
);

7859 
PS_IOC_RECV_CHUNK
:

7860 
ªt
 = 
	`ps_ªcv_chunk
(
c⁄ãxt
, (
ps_chunk
 
__u£r
 *)
¨g
);

7863 
PS_IOC_SEND_CHUNK
:

7864 
ªt
 = 
	`ps_£nd_chunk
(
c⁄ãxt
, (
ps_chunk
 
__u£r
 *)
¨g
);

7867 
PS_IOC_SLOWPATH_PACKET
:

7868 
ªt
 = 
	`ps_¶ow∑th_∑ckë
(
c⁄ãxt
, (
ps_∑ckë
 
__u£r
 *)
¨g
);

7872 
ªt
 = -
ENOTTY
;

7877 
out
:

7881  
ªt
;

7884 
fûe_›î©i⁄s
 
ps_f›s
 = {

7885 .
›í
 = 
ps_›í
,

7886 .
ªÀa£
 = 
ps_ªÀa£
,

7887 .
mm≠
 = 
ps_mm≠
,

7888 .
u∆ocked_io˘l
 = 
ps_io˘l
,

7897 
__öô
 
	`ixgbe_öô_moduÀ
()

7899 
ªt
;

7901 
	`¥ötk
(
KERN_INFO
 "ixgbe: %†- vîsi⁄ %†(PackëShadî)\n", 
ixgbe_drivî_°rög
,

7902 
ixgbe_drivî_vîsi⁄
);

7904 
	`¥ötk
(
KERN_INFO
 "%s\n", 
ixgbe_c›yright
);

7906 #i‚de‡
CONFIG_DCB


7907 
	`ixgbe_dcb_√éök_ªgi°î
();

7909 #ifde‡
IXGBE_DCA


7910 
	`dˇ_ªgi°î_nŸify
(&
dˇ_nŸifõr
);

7913 
ªt
 = 
	`pci_ªgi°î_drivî
(&
ixgbe_drivî
);

7914 i‡(
ªt
 < 0) {

7915 
	`¥ötk
(
KERN_ERR
 "pci_register_driver() failed\n");

7916  
ªt
;

7919 
ªt
 = 
	`ªgi°î_chrdev
(
PS_MAJOR
, 
PS_NAME
, &
ps_f›s
);

7920 i‡(
ªt
 < 0)

7921 
	`¥ötk
(
KERN_ERR
 "register_chrdev() failed\n");

7923  
ªt
;

7926 
	`moduÀ_öô
(
ixgbe_öô_moduÀ
);

7934 
__exô
 
	`ixgbe_exô_moduÀ
()

7936 
	`uƒegi°î_chrdev
(
PS_MAJOR
, 
PS_NAME
);

7938 #ifde‡
IXGBE_DCA


7939 
	`dˇ_uƒegi°î_nŸify
(&
dˇ_nŸifõr
);

7941 #i‚de‡
CONFIG_DCB


7942 
	`ixgbe_dcb_√éök_uƒegi°î
();

7944 
	`pci_uƒegi°î_drivî
(&
ixgbe_drivî
);

7947 #ifde‡
IXGBE_DCA


7948 
	`ixgbe_nŸify_dˇ
(
nŸifõr_block
 *
nb
, 
evít
,

7949 *
p
)

7951 
ªt_vÆ
;

7953 
ªt_vÆ
 = 
	`drivî_f‹_óch_devi˚
(&
ixgbe_drivî
.
drivî
, 
NULL
, &
evít
,

7954 
__ixgbe_nŸify_dˇ
);

7956  
ªt_vÆ
 ? 
NOTIFY_BAD
 : 
NOTIFY_DONE
;

7959 
	`moduÀ_exô
(
ixgbe_exô_moduÀ
);

	@ixgbe_osdep.h

33 #i‚de‡
_IXGBE_OSDEP_H_


34 
	#_IXGBE_OSDEP_H_


	)

36 
	~<löux/pci.h
>

37 
	~<löux/dñay.h
>

38 
	~<löux/öãºu±.h
>

39 
	~<löux/if_ëhî.h
>

40 
	~<löux/sched.h
>

41 
	~"kcom∑t.h
"

44 #i‚de‡
m¶ìp


45 
	#m¶ìp
(
x
Ëdÿ{ if(
	`ö_öãºu±
()) { \

47 
	`BUG
(); \

49 
	`m¶ìp
(
x
); \

50 } } 0)

	)

54 #unde‡
ASSERT


56 #ifde‡
DBG


57 
	#hw_dbg
(
hw
, 
S
, 
A
...Ë
	`¥ötk
(
KERN_DEBUG
 S, ## A)

	)

59 
	#hw_dbg
(
hw
, 
S
, 
A
...Ëdÿ{} 0)

	)

62 #ifde‡
DBG


63 
	#IXGBE_WRITE_REG
(
a
, 
ªg
, 
vÆue
) do {\

64 
ªg
) { \

65 
IXGBE_EIMS
: \

66 
IXGBE_EIMC
: \

67 
IXGBE_EIAM
: \

68 
IXGBE_EIAC
: \

69 
IXGBE_EICR
: \

70 
IXGBE_EICS
: \

71 
	`¥ötk
("%s: Reg - 0x%05X, vÆuê- 0x%08X\n", 
__FUNCTION__
, \

72 
ªg
, (
u32
)(
vÆue
)); \

76 
	`wrôñ
((
vÆue
), ((
a
)->
hw_addr
 + (
ªg
))); \

77 } 0)

	)

79 
	#IXGBE_WRITE_REG
(
a
, 
ªg
, 
vÆue
Ë
	`wrôñ
((vÆue), (◊)->
hw_addr
 + (ªg)))

	)

82 
	#IXGBE_READ_REG
(
a
, 
ªg
Ë
	`ªadl
(◊)->
hw_addr
 + (ªg))

	)

84 
	#IXGBE_WRITE_REG_ARRAY
(
a
, 
ªg
, 
off£t
, 
vÆue
) ( \

85 
	`wrôñ
((
vÆue
), ((
a
)->
hw_addr
 + (
ªg
Ë+ ((
off£t
Ë<< 2))))

	)

87 
	#IXGBE_READ_REG_ARRAY
(
a
, 
ªg
, 
off£t
) ( \

88 
	`ªadl
((
a
)->
hw_addr
 + (
ªg
Ë+ ((
off£t
Ë<< 2)))

	)

90 #i‚de‡
wrôeq


91 
	#wrôeq
(
vÆ
, 
addr
Ë
	`wrôñ
((
u32
) (val),áddr); \

92 
	`wrôñ
((
u32
Ë(
vÆ
 >> 32), (
addr
 + 4));

	)

95 
	#IXGBE_WRITE_REG64
(
a
, 
ªg
, 
vÆue
Ë
	`wrôeq
((vÆue), (◊)->
hw_addr
 + (ªg)))

	)

97 
	#IXGBE_WRITE_FLUSH
(
a
Ë
	`IXGBE_READ_REG
◊, 
IXGBE_STATUS
)

	)

98 
	gixgbe_hw
;

99 
u16
 
ixgbe_ªad_pci_cfg_w‹d
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
);

100 
ixgbe_wrôe_pci_cfg_w‹d
(
ixgbe_hw
 *
hw
, 
u32
 
ªg
, 
u16
 
vÆue
);

101 
	#IXGBE_READ_PCIE_WORD
 
ixgbe_ªad_pci_cfg_w‹d


	)

102 
	#IXGBE_WRITE_PCIE_WORD
 
ixgbe_wrôe_pci_cfg_w‹d


	)

103 
	#IXGBE_EEPROM_GRANT_ATTEMPS
 100

	)

104 
	#IXGBE_HTONL
(
_i
Ë
	`ht⁄l
(_i)

	)

105 
	#IXGBE_HTONS
(
_i
Ë
	`ht⁄s
(_i)

	)

	@ixgbe_param.c

28 
	~<löux/ty≥s.h
>

29 
	~<löux/moduÀ.h
>

31 
	~"ixgbe.h
"

37 
	#IXGBE_MAX_NIC
 8

	)

39 
	#OPTION_UNSET
 -1

	)

40 
	#OPTION_DISABLED
 0

	)

41 
	#OPTION_ENABLED
 1

	)

48 
	#IXGBE_PARAM_INIT
 { [0 ... 
IXGBE_MAX_NIC
] = 
OPTION_UNSET
 }

	)

49 #i‚de‡
moduÀ_∑øm_¨øy


60 
	#IXGBE_PARAM
(
X
, 
desc
) \

61 c⁄° 
__devöôd©a
 
X
[
IXGBE_MAX_NIC
+1] = 
IXGBE_PARAM_INIT
; \

62 
	`MODULE_PARM
(
X
, "1-" 
	`__MODULE_STRING
(
IXGBE_MAX_NIC
) "i"); \

63 
	`MODULE_PARM_DESC
(
X
, 
desc
);

	)

65 
	#IXGBE_PARAM
(
X
, 
desc
) \

66 
__devöôd©a
 
X
[
IXGBE_MAX_NIC
+1] = 
IXGBE_PARAM_INIT
; \

67 
num_
##
X
; \

68 
	`moduÀ_∑øm_¨øy_«med
(
X
, X, , &
num_
##X, 0); \

69 
	`MODULE_PARM_DESC
(
X
, 
desc
);

	)

72 
IXGBE_PARAM
(
RXKî√l
, "Disable(0) orÉnable(1) Linux TCP/IP stack RX, default 0");

83 
IXGBE_PARAM
(
I¡îru±Ty≥
, "Change Interrupt Mode (0=Legacy, 1=MSI, 2=MSI-X), default 2");

84 
	#IXGBE_INT_LEGACY
 0

	)

85 
	#IXGBE_INT_MSI
 1

	)

86 
	#IXGBE_INT_MSIX
 2

	)

87 
	#IXGBE_DEFAULT_INT
 
IXGBE_INT_MSIX


	)

89 #i‡
deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

112 
	#IXGBE_MAX_DCA
 0

	)

114 
IXGBE_PARAM
(
DCA
, "Disable orÉnable Direct Cache Access, 0=disabled, 1=descriptor only, 2=descriptoránd data");

127 
IXGBE_PARAM
(
RXQ
, "Number of RX queues, default 0=number of cpus");

138 
IXGBE_PARAM
(
TXQ
, "Number of TX queues, default 0=number of cpus");

146 
	#DEFAULT_ITR
 956

	)

147 
IXGBE_PARAM
(
I¡îru±ThrŸéeR©e
, "Maximum interruptsÖer second,Öer vector, (956-488281), default 8000");

148 
	#MAX_ITR
 
IXGBE_MAX_INT_RATE


	)

149 
	#MIN_ITR
 
IXGBE_MIN_INT_RATE


	)

151 #i‚de‡
IXGBE_NO_LLI


158 
IXGBE_PARAM
(
LLIP‹t
, "Low Latency Interrupt TCP Port (0-65535)");

160 
	#DEFAULT_LLIPORT
 0

	)

161 
	#MAX_LLIPORT
 0xFFFF

	)

162 
	#MIN_LLIPORT
 0

	)

170 
IXGBE_PARAM
(
LLIPush
, "Low Latency Interrupt on TCP Push flag (0,1)");

172 
	#DEFAULT_LLIPUSH
 0

	)

173 
	#MAX_LLIPUSH
 1

	)

174 
	#MIN_LLIPUSH
 0

	)

182 
IXGBE_PARAM
(
LLISize
, "Low Latency Interrupt on Packet Size (0-1500)");

184 
	#DEFAULT_LLISIZE
 0

	)

185 
	#MAX_LLISIZE
 1500

	)

186 
	#MIN_LLISIZE
 0

	)

194 
IXGBE_PARAM
(
LLIETy≥
, "Low Latency Interrupt Ethernet Protocol Type");

196 
	#DEFAULT_LLIETYPE
 0

	)

197 
	#MAX_LLIETYPE
 0x8fff

	)

198 
	#MIN_LLIETYPE
 0

	)

206 
IXGBE_PARAM
(
LLIVLANP
, "Low Latency Interrupt on VLANÖriorityÅhreshold");

208 
	#DEFAULT_LLIVLANP
 0

	)

209 
	#MAX_LLIVLANP
 7

	)

210 
	#MIN_LLIVLANP
 0

	)

219 
IXGBE_PARAM
(
RxBuf„rMode
, "0=1 descriptorÖerÖacket,\n"

223 
	#IXGBE_RXBUFMODE_1BUF_ALWAYS
 0

	)

224 
	#IXGBE_RXBUFMODE_PS_ALWAYS
 1

	)

225 
	#IXGBE_RXBUFMODE_OPTIMAL
 2

	)

226 
	#IXGBE_DEFAULT_RXBUFMODE
 
IXGBE_RXBUFMODE_OPTIMAL


	)

234 
IXGBE_PARAM
(
FdúMode
, "Flow Director filtering modes:\n"

239 
	#IXGBE_FDIR_FILTER_OFF
 0

	)

240 
	#IXGBE_FDIR_FILTER_HASH
 1

	)

241 
	#IXGBE_FDIR_FILTER_PERFECT
 2

	)

243 
	#IXGBE_DEFAULT_FDIR_FILTER
 
IXGBE_FDIR_FILTER_OFF


	)

252 
IXGBE_PARAM
(
FdúPbÆloc
, "Flow DirectorÖacket bufferállocationÜevel:\n"

257 
	#IXGBE_FDIR_PBALLOC_64K
 0

	)

258 
	#IXGBE_FDIR_PBALLOC_128K
 1

	)

259 
	#IXGBE_FDIR_PBALLOC_256K
 2

	)

260 
	#IXGBE_DEFAULT_FDIR_PBALLOC
 
IXGBE_FDIR_PBALLOC_64K


	)

268 
IXGBE_PARAM
(
AåSam∂eR©e
, "Software ATR TxÖacket sampleÑate");

270 
	#IXGBE_MAX_ATR_SAMPLE_RATE
 100

	)

271 
	#IXGBE_MIN_ATR_SAMPLE_RATE
 1

	)

272 
	#IXGBE_ATR_SAMPLE_RATE_OFF
 0

	)

273 
	#IXGBE_DEFAULT_ATR_SAMPLE_RATE
 20

	)

275 
	sixgbe_›ti⁄
 {

276 íum { 
	míabÀ_›ti⁄
, 
	mønge_›ti⁄
, 
	mli°_›ti⁄
 } 
	mty≥
;

277 c⁄° *
	m«me
;

278 c⁄° *
	mîr
;

279 
	mdef
;

282 
	mmö
;

283 
	mmax
;

284 } 
	mr
;

286 
	mƒ
;

287 c⁄° 
	sixgbe_›t_li°
 {

288 
	mi
;

289 *
	m°r
;

290 } *
	mp
;

291 } 
	ml
;

292 } 
	m¨g
;

295 
__devöô
 
	$ixgbe_vÆid©e_›ti⁄
(*
vÆue
,

296 
ixgbe_›ti⁄
 *
›t
)

298 i‡(*
vÆue
 =
OPTION_UNSET
) {

299 *
vÆue
 = 
›t
->
def
;

303 
›t
->
ty≥
) {

304 
íabÀ_›ti⁄
:

305 *
vÆue
) {

306 
OPTION_ENABLED
:

307 
	`¥ötk
(
KERN_INFO
 "ixgbe: %†E«bÀd\n", 
›t
->
«me
);

309 
OPTION_DISABLED
:

310 
	`¥ötk
(
KERN_INFO
 "ixgbe: %†DißbÀd\n", 
›t
->
«me
);

314 
ønge_›ti⁄
:

315 i‡(*
vÆue
 >
›t
->
¨g
.
r
.
mö
 && *vÆuê<›t->¨g.r.
max
) {

316 
	`¥ötk
(
KERN_INFO
 "ixgbe: %†£àtÿ%d\n", 
›t
->
«me
, *
vÆue
);

320 
li°_›ti⁄
: {

321 
i
;

322 c⁄° 
ixgbe_›t_li°
 *
ít
;

324 
i
 = 0; i < 
›t
->
¨g
.
l
.
ƒ
; i++) {

325 
ít
 = &
›t
->
¨g
.
l
.
p
[
i
];

326 i‡(*
vÆue
 =
ít
->
i
) {

327 i‡(
ít
->
°r
[0] != '\0')

328 
	`¥ötk
(
KERN_INFO
 "%s\n", 
ít
->
°r
);

335 
	`BUG
();

338 
	`¥ötk
(
KERN_INFO
 "ixgbe: Invalid %s specified (%d), %s\n",

339 
›t
->
«me
, *
vÆue
, o±->
îr
);

340 *
vÆue
 = 
›t
->
def
;

342 
	}
}

344 
	#LIST_LEN
(
l
Ë(÷Ë/ ÷[0]))

	)

355 
__devöô
 
	$ixgbe_check_›ti⁄s
(
ixgbe_ad≠ãr
 *
ad≠ãr
)

357 
bd
 = 
ad≠ãr
->
bd_numbî
;

358 
u32
 *
aÊags
 = &
ad≠ãr
->
Êags
;

359 
ixgbe_rög_„©uª
 *
„©uª
 = 
ad≠ãr
->
rög_„©uª
;

361 i‡(
bd
 >
IXGBE_MAX_NIC
) {

362 
	`¥ötk
(
KERN_NOTICE


363 "W¨nög:Çÿc⁄figuøti⁄ f‹ bﬂrd #%d\n", 
bd
);

364 
	`¥ötk
(
KERN_NOTICE
 "Using defaults foráll values\n");

365 #i‚de‡
moduÀ_∑øm_¨øy


366 
bd
 = 
IXGBE_MAX_NIC
;

371 
ixgbe_›ti⁄
 
›t
 = {

372 .
ty≥
 = 
íabÀ_›ti⁄
,

373 .
«me
 = "Linux TCP/IP stack RX",

374 .
îr
 = "defaultingÅo Disabled",

375 .
def
 = 
OPTION_DISABLED


378 #ifde‡
moduÀ_∑øm_¨øy


379 i‡(
num_RXKî√l
 > 
bd
) {

381 
tmp
 = 
RXKî√l
[
bd
];

382 
	`ixgbe_vÆid©e_›ti⁄
(&
tmp
, &
›t
);

383 i‡(
tmp
)

384 *
aÊags
 |
IXGBE_FLAG_RX_KERNEL_ENABLE
;

386 *
aÊags
 &~
IXGBE_FLAG_RX_KERNEL_ENABLE
;

387 #ifde‡
moduÀ_∑øm_¨øy


389 i‡(
›t
.
def
 =
OPTION_ENABLED
)

390 *
aÊags
 |
IXGBE_FLAG_RX_KERNEL_ENABLE
;

392 *
aÊags
 &~
IXGBE_FLAG_RX_KERNEL_ENABLE
;

397 
i_ty≥
;

398 
ixgbe_›ti⁄
 
›t
 = {

399 .
ty≥
 = 
ønge_›ti⁄
,

400 .
«me
 = "Interrupt Type",

401 .
îr
 =

402 "usög deÁu… o‡"
	`__MODULE_STRING
(
IXGBE_DEFAULT_INT
),

403 .
def
 = 
IXGBE_DEFAULT_INT
,

404 .
¨g
 = { .
r
 = { .
mö
 = 
IXGBE_INT_LEGACY
,

405 .
max
 = 
IXGBE_INT_MSIX
}}

408 #ifde‡
moduÀ_∑øm_¨øy


409 i‡(
num_I¡îru±Ty≥
 > 
bd
) {

411 
i_ty≥
 = 
I¡îru±Ty≥
[
bd
];

412 
	`ixgbe_vÆid©e_›ti⁄
(&
i_ty≥
, &
›t
);

413 
i_ty≥
) {

414 
IXGBE_INT_MSIX
:

415 i‡(!(*
aÊags
 & 
IXGBE_FLAG_MSIX_CAPABLE
))

416 
	`¥ötk
(
KERN_INFO


420 
IXGBE_INT_MSI
:

421 i‡(!(*
aÊags
 & 
IXGBE_FLAG_MSI_CAPABLE
)) {

422 
	`¥ötk
(
KERN_INFO


426 *
aÊags
 &~
IXGBE_FLAG_MSIX_CAPABLE
;

427 *
aÊags
 &~
IXGBE_FLAG_DCB_CAPABLE
;

430 
IXGBE_INT_LEGACY
:

432 *
aÊags
 &~
IXGBE_FLAG_MSIX_CAPABLE
;

433 *
aÊags
 &~
IXGBE_FLAG_MSI_CAPABLE
;

434 *
aÊags
 &~
IXGBE_FLAG_DCB_CAPABLE
;

437 #ifde‡
moduÀ_∑øm_¨øy


439 *
aÊags
 |
IXGBE_FLAG_MSIX_CAPABLE
;

440 *
aÊags
 |
IXGBE_FLAG_MSI_CAPABLE
;

444 #i‡
	`deföed
(
CONFIG_DCA
Ë|| deföed(
CONFIG_DCA_MODULE
)

446 
ixgbe_›ti⁄
 
›t
 = {

447 .
ty≥
 = 
ønge_›ti⁄
,

448 .
«me
 = "Direct Cache Access (DCA)",

449 .
îr
 = "defaultingÅo Enabled",

450 .
def
 = 
OPTION_DISABLED
,

451 .
¨g
 = { .
r
 = { .
mö
 = 
OPTION_DISABLED
,

452 .
max
 = 
IXGBE_MAX_DCA
}}

454 
dˇ
 = 
›t
.
def
;

456 #ifde‡
moduÀ_∑øm_¨øy


457 i‡(
num_DCA
 > 
bd
) {

459 
dˇ
 = 
DCA
[
bd
];

460 
	`ixgbe_vÆid©e_›ti⁄
(&
dˇ
, &
›t
);

461 i‡(!
dˇ
)

462 *
aÊags
 &~
IXGBE_FLAG_DCA_CAPABLE
;

465 i‡(!(*
aÊags
 & 
IXGBE_FLAG_DCA_CAPABLE
)) {

466 
	`DPRINTK
(
PROBE
, 
INFO
, "DCA is disabled\n");

467 *
aÊags
 &~
IXGBE_FLAG_DCA_ENABLED
;

470 i‡(
dˇ
 =
IXGBE_MAX_DCA
) {

471 
	`DPRINTK
(
PROBE
, 
INFO
,

473 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCA_ENABLED_DATA
;

475 #ifde‡
moduÀ_∑øm_¨øy


479 i‡(
›t
.
def
 =
OPTION_DISABLED
)

480 *
aÊags
 &~
IXGBE_FLAG_DCA_CAPABLE
;

483 i‡(
dˇ
 =
IXGBE_MAX_DCA
)

484 
ad≠ãr
->
Êags
 |
IXGBE_FLAG_DCA_ENABLED_DATA
;

488 
ixgbe_›ti⁄
 
›t
 = {

489 .
ty≥
 = 
ønge_›ti⁄
,

490 .
«me
 = "RX queues (RXQ)",

491 .
îr
 = "using default.",

492 .
def
 = 0,

493 .
¨g
 = { .
r
 = { .
mö
 = 0,

494 .
max
 = 
IXGBE_MAX_RSS_INDICES
}}

496 
rxq
 = 
RXQ
[
bd
];

498 #ifde‡
moduÀ_∑øm_¨øy


499 i‡(
num_RXQ
 > 
bd
) {

501 
rxq
) {

507 
rxq
 = 
	`mö
(
IXGBE_MAX_RSS_INDICES
,

508 ()
	`num_⁄löe_˝us
());

511 
	`ixgbe_vÆid©e_›ti⁄
(&
rxq
, &
›t
);

514 
„©uª
[
RING_F_RXQ
].
ödi˚s
 = 
rxq
;

515 *
aÊags
 |
IXGBE_FLAG_RSS_ENABLED
;

516 #ifde‡
moduÀ_∑øm_¨øy


518 
rxq
 = 
	`mö
(
IXGBE_MAX_RSS_INDICES
,

519 ()
	`num_⁄löe_˝us
());

520 
„©uª
[
RING_F_RXQ
].
ödi˚s
 = 
rxq
;

521 *
aÊags
 |
IXGBE_FLAG_RSS_ENABLED
;

526 
ixgbe_›ti⁄
 
›t
 = {

527 .
ty≥
 = 
ønge_›ti⁄
,

528 .
«me
 = "TX queues (TXQ)",

529 .
îr
 = "using default.",

530 .
def
 = 0,

531 .
¨g
 = { .
r
 = { .
mö
 = 0,

532 .
max
 = 
IXGBE_MAX_RSS_INDICES
}}

534 
txq
 = 
TXQ
[
bd
];

536 #ifde‡
moduÀ_∑øm_¨øy


537 i‡(
num_TXQ
 > 
bd
) {

539 
txq
) {

545 
txq
 = 
	`mö
(
IXGBE_MAX_RSS_INDICES
,

546 ()
	`num_⁄löe_˝us
());

549 
	`ixgbe_vÆid©e_›ti⁄
(&
txq
, &
›t
);

552 
„©uª
[
RING_F_TXQ
].
ödi˚s
 = 
txq
;

553 #ifde‡
moduÀ_∑øm_¨øy


555 
txq
 = 
	`mö
(
IXGBE_MAX_RSS_INDICES
,

556 ()
	`num_⁄löe_˝us
());

557 
„©uª
[
RING_F_TXQ
].
ödi˚s
 = 
txq
;

562 
ixgbe_›ti⁄
 
›t
 = {

563 .
ty≥
 = 
ønge_›ti⁄
,

564 .
«me
 = "Interrupt Throttling Rate (ints/sec)",

565 .
îr
 = "usög deÁu… o‡"
	`__MODULE_STRING
(
DEFAULT_ITR
),

566 .
def
 = 
DEFAULT_ITR
,

567 .
¨g
 = { .
r
 = { .
mö
 = 
MIN_ITR
,

568 .
max
 = 
MAX_ITR
 }}

571 #ifde‡
moduÀ_∑øm_¨øy


572 i‡(
num_I¡îru±ThrŸéeR©e
 > 
bd
) {

574 
u32
 
eôr
 = 
I¡îru±ThrŸéeR©e
[
bd
];

575 
eôr
) {

577 
	`DPRINTK
(
PROBE
, 
INFO
, "%sÅurned off\n",

578 
›t
.
«me
);

584 
ad≠ãr
->
eôr_∑øm
 = 
IXGBE_MAX_INT_RATE
;

585 
ad≠ãr
->
ôr_£âög
 = 0;

588 
	`DPRINTK
(
PROBE
, 
INFO
, "dynamic interrupt "

590 
ad≠ãr
->
eôr_∑øm
 = 20000;

591 
ad≠ãr
->
ôr_£âög
 = 1;

594 
	`ixgbe_vÆid©e_›ti⁄
(&
eôr
, &
›t
);

595 
ad≠ãr
->
eôr_∑øm
 = 
eôr
;

597 
ad≠ãr
->
ôr_£âög
 = 
eôr
 & ~1;

600 #ifde‡
moduÀ_∑øm_¨øy


602 
ad≠ãr
->
eôr_∑øm
 = 
DEFAULT_ITR
;

603 
ad≠ãr
->
ôr_£âög
 = 
DEFAULT_ITR
;

607 #i‚de‡
IXGBE_NO_LLI


609 
ixgbe_›ti⁄
 
›t
 = {

610 .
ty≥
 = 
ønge_›ti⁄
,

611 .
«me
 = "Low Latency Interrupt TCP Port",

612 .
îr
 = "using default of "

613 
	`__MODULE_STRING
(
DEFAULT_LLIPORT
),

614 .
def
 = 
DEFAULT_LLIPORT
,

615 .
¨g
 = { .
r
 = { .
mö
 = 
MIN_LLIPORT
,

616 .
max
 = 
MAX_LLIPORT
 }}

619 #ifde‡
moduÀ_∑øm_¨øy


620 i‡(
num_LLIP‹t
 > 
bd
) {

622 
ad≠ãr
->
Œi_p‹t
 = 
LLIP‹t
[
bd
];

623 i‡(
ad≠ãr
->
Œi_p‹t
) {

624 
	`ixgbe_vÆid©e_›ti⁄
(&
ad≠ãr
->
Œi_p‹t
, &
›t
);

626 
	`DPRINTK
(
PROBE
, 
INFO
, "%sÅurned off\n",

627 
›t
.
«me
);

629 #ifde‡
moduÀ_∑øm_¨øy


631 
ad≠ãr
->
Œi_p‹t
 = 
›t
.
def
;

636 
ixgbe_›ti⁄
 
›t
 = {

637 .
ty≥
 = 
ønge_›ti⁄
,

638 .
«me
 = "Low Latency Interrupt on Packet Size",

639 .
îr
 = "using default of "

640 
	`__MODULE_STRING
(
DEFAULT_LLISIZE
),

641 .
def
 = 
DEFAULT_LLISIZE
,

642 .
¨g
 = { .
r
 = { .
mö
 = 
MIN_LLISIZE
,

643 .
max
 = 
MAX_LLISIZE
 }}

646 #ifde‡
moduÀ_∑øm_¨øy


647 i‡(
num_LLISize
 > 
bd
) {

649 
ad≠ãr
->
Œi_size
 = 
LLISize
[
bd
];

650 i‡(
ad≠ãr
->
Œi_size
) {

651 
	`ixgbe_vÆid©e_›ti⁄
(&
ad≠ãr
->
Œi_size
, &
›t
);

653 
	`DPRINTK
(
PROBE
, 
INFO
, "%sÅurned off\n",

654 
›t
.
«me
);

656 #ifde‡
moduÀ_∑øm_¨øy


658 
ad≠ãr
->
Œi_size
 = 
›t
.
def
;

663 
ixgbe_›ti⁄
 
›t
 = {

664 .
ty≥
 = 
íabÀ_›ti⁄
,

665 .
«me
 = "Low Latency Interrupt on TCP Push flag",

666 .
îr
 = "defaultingÅo Disabled",

667 .
def
 = 
OPTION_DISABLED


670 #ifde‡
moduÀ_∑øm_¨øy


671 i‡(
num_LLIPush
 > 
bd
) {

673 
Œi_push
 = 
LLIPush
[
bd
];

674 
	`ixgbe_vÆid©e_›ti⁄
(&
Œi_push
, &
›t
);

675 i‡(
Œi_push
)

676 *
aÊags
 |
IXGBE_FLAG_LLI_PUSH
;

678 *
aÊags
 &~
IXGBE_FLAG_LLI_PUSH
;

679 #ifde‡
moduÀ_∑øm_¨øy


681 i‡(
›t
.
def
 =
OPTION_ENABLED
)

682 *
aÊags
 |
IXGBE_FLAG_LLI_PUSH
;

684 *
aÊags
 &~
IXGBE_FLAG_LLI_PUSH
;

689 
ixgbe_›ti⁄
 
›t
 = {

690 .
ty≥
 = 
ønge_›ti⁄
,

691 .
«me
 = "Low Latency Interrupt on Ethernet Protocol Type",

692 .
îr
 = "using default of "

693 
	`__MODULE_STRING
(
DEFAULT_LLIETYPE
),

694 .
def
 = 
DEFAULT_LLIETYPE
,

695 .
¨g
 = { .
r
 = { .
mö
 = 
MIN_LLIETYPE
,

696 .
max
 = 
MAX_LLIETYPE
 }}

699 #ifde‡
moduÀ_∑øm_¨øy


700 i‡(
num_LLIETy≥
 > 
bd
) {

702 
ad≠ãr
->
Œi_ëy≥
 = 
LLIETy≥
[
bd
];

703 i‡(
ad≠ãr
->
Œi_ëy≥
) {

704 
	`ixgbe_vÆid©e_›ti⁄
(&
ad≠ãr
->
Œi_ëy≥
, &
›t
);

706 
	`DPRINTK
(
PROBE
, 
INFO
, "%sÅurned off\n",

707 
›t
.
«me
);

709 #ifde‡
moduÀ_∑øm_¨øy


711 
ad≠ãr
->
Œi_ëy≥
 = 
›t
.
def
;

716 
ixgbe_›ti⁄
 
›t
 = {

717 .
ty≥
 = 
ønge_›ti⁄
,

718 .
«me
 = "Low Latency Interrupt on VLANÖriorityÅhreashold",

719 .
îr
 = "using default of "

720 
	`__MODULE_STRING
(
DEFAULT_LLIVLANP
),

721 .
def
 = 
DEFAULT_LLIVLANP
,

722 .
¨g
 = { .
r
 = { .
mö
 = 
MIN_LLIVLANP
,

723 .
max
 = 
MAX_LLIVLANP
 }}

726 #ifde‡
moduÀ_∑øm_¨øy


727 i‡(
num_LLIVLANP
 > 
bd
) {

729 
ad≠ãr
->
Œi_vœn_¥i
 = 
LLIVLANP
[
bd
];

730 i‡(
ad≠ãr
->
Œi_vœn_¥i
) {

731 
	`ixgbe_vÆid©e_›ti⁄
(&
ad≠ãr
->
Œi_vœn_¥i
, &
›t
);

733 
	`DPRINTK
(
PROBE
, 
INFO
, "%sÅurned off\n",

734 
›t
.
«me
);

736 #ifde‡
moduÀ_∑øm_¨øy


738 
ad≠ãr
->
Œi_vœn_¥i
 = 
›t
.
def
;

744 
rx_buf_mode
;

745 
ixgbe_›ti⁄
 
›t
 = {

746 .
ty≥
 = 
ønge_›ti⁄
,

747 .
«me
 = "Rx buffer mode",

748 .
îr
 = "using default of "

749 
	`__MODULE_STRING
(
IXGBE_DEFAULT_RXBUFMODE
),

750 .
def
 = 
IXGBE_DEFAULT_RXBUFMODE
,

751 .
¨g
 = {.
r
 = {.
mö
 = 
IXGBE_RXBUFMODE_1BUF_ALWAYS
,

752 .
max
 = 
IXGBE_RXBUFMODE_OPTIMAL
}}

755 #ifde‡
moduÀ_∑øm_¨øy


756 i‡(
num_RxBuf„rMode
 > 
bd
) {

758 
rx_buf_mode
 = 
RxBuf„rMode
[
bd
];

759 
	`ixgbe_vÆid©e_›ti⁄
(&
rx_buf_mode
, &
›t
);

760 
rx_buf_mode
) {

761 
IXGBE_RXBUFMODE_OPTIMAL
:

762 *
aÊags
 |
IXGBE_FLAG_RX_1BUF_CAPABLE
;

763 *
aÊags
 |
IXGBE_FLAG_RX_PS_CAPABLE
;

765 
IXGBE_RXBUFMODE_PS_ALWAYS
:

766 *
aÊags
 |
IXGBE_FLAG_RX_PS_CAPABLE
;

768 
IXGBE_RXBUFMODE_1BUF_ALWAYS
:

769 *
aÊags
 |
IXGBE_FLAG_RX_1BUF_CAPABLE
;

773 #ifde‡
moduÀ_∑øm_¨øy


775 *
aÊags
 |
IXGBE_FLAG_RX_1BUF_CAPABLE
;

776 *
aÊags
 |
IXGBE_FLAG_RX_PS_CAPABLE
;

781 
fdú_fûãr_mode
;

782 
ixgbe_›ti⁄
 
›t
 = {

783 .
ty≥
 = 
ønge_›ti⁄
,

784 .
«me
 = "Flow Director filtering mode",

785 .
îr
 = "using default of "

786 
	`__MODULE_STRING
(
IXGBE_DEFAULT_FDIR_FILTER
),

787 .
def
 = 
IXGBE_DEFAULT_FDIR_FILTER
,

788 .
¨g
 = {.
r
 = {.
mö
 = 
IXGBE_FDIR_FILTER_OFF
,

789 .
max
 = 
IXGBE_FDIR_FILTER_PERFECT
}}

792 *
aÊags
 &~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

793 *
aÊags
 &~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

794 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

795 
no_Êow_dúe˘‹
;

796 #ifde‡
moduÀ_∑øm_¨øy


797 i‡(
num_FdúMode
 > 
bd
) {

799 #ifde‡
HAVE_TX_MQ


800 
fdú_fûãr_mode
 = 
FdúMode
[
bd
];

802 
fdú_fûãr_mode
 = 
IXGBE_FDIR_FILTER_OFF
;

804 
	`ixgbe_vÆid©e_›ti⁄
(&
fdú_fûãr_mode
, &
›t
);

806 
fdú_fûãr_mode
) {

807 
IXGBE_FDIR_FILTER_OFF
:

808 
	`DPRINTK
(
PROBE
, 
INFO
, "Flow Director disabled\n");

810 
IXGBE_FDIR_FILTER_HASH
:

811 *
aÊags
 |
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

812 *
aÊags
 &~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

813 
„©uª
[
RING_F_FDIR
].
ödi˚s
 =

814 
IXGBE_MAX_FDIR_INDICES
;

815 
	`DPRINTK
(
PROBE
, 
INFO
,

818 
IXGBE_FDIR_FILTER_PERFECT
:

819 *
aÊags
 &~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

820 *
aÊags
 |
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

821 
„©uª
[
RING_F_FDIR
].
ödi˚s
 =

822 
IXGBE_MAX_FDIR_INDICES
;

823 
	`•ö_lock_öô
(&
ad≠ãr
->
fdú_≥r„˘_lock
);

824 
	`DPRINTK
(
PROBE
, 
INFO
,

830 #ifde‡
moduÀ_∑øm_¨øy


832 #ifde‡
HAVE_TX_MQ


833 i‡(
›t
.
def
 !
IXGBE_FDIR_FILTER_OFF
) {

834 *
aÊags
 |
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

835 
„©uª
[
RING_F_FDIR
].
ödi˚s
 = 
IXGBE_MAX_FDIR_INDICES
;

836 
	`DPRINTK
(
PROBE
, 
INFO
,

840 *
aÊags
 &~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

841 *
aÊags
 &~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

842 
„©uª
[
RING_F_FDIR
].
ödi˚s
 = 0;

843 
	`DPRINTK
(
PROBE
, 
INFO
,

845 #ifde‡
HAVE_TX_MQ


850 i‡((*
aÊags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
) ||

851 (*
aÊags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)) {

852 i‡(!(*
aÊags
 & 
IXGBE_FLAG_MQ_CAPABLE
)) {

853 
	`DPRINTK
(
PROBE
, 
INFO
,

857 *
aÊags
 &~
IXGBE_FLAG_FDIR_HASH_CAPABLE
;

858 *
aÊags
 &~
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
;

862 
no_Êow_dúe˘‹
:

866 
fdú_pbÆloc_mode
;

867 
ixgbe_›ti⁄
 
›t
 = {

868 .
ty≥
 = 
ønge_›ti⁄
,

869 .
«me
 = "Flow DirectorÖacket bufferállocation",

870 .
îr
 = "using default of "

871 
	`__MODULE_STRING
(
IXGBE_DEFAULT_FDIR_PBALLOC
),

872 .
def
 = 
IXGBE_DEFAULT_FDIR_PBALLOC
,

873 .
¨g
 = {.
r
 = {.
mö
 = 
IXGBE_FDIR_PBALLOC_64K
,

874 .
max
 = 
IXGBE_FDIR_PBALLOC_256K
}}

876 
p°rög
[10];

878 i‡((
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
) ||

879 (!(*
aÊags
 & (
IXGBE_FLAG_FDIR_HASH_CAPABLE
 |

880 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
))))

881 
no_fdú_pbÆloc
;

882 #ifde‡
moduÀ_∑øm_¨øy


883 i‡(
num_FdúPbÆloc
 > 
bd
) {

885 
fdú_pbÆloc_mode
 = 
FdúPbÆloc
[
bd
];

886 
	`ixgbe_vÆid©e_›ti⁄
(&
fdú_pbÆloc_mode
, &
›t
);

887 
fdú_pbÆloc_mode
) {

888 
IXGBE_FDIR_PBALLOC_64K
:

889 
ad≠ãr
->
fdú_pbÆloc
 = 
IXGBE_FDIR_PBALLOC_64K
;

890 
	`•rötf
(
p°rög
, "64kB");

892 
IXGBE_FDIR_PBALLOC_128K
:

893 
ad≠ãr
->
fdú_pbÆloc
 = 
IXGBE_FDIR_PBALLOC_128K
;

894 
	`•rötf
(
p°rög
, "128kB");

896 
IXGBE_FDIR_PBALLOC_256K
:

897 
ad≠ãr
->
fdú_pbÆloc
 = 
IXGBE_FDIR_PBALLOC_256K
;

898 
	`•rötf
(
p°rög
, "256kB");

903 
	`DPRINTK
(
PROBE
, 
INFO
,

905 
p°rög
);

907 #ifde‡
moduÀ_∑øm_¨øy


909 
ad≠ãr
->
fdú_pbÆloc
 = 
›t
.
def
;

910 
	`DPRINTK
(
PROBE
, 
INFO
,

915 
no_fdú_pbÆloc
:

919 
ixgbe_›ti⁄
 
›t
 = {

920 .
ty≥
 = 
ønge_›ti⁄
,

921 .
«me
 = "Software ATR TxÖacket sampleÑate",

922 .
îr
 = "using default of "

923 
	`__MODULE_STRING
(
IXGBE_DEFAULT_ATR_SAMPLE_RATE
),

924 .
def
 = 
IXGBE_DEFAULT_ATR_SAMPLE_RATE
,

925 .
¨g
 = {.
r
 = {.
mö
 = 
IXGBE_ATR_SAMPLE_RATE_OFF
,

926 .
max
 = 
IXGBE_MAX_ATR_SAMPLE_RATE
}}

928 c⁄° 
©r_°rög
[] =

931 
ad≠ãr
->
©r_ßm∂e_øã
 = 
IXGBE_ATR_SAMPLE_RATE_OFF
;

932 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
ixgbe_mac_82598EB
)

933 
no_fdú_ßm∂e
;

936 i‡(*
aÊags
 & 
IXGBE_FLAG_FDIR_PERFECT_CAPABLE
)

937 
no_fdú_ßm∂e
;

938 #ifde‡
moduÀ_∑øm_¨øy


939 i‡(
num_AåSam∂eR©e
 > 
bd
) {

942 i‡(*
aÊags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
)

943 
ad≠ãr
->
©r_ßm∂e_øã
 = 
AåSam∂eR©e
[
bd
];

945 i‡(
ad≠ãr
->
©r_ßm∂e_øã
) {

946 
	`ixgbe_vÆid©e_›ti⁄
(&
ad≠ãr
->
©r_ßm∂e_øã
,

947 &
›t
);

948 
	`DPRINTK
(
PROBE
, 
INFO
, "%†%d\n", 
©r_°rög
,

949 
ad≠ãr
->
©r_ßm∂e_øã
);

951 #ifde‡
moduÀ_∑øm_¨øy


954 i‡(*
aÊags
 & 
IXGBE_FLAG_FDIR_HASH_CAPABLE
)

955 
ad≠ãr
->
©r_ßm∂e_øã
 = 
›t
.
def
;

957 
	`DPRINTK
(
PROBE
, 
INFO
, "%†deÁu… o‡%d\n", 
©r_°rög
,

958 
ad≠ãr
->
©r_ßm∂e_øã
);

961 
no_fdú_ßm∂e
:

964 
	}
}

	@ixgbe_phy.c

28 
	~"ixgbe_≠i.h
"

29 
	~"ixgbe_comm⁄.h
"

30 
	~"ixgbe_phy.h
"

32 
ixgbe_i2c_°¨t
(
ixgbe_hw
 *
hw
);

33 
ixgbe_i2c_°›
(
ixgbe_hw
 *
hw
);

34 
s32
 
ixgbe_˛ock_ö_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 *
d©a
);

35 
s32
 
ixgbe_˛ock_out_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 
d©a
);

36 
s32
 
ixgbe_gë_i2c_ack
(
ixgbe_hw
 *
hw
);

37 
s32
 
ixgbe_˛ock_ö_i2c_bô
(
ixgbe_hw
 *
hw
, 
boﬁ
 *
d©a
);

38 
s32
 
ixgbe_˛ock_out_i2c_bô
(
ixgbe_hw
 *
hw
, 
boﬁ
 
d©a
);

39 
s32
 
ixgbe_øi£_i2c_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
i2c˘l
);

40 
ixgbe_lowî_i2c_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
i2c˘l
);

41 
s32
 
ixgbe_£t_i2c_d©a
(
ixgbe_hw
 *
hw
, 
u32
 *
i2c˘l
, 
boﬁ
 
d©a
);

42 
boﬁ
 
ixgbe_gë_i2c_d©a
(
u32
 *
i2c˘l
);

43 
ixgbe_i2c_bus_˛ór
(
ixgbe_hw
 *
hw
);

51 
s32
 
	$ixgbe_öô_phy_›s_gíîic
(
ixgbe_hw
 *
hw
)

53 
ixgbe_phy_öfo
 *
phy
 = &
hw
->phy;

56 
phy
->
›s
.
idítify
 = &
ixgbe_idítify_phy_gíîic
;

57 
phy
->
›s
.
ª£t
 = &
ixgbe_ª£t_phy_gíîic
;

58 
phy
->
›s
.
ªad_ªg
 = &
ixgbe_ªad_phy_ªg_gíîic
;

59 
phy
->
›s
.
wrôe_ªg
 = &
ixgbe_wrôe_phy_ªg_gíîic
;

60 
phy
->
›s
.
£tup_lök
 = &
ixgbe_£tup_phy_lök_gíîic
;

61 
phy
->
›s
.
£tup_lök_•ìd
 = &
ixgbe_£tup_phy_lök_•ìd_gíîic
;

62 
phy
->
›s
.
check_lök
 = 
NULL
;

63 
phy
->
›s
.
gë_fúmw¨e_vîsi⁄
 = 
NULL
;

64 
phy
->
›s
.
ªad_i2c_byã
 = &
ixgbe_ªad_i2c_byã_gíîic
;

65 
phy
->
›s
.
wrôe_i2c_byã
 = &
ixgbe_wrôe_i2c_byã_gíîic
;

66 
phy
->
›s
.
ªad_i2c_ì¥om
 = &
ixgbe_ªad_i2c_ì¥om_gíîic
;

67 
phy
->
›s
.
wrôe_i2c_ì¥om
 = &
ixgbe_wrôe_i2c_ì¥om_gíîic
;

68 
phy
->
›s
.
i2c_bus_˛ór
 = &
ixgbe_i2c_bus_˛ór
;

69 
phy
->
›s
.
idítify_sÂ
 = &
ixgbe_idítify_sÂ_moduÀ_gíîic
;

70 
phy
->
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_unknown
;

73 
	}
}

81 
s32
 
	$ixgbe_idítify_phy_gíîic
(
ixgbe_hw
 *
hw
)

83 
s32
 
°©us
 = 
IXGBE_ERR_PHY_ADDR_INVALID
;

84 
u32
 
phy_addr
;

85 
u16
 
ext_abûôy
 = 0;

87 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_unknown
) {

88 
phy_addr
 = 0;Öhy_add∏< 
IXGBE_MAX_PHY_ADDR
;Öhy_addr++) {

89 i‡(
	`ixgbe_vÆid©e_phy_addr
(
hw
, 
phy_addr
)) {

90 
hw
->
phy
.
addr
 = 
phy_addr
;

91 
	`ixgbe_gë_phy_id
(
hw
);

92 
hw
->
phy
.
ty≥
 =

93 
	`ixgbe_gë_phy_ty≥_‰om_id
(
hw
->
phy
.
id
);

95 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_unknown
) {

96 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw,

97 
IXGBE_MDIO_PHY_EXT_ABILITY
,

98 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
,

99 &
ext_abûôy
);

100 i‡(
ext_abûôy
 &

101 
IXGBE_MDIO_PHY_10GBASET_ABILITY
 ||

102 
ext_abûôy
 &

103 
IXGBE_MDIO_PHY_1000BASET_ABILITY
)

104 
hw
->
phy
.
ty≥
 =

105 
ixgbe_phy_cu_unknown
;

107 
hw
->
phy
.
ty≥
 =

108 
ixgbe_phy_gíîic
;

111 
°©us
 = 0;

115 i‡(
°©us
 != 0)

116 
hw
->
phy
.
addr
 = 0;

118 
°©us
 = 0;

121  
°©us
;

122 
	}
}

129 
boﬁ
 
	$ixgbe_vÆid©e_phy_addr
(
ixgbe_hw
 *
hw
, 
u32
 
phy_addr
)

131 
u16
 
phy_id
 = 0;

132 
boﬁ
 
vÆid
 = 
Ál£
;

134 
hw
->
phy
.
addr
 = 
phy_addr
;

135 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_ID_HIGH
,

136 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
, &
phy_id
);

138 i‡(
phy_id
 != 0xFFFF &&Öhy_id != 0x0)

139 
vÆid
 = 
åue
;

141  
vÆid
;

142 
	}
}

149 
s32
 
	$ixgbe_gë_phy_id
(
ixgbe_hw
 *
hw
)

151 
u32
 
°©us
;

152 
u16
 
phy_id_high
 = 0;

153 
u16
 
phy_id_low
 = 0;

155 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_ID_HIGH
,

156 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
,

157 &
phy_id_high
);

159 i‡(
°©us
 == 0) {

160 
hw
->
phy
.
id
 = (
u32
)(
phy_id_high
 << 16);

161 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_ID_LOW
,

162 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
,

163 &
phy_id_low
);

164 
hw
->
phy
.
id
 |(
u32
)(
phy_id_low
 & 
IXGBE_PHY_REVISION_MASK
);

165 
hw
->
phy
.
ªvisi⁄
 = (
u32
)(
phy_id_low
 & ~
IXGBE_PHY_REVISION_MASK
);

167  
°©us
;

168 
	}
}

175 
ixgbe_phy_ty≥
 
	$ixgbe_gë_phy_ty≥_‰om_id
(
u32
 
phy_id
)

177 
ixgbe_phy_ty≥
 
phy_ty≥
;

179 
phy_id
) {

180 
TN1010_PHY_ID
:

181 
phy_ty≥
 = 
ixgbe_phy_ä
;

183 
AQ1002_PHY_ID
:

184 
phy_ty≥
 = 
ixgbe_phy_aq
;

186 
QT2022_PHY_ID
:

187 
phy_ty≥
 = 
ixgbe_phy_qt
;

189 
ATH_PHY_ID
:

190 
phy_ty≥
 = 
ixgbe_phy_∆
;

193 
phy_ty≥
 = 
ixgbe_phy_unknown
;

197 
	`hw_dbg
(
hw
, "phyÅy≥ found i†%d\n", 
phy_ty≥
);

198  
phy_ty≥
;

199 
	}
}

205 
s32
 
	$ixgbe_ª£t_phy_gíîic
(
ixgbe_hw
 *
hw
)

207 
u32
 
i
;

208 
u16
 
˘æ
 = 0;

209 
s32
 
°©us
 = 0;

211 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_unknown
)

212 
°©us
 = 
	`ixgbe_idítify_phy_gíîic
(
hw
);

214 i‡(
°©us
 !0 || 
hw
->
phy
.
ty≥
 =
ixgbe_phy_n⁄e
)

215 
out
;

221 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MDIO_PHY_XS_CONTROL
,

222 
IXGBE_MDIO_PHY_XS_DEV_TYPE
,

223 
IXGBE_MDIO_PHY_XS_RESET
);

226 
i
 = 0; i < 500; i++) {

227 
	`m¶ìp
(1);

228 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_XS_CONTROL
,

229 
IXGBE_MDIO_PHY_XS_DEV_TYPE
, &
˘æ
);

230 i‡(!(
˘æ
 & 
IXGBE_MDIO_PHY_XS_RESET
))

234 i‡(
˘æ
 & 
IXGBE_MDIO_PHY_XS_RESET
) {

235 
°©us
 = 
IXGBE_ERR_RESET_FAILED
;

236 
	`hw_dbg
(
hw
, "PHYÑesetÖolling failedÅo complete.\n");

239 
out
:

240  
°©us
;

241 
	}
}

249 
s32
 
	$ixgbe_ªad_phy_ªg_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
,

250 
u32
 
devi˚_ty≥
, 
u16
 *
phy_d©a
)

252 
u32
 
comm™d
;

253 
u32
 
i
;

254 
u32
 
d©a
;

255 
s32
 
°©us
 = 0;

256 
u16
 
gs§
;

258 i‡(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_STATUS
Ë& 
IXGBE_STATUS_LAN_ID_1
)

259 
gs§
 = 
IXGBE_GSSR_PHY1_SM
;

261 
gs§
 = 
IXGBE_GSSR_PHY0_SM
;

263 i‡(
	`ixgbe_acquúe_swfw_sync
(
hw
, 
gs§
) != 0)

264 
°©us
 = 
IXGBE_ERR_SWFW_SYNC
;

266 i‡(
°©us
 == 0) {

268 
comm™d
 = ((
ªg_addr
 << 
IXGBE_MSCA_NP_ADDR_SHIFT
) |

269 (
devi˚_ty≥
 << 
IXGBE_MSCA_DEV_TYPE_SHIFT
) |

270 (
hw
->
phy
.
addr
 << 
IXGBE_MSCA_PHY_ADDR_SHIFT
) |

271 (
IXGBE_MSCA_ADDR_CYCLE
 | 
IXGBE_MSCA_MDI_COMMAND
));

273 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MSCA
, 
comm™d
);

280 
i
 = 0; i < 
IXGBE_MDIO_COMMAND_TIMEOUT
; i++) {

281 
	`udñay
(10);

283 
comm™d
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSCA
);

285 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) == 0)

289 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) != 0) {

290 
	`hw_dbg
(
hw
, "PHYáddress command didÇot complete.\n");

291 
°©us
 = 
IXGBE_ERR_PHY
;

294 i‡(
°©us
 == 0) {

299 
comm™d
 = ((
ªg_addr
 << 
IXGBE_MSCA_NP_ADDR_SHIFT
) |

300 (
devi˚_ty≥
 << 
IXGBE_MSCA_DEV_TYPE_SHIFT
) |

301 (
hw
->
phy
.
addr
 << 
IXGBE_MSCA_PHY_ADDR_SHIFT
) |

302 (
IXGBE_MSCA_READ
 | 
IXGBE_MSCA_MDI_COMMAND
));

304 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MSCA
, 
comm™d
);

311 
i
 = 0; i < 
IXGBE_MDIO_COMMAND_TIMEOUT
; i++) {

312 
	`udñay
(10);

314 
comm™d
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSCA
);

316 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) == 0)

320 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) != 0) {

321 
	`hw_dbg
(
hw
, "PHYÑead command didn't complete\n");

322 
°©us
 = 
IXGBE_ERR_PHY
;

328 
d©a
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSRWD
);

329 
d©a
 >>
IXGBE_MSRWD_READ_DATA_SHIFT
;

330 *
phy_d©a
 = (
u16
)(
d©a
);

334 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
gs§
);

337  
°©us
;

338 
	}
}

347 
s32
 
	$ixgbe_wrôe_phy_ªg_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
,

348 
u32
 
devi˚_ty≥
, 
u16
 
phy_d©a
)

350 
u32
 
comm™d
;

351 
u32
 
i
;

352 
s32
 
°©us
 = 0;

353 
u16
 
gs§
;

355 i‡(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_STATUS
Ë& 
IXGBE_STATUS_LAN_ID_1
)

356 
gs§
 = 
IXGBE_GSSR_PHY1_SM
;

358 
gs§
 = 
IXGBE_GSSR_PHY0_SM
;

360 i‡(
	`ixgbe_acquúe_swfw_sync
(
hw
, 
gs§
) != 0)

361 
°©us
 = 
IXGBE_ERR_SWFW_SYNC
;

363 i‡(
°©us
 == 0) {

365 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MSRWD
, (
u32
)
phy_d©a
);

368 
comm™d
 = ((
ªg_addr
 << 
IXGBE_MSCA_NP_ADDR_SHIFT
) |

369 (
devi˚_ty≥
 << 
IXGBE_MSCA_DEV_TYPE_SHIFT
) |

370 (
hw
->
phy
.
addr
 << 
IXGBE_MSCA_PHY_ADDR_SHIFT
) |

371 (
IXGBE_MSCA_ADDR_CYCLE
 | 
IXGBE_MSCA_MDI_COMMAND
));

373 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MSCA
, 
comm™d
);

380 
i
 = 0; i < 
IXGBE_MDIO_COMMAND_TIMEOUT
; i++) {

381 
	`udñay
(10);

383 
comm™d
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSCA
);

385 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) == 0)

389 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) != 0) {

390 
	`hw_dbg
(
hw
, "PHYáddress cmd didn't complete\n");

391 
°©us
 = 
IXGBE_ERR_PHY
;

394 i‡(
°©us
 == 0) {

399 
comm™d
 = ((
ªg_addr
 << 
IXGBE_MSCA_NP_ADDR_SHIFT
) |

400 (
devi˚_ty≥
 << 
IXGBE_MSCA_DEV_TYPE_SHIFT
) |

401 (
hw
->
phy
.
addr
 << 
IXGBE_MSCA_PHY_ADDR_SHIFT
) |

402 (
IXGBE_MSCA_WRITE
 | 
IXGBE_MSCA_MDI_COMMAND
));

404 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_MSCA
, 
comm™d
);

411 
i
 = 0; i < 
IXGBE_MDIO_COMMAND_TIMEOUT
; i++) {

412 
	`udñay
(10);

414 
comm™d
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_MSCA
);

416 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) == 0)

420 i‡((
comm™d
 & 
IXGBE_MSCA_MDI_COMMAND
) != 0) {

421 
	`hw_dbg
(
hw
, "PHYáddress cmd didn't complete\n");

422 
°©us
 = 
IXGBE_ERR_PHY
;

426 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
gs§
);

429  
°©us
;

430 
	}
}

438 
s32
 
	$ixgbe_£tup_phy_lök_gíîic
(
ixgbe_hw
 *
hw
)

440 
s32
 
°©us
 = 0;

441 
u32
 
time_out
;

442 
u32
 
max_time_out
 = 10;

443 
u16
 
aut⁄eg_ªg
 = 
IXGBE_MII_AUTONEG_REG
;

444 
boﬁ
 
aut⁄eg
 = 
Ál£
;

445 
ixgbe_lök_•ìd
 
•ìd
;

447 
	`ixgbe_gë_c›≥r_lök_ˇ∑bûôõs_gíîic
(
hw
, &
•ìd
, &
aut⁄eg
);

449 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_10GB_FULL
) {

451 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG
,

452 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

453 &
aut⁄eg_ªg
);

455 
aut⁄eg_ªg
 &~
IXGBE_MII_10GBASE_T_ADVERTISE
;

456 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_10GB_FULL
)

457 
aut⁄eg_ªg
 |
IXGBE_MII_10GBASE_T_ADVERTISE
;

459 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG
,

460 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

461 
aut⁄eg_ªg
);

464 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_1GB_FULL
) {

466 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw,

467 
IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG
,

468 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

469 &
aut⁄eg_ªg
);

471 
aut⁄eg_ªg
 &~
IXGBE_MII_1GBASE_T_ADVERTISE
;

472 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_1GB_FULL
)

473 
aut⁄eg_ªg
 |
IXGBE_MII_1GBASE_T_ADVERTISE
;

475 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw,

476 
IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG
,

477 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

478 
aut⁄eg_ªg
);

481 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_100_FULL
) {

483 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MII_AUTONEG_ADVERTISE_REG
,

484 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

485 &
aut⁄eg_ªg
);

487 
aut⁄eg_ªg
 &~
IXGBE_MII_100BASE_T_ADVERTISE
;

488 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_100_FULL
)

489 
aut⁄eg_ªg
 |
IXGBE_MII_100BASE_T_ADVERTISE
;

491 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MII_AUTONEG_ADVERTISE_REG
,

492 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

493 
aut⁄eg_ªg
);

497 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_AUTO_NEG_CONTROL
,

498 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
, &
aut⁄eg_ªg
);

500 
aut⁄eg_ªg
 |
IXGBE_MII_RESTART
;

502 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MDIO_AUTO_NEG_CONTROL
,

503 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
, 
aut⁄eg_ªg
);

506 
time_out
 = 0;Åime_ouà< 
max_time_out
;Åime_out++) {

507 
	`udñay
(10);

509 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_AUTO_NEG_STATUS
,

510 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

511 &
aut⁄eg_ªg
);

513 
aut⁄eg_ªg
 &
IXGBE_MII_AUTONEG_COMPLETE
;

514 i‡(
aut⁄eg_ªg
 =
IXGBE_MII_AUTONEG_COMPLETE
) {

519 i‡(
time_out
 =
max_time_out
) {

520 
°©us
 = 
IXGBE_ERR_LINK_SETUP
;

521 
	`hw_dbg
(
hw
, "ixgbe_setup_phy_link_generic:Åime out");

524  
°©us
;

525 
	}
}

533 
s32
 
	$ixgbe_£tup_phy_lök_•ìd_gíîic
(
ixgbe_hw
 *
hw
,

534 
ixgbe_lök_•ìd
 
•ìd
,

535 
boﬁ
 
aut⁄eg
,

536 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
)

543 
hw
->
phy
.
aut⁄eg_advîti£d
 = 0;

545 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_10GB_FULL
)

546 
hw
->
phy
.
aut⁄eg_advîti£d
 |
IXGBE_LINK_SPEED_10GB_FULL
;

548 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_1GB_FULL
)

549 
hw
->
phy
.
aut⁄eg_advîti£d
 |
IXGBE_LINK_SPEED_1GB_FULL
;

551 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_100_FULL
)

552 
hw
->
phy
.
aut⁄eg_advîti£d
 |
IXGBE_LINK_SPEED_100_FULL
;

555 
hw
->
phy
.
›s
.
	`£tup_lök
(hw);

558 
	}
}

568 
s32
 
	$ixgbe_gë_c›≥r_lök_ˇ∑bûôõs_gíîic
(
ixgbe_hw
 *
hw
,

569 
ixgbe_lök_•ìd
 *
•ìd
,

570 
boﬁ
 *
aut⁄eg
)

572 
s32
 
°©us
 = 
IXGBE_ERR_LINK_SETUP
;

573 
u16
 
•ìd_abûôy
;

575 *
•ìd
 = 0;

576 *
aut⁄eg
 = 
åue
;

578 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_SPEED_ABILITY
,

579 
IXGBE_MDIO_PMA_PMD_DEV_TYPE
,

580 &
•ìd_abûôy
);

582 i‡(
°©us
 == 0) {

583 i‡(
•ìd_abûôy
 & 
IXGBE_MDIO_PHY_SPEED_10G
)

584 *
•ìd
 |
IXGBE_LINK_SPEED_10GB_FULL
;

585 i‡(
•ìd_abûôy
 & 
IXGBE_MDIO_PHY_SPEED_1G
)

586 *
•ìd
 |
IXGBE_LINK_SPEED_1GB_FULL
;

587 i‡(
•ìd_abûôy
 & 
IXGBE_MDIO_PHY_SPEED_100M
)

588 *
•ìd
 |
IXGBE_LINK_SPEED_100_FULL
;

591  
°©us
;

592 
	}
}

601 
s32
 
	$ixgbe_check_phy_lök_äx
(
ixgbe_hw
 *
hw
, 
ixgbe_lök_•ìd
 *
•ìd
,

602 
boﬁ
 *
lök_up
)

604 
s32
 
°©us
 = 0;

605 
u32
 
time_out
;

606 
u32
 
max_time_out
 = 10;

607 
u16
 
phy_lök
 = 0;

608 
u16
 
phy_•ìd
 = 0;

609 
u16
 
phy_d©a
 = 0;

612 *
lök_up
 = 
Ál£
;

613 *
•ìd
 = 
IXGBE_LINK_SPEED_10GB_FULL
;

620 
time_out
 = 0;Åime_ouà< 
max_time_out
;Åime_out++) {

621 
	`udñay
(10);

622 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw,

623 
IXGBE_MDIO_VENDOR_SPECIFIC_1_STATUS
,

624 
IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE
,

625 &
phy_d©a
);

626 
phy_lök
 = 
phy_d©a
 &

627 
IXGBE_MDIO_VENDOR_SPECIFIC_1_LINK_STATUS
;

628 
phy_•ìd
 = 
phy_d©a
 &

629 
IXGBE_MDIO_VENDOR_SPECIFIC_1_SPEED_STATUS
;

630 i‡(
phy_lök
 =
IXGBE_MDIO_VENDOR_SPECIFIC_1_LINK_STATUS
) {

631 *
lök_up
 = 
åue
;

632 i‡(
phy_•ìd
 ==

633 
IXGBE_MDIO_VENDOR_SPECIFIC_1_SPEED_STATUS
)

634 *
•ìd
 = 
IXGBE_LINK_SPEED_1GB_FULL
;

639  
°©us
;

640 
	}
}

648 
s32
 
	$ixgbe_£tup_phy_lök_äx
(
ixgbe_hw
 *
hw
)

650 
s32
 
°©us
 = 0;

651 
u32
 
time_out
;

652 
u32
 
max_time_out
 = 10;

653 
u16
 
aut⁄eg_ªg
 = 
IXGBE_MII_AUTONEG_REG
;

654 
boﬁ
 
aut⁄eg
 = 
Ál£
;

655 
ixgbe_lök_•ìd
 
•ìd
;

657 
	`ixgbe_gë_c›≥r_lök_ˇ∑bûôõs_gíîic
(
hw
, &
•ìd
, &
aut⁄eg
);

659 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_10GB_FULL
) {

661 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG
,

662 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

663 &
aut⁄eg_ªg
);

665 
aut⁄eg_ªg
 &~
IXGBE_MII_10GBASE_T_ADVERTISE
;

666 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_10GB_FULL
)

667 
aut⁄eg_ªg
 |
IXGBE_MII_10GBASE_T_ADVERTISE
;

669 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG
,

670 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

671 
aut⁄eg_ªg
);

674 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_1GB_FULL
) {

676 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MII_AUTONEG_XNP_TX_REG
,

677 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

678 &
aut⁄eg_ªg
);

680 
aut⁄eg_ªg
 &~
IXGBE_MII_1GBASE_T_ADVERTISE_XNP_TX
;

681 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_1GB_FULL
)

682 
aut⁄eg_ªg
 |
IXGBE_MII_1GBASE_T_ADVERTISE_XNP_TX
;

684 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MII_AUTONEG_XNP_TX_REG
,

685 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

686 
aut⁄eg_ªg
);

689 i‡(
•ìd
 & 
IXGBE_LINK_SPEED_100_FULL
) {

691 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MII_AUTONEG_ADVERTISE_REG
,

692 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

693 &
aut⁄eg_ªg
);

695 
aut⁄eg_ªg
 &~
IXGBE_MII_100BASE_T_ADVERTISE
;

696 i‡(
hw
->
phy
.
aut⁄eg_advîti£d
 & 
IXGBE_LINK_SPEED_100_FULL
)

697 
aut⁄eg_ªg
 |
IXGBE_MII_100BASE_T_ADVERTISE
;

699 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MII_AUTONEG_ADVERTISE_REG
,

700 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

701 
aut⁄eg_ªg
);

705 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_AUTO_NEG_CONTROL
,

706 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
, &
aut⁄eg_ªg
);

708 
aut⁄eg_ªg
 |
IXGBE_MII_RESTART
;

710 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MDIO_AUTO_NEG_CONTROL
,

711 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
, 
aut⁄eg_ªg
);

714 
time_out
 = 0;Åime_ouà< 
max_time_out
;Åime_out++) {

715 
	`udñay
(10);

717 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_AUTO_NEG_STATUS
,

718 
IXGBE_MDIO_AUTO_NEG_DEV_TYPE
,

719 &
aut⁄eg_ªg
);

721 
aut⁄eg_ªg
 &
IXGBE_MII_AUTONEG_COMPLETE
;

722 i‡(
aut⁄eg_ªg
 =
IXGBE_MII_AUTONEG_COMPLETE
) {

727 i‡(
time_out
 =
max_time_out
) {

728 
°©us
 = 
IXGBE_ERR_LINK_SETUP
;

729 
	`hw_dbg
(
hw
, "ixgbe_setup_phy_link_tnx:Åime out");

732  
°©us
;

733 
	}
}

741 
s32
 
	$ixgbe_gë_phy_fúmw¨e_vîsi⁄_äx
(
ixgbe_hw
 *
hw
,

742 
u16
 *
fúmw¨e_vîsi⁄
)

744 
s32
 
°©us
 = 0;

746 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
TNX_FW_REV
,

747 
IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE
,

748 
fúmw¨e_vîsi⁄
);

750  
°©us
;

751 
	}
}

759 
s32
 
	$ixgbe_gë_phy_fúmw¨e_vîsi⁄_aq
(
ixgbe_hw
 *
hw
,

760 
u16
 *
fúmw¨e_vîsi⁄
)

762 
s32
 
°©us
 = 0;

764 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
AQ_FW_REV
,

765 
IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE
,

766 
fúmw¨e_vîsi⁄
);

768  
°©us
;

769 
	}
}

775 
s32
 
	$ixgbe_ª£t_phy_∆
(
ixgbe_hw
 *
hw
)

777 
u16
 
phy_off£t
, 
c⁄åﬁ
, 
ew‹d
, 
ed©a
, 
block_¸c
;

778 
boﬁ
 
íd_d©a
 = 
Ál£
;

779 
u16
 
li°_off£t
, 
d©a_off£t
;

780 
u16
 
phy_d©a
 = 0;

781 
s32
 
ªt_vÆ
 = 0;

782 
u32
 
i
;

784 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_XS_CONTROL
,

785 
IXGBE_MDIO_PHY_XS_DEV_TYPE
, &
phy_d©a
);

788 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
IXGBE_MDIO_PHY_XS_CONTROL
,

789 
IXGBE_MDIO_PHY_XS_DEV_TYPE
,

790 (
phy_d©a
 | 
IXGBE_MDIO_PHY_XS_RESET
));

792 
i
 = 0; i < 100; i++) {

793 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
IXGBE_MDIO_PHY_XS_CONTROL
,

794 
IXGBE_MDIO_PHY_XS_DEV_TYPE
, &
phy_d©a
);

795 i‡((
phy_d©a
 & 
IXGBE_MDIO_PHY_XS_RESET
) == 0)

797 
	`m¶ìp
(10);

800 i‡((
phy_d©a
 & 
IXGBE_MDIO_PHY_XS_RESET
) != 0) {

801 
	`hw_dbg
(
hw
, "PHYÑeset didÇot complete.\n");

802 
ªt_vÆ
 = 
IXGBE_ERR_PHY
;

803 
out
;

807 
ªt_vÆ
 = 
	`ixgbe_gë_sÂ_öô_£quí˚_off£ts
(
hw
, &
li°_off£t
,

808 &
d©a_off£t
);

809 i‡(
ªt_vÆ
 != 0)

810 
out
;

812 
ªt_vÆ
 = 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
d©a_off£t
, &
block_¸c
);

813 
d©a_off£t
++;

814 !
íd_d©a
) {

818 
ªt_vÆ
 = 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
d©a_off£t
, &
ew‹d
);

819 
c⁄åﬁ
 = (
ew‹d
 & 
IXGBE_CONTROL_MASK_NL
) >>

820 
IXGBE_CONTROL_SHIFT_NL
;

821 
ed©a
 = 
ew‹d
 & 
IXGBE_DATA_MASK_NL
;

822 
c⁄åﬁ
) {

823 
IXGBE_DELAY_NL
:

824 
d©a_off£t
++;

825 
	`hw_dbg
(
hw
, "DELAY: %d MS\n", 
ed©a
);

826 
	`m¶ìp
(
ed©a
);

828 
IXGBE_DATA_NL
:

829 
	`hw_dbg
(
hw
, "DATA: \n");

830 
d©a_off£t
++;

831 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
d©a_off£t
++,

832 &
phy_off£t
);

833 
i
 = 0; i < 
ed©a
; i++) {

834 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
d©a_off£t
, &
ew‹d
);

835 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
phy_off£t
,

836 
IXGBE_TWINAX_DEV
, 
ew‹d
);

837 
	`hw_dbg
(
hw
, "WrŸê%4.4xÅÿ%4.4x\n", 
ew‹d
,

838 
phy_off£t
);

839 
d©a_off£t
++;

840 
phy_off£t
++;

843 
IXGBE_CONTROL_NL
:

844 
d©a_off£t
++;

845 
	`hw_dbg
(
hw
, "CONTROL: \n");

846 i‡(
ed©a
 =
IXGBE_CONTROL_EOL_NL
) {

847 
	`hw_dbg
(
hw
, "EOL\n");

848 
íd_d©a
 = 
åue
;

849 } i‡(
ed©a
 =
IXGBE_CONTROL_SOL_NL
) {

850 
	`hw_dbg
(
hw
, "SOL\n");

852 
	`hw_dbg
(
hw
, "Bad control value\n");

853 
ªt_vÆ
 = 
IXGBE_ERR_PHY
;

854 
out
;

858 
	`hw_dbg
(
hw
, "Bad controlÅype\n");

859 
ªt_vÆ
 = 
IXGBE_ERR_PHY
;

860 
out
;

864 
out
:

865  
ªt_vÆ
;

866 
	}
}

874 
s32
 
	$ixgbe_idítify_sÂ_moduÀ_gíîic
(
ixgbe_hw
 *
hw
)

876 
s32
 
°©us
 = 
IXGBE_ERR_PHY_ADDR_INVALID
;

877 
u32
 
víd‹_oui
 = 0;

878 
ixgbe_sÂ_ty≥
 
°‹ed_sÂ_ty≥
 = 
hw
->
phy
.
sÂ_ty≥
;

879 
u8
 
idítifõr
 = 0;

880 
u8
 
comp_codes_1g
 = 0;

881 
u8
 
comp_codes_10g
 = 0;

882 
u8
 
oui_byãs
[3] = {0, 0, 0};

883 
u8
 
ˇbÀ_ãch
 = 0;

884 
u16
 
íf‹˚_sÂ
 = 0;

886 i‡(
hw
->
mac
.
›s
.
	`gë_medü_ty≥
(hwË!
ixgbe_medü_ty≥_fibî
) {

887 
hw
->
phy
.
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_nŸ_¥e£¡
;

888 
°©us
 = 
IXGBE_ERR_SFP_NOT_PRESENT
;

889 
out
;

892 
°©us
 = 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw, 
IXGBE_SFF_IDENTIFIER
,

893 &
idítifõr
);

895 i‡(
°©us
 =
IXGBE_ERR_SFP_NOT_PRESENT
 || sètu†=
IXGBE_ERR_I2C
) {

896 
°©us
 = 
IXGBE_ERR_SFP_NOT_PRESENT
;

897 
hw
->
phy
.
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_nŸ_¥e£¡
;

898 i‡(
hw
->
phy
.
ty≥
 !
ixgbe_phy_∆
) {

899 
hw
->
phy
.
id
 = 0;

900 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_unknown
;

902 
out
;

906 
hw
->
mac
.
›s
.
	`£t_œn_id
(hw);

908 i‡(
idítifõr
 !
IXGBE_SFF_IDENTIFIER_SFP
) {

909 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_sÂ_unsuµ‹ãd
;

910 
°©us
 = 
IXGBE_ERR_SFP_NOT_SUPPORTED
;

912 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw, 
IXGBE_SFF_1GBE_COMP_CODES
,

913 &
comp_codes_1g
);

914 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw, 
IXGBE_SFF_10GBE_COMP_CODES
,

915 &
comp_codes_10g
);

916 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw, 
IXGBE_SFF_CABLE_TECHNOLOGY
,

917 &
ˇbÀ_ãch
);

934 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

935 i‡(
ˇbÀ_ãch
 & 
IXGBE_SFF_DA_PASSIVE_CABLE
)

936 
hw
->
phy
.
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_da_cu
;

937 i‡(
comp_codes_10g
 & 
IXGBE_SFF_10GBASESR_CAPABLE
)

938 
hw
->
phy
.
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_§
;

939 i‡(
comp_codes_10g
 & 
IXGBE_SFF_10GBASELR_CAPABLE
)

940 
hw
->
phy
.
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_Ã
;

942 
hw
->
phy
.
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_unknown
;

943 } i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82599EB
) {

944 i‡(
ˇbÀ_ãch
 & 
IXGBE_SFF_DA_PASSIVE_CABLE
)

945 i‡(
hw
->
bus
.
œn_id
 == 0)

946 
hw
->
phy
.
sÂ_ty≥
 =

947 
ixgbe_sÂ_ty≥_da_cu_c‹e0
;

949 
hw
->
phy
.
sÂ_ty≥
 =

950 
ixgbe_sÂ_ty≥_da_cu_c‹e1
;

951 i‡(
comp_codes_10g
 & 
IXGBE_SFF_10GBASESR_CAPABLE
)

952 i‡(
hw
->
bus
.
œn_id
 == 0)

953 
hw
->
phy
.
sÂ_ty≥
 =

954 
ixgbe_sÂ_ty≥_§Ã_c‹e0
;

956 
hw
->
phy
.
sÂ_ty≥
 =

957 
ixgbe_sÂ_ty≥_§Ã_c‹e1
;

958 i‡(
comp_codes_10g
 & 
IXGBE_SFF_10GBASELR_CAPABLE
)

959 i‡(
hw
->
bus
.
œn_id
 == 0)

960 
hw
->
phy
.
sÂ_ty≥
 =

961 
ixgbe_sÂ_ty≥_§Ã_c‹e0
;

963 
hw
->
phy
.
sÂ_ty≥
 =

964 
ixgbe_sÂ_ty≥_§Ã_c‹e1
;

966 
hw
->
phy
.
sÂ_ty≥
 = 
ixgbe_sÂ_ty≥_unknown
;

969 i‡(
hw
->
phy
.
sÂ_ty≥
 !
°‹ed_sÂ_ty≥
)

970 
hw
->
phy
.
sÂ_£tup_√eded
 = 
åue
;

973 
hw
->
phy
.
mu…i•ìd_fibî
 = 
Ál£
;

974 i‡(((
comp_codes_1g
 & 
IXGBE_SFF_1GBASESX_CAPABLE
) &&

975 (
comp_codes_10g
 & 
IXGBE_SFF_10GBASESR_CAPABLE
)) ||

976 ((
comp_codes_1g
 & 
IXGBE_SFF_1GBASELX_CAPABLE
) &&

977 (
comp_codes_10g
 & 
IXGBE_SFF_10GBASELR_CAPABLE
)))

978 
hw
->
phy
.
mu…i•ìd_fibî
 = 
åue
;

980 i‡(
hw
->
phy
.
ty≥
 !
ixgbe_phy_∆
) {

981 
hw
->
phy
.
id
 = 
idítifõr
;

982 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw,

983 
IXGBE_SFF_VENDOR_OUI_BYTE0
,

984 &
oui_byãs
[0]);

985 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw,

986 
IXGBE_SFF_VENDOR_OUI_BYTE1
,

987 &
oui_byãs
[1]);

988 
hw
->
phy
.
›s
.
	`ªad_i2c_ì¥om
(hw,

989 
IXGBE_SFF_VENDOR_OUI_BYTE2
,

990 &
oui_byãs
[2]);

992 
víd‹_oui
 =

993 ((
oui_byãs
[0] << 
IXGBE_SFF_VENDOR_OUI_BYTE0_SHIFT
) |

994 (
oui_byãs
[1] << 
IXGBE_SFF_VENDOR_OUI_BYTE1_SHIFT
) |

995 (
oui_byãs
[2] << 
IXGBE_SFF_VENDOR_OUI_BYTE2_SHIFT
));

997 
víd‹_oui
) {

998 
IXGBE_SFF_VENDOR_OUI_TYCO
:

999 i‡(
ˇbÀ_ãch
 & 
IXGBE_SFF_DA_PASSIVE_CABLE
)

1000 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_tw_tyco
;

1002 
IXGBE_SFF_VENDOR_OUI_FTL
:

1003 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_sÂ_·l
;

1005 
IXGBE_SFF_VENDOR_OUI_AVAGO
:

1006 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_sÂ_avago
;

1008 
IXGBE_SFF_VENDOR_OUI_INTEL
:

1009 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_sÂ_öãl
;

1012 i‡(
ˇbÀ_ãch
 & 
IXGBE_SFF_DA_PASSIVE_CABLE
)

1013 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_tw_unknown
;

1015 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_sÂ_unknown
;

1021 i‡(
ˇbÀ_ãch
 & 
IXGBE_SFF_DA_PASSIVE_CABLE
) {

1022 
°©us
 = 0;

1023 
out
;

1027 i‡(
comp_codes_10g
 == 0) {

1028 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_sÂ_unsuµ‹ãd
;

1029 
°©us
 = 
IXGBE_ERR_SFP_NOT_SUPPORTED
;

1030 
out
;

1034 i‡(
hw
->
mac
.
ty≥
 =
ixgbe_mac_82598EB
) {

1035 
°©us
 = 0;

1036 
out
;

1039 
	`ixgbe_gë_devi˚_ˇps
(
hw
, &
íf‹˚_sÂ
);

1040 i‡(!(
íf‹˚_sÂ
 & 
IXGBE_DEVICE_CAPS_ALLOW_ANY_SFP
)) {

1042 i‡(
hw
->
phy
.
ty≥
 =
ixgbe_phy_sÂ_öãl
) {

1043 
°©us
 = 0;

1045 
	`hw_dbg
(
hw
, "SFP+ moduleÇot supported\n");

1046 
hw
->
phy
.
ty≥
 = 
ixgbe_phy_sÂ_unsuµ‹ãd
;

1047 
°©us
 = 
IXGBE_ERR_SFP_NOT_SUPPORTED
;

1050 
°©us
 = 0;

1054 
out
:

1055  
°©us
;

1056 
	}
}

1067 
s32
 
	$ixgbe_gë_sÂ_öô_£quí˚_off£ts
(
ixgbe_hw
 *
hw
,

1068 
u16
 *
li°_off£t
,

1069 
u16
 *
d©a_off£t
)

1071 
u16
 
sÂ_id
;

1073 i‡(
hw
->
phy
.
sÂ_ty≥
 =
ixgbe_sÂ_ty≥_unknown
)

1074  
IXGBE_ERR_SFP_NOT_SUPPORTED
;

1076 i‡(
hw
->
phy
.
sÂ_ty≥
 =
ixgbe_sÂ_ty≥_nŸ_¥e£¡
)

1077  
IXGBE_ERR_SFP_NOT_PRESENT
;

1079 i‡((
hw
->
devi˚_id
 =
IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM
) &&

1080 (
hw
->
phy
.
sÂ_ty≥
 =
ixgbe_sÂ_ty≥_da_cu
))

1081  
IXGBE_ERR_SFP_NOT_SUPPORTED
;

1084 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, 
IXGBE_PHY_INIT_OFFSET_NL
, 
li°_off£t
);

1086 i‡((!*
li°_off£t
) || (*list_offset == 0xFFFF))

1087  
IXGBE_ERR_SFP_NO_INIT_SEQ_PRESENT
;

1090 (*
li°_off£t
)++;

1096 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, *
li°_off£t
, &
sÂ_id
);

1098 
sÂ_id
 !
IXGBE_PHY_INIT_END_NL
) {

1099 i‡(
sÂ_id
 =
hw
->
phy
.
sÂ_ty≥
) {

1100 (*
li°_off£t
)++;

1101 
hw
->
ì¥om
.
›s
.
	`ªad
(hw, *
li°_off£t
, 
d©a_off£t
);

1102 i‡((!*
d©a_off£t
) || (*data_offset == 0xFFFF)) {

1103 
	`hw_dbg
(
hw
, "SFP+ moduleÇot supported\n");

1104  
IXGBE_ERR_SFP_NOT_SUPPORTED
;

1109 (*
li°_off£t
) += 2;

1110 i‡(
hw
->
ì¥om
.
›s
.
	`ªad
(hw, *
li°_off£t
, &
sÂ_id
))

1111  
IXGBE_ERR_PHY
;

1115 i‡(
sÂ_id
 =
IXGBE_PHY_INIT_END_NL
) {

1116 
	`hw_dbg
(
hw
, "No matching SFP+ module found\n");

1117  
IXGBE_ERR_SFP_NOT_SUPPORTED
;

1121 
	}
}

1131 
s32
 
	$ixgbe_ªad_i2c_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

1132 
u8
 *
ì¥om_d©a
)

1134  
hw
->
phy
.
›s
.
	`ªad_i2c_byã
(hw, 
byã_off£t
,

1135 
IXGBE_I2C_EEPROM_DEV_ADDR
,

1136 
ì¥om_d©a
);

1137 
	}
}

1147 
s32
 
	$ixgbe_wrôe_i2c_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

1148 
u8
 
ì¥om_d©a
)

1150  
hw
->
phy
.
›s
.
	`wrôe_i2c_byã
(hw, 
byã_off£t
,

1151 
IXGBE_I2C_EEPROM_DEV_ADDR
,

1152 
ì¥om_d©a
);

1153 
	}
}

1164 
s32
 
	$ixgbe_ªad_i2c_byã_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

1165 
u8
 
dev_addr
, u8 *
d©a
)

1167 
s32
 
°©us
 = 0;

1168 
u32
 
max_ªåy
 = 10;

1169 
u32
 
ªåy
 = 0;

1170 
u16
 
swfw_mask
 = 0;

1171 
boﬁ
 
«ck
 = 1;

1173 i‡(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_STATUS
Ë& 
IXGBE_STATUS_LAN_ID_1
)

1174 
swfw_mask
 = 
IXGBE_GSSR_PHY1_SM
;

1176 
swfw_mask
 = 
IXGBE_GSSR_PHY0_SM
;

1180 i‡(
	`ixgbe_acquúe_swfw_sync
(
hw
, 
swfw_mask
) != 0) {

1181 
°©us
 = 
IXGBE_ERR_SWFW_SYNC
;

1182 
ªad_byã_out
;

1185 
	`ixgbe_i2c_°¨t
(
hw
);

1188 
°©us
 = 
	`ixgbe_˛ock_out_i2c_byã
(
hw
, 
dev_addr
);

1189 i‡(
°©us
 != 0)

1190 
Áû
;

1192 
°©us
 = 
	`ixgbe_gë_i2c_ack
(
hw
);

1193 i‡(
°©us
 != 0)

1194 
Áû
;

1196 
°©us
 = 
	`ixgbe_˛ock_out_i2c_byã
(
hw
, 
byã_off£t
);

1197 i‡(
°©us
 != 0)

1198 
Áû
;

1200 
°©us
 = 
	`ixgbe_gë_i2c_ack
(
hw
);

1201 i‡(
°©us
 != 0)

1202 
Áû
;

1204 
	`ixgbe_i2c_°¨t
(
hw
);

1207 
°©us
 = 
	`ixgbe_˛ock_out_i2c_byã
(
hw
, (
dev_addr
 | 0x1));

1208 i‡(
°©us
 != 0)

1209 
Áû
;

1211 
°©us
 = 
	`ixgbe_gë_i2c_ack
(
hw
);

1212 i‡(
°©us
 != 0)

1213 
Áû
;

1215 
°©us
 = 
	`ixgbe_˛ock_ö_i2c_byã
(
hw
, 
d©a
);

1216 i‡(
°©us
 != 0)

1217 
Áû
;

1219 
°©us
 = 
	`ixgbe_˛ock_out_i2c_bô
(
hw
, 
«ck
);

1220 i‡(
°©us
 != 0)

1221 
Áû
;

1223 
	`ixgbe_i2c_°›
(
hw
);

1226 
Áû
:

1227 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
swfw_mask
);

1228 
	`m¶ìp
(100);

1229 
	`ixgbe_i2c_bus_˛ór
(
hw
);

1230 
ªåy
++;

1231 i‡(
ªåy
 < 
max_ªåy
)

1232 
	`hw_dbg
(
hw
, "I2C byteÑeadÉrror - Retrying.\n");

1234 
	`hw_dbg
(
hw
, "I2C byteÑeadÉrror.\n");

1236 } 
ªåy
 < 
max_ªåy
);

1238 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
swfw_mask
);

1240 
ªad_byã_out
:

1241  
°©us
;

1242 
	}
}

1253 
s32
 
	$ixgbe_wrôe_i2c_byã_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

1254 
u8
 
dev_addr
, u8 
d©a
)

1256 
s32
 
°©us
 = 0;

1257 
u32
 
max_ªåy
 = 1;

1258 
u32
 
ªåy
 = 0;

1259 
u16
 
swfw_mask
 = 0;

1261 i‡(
	`IXGBE_READ_REG
(
hw
, 
IXGBE_STATUS
Ë& 
IXGBE_STATUS_LAN_ID_1
)

1262 
swfw_mask
 = 
IXGBE_GSSR_PHY1_SM
;

1264 
swfw_mask
 = 
IXGBE_GSSR_PHY0_SM
;

1266 i‡(
	`ixgbe_acquúe_swfw_sync
(
hw
, 
swfw_mask
) != 0) {

1267 
°©us
 = 
IXGBE_ERR_SWFW_SYNC
;

1268 
wrôe_byã_out
;

1272 
	`ixgbe_i2c_°¨t
(
hw
);

1274 
°©us
 = 
	`ixgbe_˛ock_out_i2c_byã
(
hw
, 
dev_addr
);

1275 i‡(
°©us
 != 0)

1276 
Áû
;

1278 
°©us
 = 
	`ixgbe_gë_i2c_ack
(
hw
);

1279 i‡(
°©us
 != 0)

1280 
Áû
;

1282 
°©us
 = 
	`ixgbe_˛ock_out_i2c_byã
(
hw
, 
byã_off£t
);

1283 i‡(
°©us
 != 0)

1284 
Áû
;

1286 
°©us
 = 
	`ixgbe_gë_i2c_ack
(
hw
);

1287 i‡(
°©us
 != 0)

1288 
Áû
;

1290 
°©us
 = 
	`ixgbe_˛ock_out_i2c_byã
(
hw
, 
d©a
);

1291 i‡(
°©us
 != 0)

1292 
Áû
;

1294 
°©us
 = 
	`ixgbe_gë_i2c_ack
(
hw
);

1295 i‡(
°©us
 != 0)

1296 
Áû
;

1298 
	`ixgbe_i2c_°›
(
hw
);

1301 
Áû
:

1302 
	`ixgbe_i2c_bus_˛ór
(
hw
);

1303 
ªåy
++;

1304 i‡(
ªåy
 < 
max_ªåy
)

1305 
	`hw_dbg
(
hw
, "I2C byte writeÉrror - Retrying.\n");

1307 
	`hw_dbg
(
hw
, "I2C byte writeÉrror.\n");

1308 } 
ªåy
 < 
max_ªåy
);

1310 
	`ixgbe_ªÀa£_swfw_sync
(
hw
, 
swfw_mask
);

1312 
wrôe_byã_out
:

1313  
°©us
;

1314 
	}
}

1322 
	$ixgbe_i2c_°¨t
(
ixgbe_hw
 *
hw
)

1324 
u32
 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1327 
	`ixgbe_£t_i2c_d©a
(
hw
, &
i2c˘l
, 1);

1328 
	`ixgbe_øi£_i2c_˛k
(
hw
, &
i2c˘l
);

1331 
	`udñay
(
IXGBE_I2C_T_SU_STA
);

1333 
	`ixgbe_£t_i2c_d©a
(
hw
, &
i2c˘l
, 0);

1336 
	`udñay
(
IXGBE_I2C_T_HD_STA
);

1338 
	`ixgbe_lowî_i2c_˛k
(
hw
, &
i2c˘l
);

1341 
	`udñay
(
IXGBE_I2C_T_LOW
);

1343 
	}
}

1351 
	$ixgbe_i2c_°›
(
ixgbe_hw
 *
hw
)

1353 
u32
 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1356 
	`ixgbe_£t_i2c_d©a
(
hw
, &
i2c˘l
, 0);

1357 
	`ixgbe_øi£_i2c_˛k
(
hw
, &
i2c˘l
);

1360 
	`udñay
(
IXGBE_I2C_T_SU_STO
);

1362 
	`ixgbe_£t_i2c_d©a
(
hw
, &
i2c˘l
, 1);

1365 
	`udñay
(
IXGBE_I2C_T_BUF
);

1366 
	}
}

1375 
s32
 
	$ixgbe_˛ock_ö_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 *
d©a
)

1377 
s32
 
°©us
 = 0;

1378 
s32
 
i
;

1379 
boﬁ
 
bô
 = 0;

1381 
i
 = 7; i >= 0; i--) {

1382 
°©us
 = 
	`ixgbe_˛ock_ö_i2c_bô
(
hw
, &
bô
);

1383 *
d©a
 |
bô
<<
i
;

1385 i‡(
°©us
 != 0)

1389  
°©us
;

1390 
	}
}

1399 
s32
 
	$ixgbe_˛ock_out_i2c_byã
(
ixgbe_hw
 *
hw
, 
u8
 
d©a
)

1401 
s32
 
°©us
 = 0;

1402 
s32
 
i
;

1403 
u32
 
i2c˘l
;

1404 
boﬁ
 
bô
 = 0;

1406 
i
 = 7; i >= 0; i--) {

1407 
bô
 = (
d©a
 >> 
i
) & 0x1;

1408 
°©us
 = 
	`ixgbe_˛ock_out_i2c_bô
(
hw
, 
bô
);

1410 i‡(
°©us
 != 0)

1415 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1416 
i2c˘l
 |
IXGBE_I2C_DATA_OUT
;

1417 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_I2CCTL
, 
i2c˘l
);

1419  
°©us
;

1420 
	}
}

1428 
s32
 
	$ixgbe_gë_i2c_ack
(
ixgbe_hw
 *
hw
)

1430 
s32
 
°©us
;

1431 
u32
 
i
 = 0;

1432 
u32
 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1433 
u32
 
timeout
 = 10;

1434 
boﬁ
 
ack
 = 1;

1436 
°©us
 = 
	`ixgbe_øi£_i2c_˛k
(
hw
, &
i2c˘l
);

1438 i‡(
°©us
 != 0)

1439 
out
;

1442 
	`udñay
(
IXGBE_I2C_T_HIGH
);

1446 
i
 = 0; i < 
timeout
; i++) {

1447 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1448 
ack
 = 
	`ixgbe_gë_i2c_d©a
(&
i2c˘l
);

1450 
	`udñay
(1);

1451 i‡(
ack
 == 0)

1455 i‡(
ack
 == 1) {

1456 
	`hw_dbg
(
hw
, "I2Cáck wasÇotÑeceived.\n");

1457 
°©us
 = 
IXGBE_ERR_I2C
;

1460 
	`ixgbe_lowî_i2c_˛k
(
hw
, &
i2c˘l
);

1463 
	`udñay
(
IXGBE_I2C_T_LOW
);

1465 
out
:

1466  
°©us
;

1467 
	}
}

1476 
s32
 
	$ixgbe_˛ock_ö_i2c_bô
(
ixgbe_hw
 *
hw
, 
boﬁ
 *
d©a
)

1478 
s32
 
°©us
;

1479 
u32
 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1481 
°©us
 = 
	`ixgbe_øi£_i2c_˛k
(
hw
, &
i2c˘l
);

1484 
	`udñay
(
IXGBE_I2C_T_HIGH
);

1486 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1487 *
d©a
 = 
	`ixgbe_gë_i2c_d©a
(&
i2c˘l
);

1489 
	`ixgbe_lowî_i2c_˛k
(
hw
, &
i2c˘l
);

1492 
	`udñay
(
IXGBE_I2C_T_LOW
);

1494  
°©us
;

1495 
	}
}

1504 
s32
 
	$ixgbe_˛ock_out_i2c_bô
(
ixgbe_hw
 *
hw
, 
boﬁ
 
d©a
)

1506 
s32
 
°©us
;

1507 
u32
 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1509 
°©us
 = 
	`ixgbe_£t_i2c_d©a
(
hw
, &
i2c˘l
, 
d©a
);

1510 i‡(
°©us
 == 0) {

1511 
°©us
 = 
	`ixgbe_øi£_i2c_˛k
(
hw
, &
i2c˘l
);

1514 
	`udñay
(
IXGBE_I2C_T_HIGH
);

1516 
	`ixgbe_lowî_i2c_˛k
(
hw
, &
i2c˘l
);

1521 
	`udñay
(
IXGBE_I2C_T_LOW
);

1523 
°©us
 = 
IXGBE_ERR_I2C
;

1524 
	`hw_dbg
(
hw
, "I2C d©®wa†nŸ sëÅÿ%X\n", 
d©a
);

1527  
°©us
;

1528 
	}
}

1536 
s32
 
	$ixgbe_øi£_i2c_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
i2c˘l
)

1538 
s32
 
°©us
 = 0;

1540 *
i2c˘l
 |
IXGBE_I2C_CLK_OUT
;

1542 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_I2CCTL
, *
i2c˘l
);

1545 
	`udñay
(
IXGBE_I2C_T_RISE
);

1547  
°©us
;

1548 
	}
}

1557 
	$ixgbe_lowî_i2c_˛k
(
ixgbe_hw
 *
hw
, 
u32
 *
i2c˘l
)

1560 *
i2c˘l
 &~
IXGBE_I2C_CLK_OUT
;

1562 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_I2CCTL
, *
i2c˘l
);

1565 
	`udñay
(
IXGBE_I2C_T_FALL
);

1566 
	}
}

1576 
s32
 
	$ixgbe_£t_i2c_d©a
(
ixgbe_hw
 *
hw
, 
u32
 *
i2c˘l
, 
boﬁ
 
d©a
)

1578 
s32
 
°©us
 = 0;

1580 i‡(
d©a
)

1581 *
i2c˘l
 |
IXGBE_I2C_DATA_OUT
;

1583 *
i2c˘l
 &~
IXGBE_I2C_DATA_OUT
;

1585 
	`IXGBE_WRITE_REG
(
hw
, 
IXGBE_I2CCTL
, *
i2c˘l
);

1588 
	`udñay
(
IXGBE_I2C_T_RISE
 + 
IXGBE_I2C_T_FALL
 + 
IXGBE_I2C_T_SU_DATA
);

1591 *
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1592 i‡(
d©a
 !
	`ixgbe_gë_i2c_d©a
(
i2c˘l
)) {

1593 
°©us
 = 
IXGBE_ERR_I2C
;

1594 
	`hw_dbg
(
hw
, "Eº‹ - I2C d©®wa†nŸ sëÅÿ%X.\n", 
d©a
);

1597  
°©us
;

1598 
	}
}

1607 
boﬁ
 
	$ixgbe_gë_i2c_d©a
(
u32
 *
i2c˘l
)

1609 
boﬁ
 
d©a
;

1611 i‡(*
i2c˘l
 & 
IXGBE_I2C_DATA_IN
)

1612 
d©a
 = 1;

1614 
d©a
 = 0;

1616  
d©a
;

1617 
	}
}

1626 
	$ixgbe_i2c_bus_˛ór
(
ixgbe_hw
 *
hw
)

1628 
u32
 
i2c˘l
 = 
	`IXGBE_READ_REG
(
hw
, 
IXGBE_I2CCTL
);

1629 
u32
 
i
;

1631 
	`ixgbe_i2c_°¨t
(
hw
);

1633 
	`ixgbe_£t_i2c_d©a
(
hw
, &
i2c˘l
, 1);

1635 
i
 = 0; i < 9; i++) {

1636 
	`ixgbe_øi£_i2c_˛k
(
hw
, &
i2c˘l
);

1639 
	`udñay
(
IXGBE_I2C_T_HIGH
);

1641 
	`ixgbe_lowî_i2c_˛k
(
hw
, &
i2c˘l
);

1644 
	`udñay
(
IXGBE_I2C_T_LOW
);

1647 
	`ixgbe_i2c_°¨t
(
hw
);

1650 
	`ixgbe_i2c_°›
(
hw
);

1651 
	}
}

	@ixgbe_phy.h

28 #i‚de‡
_IXGBE_PHY_H_


29 
	#_IXGBE_PHY_H_


	)

31 
	~"ixgbe_ty≥.h
"

32 
	#IXGBE_I2C_EEPROM_DEV_ADDR
 0xA0

	)

35 
	#IXGBE_SFF_IDENTIFIER
 0x0

	)

36 
	#IXGBE_SFF_IDENTIFIER_SFP
 0x3

	)

37 
	#IXGBE_SFF_VENDOR_OUI_BYTE0
 0x25

	)

38 
	#IXGBE_SFF_VENDOR_OUI_BYTE1
 0x26

	)

39 
	#IXGBE_SFF_VENDOR_OUI_BYTE2
 0x27

	)

40 
	#IXGBE_SFF_1GBE_COMP_CODES
 0x6

	)

41 
	#IXGBE_SFF_10GBE_COMP_CODES
 0x3

	)

42 
	#IXGBE_SFF_CABLE_TECHNOLOGY
 0x8

	)

45 
	#IXGBE_SFF_DA_PASSIVE_CABLE
 0x4

	)

46 
	#IXGBE_SFF_1GBASESX_CAPABLE
 0x1

	)

47 
	#IXGBE_SFF_1GBASELX_CAPABLE
 0x2

	)

48 
	#IXGBE_SFF_10GBASESR_CAPABLE
 0x10

	)

49 
	#IXGBE_SFF_10GBASELR_CAPABLE
 0x20

	)

50 
	#IXGBE_I2C_EEPROM_READ_MASK
 0x100

	)

51 
	#IXGBE_I2C_EEPROM_STATUS_MASK
 0x3

	)

52 
	#IXGBE_I2C_EEPROM_STATUS_NO_OPERATION
 0x0

	)

53 
	#IXGBE_I2C_EEPROM_STATUS_PASS
 0x1

	)

54 
	#IXGBE_I2C_EEPROM_STATUS_FAIL
 0x2

	)

55 
	#IXGBE_I2C_EEPROM_STATUS_IN_PROGRESS
 0x3

	)

58 
	#IXGBE_SFF_VENDOR_OUI_BYTE0_SHIFT
 24

	)

59 
	#IXGBE_SFF_VENDOR_OUI_BYTE1_SHIFT
 16

	)

60 
	#IXGBE_SFF_VENDOR_OUI_BYTE2_SHIFT
 8

	)

63 
	#IXGBE_SFF_VENDOR_OUI_TYCO
 0x00407600

	)

64 
	#IXGBE_SFF_VENDOR_OUI_FTL
 0x00906500

	)

65 
	#IXGBE_SFF_VENDOR_OUI_AVAGO
 0x00176A00

	)

66 
	#IXGBE_SFF_VENDOR_OUI_INTEL
 0x001B2100

	)

69 
	#IXGBE_I2C_T_HD_STA
 4

	)

70 
	#IXGBE_I2C_T_LOW
 5

	)

71 
	#IXGBE_I2C_T_HIGH
 4

	)

72 
	#IXGBE_I2C_T_SU_STA
 5

	)

73 
	#IXGBE_I2C_T_HD_DATA
 5

	)

74 
	#IXGBE_I2C_T_SU_DATA
 1

	)

75 
	#IXGBE_I2C_T_RISE
 1

	)

76 
	#IXGBE_I2C_T_FALL
 1

	)

77 
	#IXGBE_I2C_T_SU_STO
 4

	)

78 
	#IXGBE_I2C_T_BUF
 5

	)

81 
s32
 
ixgbe_öô_phy_›s_gíîic
(
ixgbe_hw
 *
hw
);

82 
boﬁ
 
ixgbe_vÆid©e_phy_addr
(
ixgbe_hw
 *
hw
, 
u32
 
phy_addr
);

83 
ixgbe_phy_ty≥
 
ixgbe_gë_phy_ty≥_‰om_id
(
u32
 
phy_id
);

84 
s32
 
ixgbe_gë_phy_id
(
ixgbe_hw
 *
hw
);

85 
s32
 
ixgbe_idítify_phy_gíîic
(
ixgbe_hw
 *
hw
);

86 
s32
 
ixgbe_ª£t_phy_gíîic
(
ixgbe_hw
 *
hw
);

87 
s32
 
ixgbe_ªad_phy_ªg_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
,

88 
u32
 
devi˚_ty≥
, 
u16
 *
phy_d©a
);

89 
s32
 
ixgbe_wrôe_phy_ªg_gíîic
(
ixgbe_hw
 *
hw
, 
u32
 
ªg_addr
,

90 
u32
 
devi˚_ty≥
, 
u16
 
phy_d©a
);

91 
s32
 
ixgbe_£tup_phy_lök_gíîic
(
ixgbe_hw
 *
hw
);

92 
s32
 
ixgbe_£tup_phy_lök_•ìd_gíîic
(
ixgbe_hw
 *
hw
,

93 
ixgbe_lök_•ìd
 
•ìd
,

94 
boﬁ
 
aut⁄eg
,

95 
boﬁ
 
aut⁄eg_waô_to_com∂ëe
);

96 
s32
 
ixgbe_gë_c›≥r_lök_ˇ∑bûôõs_gíîic
(
ixgbe_hw
 *
hw
,

97 
ixgbe_lök_•ìd
 *
•ìd
,

98 
boﬁ
 *
aut⁄eg
);

101 
s32
 
ixgbe_check_phy_lök_äx
(
ixgbe_hw
 *
hw
,

102 
ixgbe_lök_•ìd
 *
•ìd
,

103 
boﬁ
 *
lök_up
);

104 
s32
 
ixgbe_£tup_phy_lök_äx
(
ixgbe_hw
 *
hw
);

105 
s32
 
ixgbe_gë_phy_fúmw¨e_vîsi⁄_äx
(
ixgbe_hw
 *
hw
,

106 
u16
 *
fúmw¨e_vîsi⁄
);

107 
s32
 
ixgbe_gë_phy_fúmw¨e_vîsi⁄_aq
(
ixgbe_hw
 *
hw
,

108 
u16
 *
fúmw¨e_vîsi⁄
);

110 
s32
 
ixgbe_ª£t_phy_∆
(
ixgbe_hw
 *
hw
);

111 
s32
 
ixgbe_idítify_sÂ_moduÀ_gíîic
(
ixgbe_hw
 *
hw
);

112 
s32
 
ixgbe_gë_sÂ_öô_£quí˚_off£ts
(
ixgbe_hw
 *
hw
,

113 
u16
 *
li°_off£t
,

114 
u16
 *
d©a_off£t
);

115 
s32
 
ixgbe_ªad_i2c_byã_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

116 
u8
 
dev_addr
, u8 *
d©a
);

117 
s32
 
ixgbe_wrôe_i2c_byã_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

118 
u8
 
dev_addr
, u8 
d©a
);

119 
s32
 
ixgbe_ªad_i2c_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

120 
u8
 *
ì¥om_d©a
);

121 
s32
 
ixgbe_wrôe_i2c_ì¥om_gíîic
(
ixgbe_hw
 *
hw
, 
u8
 
byã_off£t
,

122 
u8
 
ì¥om_d©a
);

	@ixgbe_sysfs.c

28 
	~"ixgbe.h
"

	@ixgbe_type.h

28 #i‚de‡
_IXGBE_TYPE_H_


29 
	#_IXGBE_TYPE_H_


	)

31 
	~"ixgbe_osdï.h
"

35 
	#IXGBE_INTEL_VENDOR_ID
 0x8086

	)

38 
	#IXGBE_DEV_ID_82598
 0x10B6

	)

39 
	#IXGBE_DEV_ID_82598_BX
 0x1508

	)

40 
	#IXGBE_DEV_ID_82598AF_DUAL_PORT
 0x10C6

	)

41 
	#IXGBE_DEV_ID_82598AF_SINGLE_PORT
 0x10C7

	)

42 
	#IXGBE_DEV_ID_82598AT
 0x10C8

	)

43 
	#IXGBE_DEV_ID_82598AT2
 0x150B

	)

44 
	#IXGBE_DEV_ID_82598EB_SFP_LOM
 0x10DB

	)

45 
	#IXGBE_DEV_ID_82598EB_CX4
 0x10DD

	)

46 
	#IXGBE_DEV_ID_82598_CX4_DUAL_PORT
 0x10EC

	)

47 
	#IXGBE_DEV_ID_82598_DA_DUAL_PORT
 0x10F1

	)

48 
	#IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM
 0x10E1

	)

49 
	#IXGBE_DEV_ID_82598EB_XF_LR
 0x10F4

	)

50 
	#IXGBE_DEV_ID_82599_KX4
 0x10F7

	)

51 
	#IXGBE_DEV_ID_82599_SFP
 0x10FB

	)

52 
	#IXGBE_DEV_ID_82599_XAUI_LOM
 0x10FC

	)

55 
	#IXGBE_CTRL
 0x00000

	)

56 
	#IXGBE_STATUS
 0x00008

	)

57 
	#IXGBE_CTRL_EXT
 0x00018

	)

58 
	#IXGBE_ESDP
 0x00020

	)

59 
	#IXGBE_EODSDP
 0x00028

	)

60 
	#IXGBE_I2CCTL
 0x00028

	)

61 
	#IXGBE_LEDCTL
 0x00200

	)

62 
	#IXGBE_FRTIMER
 0x00048

	)

63 
	#IXGBE_TCPTIMER
 0x0004C

	)

64 
	#IXGBE_CORESPARE
 0x00600

	)

65 
	#IXGBE_EXVET
 0x05078

	)

68 
	#IXGBE_EEC
 0x10010

	)

69 
	#IXGBE_EERD
 0x10014

	)

70 
	#IXGBE_FLA
 0x1001C

	)

71 
	#IXGBE_EEMNGCTL
 0x10110

	)

72 
	#IXGBE_EEMNGDATA
 0x10114

	)

73 
	#IXGBE_FLMNGCTL
 0x10118

	)

74 
	#IXGBE_FLMNGDATA
 0x1011C

	)

75 
	#IXGBE_FLMNGCNT
 0x10120

	)

76 
	#IXGBE_FLOP
 0x1013C

	)

77 
	#IXGBE_GRC
 0x10200

	)

80 
	#IXGBE_GRC_MNG
 0x00000001

	)

81 
	#IXGBE_GRC_APME
 0x00000002

	)

83 
	#IXGBE_VPDDIAG0
 0x10204

	)

84 
	#IXGBE_VPDDIAG1
 0x10208

	)

87 
	#IXGBE_I2C_CLK_IN
 0x00000001

	)

88 
	#IXGBE_I2C_CLK_OUT
 0x00000002

	)

89 
	#IXGBE_I2C_DATA_IN
 0x00000004

	)

90 
	#IXGBE_I2C_DATA_OUT
 0x00000008

	)

93 
	#IXGBE_EICR
 0x00800

	)

94 
	#IXGBE_EICS
 0x00808

	)

95 
	#IXGBE_EIMS
 0x00880

	)

96 
	#IXGBE_EIMC
 0x00888

	)

97 
	#IXGBE_EIAC
 0x00810

	)

98 
	#IXGBE_EIAM
 0x00890

	)

99 
	#IXGBE_EICS_EX
(
_i
Ë(0x00A90 + (_iË* 4)

	)

100 
	#IXGBE_EIMS_EX
(
_i
Ë(0x00AA0 + (_iË* 4)

	)

101 
	#IXGBE_EIMC_EX
(
_i
Ë(0x00AB0 + (_iË* 4)

	)

102 
	#IXGBE_EIAM_EX
(
_i
Ë(0x00AD0 + (_iË* 4)

	)

108 
	#IXGBE_MAX_INT_RATE
 488281

	)

109 
	#IXGBE_MIN_INT_RATE
 956

	)

110 
	#IXGBE_MAX_EITR
 0x00000FF8

	)

111 
	#IXGBE_MIN_EITR
 8

	)

112 
	#IXGBE_EITR
(
_i
) (((_i) <= 23) ? (0x00820 + ((_i) * 4)) : \

113 (0x012300 + (((
_i
Ë- 24Ë* 4)))

	)

114 
	#IXGBE_EITR_ITR_INT_MASK
 0x00000FF8

	)

115 
	#IXGBE_EITR_LLI_MOD
 0x00008000

	)

116 
	#IXGBE_EITR_CNT_WDIS
 0x80000000

	)

117 
	#IXGBE_IVAR
(
_i
Ë(0x00900 + ((_iË* 4)Ë

	)

118 
	#IXGBE_IVAR_MISC
 0x00A00

	)

119 
	#IXGBE_EITRSEL
 0x00894

	)

120 
	#IXGBE_MSIXT
 0x00000

	)

121 
	#IXGBE_MSIXPBA
 0x02000

	)

122 
	#IXGBE_PBACL
(
_i
Ë(((_iË=0Ë? (0x11068Ë: (0x110C0 + ((_iË* 4)))

	)

123 
	#IXGBE_GPIE
 0x00898

	)

126 
	#IXGBE_FCADBUL
 0x03210

	)

127 
	#IXGBE_FCADBUH
 0x03214

	)

128 
	#IXGBE_FCAMACL
 0x04328

	)

129 
	#IXGBE_FCAMACH
 0x0432C

	)

130 
	#IXGBE_FCRTH_82599
(
_i
Ë(0x03260 + ((_iË* 4)Ë

	)

131 
	#IXGBE_FCRTL_82599
(
_i
Ë(0x03220 + ((_iË* 4)Ë

	)

132 
	#IXGBE_PFCTOP
 0x03008

	)

133 
	#IXGBE_FCTTV
(
_i
Ë(0x03200 + ((_iË* 4)Ë

	)

134 
	#IXGBE_FCRTL
(
_i
Ë(0x03220 + ((_iË* 8)Ë

	)

135 
	#IXGBE_FCRTH
(
_i
Ë(0x03260 + ((_iË* 8)Ë

	)

136 
	#IXGBE_FCRTV
 0x032A0

	)

137 
	#IXGBE_FCCFG
 0x03D00

	)

138 
	#IXGBE_TFCS
 0x0CE00

	)

141 
	#IXGBE_RDBAL
(
_i
) (((_i) < 64) ? (0x01000 + ((_i) * 0x40)) : \

142 (0x0D000 + ((
_i
 - 64Ë* 0x40)))

	)

143 
	#IXGBE_RDBAH
(
_i
) (((_i) < 64) ? (0x01004 + ((_i) * 0x40)) : \

144 (0x0D004 + ((
_i
 - 64Ë* 0x40)))

	)

145 
	#IXGBE_RDLEN
(
_i
) (((_i) < 64) ? (0x01008 + ((_i) * 0x40)) : \

146 (0x0D008 + ((
_i
 - 64Ë* 0x40)))

	)

147 
	#IXGBE_RDH
(
_i
) (((_i) < 64) ? (0x01010 + ((_i) * 0x40)) : \

148 (0x0D010 + ((
_i
 - 64Ë* 0x40)))

	)

149 
	#IXGBE_RDT
(
_i
) (((_i) < 64) ? (0x01018 + ((_i) * 0x40)) : \

150 (0x0D018 + ((
_i
 - 64Ë* 0x40)))

	)

151 
	#IXGBE_RXDCTL
(
_i
) (((_i) < 64) ? (0x01028 + ((_i) * 0x40)) : \

152 (0x0D028 + ((
_i
 - 64Ë* 0x40)))

	)

153 
	#IXGBE_RSCCTL
(
_i
) (((_i) < 64) ? (0x0102C + ((_i) * 0x40)) : \

154 (0x0D02C + ((
_i
 - 64Ë* 0x40)))

	)

155 
	#IXGBE_RSCDBU
 0x03028

	)

156 
	#IXGBE_RDDCC
 0x02F20

	)

157 
	#IXGBE_RXMEMWRAP
 0x03190

	)

158 
	#IXGBE_STARCTRL
 0x03024

	)

165 
	#IXGBE_SRRCTL
(
_i
) (((_i) <= 15) ? (0x02100 + ((_i) * 4)) : \

166 (((
_i
) < 64) ? (0x01014 + ((_i) * 0x40)) : \

167 (0x0D014 + ((
_i
 - 64Ë* 0x40))))

	)

174 
	#IXGBE_DCA_RXCTRL
(
_i
) (((_i) <= 15) ? (0x02200 + ((_i) * 4)) : \

175 (((
_i
) < 64) ? (0x0100C + ((_i) * 0x40)) : \

176 (0x0D00C + ((
_i
 - 64Ë* 0x40))))

	)

177 
	#IXGBE_RDRXCTL
 0x02F00

	)

178 
	#IXGBE_RDRXCTL_RSC_PUSH
 0x80

	)

179 
	#IXGBE_RXPBSIZE
(
_i
Ë(0x03C00 + ((_iË* 4))

	)

181 
	#IXGBE_RXCTRL
 0x03000

	)

182 
	#IXGBE_DROPEN
 0x03D04

	)

183 
	#IXGBE_RXPBSIZE_SHIFT
 10

	)

186 
	#IXGBE_RXCSUM
 0x05000

	)

187 
	#IXGBE_RFCTL
 0x05008

	)

188 
	#IXGBE_DRECCCTL
 0x02F08

	)

189 
	#IXGBE_DRECCCTL_DISABLE
 0

	)

191 
	#IXGBE_MTA
(
_i
Ë(0x05200 + ((_iË* 4))

	)

192 
	#IXGBE_RAL
(
_i
) (((_i) <= 15) ? (0x05400 + ((_i) * 8)) : \

193 (0x0A200 + ((
_i
Ë* 8)))

	)

194 
	#IXGBE_RAH
(
_i
) (((_i) <= 15) ? (0x05404 + ((_i) * 8)) : \

195 (0x0A204 + ((
_i
Ë* 8)))

	)

196 
	#IXGBE_MPSAR_LO
(
_i
Ë(0x0A600 + ((_iË* 8))

	)

197 
	#IXGBE_MPSAR_HI
(
_i
Ë(0x0A604 + ((_iË* 8))

	)

199 
	#IXGBE_PSRTYPE
(
_i
) (((_i) <= 15) ? (0x05480 + ((_i) * 4)) : \

200 (0x0EA00 + ((
_i
Ë* 4)))

	)

202 
	#IXGBE_VFTA
(
_i
Ë(0x0A000 + ((_iË* 4))

	)

204 
	#IXGBE_VFTAVIND
(
_j
, 
_i
Ë(0x0A200 + ((_jË* 0x200Ë+ ((_iË* 4))

	)

205 
	#IXGBE_FCTRL
 0x05080

	)

206 
	#IXGBE_VLNCTRL
 0x05088

	)

207 
	#IXGBE_MCSTCTRL
 0x05090

	)

208 
	#IXGBE_MRQC
 0x05818

	)

209 
	#IXGBE_SAQF
(
_i
Ë(0x0E000 + ((_iË* 4)Ë

	)

210 
	#IXGBE_DAQF
(
_i
Ë(0x0E200 + ((_iË* 4)Ë

	)

211 
	#IXGBE_SDPQF
(
_i
Ë(0x0E400 + ((_iË* 4)Ë

	)

212 
	#IXGBE_FTQF
(
_i
Ë(0x0E600 + ((_iË* 4)Ë

	)

213 
	#IXGBE_ETQF
(
_i
Ë(0x05128 + ((_iË* 4)Ë

	)

214 
	#IXGBE_ETQS
(
_i
Ë(0x0EC00 + ((_iË* 4)Ë

	)

215 
	#IXGBE_SYNQF
 0x0EC30

	)

216 
	#IXGBE_RQTC
 0x0EC70

	)

217 
	#IXGBE_MTQC
 0x08120

	)

218 
	#IXGBE_VLVF
(
_i
Ë(0x0F100 + ((_iË* 4)Ë

	)

219 
	#IXGBE_VLVFB
(
_i
Ë(0x0F200 + ((_iË* 4)Ë

	)

220 
	#IXGBE_VT_CTL
 0x051B0

	)

221 
	#IXGBE_VFRE
(
_i
Ë(0x051E0 + ((_iË* 4))

	)

222 
	#IXGBE_VFTE
(
_i
Ë(0x08110 + ((_iË* 4))

	)

223 
	#IXGBE_QDE
 0x2F04

	)

224 
	#IXGBE_VMOLR
(
_i
Ë(0x0F000 + ((_iË* 4)Ë

	)

225 
	#IXGBE_UTA
(
_i
Ë(0x0F400 + ((_iË* 4))

	)

226 
	#IXGBE_VMRCTL
(
_i
Ë(0x0F600 + ((_iË* 4))

	)

227 
	#IXGBE_VMRVLAN
(
_i
Ë(0x0F610 + ((_iË* 4))

	)

228 
	#IXGBE_VMRVM
(
_i
Ë(0x0F630 + ((_iË* 4))

	)

229 
	#IXGBE_L34T_IMIR
(
_i
Ë(0x0E800 + ((_iË* 4)Ë

	)

230 
	#IXGBE_LLITHRESH
 0x0EC90

	)

231 
	#IXGBE_IMIR
(
_i
Ë(0x05A80 + ((_iË* 4)Ë

	)

232 
	#IXGBE_IMIREXT
(
_i
Ë(0x05AA0 + ((_iË* 4)Ë

	)

233 
	#IXGBE_IMIRVP
 0x05AC0

	)

234 
	#IXGBE_VMD_CTL
 0x0581C

	)

235 
	#IXGBE_RETA
(
_i
Ë(0x05C00 + ((_iË* 4)Ë

	)

236 
	#IXGBE_RSSRK
(
_i
Ë(0x05C80 + ((_iË* 4)Ë

	)

239 
	#IXGBE_FDIRCTRL
 0x0EE00

	)

240 
	#IXGBE_FDIRHKEY
 0x0EE68

	)

241 
	#IXGBE_FDIRSKEY
 0x0EE6C

	)

242 
	#IXGBE_FDIRDIP4M
 0x0EE3C

	)

243 
	#IXGBE_FDIRSIP4M
 0x0EE40

	)

244 
	#IXGBE_FDIRTCPM
 0x0EE44

	)

245 
	#IXGBE_FDIRUDPM
 0x0EE48

	)

246 
	#IXGBE_FDIRIP6M
 0x0EE74

	)

247 
	#IXGBE_FDIRM
 0x0EE70

	)

250 
	#IXGBE_FDIRFREE
 0x0EE38

	)

251 
	#IXGBE_FDIRLEN
 0x0EE4C

	)

252 
	#IXGBE_FDIRUSTAT
 0x0EE50

	)

253 
	#IXGBE_FDIRFSTAT
 0x0EE54

	)

254 
	#IXGBE_FDIRMATCH
 0x0EE58

	)

255 
	#IXGBE_FDIRMISS
 0x0EE5C

	)

258 
	#IXGBE_FDIRSIPv6
(
_i
Ë(0x0EE0C + ((_iË* 4)Ë

	)

259 
	#IXGBE_FDIRIPSA
 0x0EE18

	)

260 
	#IXGBE_FDIRIPDA
 0x0EE1C

	)

261 
	#IXGBE_FDIRPORT
 0x0EE20

	)

262 
	#IXGBE_FDIRVLAN
 0x0EE24

	)

263 
	#IXGBE_FDIRHASH
 0x0EE28

	)

264 
	#IXGBE_FDIRCMD
 0x0EE2C

	)

267 
	#IXGBE_TDBAL
(
_i
Ë(0x06000 + ((_iË* 0x40)Ë

	)

268 
	#IXGBE_TDBAH
(
_i
Ë(0x06004 + ((_iË* 0x40))

	)

269 
	#IXGBE_TDLEN
(
_i
Ë(0x06008 + ((_iË* 0x40))

	)

270 
	#IXGBE_TDH
(
_i
Ë(0x06010 + ((_iË* 0x40))

	)

271 
	#IXGBE_TDT
(
_i
Ë(0x06018 + ((_iË* 0x40))

	)

272 
	#IXGBE_TXDCTL
(
_i
Ë(0x06028 + ((_iË* 0x40))

	)

273 
	#IXGBE_TDWBAL
(
_i
Ë(0x06038 + ((_iË* 0x40))

	)

274 
	#IXGBE_TDWBAH
(
_i
Ë(0x0603C + ((_iË* 0x40))

	)

275 
	#IXGBE_DTXCTL
 0x07E00

	)

277 
	#IXGBE_DMATXCTL
 0x04A80

	)

278 
	#IXGBE_PFDTXGSWC
 0x08220

	)

279 
	#IXGBE_DTXMXSZRQ
 0x08100

	)

280 
	#IXGBE_DTXTCPFLGL
 0x04A88

	)

281 
	#IXGBE_DTXTCPFLGH
 0x04A8C

	)

282 
	#IXGBE_LBDRPEN
 0x0CA00

	)

283 
	#IXGBE_TXPBTHRESH
(
_i
Ë(0x04950 + ((_iË* 4)Ë

	)

285 
	#IXGBE_DMATXCTL_TE
 0x1

	)

286 
	#IXGBE_DMATXCTL_NS
 0x2

	)

287 
	#IXGBE_DMATXCTL_GDV
 0x8

	)

288 
	#IXGBE_DMATXCTL_VT_SHIFT
 16

	)

290 
	#IXGBE_PFDTXGSWC_VT_LBEN
 0x1

	)

291 
	#IXGBE_DCA_TXCTRL
(
_i
Ë(0x07200 + ((_iË* 4)Ë

	)

293 
	#IXGBE_DCA_TXCTRL_82599
(
_i
Ë(0x0600C + ((_iË* 0x40))

	)

294 
	#IXGBE_TIPG
 0x0CB00

	)

295 
	#IXGBE_TXPBSIZE
(
_i
Ë(0x0CC00 + ((_iË* 4)Ë

	)

296 
	#IXGBE_MNGTXMAP
 0x0CD10

	)

297 
	#IXGBE_TIPG_FIBER_DEFAULT
 3

	)

298 
	#IXGBE_TXPBSIZE_SHIFT
 10

	)

301 
	#IXGBE_WUC
 0x05800

	)

302 
	#IXGBE_WUFC
 0x05808

	)

303 
	#IXGBE_WUS
 0x05810

	)

304 
	#IXGBE_IPAV
 0x05838

	)

305 
	#IXGBE_IP4AT
 0x05840

	)

306 
	#IXGBE_IP6AT
 0x05880

	)

308 
	#IXGBE_WUPL
 0x05900

	)

309 
	#IXGBE_WUPM
 0x05A00

	)

310 
	#IXGBE_FHFT
(
_n
Ë(0x09000 + (_¿* 0x100)Ë

	)

311 
	#IXGBE_FHFT_EXT
(
_n
Ë(0x09800 + (_¿* 0x100)Ë

	)

314 
	#IXGBE_FLEXIBLE_FILTER_COUNT_MAX
 4

	)

315 
	#IXGBE_EXT_FLEXIBLE_FILTER_COUNT_MAX
 2

	)

318 
	#IXGBE_FLEXIBLE_FILTER_SIZE_MAX
 128

	)

319 
	#IXGBE_FHFT_LENGTH_OFFSET
 0xFC

	)

320 
	#IXGBE_FHFT_LENGTH_MASK
 0x0FF

	)

324 
	#IXGBE_WUC_PME_EN
 0x00000002

	)

325 
	#IXGBE_WUC_PME_STATUS
 0x00000004

	)

326 
	#IXGBE_WUC_ADVD3WUC
 0x00000010

	)

329 
	#IXGBE_WUFC_LNKC
 0x00000001

	)

330 
	#IXGBE_WUFC_MAG
 0x00000002

	)

331 
	#IXGBE_WUFC_EX
 0x00000004

	)

332 
	#IXGBE_WUFC_MC
 0x00000008

	)

333 
	#IXGBE_WUFC_BC
 0x00000010

	)

334 
	#IXGBE_WUFC_ARP
 0x00000020

	)

335 
	#IXGBE_WUFC_IPV4
 0x00000040

	)

336 
	#IXGBE_WUFC_IPV6
 0x00000080

	)

337 
	#IXGBE_WUFC_MNG
 0x00000100

	)

339 
	#IXGBE_WUFC_IGNORE_TCO
 0x00008000

	)

340 
	#IXGBE_WUFC_FLX0
 0x00010000

	)

341 
	#IXGBE_WUFC_FLX1
 0x00020000

	)

342 
	#IXGBE_WUFC_FLX2
 0x00040000

	)

343 
	#IXGBE_WUFC_FLX3
 0x00080000

	)

344 
	#IXGBE_WUFC_FLX4
 0x00100000

	)

345 
	#IXGBE_WUFC_FLX5
 0x00200000

	)

346 
	#IXGBE_WUFC_FLX_FILTERS
 0x000F0000

	)

347 
	#IXGBE_WUFC_EXT_FLX_FILTERS
 0x00300000

	)

348 
	#IXGBE_WUFC_ALL_FILTERS
 0x003F00FF

	)

349 
	#IXGBE_WUFC_FLX_OFFSET
 16

	)

352 
	#IXGBE_WUS_LNKC
 
IXGBE_WUFC_LNKC


	)

353 
	#IXGBE_WUS_MAG
 
IXGBE_WUFC_MAG


	)

354 
	#IXGBE_WUS_EX
 
IXGBE_WUFC_EX


	)

355 
	#IXGBE_WUS_MC
 
IXGBE_WUFC_MC


	)

356 
	#IXGBE_WUS_BC
 
IXGBE_WUFC_BC


	)

357 
	#IXGBE_WUS_ARP
 
IXGBE_WUFC_ARP


	)

358 
	#IXGBE_WUS_IPV4
 
IXGBE_WUFC_IPV4


	)

359 
	#IXGBE_WUS_IPV6
 
IXGBE_WUFC_IPV6


	)

360 
	#IXGBE_WUS_MNG
 
IXGBE_WUFC_MNG


	)

361 
	#IXGBE_WUS_FLX0
 
IXGBE_WUFC_FLX0


	)

362 
	#IXGBE_WUS_FLX1
 
IXGBE_WUFC_FLX1


	)

363 
	#IXGBE_WUS_FLX2
 
IXGBE_WUFC_FLX2


	)

364 
	#IXGBE_WUS_FLX3
 
IXGBE_WUFC_FLX3


	)

365 
	#IXGBE_WUS_FLX4
 
IXGBE_WUFC_FLX4


	)

366 
	#IXGBE_WUS_FLX5
 
IXGBE_WUFC_FLX5


	)

367 
	#IXGBE_WUS_FLX_FILTERS
 
IXGBE_WUFC_FLX_FILTERS


	)

370 
	#IXGBE_WUPL_LENGTH_MASK
 0xFFFF

	)

373 
	#IXGBE_RMCS
 0x03D00

	)

374 
	#IXGBE_DPMCS
 0x07F40

	)

375 
	#IXGBE_PDPMCS
 0x0CD00

	)

376 
	#IXGBE_RUPPBMR
 0x050A0

	)

377 
	#IXGBE_RT2CR
(
_i
Ë(0x03C20 + ((_iË* 4)Ë

	)

378 
	#IXGBE_RT2SR
(
_i
Ë(0x03C40 + ((_iË* 4)Ë

	)

379 
	#IXGBE_TDTQ2TCCR
(
_i
Ë(0x0602C + ((_iË* 0x40)Ë

	)

380 
	#IXGBE_TDTQ2TCSR
(
_i
Ë(0x0622C + ((_iË* 0x40)Ë

	)

381 
	#IXGBE_TDPT2TCCR
(
_i
Ë(0x0CD20 + ((_iË* 4)Ë

	)

382 
	#IXGBE_TDPT2TCSR
(
_i
Ë(0x0CD40 + ((_iË* 4)Ë

	)

386 
	#IXGBE_SECTXCTRL
 0x08800

	)

387 
	#IXGBE_SECTXSTAT
 0x08804

	)

388 
	#IXGBE_SECTXBUFFAF
 0x08808

	)

389 
	#IXGBE_SECTXMINIFG
 0x08810

	)

390 
	#IXGBE_SECTXSTAT
 0x08804

	)

391 
	#IXGBE_SECRXCTRL
 0x08D00

	)

392 
	#IXGBE_SECRXSTAT
 0x08D04

	)

395 
	#IXGBE_SECTXCTRL_SECTX_DIS
 0x00000001

	)

396 
	#IXGBE_SECTXCTRL_TX_DIS
 0x00000002

	)

397 
	#IXGBE_SECTXCTRL_STORE_FORWARD
 0x00000004

	)

399 
	#IXGBE_SECTXSTAT_SECTX_RDY
 0x00000001

	)

400 
	#IXGBE_SECTXSTAT_ECC_TXERR
 0x00000002

	)

402 
	#IXGBE_SECRXCTRL_SECRX_DIS
 0x00000001

	)

403 
	#IXGBE_SECRXCTRL_RX_DIS
 0x00000002

	)

405 
	#IXGBE_SECRXSTAT_SECRX_RDY
 0x00000001

	)

406 
	#IXGBE_SECRXSTAT_ECC_RXERR
 0x00000002

	)

409 
	#IXGBE_LSECTXCAP
 0x08A00

	)

410 
	#IXGBE_LSECRXCAP
 0x08F00

	)

411 
	#IXGBE_LSECTXCTRL
 0x08A04

	)

412 
	#IXGBE_LSECTXSCL
 0x08A08

	)

413 
	#IXGBE_LSECTXSCH
 0x08A0C

	)

414 
	#IXGBE_LSECTXSA
 0x08A10

	)

415 
	#IXGBE_LSECTXPN0
 0x08A14

	)

416 
	#IXGBE_LSECTXPN1
 0x08A18

	)

417 
	#IXGBE_LSECTXKEY0
(
_n
Ë(0x08A1C + (4 * (_n))Ë

	)

418 
	#IXGBE_LSECTXKEY1
(
_n
Ë(0x08A2C + (4 * (_n))Ë

	)

419 
	#IXGBE_LSECRXCTRL
 0x08F04

	)

420 
	#IXGBE_LSECRXSCL
 0x08F08

	)

421 
	#IXGBE_LSECRXSCH
 0x08F0C

	)

422 
	#IXGBE_LSECRXSA
(
_i
Ë(0x08F10 + (4 * (_i))Ë

	)

423 
	#IXGBE_LSECRXPN
(
_i
Ë(0x08F18 + (4 * (_i))Ë

	)

424 
	#IXGBE_LSECRXKEY
(
_n
, 
_m
Ë(0x08F20 + ((0x10 * (_n)Ë+ (4 * (_m))))

	)

425 
	#IXGBE_LSECTXUT
 0x08A3C

	)

426 
	#IXGBE_LSECTXPKTE
 0x08A40

	)

427 
	#IXGBE_LSECTXPKTP
 0x08A44

	)

428 
	#IXGBE_LSECTXOCTE
 0x08A48

	)

429 
	#IXGBE_LSECTXOCTP
 0x08A4C

	)

430 
	#IXGBE_LSECRXUT
 0x08F40

	)

431 
	#IXGBE_LSECRXOCTD
 0x08F44

	)

432 
	#IXGBE_LSECRXOCTV
 0x08F48

	)

433 
	#IXGBE_LSECRXBAD
 0x08F4C

	)

434 
	#IXGBE_LSECRXNOSCI
 0x08F50

	)

435 
	#IXGBE_LSECRXUNSCI
 0x08F54

	)

436 
	#IXGBE_LSECRXUNCH
 0x08F58

	)

437 
	#IXGBE_LSECRXDELAY
 0x08F5C

	)

438 
	#IXGBE_LSECRXLATE
 0x08F60

	)

439 
	#IXGBE_LSECRXOK
(
_n
Ë(0x08F64 + (0x04 * (_n))Ë

	)

440 
	#IXGBE_LSECRXINV
(
_n
Ë(0x08F6C + (0x04 * (_n))Ë

	)

441 
	#IXGBE_LSECRXNV
(
_n
Ë(0x08F74 + (0x04 * (_n))Ë

	)

442 
	#IXGBE_LSECRXUNSA
 0x08F7C

	)

443 
	#IXGBE_LSECRXNUSA
 0x08F80

	)

446 
	#IXGBE_LSECTXCAP_SUM_MASK
 0x00FF0000

	)

447 
	#IXGBE_LSECTXCAP_SUM_SHIFT
 16

	)

448 
	#IXGBE_LSECRXCAP_SUM_MASK
 0x00FF0000

	)

449 
	#IXGBE_LSECRXCAP_SUM_SHIFT
 16

	)

451 
	#IXGBE_LSECTXCTRL_EN_MASK
 0x00000003

	)

452 
	#IXGBE_LSECTXCTRL_DISABLE
 0x0

	)

453 
	#IXGBE_LSECTXCTRL_AUTH
 0x1

	)

454 
	#IXGBE_LSECTXCTRL_AUTH_ENCRYPT
 0x2

	)

455 
	#IXGBE_LSECTXCTRL_AISCI
 0x00000020

	)

456 
	#IXGBE_LSECTXCTRL_PNTHRSH_MASK
 0xFFFFFF00

	)

457 
	#IXGBE_LSECTXCTRL_RSV_MASK
 0x000000D8

	)

459 
	#IXGBE_LSECRXCTRL_EN_MASK
 0x0000000C

	)

460 
	#IXGBE_LSECRXCTRL_EN_SHIFT
 2

	)

461 
	#IXGBE_LSECRXCTRL_DISABLE
 0x0

	)

462 
	#IXGBE_LSECRXCTRL_CHECK
 0x1

	)

463 
	#IXGBE_LSECRXCTRL_STRICT
 0x2

	)

464 
	#IXGBE_LSECRXCTRL_DROP
 0x3

	)

465 
	#IXGBE_LSECRXCTRL_PLSH
 0x00000040

	)

466 
	#IXGBE_LSECRXCTRL_RP
 0x00000080

	)

467 
	#IXGBE_LSECRXCTRL_RSV_MASK
 0xFFFFFF33

	)

470 
	#IXGBE_IPSTXIDX
 0x08900

	)

471 
	#IXGBE_IPSTXSALT
 0x08904

	)

472 
	#IXGBE_IPSTXKEY
(
_i
Ë(0x08908 + (4 * (_i))Ë

	)

473 
	#IXGBE_IPSRXIDX
 0x08E00

	)

474 
	#IXGBE_IPSRXIPADDR
(
_i
Ë(0x08E04 + (4 * (_i))Ë

	)

475 
	#IXGBE_IPSRXSPI
 0x08E14

	)

476 
	#IXGBE_IPSRXIPIDX
 0x08E18

	)

477 
	#IXGBE_IPSRXKEY
(
_i
Ë(0x08E1C + (4 * (_i))Ë

	)

478 
	#IXGBE_IPSRXSALT
 0x08E2C

	)

479 
	#IXGBE_IPSRXMOD
 0x08E30

	)

481 
	#IXGBE_SECTXCTRL_STORE_FORWARD_ENABLE
 0x4

	)

484 
	#IXGBE_RTRPCS
 0x02430

	)

485 
	#IXGBE_RTTDCS
 0x04900

	)

486 
	#IXGBE_RTTDCS_ARBDIS
 0x00000040

	)

487 
	#IXGBE_RTTPCS
 0x0CD00

	)

488 
	#IXGBE_RTRUP2TC
 0x03020

	)

489 
	#IXGBE_RTTUP2TC
 0x0C800

	)

490 
	#IXGBE_RTRPT4C
(
_i
Ë(0x02140 + ((_iË* 4)Ë

	)

491 
	#IXGBE_RTRPT4S
(
_i
Ë(0x02160 + ((_iË* 4)Ë

	)

492 
	#IXGBE_RTTDT2C
(
_i
Ë(0x04910 + ((_iË* 4)Ë

	)

493 
	#IXGBE_RTTDT2S
(
_i
Ë(0x04930 + ((_iË* 4)Ë

	)

494 
	#IXGBE_RTTPT2C
(
_i
Ë(0x0CD20 + ((_iË* 4)Ë

	)

495 
	#IXGBE_RTTPT2S
(
_i
Ë(0x0CD40 + ((_iË* 4)Ë

	)

496 
	#IXGBE_RTTDQSEL
 0x04904

	)

497 
	#IXGBE_RTTDT1C
 0x04908

	)

498 
	#IXGBE_RTTDT1S
 0x0490C

	)

499 
	#IXGBE_RTTDTECC
 0x04990

	)

500 
	#IXGBE_RTTDTECC_NO_BCN
 0x00000100

	)

502 
	#IXGBE_RTTBCNRC
 0x04984

	)

506 
	#IXGBE_FCPTRL
 0x02410

	)

507 
	#IXGBE_FCPTRH
 0x02414

	)

508 
	#IXGBE_FCBUFF
 0x02418

	)

509 
	#IXGBE_FCDMARW
 0x02420

	)

510 
	#IXGBE_FCINVST0
 0x03FC0

	)

511 
	#IXGBE_FCINVST
(
_i
Ë(
IXGBE_FCINVST0
 + ((_iË* 4))

	)

512 
	#IXGBE_FCBUFF_VALID
 (1 << 0Ë

	)

513 
	#IXGBE_FCBUFF_BUFFSIZE
 (3 << 3Ë

	)

514 
	#IXGBE_FCBUFF_WRCONTX
 (1 << 7Ë

	)

515 
	#IXGBE_FCBUFF_BUFFCNT
 0x0000ff00

	)

516 
	#IXGBE_FCBUFF_OFFSET
 0xffff0000

	)

517 
	#IXGBE_FCBUFF_BUFFSIZE_SHIFT
 3

	)

518 
	#IXGBE_FCBUFF_BUFFCNT_SHIFT
 8

	)

519 
	#IXGBE_FCBUFF_OFFSET_SHIFT
 16

	)

520 
	#IXGBE_FCDMARW_WE
 (1 << 14Ë

	)

521 
	#IXGBE_FCDMARW_RE
 (1 << 15Ë

	)

522 
	#IXGBE_FCDMARW_FCOESEL
 0x000001f‡

	)

523 
	#IXGBE_FCDMARW_LASTSIZE
 0xffff0000

	)

524 
	#IXGBE_FCDMARW_LASTSIZE_SHIFT
 16

	)

526 
	#IXGBE_TEOFF
 0x04A94

	)

527 
	#IXGBE_TSOFF
 0x04A98

	)

528 
	#IXGBE_REOFF
 0x05158

	)

529 
	#IXGBE_RSOFF
 0x051F8

	)

531 
	#IXGBE_FCFLT
 0x05108

	)

532 
	#IXGBE_FCFLTRW
 0x05110

	)

533 
	#IXGBE_FCPARAM
 0x051d8

	)

534 
	#IXGBE_FCFLT_VALID
 (1 << 0Ë

	)

535 
	#IXGBE_FCFLT_FIRST
 (1 << 1Ë

	)

536 
	#IXGBE_FCFLT_SEQID
 0x00ff0000

	)

537 
	#IXGBE_FCFLT_SEQCNT
 0xff000000

	)

538 
	#IXGBE_FCFLTRW_RVALDT
 (1 << 13Ë

	)

539 
	#IXGBE_FCFLTRW_WE
 (1 << 14Ë

	)

540 
	#IXGBE_FCFLTRW_RE
 (1 << 15Ë

	)

542 
	#IXGBE_FCRXCTRL
 0x05100

	)

543 
	#IXGBE_FCRXCTRL_FCOELLI
 (1 << 0Ë

	)

544 
	#IXGBE_FCRXCTRL_SAVBAD
 (1 << 1Ë

	)

545 
	#IXGBE_FCRXCTRL_FRSTRDH
 (1 << 2Ë

	)

546 
	#IXGBE_FCRXCTRL_LASTSEQH
 (1 << 3Ë

	)

547 
	#IXGBE_FCRXCTRL_ALLH
 (1 << 4Ë

	)

548 
	#IXGBE_FCRXCTRL_FRSTSEQH
 (1 << 5Ë

	)

549 
	#IXGBE_FCRXCTRL_ICRC
 (1 << 6Ë

	)

550 
	#IXGBE_FCRXCTRL_FCCRCBO
 (1 << 7Ë

	)

551 
	#IXGBE_FCRXCTRL_FCOEVER
 0x00000f00

	)

552 
	#IXGBE_FCRXCTRL_FCOEVER_SHIFT
 8

	)

554 
	#IXGBE_FCRECTL
 0x0ED00

	)

555 
	#IXGBE_FCRETA0
 0x0ED10

	)

556 
	#IXGBE_FCRETA
(
_i
Ë(
IXGBE_FCRETA0
 + ((_iË* 4)Ë

	)

557 
	#IXGBE_FCRECTL_ENA
 0x1

	)

558 
	#IXGBE_FCRETA_SIZE
 8

	)

559 
	#IXGBE_FCRETA_ENTRY_MASK
 0x0000007‡

	)

562 
	#IXGBE_CRCERRS
 0x04000

	)

563 
	#IXGBE_ILLERRC
 0x04004

	)

564 
	#IXGBE_ERRBC
 0x04008

	)

565 
	#IXGBE_MSPDC
 0x04010

	)

566 
	#IXGBE_MPC
(
_i
Ë(0x03FA0 + ((_iË* 4)Ë

	)

567 
	#IXGBE_MLFC
 0x04034

	)

568 
	#IXGBE_MRFC
 0x04038

	)

569 
	#IXGBE_RLEC
 0x04040

	)

570 
	#IXGBE_LXONTXC
 0x03F60

	)

571 
	#IXGBE_LXONRXC
 0x0CF60

	)

572 
	#IXGBE_LXOFFTXC
 0x03F68

	)

573 
	#IXGBE_LXOFFRXC
 0x0CF68

	)

574 
	#IXGBE_LXONRXCNT
 0x041A4

	)

575 
	#IXGBE_LXOFFRXCNT
 0x041A8

	)

576 
	#IXGBE_PXONRXCNT
(
_i
Ë(0x04140 + ((_iË* 4)Ë

	)

577 
	#IXGBE_PXOFFRXCNT
(
_i
Ë(0x04160 + ((_iË* 4)Ë

	)

578 
	#IXGBE_PXON2OFFCNT
(
_i
Ë(0x03240 + ((_iË* 4)Ë

	)

579 
	#IXGBE_PXONTXC
(
_i
Ë(0x03F00 + ((_iË* 4)Ë

	)

580 
	#IXGBE_PXONRXC
(
_i
Ë(0x0CF00 + ((_iË* 4)Ë

	)

581 
	#IXGBE_PXOFFTXC
(
_i
Ë(0x03F20 + ((_iË* 4)Ë

	)

582 
	#IXGBE_PXOFFRXC
(
_i
Ë(0x0CF20 + ((_iË* 4)Ë

	)

583 
	#IXGBE_PRC64
 0x0405C

	)

584 
	#IXGBE_PRC127
 0x04060

	)

585 
	#IXGBE_PRC255
 0x04064

	)

586 
	#IXGBE_PRC511
 0x04068

	)

587 
	#IXGBE_PRC1023
 0x0406C

	)

588 
	#IXGBE_PRC1522
 0x04070

	)

589 
	#IXGBE_GPRC
 0x04074

	)

590 
	#IXGBE_BPRC
 0x04078

	)

591 
	#IXGBE_MPRC
 0x0407C

	)

592 
	#IXGBE_GPTC
 0x04080

	)

593 
	#IXGBE_GORCL
 0x04088

	)

594 
	#IXGBE_GORCH
 0x0408C

	)

595 
	#IXGBE_GOTCL
 0x04090

	)

596 
	#IXGBE_GOTCH
 0x04094

	)

597 
	#IXGBE_RNBC
(
_i
Ë(0x03FC0 + ((_iË* 4)Ë

	)

598 
	#IXGBE_RUC
 0x040A4

	)

599 
	#IXGBE_RFC
 0x040A8

	)

600 
	#IXGBE_ROC
 0x040AC

	)

601 
	#IXGBE_RJC
 0x040B0

	)

602 
	#IXGBE_MNGPRC
 0x040B4

	)

603 
	#IXGBE_MNGPDC
 0x040B8

	)

604 
	#IXGBE_MNGPTC
 0x0CF90

	)

605 
	#IXGBE_TORL
 0x040C0

	)

606 
	#IXGBE_TORH
 0x040C4

	)

607 
	#IXGBE_TPR
 0x040D0

	)

608 
	#IXGBE_TPT
 0x040D4

	)

609 
	#IXGBE_PTC64
 0x040D8

	)

610 
	#IXGBE_PTC127
 0x040DC

	)

611 
	#IXGBE_PTC255
 0x040E0

	)

612 
	#IXGBE_PTC511
 0x040E4

	)

613 
	#IXGBE_PTC1023
 0x040E8

	)

614 
	#IXGBE_PTC1522
 0x040EC

	)

615 
	#IXGBE_MPTC
 0x040F0

	)

616 
	#IXGBE_BPTC
 0x040F4

	)

617 
	#IXGBE_XEC
 0x04120

	)

618 
	#IXGBE_SSVPC
 0x08780

	)

620 
	#IXGBE_RQSMR
(
_i
Ë(0x02300 + ((_iË* 4))

	)

621 
	#IXGBE_TQSMR
(
_i
) (((_i) <= 7) ? (0x07300 + ((_i) * 4)) : \

622 (0x08600 + ((
_i
Ë* 4)))

	)

623 
	#IXGBE_TQSM
(
_i
Ë(0x08600 + ((_iË* 4))

	)

625 
	#IXGBE_QPRC
(
_i
Ë(0x01030 + ((_iË* 0x40)Ë

	)

626 
	#IXGBE_QPTC
(
_i
Ë(0x06030 + ((_iË* 0x40)Ë

	)

627 
	#IXGBE_QBRC
(
_i
Ë(0x01034 + ((_iË* 0x40)Ë

	)

628 
	#IXGBE_QBTC
(
_i
Ë(0x06034 + ((_iË* 0x40)Ë

	)

629 
	#IXGBE_QPRDC
(
_i
Ë(0x01430 + ((_iË* 0x40)Ë

	)

630 
	#IXGBE_QBTC_L
(
_i
Ë(0x08700 + ((_iË* 0x8)Ë

	)

631 
	#IXGBE_QBTC_H
(
_i
Ë(0x08704 + ((_iË* 0x8)Ë

	)

632 
	#IXGBE_FCCRC
 0x05118

	)

633 
	#IXGBE_FCOERPDC
 0x0241C

	)

634 
	#IXGBE_FCLAST
 0x02424

	)

635 
	#IXGBE_FCOEPRC
 0x02428

	)

636 
	#IXGBE_FCOEDWRC
 0x0242C

	)

637 
	#IXGBE_FCOEPTC
 0x08784

	)

638 
	#IXGBE_FCOEDWTC
 0x08788

	)

639 
	#IXGBE_FCCRC_CNT_MASK
 0x0000FFFF

	)

640 
	#IXGBE_FCLAST_CNT_MASK
 0x0000FFFF

	)

643 
	#IXGBE_MAVTV
(
_i
Ë(0x05010 + ((_iË* 4)Ë

	)

644 
	#IXGBE_MFUTP
(
_i
Ë(0x05030 + ((_iË* 4)Ë

	)

645 
	#IXGBE_MANC
 0x05820

	)

646 
	#IXGBE_MFVAL
 0x05824

	)

647 
	#IXGBE_MANC2H
 0x05860

	)

648 
	#IXGBE_MDEF
(
_i
Ë(0x05890 + ((_iË* 4)Ë

	)

649 
	#IXGBE_MIPAF
 0x058B0

	)

650 
	#IXGBE_MMAL
(
_i
Ë(0x05910 + ((_iË* 8)Ë

	)

651 
	#IXGBE_MMAH
(
_i
Ë(0x05914 + ((_iË* 8)Ë

	)

652 
	#IXGBE_FTFT
 0x09400

	)

653 
	#IXGBE_METF
(
_i
Ë(0x05190 + ((_iË* 4)Ë

	)

654 
	#IXGBE_MDEF_EXT
(
_i
Ë(0x05160 + ((_iË* 4)Ë

	)

655 
	#IXGBE_LSWFW
 0x15014

	)

658 
	#IXGBE_HICR
 0x15F00

	)

659 
	#IXGBE_FWSTS
 0x15F0C

	)

660 
	#IXGBE_HSMC0R
 0x15F04

	)

661 
	#IXGBE_HSMC1R
 0x15F08

	)

662 
	#IXGBE_SWSR
 0x15F10

	)

663 
	#IXGBE_HFDR
 0x15FE8

	)

664 
	#IXGBE_FLEX_MNG
 0x15800

	)

667 
	#IXGBE_GCR
 0x11000

	)

668 
	#IXGBE_GTV
 0x11004

	)

669 
	#IXGBE_FUNCTAG
 0x11008

	)

670 
	#IXGBE_GLT
 0x1100C

	)

671 
	#IXGBE_GSCL_1
 0x11010

	)

672 
	#IXGBE_GSCL_2
 0x11014

	)

673 
	#IXGBE_GSCL_3
 0x11018

	)

674 
	#IXGBE_GSCL_4
 0x1101C

	)

675 
	#IXGBE_GSCN_0
 0x11020

	)

676 
	#IXGBE_GSCN_1
 0x11024

	)

677 
	#IXGBE_GSCN_2
 0x11028

	)

678 
	#IXGBE_GSCN_3
 0x1102C

	)

679 
	#IXGBE_FACTPS
 0x10150

	)

680 
	#IXGBE_PCIEANACTL
 0x11040

	)

681 
	#IXGBE_SWSM
 0x10140

	)

682 
	#IXGBE_FWSM
 0x10148

	)

683 
	#IXGBE_GSSR
 0x10160

	)

684 
	#IXGBE_MREVID
 0x11064

	)

685 
	#IXGBE_DCA_ID
 0x11070

	)

686 
	#IXGBE_DCA_CTRL
 0x11074

	)

689 
	#IXGBE_GCR_EXT
 0x11050

	)

690 
	#IXGBE_GSCL_5_82599
 0x11030

	)

691 
	#IXGBE_GSCL_6_82599
 0x11034

	)

692 
	#IXGBE_GSCL_7_82599
 0x11038

	)

693 
	#IXGBE_GSCL_8_82599
 0x1103C

	)

694 
	#IXGBE_PHYADR_82599
 0x11040

	)

695 
	#IXGBE_PHYDAT_82599
 0x11044

	)

696 
	#IXGBE_PHYCTL_82599
 0x11048

	)

697 
	#IXGBE_PBACLR_82599
 0x11068

	)

698 
	#IXGBE_CIAA_82599
 0x11088

	)

699 
	#IXGBE_CIAD_82599
 0x1108C

	)

700 
	#IXGBE_INTRPT_CSR_82599
 0x110B0

	)

701 
	#IXGBE_INTRPT_MASK_82599
 0x110B8

	)

702 
	#IXGBE_CDQ_MBR_82599
 0x110B4

	)

703 
	#IXGBE_MISC_REG_82599
 0x110F0

	)

704 
	#IXGBE_ECC_CTRL_0_82599
 0x11100

	)

705 
	#IXGBE_ECC_CTRL_1_82599
 0x11104

	)

706 
	#IXGBE_ECC_STATUS_82599
 0x110E0

	)

707 
	#IXGBE_BAR_CTRL_82599
 0x110F4

	)

710 
	#IXGBE_GCR_CMPL_TMOUT_MASK
 0x0000F000

	)

711 
	#IXGBE_GCR_CMPL_TMOUT_10ms
 0x00001000

	)

712 
	#IXGBE_GCR_CMPL_TMOUT_RESEND
 0x00010000

	)

713 
	#IXGBE_GCR_CAP_VER2
 0x00040000

	)

716 
	#IXGBE_TSYNCRXCTL
 0x05188

	)

717 
	#IXGBE_TSYNCTXCTL
 0x08C00

	)

718 
	#IXGBE_RXSTMPL
 0x051E8

	)

719 
	#IXGBE_RXSTMPH
 0x051A4

	)

720 
	#IXGBE_RXSATRL
 0x051A0

	)

721 
	#IXGBE_RXSATRH
 0x051A8

	)

722 
	#IXGBE_RXMTRL
 0x05120

	)

723 
	#IXGBE_TXSTMPL
 0x08C04

	)

724 
	#IXGBE_TXSTMPH
 0x08C08

	)

725 
	#IXGBE_SYSTIML
 0x08C0C

	)

726 
	#IXGBE_SYSTIMH
 0x08C10

	)

727 
	#IXGBE_TIMINCA
 0x08C14

	)

728 
	#IXGBE_RXUDP
 0x08C1C

	)

731 
	#IXGBE_RDSTATCTL
 0x02C20

	)

732 
	#IXGBE_RDSTAT
(
_i
Ë(0x02C00 + ((_iË* 4)Ë

	)

733 
	#IXGBE_RDHMPN
 0x02F08

	)

734 
	#IXGBE_RIC_DW
(
_i
Ë(0x02F10 + ((_iË* 4))

	)

735 
	#IXGBE_RDPROBE
 0x02F20

	)

736 
	#IXGBE_RDMAM
 0x02F30

	)

737 
	#IXGBE_RDMAD
 0x02F34

	)

738 
	#IXGBE_TDSTATCTL
 0x07C20

	)

739 
	#IXGBE_TDSTAT
(
_i
Ë(0x07C00 + ((_iË* 4)Ë

	)

740 
	#IXGBE_TDHMPN
 0x07F08

	)

741 
	#IXGBE_TDHMPN2
 0x082FC

	)

742 
	#IXGBE_TXDESCIC
 0x082CC

	)

743 
	#IXGBE_TIC_DW
(
_i
Ë(0x07F10 + ((_iË* 4))

	)

744 
	#IXGBE_TIC_DW2
(
_i
Ë(0x082B0 + ((_iË* 4))

	)

745 
	#IXGBE_TDPROBE
 0x07F20

	)

746 
	#IXGBE_TXBUFCTRL
 0x0C600

	)

747 
	#IXGBE_TXBUFDATA0
 0x0C610

	)

748 
	#IXGBE_TXBUFDATA1
 0x0C614

	)

749 
	#IXGBE_TXBUFDATA2
 0x0C618

	)

750 
	#IXGBE_TXBUFDATA3
 0x0C61C

	)

751 
	#IXGBE_RXBUFCTRL
 0x03600

	)

752 
	#IXGBE_RXBUFDATA0
 0x03610

	)

753 
	#IXGBE_RXBUFDATA1
 0x03614

	)

754 
	#IXGBE_RXBUFDATA2
 0x03618

	)

755 
	#IXGBE_RXBUFDATA3
 0x0361C

	)

756 
	#IXGBE_PCIE_DIAG
(
_i
Ë(0x11090 + ((_iË* 4)Ë

	)

757 
	#IXGBE_RFVAL
 0x050A4

	)

758 
	#IXGBE_MDFTC1
 0x042B8

	)

759 
	#IXGBE_MDFTC2
 0x042C0

	)

760 
	#IXGBE_MDFTFIFO1
 0x042C4

	)

761 
	#IXGBE_MDFTFIFO2
 0x042C8

	)

762 
	#IXGBE_MDFTS
 0x042CC

	)

763 
	#IXGBE_RXDATAWRPTR
(
_i
Ë(0x03700 + ((_iË* 4)Ë

	)

764 
	#IXGBE_RXDESCWRPTR
(
_i
Ë(0x03710 + ((_iË* 4)Ë

	)

765 
	#IXGBE_RXDATARDPTR
(
_i
Ë(0x03720 + ((_iË* 4)Ë

	)

766 
	#IXGBE_RXDESCRDPTR
(
_i
Ë(0x03730 + ((_iË* 4)Ë

	)

767 
	#IXGBE_TXDATAWRPTR
(
_i
Ë(0x0C700 + ((_iË* 4)Ë

	)

768 
	#IXGBE_TXDESCWRPTR
(
_i
Ë(0x0C710 + ((_iË* 4)Ë

	)

769 
	#IXGBE_TXDATARDPTR
(
_i
Ë(0x0C720 + ((_iË* 4)Ë

	)

770 
	#IXGBE_TXDESCRDPTR
(
_i
Ë(0x0C730 + ((_iË* 4)Ë

	)

771 
	#IXGBE_PCIEECCCTL
 0x1106C

	)

772 
	#IXGBE_RXWRPTR
(
_i
Ë(0x03100 + ((_iË* 4)Ë

	)

773 
	#IXGBE_RXUSED
(
_i
Ë(0x03120 + ((_iË* 4)Ë

	)

774 
	#IXGBE_RXRDPTR
(
_i
Ë(0x03140 + ((_iË* 4)Ë

	)

775 
	#IXGBE_RXRDWRPTR
(
_i
Ë(0x03160 + ((_iË* 4)Ë

	)

776 
	#IXGBE_TXWRPTR
(
_i
Ë(0x0C100 + ((_iË* 4)Ë

	)

777 
	#IXGBE_TXUSED
(
_i
Ë(0x0C120 + ((_iË* 4)Ë

	)

778 
	#IXGBE_TXRDPTR
(
_i
Ë(0x0C140 + ((_iË* 4)Ë

	)

779 
	#IXGBE_TXRDWRPTR
(
_i
Ë(0x0C160 + ((_iË* 4)Ë

	)

780 
	#IXGBE_PCIEECCCTL0
 0x11100

	)

781 
	#IXGBE_PCIEECCCTL1
 0x11104

	)

782 
	#IXGBE_RXDBUECC
 0x03F70

	)

783 
	#IXGBE_TXDBUECC
 0x0CF70

	)

784 
	#IXGBE_RXDBUEST
 0x03F74

	)

785 
	#IXGBE_TXDBUEST
 0x0CF74

	)

786 
	#IXGBE_PBTXECC
 0x0C300

	)

787 
	#IXGBE_PBRXECC
 0x03300

	)

788 
	#IXGBE_GHECCR
 0x110B0

	)

791 
	#IXGBE_PCS1GCFIG
 0x04200

	)

792 
	#IXGBE_PCS1GLCTL
 0x04208

	)

793 
	#IXGBE_PCS1GLSTA
 0x0420C

	)

794 
	#IXGBE_PCS1GDBG0
 0x04210

	)

795 
	#IXGBE_PCS1GDBG1
 0x04214

	)

796 
	#IXGBE_PCS1GANA
 0x04218

	)

797 
	#IXGBE_PCS1GANLP
 0x0421C

	)

798 
	#IXGBE_PCS1GANNP
 0x04220

	)

799 
	#IXGBE_PCS1GANLPNP
 0x04224

	)

800 
	#IXGBE_HLREG0
 0x04240

	)

801 
	#IXGBE_HLREG1
 0x04244

	)

802 
	#IXGBE_PAP
 0x04248

	)

803 
	#IXGBE_MACA
 0x0424C

	)

804 
	#IXGBE_APAE
 0x04250

	)

805 
	#IXGBE_ARD
 0x04254

	)

806 
	#IXGBE_AIS
 0x04258

	)

807 
	#IXGBE_MSCA
 0x0425C

	)

808 
	#IXGBE_MSRWD
 0x04260

	)

809 
	#IXGBE_MLADD
 0x04264

	)

810 
	#IXGBE_MHADD
 0x04268

	)

811 
	#IXGBE_MAXFRS
 0x04268

	)

812 
	#IXGBE_TREG
 0x0426C

	)

813 
	#IXGBE_PCSS1
 0x04288

	)

814 
	#IXGBE_PCSS2
 0x0428C

	)

815 
	#IXGBE_XPCSS
 0x04290

	)

816 
	#IXGBE_MFLCN
 0x04294

	)

817 
	#IXGBE_SERDESC
 0x04298

	)

818 
	#IXGBE_MACS
 0x0429C

	)

819 
	#IXGBE_AUTOC
 0x042A0

	)

820 
	#IXGBE_LINKS
 0x042A4

	)

821 
	#IXGBE_LINKS2
 0x04324

	)

822 
	#IXGBE_AUTOC2
 0x042A8

	)

823 
	#IXGBE_AUTOC3
 0x042AC

	)

824 
	#IXGBE_ANLP1
 0x042B0

	)

825 
	#IXGBE_ANLP2
 0x042B4

	)

826 
	#IXGBE_ATLASCTL
 0x04800

	)

827 
	#IXGBE_MMNGC
 0x042D0

	)

828 
	#IXGBE_ANLPNP1
 0x042D4

	)

829 
	#IXGBE_ANLPNP2
 0x042D8

	)

830 
	#IXGBE_KRPCSFC
 0x042E0

	)

831 
	#IXGBE_KRPCSS
 0x042E4

	)

832 
	#IXGBE_FECS1
 0x042E8

	)

833 
	#IXGBE_FECS2
 0x042EC

	)

834 
	#IXGBE_SMADARCTL
 0x14F10

	)

835 
	#IXGBE_MPVC
 0x04318

	)

836 
	#IXGBE_SGMIIC
 0x04314

	)

839 
	#IXGBE_CORECTL
 0x014F00

	)

841 
	#IXGBE_BARCTRL
 0x110F4

	)

842 
	#IXGBE_BARCTRL_FLSIZE
 0x0700

	)

843 
	#IXGBE_BARCTRL_CSRSIZE
 0x2000

	)

846 
	#IXGBE_RSCCTL_RSCEN
 0x01

	)

847 
	#IXGBE_RSCCTL_MAXDESC_1
 0x00

	)

848 
	#IXGBE_RSCCTL_MAXDESC_4
 0x04

	)

849 
	#IXGBE_RSCCTL_MAXDESC_8
 0x08

	)

850 
	#IXGBE_RSCCTL_MAXDESC_16
 0x0C

	)

853 
	#IXGBE_RSCDBU_RSCSMALDIS_MASK
 0x0000007F

	)

854 
	#IXGBE_RSCDBU_RSCACKDIS
 0x00000080

	)

857 
	#IXGBE_RDRXCTL_RDMTS_1_2
 0x00000000

	)

858 
	#IXGBE_RDRXCTL_CRCSTRIP
 0x00000002

	)

859 
	#IXGBE_RDRXCTL_MVMEN
 0x00000020

	)

860 
	#IXGBE_RDRXCTL_DMAIDONE
 0x00000008

	)

861 
	#IXGBE_RDRXCTL_AGGDIS
 0x00010000

	)

862 
	#IXGBE_RDRXCTL_RSCFRSTSIZE
 0x003E0000

	)

863 
	#IXGBE_RDRXCTL_RSCLLIDIS
 0x00800000

	)

866 
	#IXGBE_RQTC_SHIFT_TC
(
_i
Ë((_iË* 4)

	)

867 
	#IXGBE_RQTC_TC0_MASK
 (0x7 << 0)

	)

868 
	#IXGBE_RQTC_TC1_MASK
 (0x7 << 4)

	)

869 
	#IXGBE_RQTC_TC2_MASK
 (0x7 << 8)

	)

870 
	#IXGBE_RQTC_TC3_MASK
 (0x7 << 12)

	)

871 
	#IXGBE_RQTC_TC4_MASK
 (0x7 << 16)

	)

872 
	#IXGBE_RQTC_TC5_MASK
 (0x7 << 20)

	)

873 
	#IXGBE_RQTC_TC6_MASK
 (0x7 << 24)

	)

874 
	#IXGBE_RQTC_TC7_MASK
 (0x7 << 28)

	)

877 
	#IXGBE_PSRTYPE_RQPL_MASK
 0x7

	)

878 
	#IXGBE_PSRTYPE_RQPL_SHIFT
 29

	)

881 
	#IXGBE_CTRL_GIO_DIS
 0x00000004

	)

882 
	#IXGBE_CTRL_LNK_RST
 0x00000008

	)

883 
	#IXGBE_CTRL_RST
 0x04000000

	)

886 
	#IXGBE_FACTPS_LFS
 0x40000000

	)

889 
	#IXGBE_MHADD_MFS_MASK
 0xFFFF0000

	)

890 
	#IXGBE_MHADD_MFS_SHIFT
 16

	)

893 
	#IXGBE_CTRL_EXT_PFRSTD
 0x00004000

	)

894 
	#IXGBE_CTRL_EXT_NS_DIS
 0x00010000

	)

895 
	#IXGBE_CTRL_EXT_RO_DIS
 0x00020000

	)

896 
	#IXGBE_CTRL_EXT_DRV_LOAD
 0x10000000

	)

899 
	#IXGBE_DCA_CTRL_DCA_ENABLE
 0x00000000

	)

900 
	#IXGBE_DCA_CTRL_DCA_DISABLE
 0x00000001

	)

902 
	#IXGBE_DCA_CTRL_DCA_MODE_CB1
 0x00

	)

903 
	#IXGBE_DCA_CTRL_DCA_MODE_CB2
 0x02

	)

905 
	#IXGBE_DCA_RXCTRL_CPUID_MASK
 0x0000001F

	)

906 
	#IXGBE_DCA_RXCTRL_CPUID_MASK_82599
 0xFF000000

	)

907 
	#IXGBE_DCA_RXCTRL_CPUID_SHIFT_82599
 24

	)

908 
	#IXGBE_DCA_RXCTRL_DESC_DCA_EN
 (1 << 5Ë

	)

909 
	#IXGBE_DCA_RXCTRL_HEAD_DCA_EN
 (1 << 6Ë

	)

910 
	#IXGBE_DCA_RXCTRL_DATA_DCA_EN
 (1 << 7Ë

	)

911 
	#IXGBE_DCA_RXCTRL_DESC_RRO_EN
 (1 << 9Ë

	)

912 
	#IXGBE_DCA_RXCTRL_DESC_WRO_EN
 (1 << 13Ë

	)

913 
	#IXGBE_DCA_RXCTRL_DESC_HSRO_EN
 (1 << 15Ë

	)

915 
	#IXGBE_DCA_TXCTRL_CPUID_MASK
 0x0000001F

	)

916 
	#IXGBE_DCA_TXCTRL_CPUID_MASK_82599
 0xFF000000

	)

917 
	#IXGBE_DCA_TXCTRL_CPUID_SHIFT_82599
 24

	)

918 
	#IXGBE_DCA_TXCTRL_DESC_DCA_EN
 (1 << 5Ë

	)

919 
	#IXGBE_DCA_TXCTRL_TX_WB_RO_EN
 (1 << 11Ë

	)

920 
	#IXGBE_DCA_MAX_QUEUES_82598
 16

	)

923 
	#IXGBE_MSCA_NP_ADDR_MASK
 0x0000FFFF

	)

924 
	#IXGBE_MSCA_NP_ADDR_SHIFT
 0

	)

925 
	#IXGBE_MSCA_DEV_TYPE_MASK
 0x001F0000

	)

926 
	#IXGBE_MSCA_DEV_TYPE_SHIFT
 16

	)

927 
	#IXGBE_MSCA_PHY_ADDR_MASK
 0x03E00000

	)

928 
	#IXGBE_MSCA_PHY_ADDR_SHIFT
 21

	)

929 
	#IXGBE_MSCA_OP_CODE_MASK
 0x0C000000

	)

930 
	#IXGBE_MSCA_OP_CODE_SHIFT
 26

	)

931 
	#IXGBE_MSCA_ADDR_CYCLE
 0x00000000

	)

932 
	#IXGBE_MSCA_WRITE
 0x04000000

	)

933 
	#IXGBE_MSCA_READ
 0x08000000

	)

934 
	#IXGBE_MSCA_READ_AUTOINC
 0x0C000000

	)

935 
	#IXGBE_MSCA_ST_CODE_MASK
 0x30000000

	)

936 
	#IXGBE_MSCA_ST_CODE_SHIFT
 28

	)

937 
	#IXGBE_MSCA_NEW_PROTOCOL
 0x00000000

	)

938 
	#IXGBE_MSCA_OLD_PROTOCOL
 0x10000000

	)

939 
	#IXGBE_MSCA_MDI_COMMAND
 0x40000000

	)

940 
	#IXGBE_MSCA_MDI_IN_PROG_EN
 0x80000000

	)

943 
	#IXGBE_MSRWD_WRITE_DATA_MASK
 0x0000FFFF

	)

944 
	#IXGBE_MSRWD_WRITE_DATA_SHIFT
 0

	)

945 
	#IXGBE_MSRWD_READ_DATA_MASK
 0xFFFF0000

	)

946 
	#IXGBE_MSRWD_READ_DATA_SHIFT
 16

	)

949 
	#IXGBE_ATLAS_PDN_LPBK
 0x24

	)

950 
	#IXGBE_ATLAS_PDN_10G
 0xB

	)

951 
	#IXGBE_ATLAS_PDN_1G
 0xC

	)

952 
	#IXGBE_ATLAS_PDN_AN
 0xD

	)

955 
	#IXGBE_ATLASCTL_WRITE_CMD
 0x00010000

	)

956 
	#IXGBE_ATLAS_PDN_TX_REG_EN
 0x10

	)

957 
	#IXGBE_ATLAS_PDN_TX_10G_QL_ALL
 0xF0

	)

958 
	#IXGBE_ATLAS_PDN_TX_1G_QL_ALL
 0xF0

	)

959 
	#IXGBE_ATLAS_PDN_TX_AN_QL_ALL
 0xF0

	)

962 
	#IXGBE_CORECTL_WRITE_CMD
 0x00010000

	)

965 
	#IXGBE_MDIO_PMA_PMD_DEV_TYPE
 0x1

	)

966 
	#IXGBE_MDIO_PCS_DEV_TYPE
 0x3

	)

967 
	#IXGBE_MDIO_PHY_XS_DEV_TYPE
 0x4

	)

968 
	#IXGBE_MDIO_AUTO_NEG_DEV_TYPE
 0x7

	)

969 
	#IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE
 0x1E

	)

970 
	#IXGBE_TWINAX_DEV
 1

	)

972 
	#IXGBE_MDIO_COMMAND_TIMEOUT
 100

	)

974 
	#IXGBE_MDIO_VENDOR_SPECIFIC_1_CONTROL
 0x0

	)

975 
	#IXGBE_MDIO_VENDOR_SPECIFIC_1_STATUS
 0x1

	)

976 
	#IXGBE_MDIO_VENDOR_SPECIFIC_1_LINK_STATUS
 0x0008

	)

977 
	#IXGBE_MDIO_VENDOR_SPECIFIC_1_SPEED_STATUS
 0x0010

	)

978 
	#IXGBE_MDIO_VENDOR_SPECIFIC_1_10G_SPEED
 0x0018

	)

979 
	#IXGBE_MDIO_VENDOR_SPECIFIC_1_1G_SPEED
 0x0010

	)

981 
	#IXGBE_MDIO_AUTO_NEG_CONTROL
 0x0

	)

982 
	#IXGBE_MDIO_AUTO_NEG_STATUS
 0x1

	)

983 
	#IXGBE_MDIO_PHY_XS_CONTROL
 0x0

	)

984 
	#IXGBE_MDIO_PHY_XS_RESET
 0x8000

	)

985 
	#IXGBE_MDIO_PHY_ID_HIGH
 0x2

	)

986 
	#IXGBE_MDIO_PHY_ID_LOW
 0x3

	)

987 
	#IXGBE_MDIO_PHY_SPEED_ABILITY
 0x4

	)

988 
	#IXGBE_MDIO_PHY_SPEED_10G
 0x0001

	)

989 
	#IXGBE_MDIO_PHY_SPEED_1G
 0x0010

	)

990 
	#IXGBE_MDIO_PHY_SPEED_100M
 0x0020

	)

991 
	#IXGBE_MDIO_PHY_EXT_ABILITY
 0xB

	)

992 
	#IXGBE_MDIO_PHY_10GBASET_ABILITY
 0x0004

	)

993 
	#IXGBE_MDIO_PHY_1000BASET_ABILITY
 0x0020

	)

994 
	#IXGBE_MDIO_PHY_100BASETX_ABILITY
 0x0080

	)

996 
	#IXGBE_MDIO_PMA_PMD_SDA_SCL_ADDR
 0xC30A

	)

997 
	#IXGBE_MDIO_PMA_PMD_SDA_SCL_DATA
 0xC30B

	)

998 
	#IXGBE_MDIO_PMA_PMD_SDA_SCL_STAT
 0xC30C

	)

1001 
	#IXGBE_MDIO_PHY_LOW_POWER_MODE
 0x0800

	)

1003 
	#IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG
 0x20

	)

1004 
	#IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG
 0xC400

	)

1005 
	#IXGBE_MII_AUTONEG_XNP_TX_REG
 0x17

	)

1006 
	#IXGBE_MII_AUTONEG_ADVERTISE_REG
 0x10

	)

1007 
	#IXGBE_MII_10GBASE_T_ADVERTISE
 0x1000

	)

1008 
	#IXGBE_MII_1GBASE_T_ADVERTISE_XNP_TX
 0x4000

	)

1009 
	#IXGBE_MII_1GBASE_T_ADVERTISE
 0x8000

	)

1010 
	#IXGBE_MII_100BASE_T_ADVERTISE
 0x0100

	)

1011 
	#IXGBE_MII_RESTART
 0x200

	)

1012 
	#IXGBE_MII_AUTONEG_COMPLETE
 0x20

	)

1013 
	#IXGBE_MII_AUTONEG_REG
 0x0

	)

1015 
	#IXGBE_PHY_REVISION_MASK
 0xFFFFFFF0

	)

1016 
	#IXGBE_MAX_PHY_ADDR
 32

	)

1019 
	#TN1010_PHY_ID
 0x00A19410

	)

1020 
	#TNX_FW_REV
 0xB

	)

1021 
	#AQ1002_PHY_ID
 0x03A1B420

	)

1022 
	#AQ_FW_REV
 0x20

	)

1023 
	#QT2022_PHY_ID
 0x0043A400

	)

1024 
	#ATH_PHY_ID
 0x03429050

	)

1027 
	#IXGBE_M88E1145_E_PHY_ID
 0x01410CD0

	)

1030 
	#IXGBE_PHY_INIT_OFFSET_NL
 0x002B

	)

1031 
	#IXGBE_PHY_INIT_END_NL
 0xFFFF

	)

1032 
	#IXGBE_CONTROL_MASK_NL
 0xF000

	)

1033 
	#IXGBE_DATA_MASK_NL
 0x0FFF

	)

1034 
	#IXGBE_CONTROL_SHIFT_NL
 12

	)

1035 
	#IXGBE_DELAY_NL
 0

	)

1036 
	#IXGBE_DATA_NL
 1

	)

1037 
	#IXGBE_CONTROL_NL
 0x000F

	)

1038 
	#IXGBE_CONTROL_EOL_NL
 0x0FFF

	)

1039 
	#IXGBE_CONTROL_SOL_NL
 0x0000

	)

1042 
	#IXGBE_SDP0_GPIEN
 0x00000001

	)

1043 
	#IXGBE_SDP1_GPIEN
 0x00000002

	)

1044 
	#IXGBE_SDP2_GPIEN
 0x00000004

	)

1045 
	#IXGBE_GPIE_MSIX_MODE
 0x00000010

	)

1046 
	#IXGBE_GPIE_OCD
 0x00000020

	)

1047 
	#IXGBE_GPIE_EIMEN
 0x00000040

	)

1048 
	#IXGBE_GPIE_EIAME
 0x40000000

	)

1049 
	#IXGBE_GPIE_PBA_SUPPORT
 0x80000000

	)

1050 
	#IXGBE_GPIE_RSC_DELAY_SHIFT
 11

	)

1051 
	#IXGBE_GPIE_VTMODE_MASK
 0x0000C000

	)

1052 
	#IXGBE_GPIE_VTMODE_16
 0x00004000

	)

1053 
	#IXGBE_GPIE_VTMODE_32
 0x00008000

	)

1054 
	#IXGBE_GPIE_VTMODE_64
 0x0000C000

	)

1057 
	#IXGBE_TFCS_TXOFF
 0x00000001

	)

1058 
	#IXGBE_TFCS_TXOFF0
 0x00000100

	)

1059 
	#IXGBE_TFCS_TXOFF1
 0x00000200

	)

1060 
	#IXGBE_TFCS_TXOFF2
 0x00000400

	)

1061 
	#IXGBE_TFCS_TXOFF3
 0x00000800

	)

1062 
	#IXGBE_TFCS_TXOFF4
 0x00001000

	)

1063 
	#IXGBE_TFCS_TXOFF5
 0x00002000

	)

1064 
	#IXGBE_TFCS_TXOFF6
 0x00004000

	)

1065 
	#IXGBE_TFCS_TXOFF7
 0x00008000

	)

1068 
	#IXGBE_TCPTIMER_KS
 0x00000100

	)

1069 
	#IXGBE_TCPTIMER_COUNT_ENABLE
 0x00000200

	)

1070 
	#IXGBE_TCPTIMER_COUNT_FINISH
 0x00000400

	)

1071 
	#IXGBE_TCPTIMER_LOOP
 0x00000800

	)

1072 
	#IXGBE_TCPTIMER_DURATION_MASK
 0x000000FF

	)

1075 
	#IXGBE_HLREG0_TXCRCEN
 0x00000001

	)

1076 
	#IXGBE_HLREG0_RXCRCSTRP
 0x00000002

	)

1077 
	#IXGBE_HLREG0_JUMBOEN
 0x00000004

	)

1078 
	#IXGBE_HLREG0_TXPADEN
 0x00000400

	)

1079 
	#IXGBE_HLREG0_TXPAUSEEN
 0x00001000

	)

1080 
	#IXGBE_HLREG0_RXPAUSEEN
 0x00004000

	)

1081 
	#IXGBE_HLREG0_LPBK
 0x00008000

	)

1082 
	#IXGBE_HLREG0_MDCSPD
 0x00010000

	)

1083 
	#IXGBE_HLREG0_CONTMDC
 0x00020000

	)

1084 
	#IXGBE_HLREG0_CTRLFLTR
 0x00040000

	)

1085 
	#IXGBE_HLREG0_PREPEND
 0x00F00000

	)

1086 
	#IXGBE_HLREG0_PRIPAUSEEN
 0x01000000

	)

1087 
	#IXGBE_HLREG0_RXPAUSERECDA
 0x06000000

	)

1088 
	#IXGBE_HLREG0_RXLNGTHERREN
 0x08000000

	)

1089 
	#IXGBE_HLREG0_RXPADSTRIPEN
 0x10000000

	)

1092 
	#IXGBE_VMD_CTL_VMDQ_EN
 0x00000001

	)

1093 
	#IXGBE_VMD_CTL_VMDQ_FILTER
 0x00000002

	)

1096 
	#IXGBE_VT_CTL_DIS_DEFPL
 0x20000000

	)

1097 
	#IXGBE_VT_CTL_REPLEN
 0x40000000

	)

1098 
	#IXGBE_VT_CTL_VT_ENABLE
 0x00000001

	)

1099 
	#IXGBE_VT_CTL_POOL_SHIFT
 7

	)

1100 
	#IXGBE_VT_CTL_POOL_MASK
 (0x3F << 
IXGBE_VT_CTL_POOL_SHIFT
)

	)

1103 
	#IXGBE_VMOLR_AUPE
 0x01000000

	)

1104 
	#IXGBE_VMOLR_ROMPE
 0x02000000

	)

1105 
	#IXGBE_VMOLR_ROPE
 0x04000000

	)

1106 
	#IXGBE_VMOLR_BAM
 0x08000000

	)

1107 
	#IXGBE_VMOLR_MPE
 0x10000000

	)

1110 
	#IXGBE_VFRE_ENABLE_ALL
 0xFFFFFFFF

	)

1112 
	#IXGBE_VF_INIT_TIMEOUT
 200

	)

1115 
	#IXGBE_RDHMPN_RDICADDR
 0x007FF800

	)

1116 
	#IXGBE_RDHMPN_RDICRDREQ
 0x00800000

	)

1117 
	#IXGBE_RDHMPN_RDICADDR_SHIFT
 11

	)

1118 
	#IXGBE_TDHMPN_TDICADDR
 0x003FF800

	)

1119 
	#IXGBE_TDHMPN_TDICRDREQ
 0x00800000

	)

1120 
	#IXGBE_TDHMPN_TDICADDR_SHIFT
 11

	)

1122 
	#IXGBE_RDMAM_MEM_SEL_SHIFT
 13

	)

1123 
	#IXGBE_RDMAM_DWORD_SHIFT
 9

	)

1124 
	#IXGBE_RDMAM_DESC_COMP_FIFO
 1

	)

1125 
	#IXGBE_RDMAM_DFC_CMD_FIFO
 2

	)

1126 
	#IXGBE_RDMAM_RSC_HEADER_ADDR
 3

	)

1127 
	#IXGBE_RDMAM_TCN_STATUS_RAM
 4

	)

1128 
	#IXGBE_RDMAM_WB_COLL_FIFO
 5

	)

1129 
	#IXGBE_RDMAM_QSC_CNT_RAM
 6

	)

1130 
	#IXGBE_RDMAM_QSC_FCOE_RAM
 7

	)

1131 
	#IXGBE_RDMAM_QSC_QUEUE_CNT
 8

	)

1132 
	#IXGBE_RDMAM_QSC_QUEUE_RAM
 0xA

	)

1133 
	#IXGBE_RDMAM_QSC_RSC_RAM
 0xB

	)

1134 
	#IXGBE_RDMAM_DESC_COM_FIFO_RANGE
 135

	)

1135 
	#IXGBE_RDMAM_DESC_COM_FIFO_COUNT
 4

	)

1136 
	#IXGBE_RDMAM_DFC_CMD_FIFO_RANGE
 48

	)

1137 
	#IXGBE_RDMAM_DFC_CMD_FIFO_COUNT
 7

	)

1138 
	#IXGBE_RDMAM_RSC_HEADER_ADDR_RANGE
 32

	)

1139 
	#IXGBE_RDMAM_RSC_HEADER_ADDR_COUNT
 4

	)

1140 
	#IXGBE_RDMAM_TCN_STATUS_RAM_RANGE
 256

	)

1141 
	#IXGBE_RDMAM_TCN_STATUS_RAM_COUNT
 9

	)

1142 
	#IXGBE_RDMAM_WB_COLL_FIFO_RANGE
 8

	)

1143 
	#IXGBE_RDMAM_WB_COLL_FIFO_COUNT
 4

	)

1144 
	#IXGBE_RDMAM_QSC_CNT_RAM_RANGE
 64

	)

1145 
	#IXGBE_RDMAM_QSC_CNT_RAM_COUNT
 4

	)

1146 
	#IXGBE_RDMAM_QSC_FCOE_RAM_RANGE
 512

	)

1147 
	#IXGBE_RDMAM_QSC_FCOE_RAM_COUNT
 5

	)

1148 
	#IXGBE_RDMAM_QSC_QUEUE_CNT_RANGE
 32

	)

1149 
	#IXGBE_RDMAM_QSC_QUEUE_CNT_COUNT
 4

	)

1150 
	#IXGBE_RDMAM_QSC_QUEUE_RAM_RANGE
 128

	)

1151 
	#IXGBE_RDMAM_QSC_QUEUE_RAM_COUNT
 8

	)

1152 
	#IXGBE_RDMAM_QSC_RSC_RAM_RANGE
 32

	)

1153 
	#IXGBE_RDMAM_QSC_RSC_RAM_COUNT
 8

	)

1155 
	#IXGBE_TXDESCIC_READY
 0x80000000

	)

1158 
	#IXGBE_RXCSUM_IPPCSE
 0x00001000

	)

1159 
	#IXGBE_RXCSUM_PCSD
 0x00002000

	)

1162 
	#IXGBE_FCRTL_XONE
 0x80000000

	)

1163 
	#IXGBE_FCRTH_FCEN
 0x80000000

	)

1166 
	#IXGBE_PAP_TXPAUSECNT_MASK
 0x0000FFFF

	)

1169 
	#IXGBE_RMCS_RRM
 0x00000002

	)

1171 
	#IXGBE_RMCS_RAC
 0x00000004

	)

1172 
	#IXGBE_RMCS_DFP
 
IXGBE_RMCS_RAC


	)

1173 
	#IXGBE_RMCS_TFCE_802_3X
 0x00000008

	)

1174 
	#IXGBE_RMCS_TFCE_PRIORITY
 0x00000010

	)

1175 
	#IXGBE_RMCS_ARBDIS
 0x00000040

	)

1178 
	#IXGBE_FCCFG_TFCE_802_3X
 0x00000008

	)

1179 
	#IXGBE_FCCFG_TFCE_PRIORITY
 0x00000010

	)

1184 
	#IXGBE_EICR_RTX_QUEUE
 0x0000FFFF

	)

1185 
	#IXGBE_EICR_FLOW_DIR
 0x00010000

	)

1186 
	#IXGBE_EICR_RX_MISS
 0x00020000

	)

1187 
	#IXGBE_EICR_PCI
 0x00040000

	)

1188 
	#IXGBE_EICR_MAILBOX
 0x00080000

	)

1189 
	#IXGBE_EICR_LSC
 0x00100000

	)

1190 
	#IXGBE_EICR_LINKSEC
 0x00200000

	)

1191 
	#IXGBE_EICR_MNG
 0x00400000

	)

1192 
	#IXGBE_EICR_GPI_SDP0
 0x01000000

	)

1193 
	#IXGBE_EICR_GPI_SDP1
 0x02000000

	)

1194 
	#IXGBE_EICR_GPI_SDP2
 0x04000000

	)

1195 
	#IXGBE_EICR_ECC
 0x10000000

	)

1196 
	#IXGBE_EICR_PBUR
 0x10000000

	)

1197 
	#IXGBE_EICR_DHER
 0x20000000

	)

1198 
	#IXGBE_EICR_TCP_TIMER
 0x40000000

	)

1199 
	#IXGBE_EICR_OTHER
 0x80000000

	)

1202 
	#IXGBE_EICS_RTX_QUEUE
 
IXGBE_EICR_RTX_QUEUE


	)

1203 
	#IXGBE_EICS_FLOW_DIR
 
IXGBE_EICR_FLOW_DIR


	)

1204 
	#IXGBE_EICS_RX_MISS
 
IXGBE_EICR_RX_MISS


	)

1205 
	#IXGBE_EICS_PCI
 
IXGBE_EICR_PCI


	)

1206 
	#IXGBE_EICS_MAILBOX
 
IXGBE_EICR_MAILBOX


	)

1207 
	#IXGBE_EICS_LSC
 
IXGBE_EICR_LSC


	)

1208 
	#IXGBE_EICS_MNG
 
IXGBE_EICR_MNG


	)

1209 
	#IXGBE_EICS_GPI_SDP0
 
IXGBE_EICR_GPI_SDP0


	)

1210 
	#IXGBE_EICS_GPI_SDP1
 
IXGBE_EICR_GPI_SDP1


	)

1211 
	#IXGBE_EICS_GPI_SDP2
 
IXGBE_EICR_GPI_SDP2


	)

1212 
	#IXGBE_EICS_ECC
 
IXGBE_EICR_ECC


	)

1213 
	#IXGBE_EICS_PBUR
 
IXGBE_EICR_PBUR


	)

1214 
	#IXGBE_EICS_DHER
 
IXGBE_EICR_DHER


	)

1215 
	#IXGBE_EICS_TCP_TIMER
 
IXGBE_EICR_TCP_TIMER


	)

1216 
	#IXGBE_EICS_OTHER
 
IXGBE_EICR_OTHER


	)

1219 
	#IXGBE_EIMS_RTX_QUEUE
 
IXGBE_EICR_RTX_QUEUE


	)

1220 
	#IXGBE_EIMS_FLOW_DIR
 
IXGBE_EICR_FLOW_DIR


	)

1221 
	#IXGBE_EIMS_RX_MISS
 
IXGBE_EICR_RX_MISS


	)

1222 
	#IXGBE_EIMS_PCI
 
IXGBE_EICR_PCI


	)

1223 
	#IXGBE_EIMS_MAILBOX
 
IXGBE_EICR_MAILBOX


	)

1224 
	#IXGBE_EIMS_LSC
 
IXGBE_EICR_LSC


	)

1225 
	#IXGBE_EIMS_MNG
 
IXGBE_EICR_MNG


	)

1226 
	#IXGBE_EIMS_GPI_SDP0
 
IXGBE_EICR_GPI_SDP0


	)

1227 
	#IXGBE_EIMS_GPI_SDP1
 
IXGBE_EICR_GPI_SDP1


	)

1228 
	#IXGBE_EIMS_GPI_SDP2
 
IXGBE_EICR_GPI_SDP2


	)

1229 
	#IXGBE_EIMS_ECC
 
IXGBE_EICR_ECC


	)

1230 
	#IXGBE_EIMS_PBUR
 
IXGBE_EICR_PBUR


	)

1231 
	#IXGBE_EIMS_DHER
 
IXGBE_EICR_DHER


	)

1232 
	#IXGBE_EIMS_TCP_TIMER
 
IXGBE_EICR_TCP_TIMER


	)

1233 
	#IXGBE_EIMS_OTHER
 
IXGBE_EICR_OTHER


	)

1236 
	#IXGBE_EIMC_RTX_QUEUE
 
IXGBE_EICR_RTX_QUEUE


	)

1237 
	#IXGBE_EIMC_FLOW_DIR
 
IXGBE_EICR_FLOW_DIR


	)

1238 
	#IXGBE_EIMC_RX_MISS
 
IXGBE_EICR_RX_MISS


	)

1239 
	#IXGBE_EIMC_PCI
 
IXGBE_EICR_PCI


	)

1240 
	#IXGBE_EIMC_MAILBOX
 
IXGBE_EICR_MAILBOX


	)

1241 
	#IXGBE_EIMC_LSC
 
IXGBE_EICR_LSC


	)

1242 
	#IXGBE_EIMC_MNG
 
IXGBE_EICR_MNG


	)

1243 
	#IXGBE_EIMC_GPI_SDP0
 
IXGBE_EICR_GPI_SDP0


	)

1244 
	#IXGBE_EIMC_GPI_SDP1
 
IXGBE_EICR_GPI_SDP1


	)

1245 
	#IXGBE_EIMC_GPI_SDP2
 
IXGBE_EICR_GPI_SDP2


	)

1246 
	#IXGBE_EIMC_ECC
 
IXGBE_EICR_ECC


	)

1247 
	#IXGBE_EIMC_PBUR
 
IXGBE_EICR_PBUR


	)

1248 
	#IXGBE_EIMC_DHER
 
IXGBE_EICR_DHER


	)

1249 
	#IXGBE_EIMC_TCP_TIMER
 
IXGBE_EICR_TCP_TIMER


	)

1250 
	#IXGBE_EIMC_OTHER
 
IXGBE_EICR_OTHER


	)

1252 
	#IXGBE_EIMS_ENABLE_MASK
 ( \

1253 
IXGBE_EIMS_RTX_QUEUE
 | \

1254 
IXGBE_EIMS_LSC
 | \

1255 
IXGBE_EIMS_TCP_TIMER
 | \

1256 
IXGBE_EIMS_OTHER
)

	)

1259 
	#IXGBE_IMIR_PORT_IM_EN
 0x00010000

	)

1260 
	#IXGBE_IMIR_PORT_BP
 0x00020000

	)

1261 
	#IXGBE_IMIREXT_SIZE_BP
 0x00001000

	)

1262 
	#IXGBE_IMIREXT_CTRL_URG
 0x00002000

	)

1263 
	#IXGBE_IMIREXT_CTRL_ACK
 0x00004000

	)

1264 
	#IXGBE_IMIREXT_CTRL_PSH
 0x00008000

	)

1265 
	#IXGBE_IMIREXT_CTRL_RST
 0x00010000

	)

1266 
	#IXGBE_IMIREXT_CTRL_SYN
 0x00020000

	)

1267 
	#IXGBE_IMIREXT_CTRL_FIN
 0x00040000

	)

1268 
	#IXGBE_IMIREXT_CTRL_BP
 0x00080000

	)

1269 
	#IXGBE_IMIR_SIZE_BP_82599
 0x00001000

	)

1270 
	#IXGBE_IMIR_CTRL_URG_82599
 0x00002000

	)

1271 
	#IXGBE_IMIR_CTRL_ACK_82599
 0x00004000

	)

1272 
	#IXGBE_IMIR_CTRL_PSH_82599
 0x00008000

	)

1273 
	#IXGBE_IMIR_CTRL_RST_82599
 0x00010000

	)

1274 
	#IXGBE_IMIR_CTRL_SYN_82599
 0x00020000

	)

1275 
	#IXGBE_IMIR_CTRL_FIN_82599
 0x00040000

	)

1276 
	#IXGBE_IMIR_CTRL_BP_82599
 0x00080000

	)

1277 
	#IXGBE_IMIR_LLI_EN_82599
 0x00100000

	)

1278 
	#IXGBE_IMIR_RX_QUEUE_MASK_82599
 0x0000007F

	)

1279 
	#IXGBE_IMIR_RX_QUEUE_SHIFT_82599
 21

	)

1280 
	#IXGBE_IMIRVP_PRIORITY_MASK
 0x00000007

	)

1281 
	#IXGBE_IMIRVP_PRIORITY_EN
 0x00000008

	)

1283 
	#IXGBE_MAX_FTQF_FILTERS
 128

	)

1284 
	#IXGBE_FTQF_PROTOCOL_MASK
 0x00000003

	)

1285 
	#IXGBE_FTQF_PROTOCOL_TCP
 0x00000000

	)

1286 
	#IXGBE_FTQF_PROTOCOL_UDP
 0x00000001

	)

1287 
	#IXGBE_FTQF_PROTOCOL_SCTP
 2

	)

1288 
	#IXGBE_FTQF_PRIORITY_MASK
 0x00000007

	)

1289 
	#IXGBE_FTQF_PRIORITY_SHIFT
 2

	)

1290 
	#IXGBE_FTQF_POOL_MASK
 0x0000003F

	)

1291 
	#IXGBE_FTQF_POOL_SHIFT
 8

	)

1292 
	#IXGBE_FTQF_5TUPLE_MASK_MASK
 0x0000001F

	)

1293 
	#IXGBE_FTQF_5TUPLE_MASK_SHIFT
 25

	)

1294 
	#IXGBE_FTQF_SOURCE_ADDR_MASK
 0x1E

	)

1295 
	#IXGBE_FTQF_DEST_ADDR_MASK
 0x1D

	)

1296 
	#IXGBE_FTQF_SOURCE_PORT_MASK
 0x1B

	)

1297 
	#IXGBE_FTQF_DEST_PORT_MASK
 0x17

	)

1298 
	#IXGBE_FTQF_PROTOCOL_COMP_MASK
 0x0F

	)

1299 
	#IXGBE_FTQF_POOL_MASK_EN
 0x40000000

	)

1300 
	#IXGBE_FTQF_QUEUE_ENABLE
 0x80000000

	)

1303 
	#IXGBE_IRQ_CLEAR_MASK
 0xFFFFFFFF

	)

1306 
	#IXGBE_IVAR_REG_NUM
 25

	)

1307 
	#IXGBE_IVAR_REG_NUM_82599
 64

	)

1308 
	#IXGBE_IVAR_TXRX_ENTRY
 96

	)

1309 
	#IXGBE_IVAR_RX_ENTRY
 64

	)

1310 
	#IXGBE_IVAR_RX_QUEUE
(
_i
Ë(0 + (_i))

	)

1311 
	#IXGBE_IVAR_TX_QUEUE
(
_i
Ë(64 + (_i))

	)

1312 
	#IXGBE_IVAR_TX_ENTRY
 32

	)

1314 
	#IXGBE_IVAR_TCP_TIMER_INDEX
 96

	)

1315 
	#IXGBE_IVAR_OTHER_CAUSES_INDEX
 97

	)

1317 
	#IXGBE_MSIX_VECTOR
(
_i
Ë(0 + (_i))

	)

1319 
	#IXGBE_IVAR_ALLOC_VAL
 0x80

	)

1322 
	#IXGBE_MAX_ETQF_FILTERS
 8

	)

1323 
	#IXGBE_ETQF_FCOE
 0x08000000

	)

1324 
	#IXGBE_ETQF_BCN
 0x10000000

	)

1325 
	#IXGBE_ETQF_1588
 0x40000000

	)

1326 
	#IXGBE_ETQF_FILTER_EN
 0x80000000

	)

1327 
	#IXGBE_ETQF_POOL_ENABLE
 (1 << 26Ë

	)

1329 
	#IXGBE_ETQS_RX_QUEUE
 0x007F0000

	)

1330 
	#IXGBE_ETQS_RX_QUEUE_SHIFT
 16

	)

1331 
	#IXGBE_ETQS_LLI
 0x20000000

	)

1332 
	#IXGBE_ETQS_QUEUE_EN
 0x80000000

	)

1344 
	#IXGBE_ETQF_FILTER_EAPOL
 0

	)

1345 
	#IXGBE_ETQF_FILTER_FCOE
 2

	)

1346 
	#IXGBE_ETQF_FILTER_1588
 3

	)

1348 
	#IXGBE_VLNCTRL_VET
 0x0000FFFF

	)

1349 
	#IXGBE_VLNCTRL_CFI
 0x10000000

	)

1350 
	#IXGBE_VLNCTRL_CFIEN
 0x20000000

	)

1351 
	#IXGBE_VLNCTRL_VFE
 0x40000000

	)

1352 
	#IXGBE_VLNCTRL_VME
 0x80000000

	)

1355 
	#IXGBE_VLVF_VIEN
 0x80000000

	)

1356 
	#IXGBE_VLVF_ENTRIES
 64

	)

1357 
	#IXGBE_VLVF_VLANID_MASK
 0x00000FFF

	)

1359 
	#IXGBE_ETHERNET_IEEE_VLAN_TYPE
 0x8100

	)

1362 
	#IXGBE_STATUS_LAN_ID
 0x0000000C

	)

1363 
	#IXGBE_STATUS_LAN_ID_SHIFT
 2

	)

1364 
	#IXGBE_STATUS_GIO
 0x00080000

	)

1366 
	#IXGBE_STATUS_LAN_ID_0
 0x00000000

	)

1367 
	#IXGBE_STATUS_LAN_ID_1
 0x00000004

	)

1370 
	#IXGBE_ESDP_SDP0
 0x00000001

	)

1371 
	#IXGBE_ESDP_SDP1
 0x00000002

	)

1372 
	#IXGBE_ESDP_SDP2
 0x00000004

	)

1373 
	#IXGBE_ESDP_SDP3
 0x00000008

	)

1374 
	#IXGBE_ESDP_SDP4
 0x00000010

	)

1375 
	#IXGBE_ESDP_SDP5
 0x00000020

	)

1376 
	#IXGBE_ESDP_SDP6
 0x00000040

	)

1377 
	#IXGBE_ESDP_SDP4_DIR
 0x00000004

	)

1378 
	#IXGBE_ESDP_SDP5_DIR
 0x00002000

	)

1381 
	#IXGBE_LED_IVRT_BASE
 0x00000040

	)

1382 
	#IXGBE_LED_BLINK_BASE
 0x00000080

	)

1383 
	#IXGBE_LED_MODE_MASK_BASE
 0x0000000F

	)

1384 
	#IXGBE_LED_OFFSET
(
_ba£
, 
_i
Ë(_ba£ << (8 * (_i)))

	)

1385 
	#IXGBE_LED_MODE_SHIFT
(
_i
Ë(8*(_i))

	)

1386 
	#IXGBE_LED_IVRT
(
_i
Ë
	`IXGBE_LED_OFFSET
(
IXGBE_LED_IVRT_BASE
, _i)

	)

1387 
	#IXGBE_LED_BLINK
(
_i
Ë
	`IXGBE_LED_OFFSET
(
IXGBE_LED_BLINK_BASE
, _i)

	)

1388 
	#IXGBE_LED_MODE_MASK
(
_i
Ë
	`IXGBE_LED_OFFSET
(
IXGBE_LED_MODE_MASK_BASE
, _i)

	)

1391 
	#IXGBE_LED_LINK_UP
 0x0

	)

1392 
	#IXGBE_LED_LINK_10G
 0x1

	)

1393 
	#IXGBE_LED_MAC
 0x2

	)

1394 
	#IXGBE_LED_FILTER
 0x3

	)

1395 
	#IXGBE_LED_LINK_ACTIVE
 0x4

	)

1396 
	#IXGBE_LED_LINK_1G
 0x5

	)

1397 
	#IXGBE_LED_ON
 0xE

	)

1398 
	#IXGBE_LED_OFF
 0xF

	)

1401 
	#IXGBE_AUTOC_KX4_KX_SUPP_MASK
 0xC0000000

	)

1402 
	#IXGBE_AUTOC_KX4_SUPP
 0x80000000

	)

1403 
	#IXGBE_AUTOC_KX_SUPP
 0x40000000

	)

1404 
	#IXGBE_AUTOC_PAUSE
 0x30000000

	)

1405 
	#IXGBE_AUTOC_RF
 0x08000000

	)

1406 
	#IXGBE_AUTOC_PD_TMR
 0x06000000

	)

1407 
	#IXGBE_AUTOC_AN_RX_LOOSE
 0x01000000

	)

1408 
	#IXGBE_AUTOC_AN_RX_DRIFT
 0x00800000

	)

1409 
	#IXGBE_AUTOC_AN_RX_ALIGN
 0x007C0000

	)

1410 
	#IXGBE_AUTOC_FECA
 0x00040000

	)

1411 
	#IXGBE_AUTOC_FECR
 0x00020000

	)

1412 
	#IXGBE_AUTOC_KR_SUPP
 0x00010000

	)

1413 
	#IXGBE_AUTOC_AN_RESTART
 0x00001000

	)

1414 
	#IXGBE_AUTOC_FLU
 0x00000001

	)

1415 
	#IXGBE_AUTOC_LMS_SHIFT
 13

	)

1416 
	#IXGBE_AUTOC_LMS_10G_SERIAL
 (0x3 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1417 
	#IXGBE_AUTOC_LMS_KX4_KX_KR
 (0x4 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1418 
	#IXGBE_AUTOC_LMS_SGMII_1G_100M
 (0x5 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1419 
	#IXGBE_AUTOC_LMS_KX4_KX_KR_1G_AN
 (0x6 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1420 
	#IXGBE_AUTOC_LMS_KX4_KX_KR_SGMII
 (0x7 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1421 
	#IXGBE_AUTOC_LMS_MASK
 (0x7 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1422 
	#IXGBE_AUTOC_LMS_1G_LINK_NO_AN
 (0x0 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1423 
	#IXGBE_AUTOC_LMS_10G_LINK_NO_AN
 (0x1 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1424 
	#IXGBE_AUTOC_LMS_1G_AN
 (0x2 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1425 
	#IXGBE_AUTOC_LMS_KX4_AN
 (0x4 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1426 
	#IXGBE_AUTOC_LMS_KX4_AN_1G_AN
 (0x6 << 
IXGBE_AUTOC_LMS_SHIFT
)

	)

1427 
	#IXGBE_AUTOC_LMS_ATTACH_TYPE
 (0x7 << 
IXGBE_AUTOC_10G_PMA_PMD_SHIFT
)

	)

1429 
	#IXGBE_AUTOC_1G_PMA_PMD_MASK
 0x00000200

	)

1430 
	#IXGBE_AUTOC_1G_PMA_PMD_SHIFT
 9

	)

1431 
	#IXGBE_AUTOC_10G_PMA_PMD_MASK
 0x00000180

	)

1432 
	#IXGBE_AUTOC_10G_PMA_PMD_SHIFT
 7

	)

1433 
	#IXGBE_AUTOC_10G_XAUI
 (0x0 << 
IXGBE_AUTOC_10G_PMA_PMD_SHIFT
)

	)

1434 
	#IXGBE_AUTOC_10G_KX4
 (0x1 << 
IXGBE_AUTOC_10G_PMA_PMD_SHIFT
)

	)

1435 
	#IXGBE_AUTOC_10G_CX4
 (0x2 << 
IXGBE_AUTOC_10G_PMA_PMD_SHIFT
)

	)

1436 
	#IXGBE_AUTOC_1G_BX
 (0x0 << 
IXGBE_AUTOC_1G_PMA_PMD_SHIFT
)

	)

1437 
	#IXGBE_AUTOC_1G_KX
 (0x1 << 
IXGBE_AUTOC_1G_PMA_PMD_SHIFT
)

	)

1438 
	#IXGBE_AUTOC_1G_SFI
 (0x0 << 
IXGBE_AUTOC_1G_PMA_PMD_SHIFT
)

	)

1439 
	#IXGBE_AUTOC_1G_KX_BX
 (0x1 << 
IXGBE_AUTOC_1G_PMA_PMD_SHIFT
)

	)

1441 
	#IXGBE_AUTOC2_UPPER_MASK
 0xFFFF0000

	)

1442 
	#IXGBE_AUTOC2_10G_SERIAL_PMA_PMD_MASK
 0x00030000

	)

1443 
	#IXGBE_AUTOC2_10G_SERIAL_PMA_PMD_SHIFT
 16

	)

1444 
	#IXGBE_AUTOC2_10G_KR
 (0x0 << 
IXGBE_AUTOC2_10G_SERIAL_PMA_PMD_SHIFT
)

	)

1445 
	#IXGBE_AUTOC2_10G_XFI
 (0x1 << 
IXGBE_AUTOC2_10G_SERIAL_PMA_PMD_SHIFT
)

	)

1446 
	#IXGBE_AUTOC2_10G_SFI
 (0x2 << 
IXGBE_AUTOC2_10G_SERIAL_PMA_PMD_SHIFT
)

	)

1449 
	#IXGBE_LINKS_KX_AN_COMP
 0x80000000

	)

1450 
	#IXGBE_LINKS_UP
 0x40000000

	)

1451 
	#IXGBE_LINKS_SPEED
 0x20000000

	)

1452 
	#IXGBE_LINKS_MODE
 0x18000000

	)

1453 
	#IXGBE_LINKS_RX_MODE
 0x06000000

	)

1454 
	#IXGBE_LINKS_TX_MODE
 0x01800000

	)

1455 
	#IXGBE_LINKS_XGXS_EN
 0x00400000

	)

1456 
	#IXGBE_LINKS_SGMII_EN
 0x02000000

	)

1457 
	#IXGBE_LINKS_PCS_1G_EN
 0x00200000

	)

1458 
	#IXGBE_LINKS_1G_AN_EN
 0x00100000

	)

1459 
	#IXGBE_LINKS_KX_AN_IDLE
 0x00080000

	)

1460 
	#IXGBE_LINKS_1G_SYNC
 0x00040000

	)

1461 
	#IXGBE_LINKS_10G_ALIGN
 0x00020000

	)

1462 
	#IXGBE_LINKS_10G_LANE_SYNC
 0x00017000

	)

1463 
	#IXGBE_LINKS_TL_FAULT
 0x00001000

	)

1464 
	#IXGBE_LINKS_SIGNAL
 0x00000F00

	)

1466 
	#IXGBE_LINKS_SPEED_82599
 0x30000000

	)

1467 
	#IXGBE_LINKS_SPEED_10G_82599
 0x30000000

	)

1468 
	#IXGBE_LINKS_SPEED_1G_82599
 0x20000000

	)

1469 
	#IXGBE_LINKS_SPEED_100_82599
 0x10000000

	)

1470 
	#IXGBE_LINK_UP_TIME
 90

	)

1471 
	#IXGBE_AUTO_NEG_TIME
 45

	)

1474 
	#IXGBE_PCS1GLSTA_LINK_OK
 1

	)

1475 
	#IXGBE_PCS1GLSTA_SYNK_OK
 0x10

	)

1476 
	#IXGBE_PCS1GLSTA_AN_COMPLETE
 0x10000

	)

1477 
	#IXGBE_PCS1GLSTA_AN_PAGE_RX
 0x20000

	)

1478 
	#IXGBE_PCS1GLSTA_AN_TIMED_OUT
 0x40000

	)

1479 
	#IXGBE_PCS1GLSTA_AN_REMOTE_FAULT
 0x80000

	)

1480 
	#IXGBE_PCS1GLSTA_AN_ERROR_RWS
 0x100000

	)

1482 
	#IXGBE_PCS1GANA_SYM_PAUSE
 0x80

	)

1483 
	#IXGBE_PCS1GANA_ASM_PAUSE
 0x100

	)

1486 
	#IXGBE_PCS1GLCTL_AN_1G_TIMEOUT_EN
 0x00040000

	)

1487 
	#IXGBE_PCS1GLCTL_FLV_LINK_UP
 1

	)

1488 
	#IXGBE_PCS1GLCTL_FORCE_LINK
 0x20

	)

1489 
	#IXGBE_PCS1GLCTL_LOW_LINK_LATCH
 0x40

	)

1490 
	#IXGBE_PCS1GLCTL_AN_ENABLE
 0x10000

	)

1491 
	#IXGBE_PCS1GLCTL_AN_RESTART
 0x20000

	)

1494 
	#IXGBE_SWSM_SMBI
 0x00000001

	)

1495 
	#IXGBE_SWSM_SWESMBI
 0x00000002

	)

1496 
	#IXGBE_SWSM_WMNG
 0x00000004

	)

1499 
	#IXGBE_GSSR_EEP_SM
 0x0001

	)

1500 
	#IXGBE_GSSR_PHY0_SM
 0x0002

	)

1501 
	#IXGBE_GSSR_PHY1_SM
 0x0004

	)

1502 
	#IXGBE_GSSR_MAC_CSR_SM
 0x0008

	)

1503 
	#IXGBE_GSSR_FLASH_SM
 0x0010

	)

1506 
	#IXGBE_EEC_SK
 0x00000001

	)

1507 
	#IXGBE_EEC_CS
 0x00000002

	)

1508 
	#IXGBE_EEC_DI
 0x00000004

	)

1509 
	#IXGBE_EEC_DO
 0x00000008

	)

1510 
	#IXGBE_EEC_FWE_MASK
 0x00000030

	)

1511 
	#IXGBE_EEC_FWE_DIS
 0x00000010

	)

1512 
	#IXGBE_EEC_FWE_EN
 0x00000020

	)

1513 
	#IXGBE_EEC_FWE_SHIFT
 4

	)

1514 
	#IXGBE_EEC_REQ
 0x00000040

	)

1515 
	#IXGBE_EEC_GNT
 0x00000080

	)

1516 
	#IXGBE_EEC_PRES
 0x00000100

	)

1517 
	#IXGBE_EEC_ARD
 0x00000200

	)

1519 
	#IXGBE_EEC_ADDR_SIZE
 0x00000400

	)

1520 
	#IXGBE_EEC_SIZE
 0x00007800

	)

1522 
	#IXGBE_EEC_SIZE_SHIFT
 11

	)

1523 
	#IXGBE_EEPROM_WORD_SIZE_SHIFT
 6

	)

1524 
	#IXGBE_EEPROM_OPCODE_BITS
 8

	)

1527 
	#IXGBE_EEPROM_CHECKSUM
 0x3F

	)

1528 
	#IXGBE_EEPROM_SUM
 0xBABA

	)

1529 
	#IXGBE_PCIE_ANALOG_PTR
 0x03

	)

1530 
	#IXGBE_ATLAS0_CONFIG_PTR
 0x04

	)

1531 
	#IXGBE_ATLAS1_CONFIG_PTR
 0x05

	)

1532 
	#IXGBE_PCIE_GENERAL_PTR
 0x06

	)

1533 
	#IXGBE_PCIE_CONFIG0_PTR
 0x07

	)

1534 
	#IXGBE_PCIE_CONFIG1_PTR
 0x08

	)

1535 
	#IXGBE_CORE0_PTR
 0x09

	)

1536 
	#IXGBE_CORE1_PTR
 0x0A

	)

1537 
	#IXGBE_MAC0_PTR
 0x0B

	)

1538 
	#IXGBE_MAC1_PTR
 0x0C

	)

1539 
	#IXGBE_CSR0_CONFIG_PTR
 0x0D

	)

1540 
	#IXGBE_CSR1_CONFIG_PTR
 0x0E

	)

1541 
	#IXGBE_FW_PTR
 0x0F

	)

1542 
	#IXGBE_PBANUM0_PTR
 0x15

	)

1543 
	#IXGBE_PBANUM1_PTR
 0x16

	)

1544 
	#IXGBE_SAN_MAC_ADDR_PTR
 0x28

	)

1545 
	#IXGBE_DEVICE_CAPS
 0x2C

	)

1546 
	#IXGBE_SERIAL_NUMBER_MAC_ADDR
 0x11

	)

1547 
	#IXGBE_PCIE_MSIX_82599_CAPS
 0x72

	)

1548 
	#IXGBE_PCIE_MSIX_82598_CAPS
 0x62

	)

1551 
	#IXGBE_PCIE_MSIX_TBL_SZ_MASK
 0x7FF

	)

1554 
	#IXGBE_ISCSI_BOOT_CAPS
 0x0033

	)

1555 
	#IXGBE_ISCSI_SETUP_PORT_0
 0x0030

	)

1556 
	#IXGBE_ISCSI_SETUP_PORT_1
 0x0034

	)

1559 
	#IXGBE_EEPROM_MAX_RETRY_SPI
 5000

	)

1560 
	#IXGBE_EEPROM_STATUS_RDY_SPI
 0x01

	)

1561 
	#IXGBE_EEPROM_READ_OPCODE_SPI
 0x03

	)

1562 
	#IXGBE_EEPROM_WRITE_OPCODE_SPI
 0x02

	)

1563 
	#IXGBE_EEPROM_A8_OPCODE_SPI
 0x08

	)

1564 
	#IXGBE_EEPROM_WREN_OPCODE_SPI
 0x06

	)

1566 
	#IXGBE_EEPROM_WRDI_OPCODE_SPI
 0x04

	)

1567 
	#IXGBE_EEPROM_RDSR_OPCODE_SPI
 0x05

	)

1568 
	#IXGBE_EEPROM_WRSR_OPCODE_SPI
 0x01

	)

1569 
	#IXGBE_EEPROM_ERASE4K_OPCODE_SPI
 0x20

	)

1570 
	#IXGBE_EEPROM_ERASE64K_OPCODE_SPI
 0xD8

	)

1571 
	#IXGBE_EEPROM_ERASE256_OPCODE_SPI
 0xDB

	)

1574 
	#IXGBE_EEPROM_READ_REG_DATA
 16

	)

1575 
	#IXGBE_EEPROM_READ_REG_DONE
 2

	)

1576 
	#IXGBE_EEPROM_READ_REG_START
 1

	)

1577 
	#IXGBE_EEPROM_READ_ADDR_SHIFT
 2

	)

1579 
	#IXGBE_ETH_LENGTH_OF_ADDRESS
 6

	)

1581 #i‚de‡
IXGBE_EEPROM_GRANT_ATTEMPTS


1582 
	#IXGBE_EEPROM_GRANT_ATTEMPTS
 1000

	)

1585 #i‚de‡
IXGBE_EERD_ATTEMPTS


1587 
	#IXGBE_EERD_ATTEMPTS
 100000

	)

1590 
	#IXGBE_PCIE_CTRL2
 0x5

	)

1591 
	#IXGBE_PCIE_CTRL2_DUMMY_ENABLE
 0x8

	)

1592 
	#IXGBE_PCIE_CTRL2_LAN_DISABLE
 0x2

	)

1593 
	#IXGBE_PCIE_CTRL2_DISABLE_SELECT
 0x1

	)

1595 
	#IXGBE_SAN_MAC_ADDR_PORT0_OFFSET
 0x0

	)

1596 
	#IXGBE_SAN_MAC_ADDR_PORT1_OFFSET
 0x3

	)

1597 
	#IXGBE_DEVICE_CAPS_ALLOW_ANY_SFP
 0x1

	)

1598 
	#IXGBE_DEVICE_CAPS_FCOE_OFFLOADS
 0x2

	)

1599 
	#IXGBE_FW_PASSTHROUGH_PATCH_CONFIG_PTR
 0x4

	)

1600 
	#IXGBE_FW_PATCH_VERSION_4
 0x7

	)

1603 
	#IXGBE_PCI_LINK_STATUS
 0xB2

	)

1604 
	#IXGBE_PCI_DEVICE_CONTROL2
 0xC8

	)

1605 
	#IXGBE_PCI_LINK_WIDTH
 0x3F0

	)

1606 
	#IXGBE_PCI_LINK_WIDTH_1
 0x10

	)

1607 
	#IXGBE_PCI_LINK_WIDTH_2
 0x20

	)

1608 
	#IXGBE_PCI_LINK_WIDTH_4
 0x40

	)

1609 
	#IXGBE_PCI_LINK_WIDTH_8
 0x80

	)

1610 
	#IXGBE_PCI_LINK_SPEED
 0xF

	)

1611 
	#IXGBE_PCI_LINK_SPEED_2500
 0x1

	)

1612 
	#IXGBE_PCI_LINK_SPEED_5000
 0x2

	)

1613 
	#IXGBE_PCI_HEADER_TYPE_REGISTER
 0x0E

	)

1614 
	#IXGBE_PCI_HEADER_TYPE_MULTIFUNC
 0x80

	)

1615 
	#IXGBE_PCI_DEVICE_CONTROL2_16ms
 0x0005

	)

1618 
	#IXGBE_PCI_MASTER_DISABLE_TIMEOUT
 800

	)

1621 
	#IXGBE_IS_MULTICAST
(
Addªss
) \

1622 (
boﬁ
)(((
u8
 *)(
Addªss
))[0] & ((u8)0x01))

	)

1625 
	#IXGBE_IS_BROADCAST
(
Addªss
) \

1626 ((((
u8
 *)(
Addªss
))[0] == ((u8)0xff)) && \

1627 (((
u8
 *)(
Addªss
))[1] =((u8)0xff)))

	)

1630 
	#IXGBE_RAH_VIND_MASK
 0x003C0000

	)

1631 
	#IXGBE_RAH_VIND_SHIFT
 18

	)

1632 
	#IXGBE_RAH_AV
 0x80000000

	)

1633 
	#IXGBE_CLEAR_VMDQ_ALL
 0xFFFFFFFF

	)

1636 
	#IXGBE_RFCTL_ISCSI_DIS
 0x00000001

	)

1637 
	#IXGBE_RFCTL_ISCSI_DWC_MASK
 0x0000003E

	)

1638 
	#IXGBE_RFCTL_ISCSI_DWC_SHIFT
 1

	)

1639 
	#IXGBE_RFCTL_NFSW_DIS
 0x00000040

	)

1640 
	#IXGBE_RFCTL_NFSR_DIS
 0x00000080

	)

1641 
	#IXGBE_RFCTL_NFS_VER_MASK
 0x00000300

	)

1642 
	#IXGBE_RFCTL_NFS_VER_SHIFT
 8

	)

1643 
	#IXGBE_RFCTL_NFS_VER_2
 0

	)

1644 
	#IXGBE_RFCTL_NFS_VER_3
 1

	)

1645 
	#IXGBE_RFCTL_NFS_VER_4
 2

	)

1646 
	#IXGBE_RFCTL_IPV6_DIS
 0x00000400

	)

1647 
	#IXGBE_RFCTL_IPV6_XSUM_DIS
 0x00000800

	)

1648 
	#IXGBE_RFCTL_IPFRSP_DIS
 0x00004000

	)

1649 
	#IXGBE_RFCTL_IPV6_EX_DIS
 0x00010000

	)

1650 
	#IXGBE_RFCTL_NEW_IPV6_EXT_DIS
 0x00020000

	)

1653 
	#IXGBE_TXDCTL_ENABLE
 0x02000000

	)

1654 
	#IXGBE_TXDCTL_SWFLSH
 0x04000000

	)

1655 
	#IXGBE_TXDCTL_WTHRESH_SHIFT
 16

	)

1657 
	#IXGBE_TX_PAD_ENABLE
 0x00000400

	)

1658 
	#IXGBE_JUMBO_FRAME_ENABLE
 0x00000004

	)

1660 
	#IXGBE_MAX_FRAME_SZ
 0x40040000

	)

1662 
	#IXGBE_TDWBAL_HEAD_WB_ENABLE
 0x1

	)

1663 
	#IXGBE_TDWBAL_SEQNUM_WB_ENABLE
 0x2

	)

1666 
	#IXGBE_RXCTRL_RXEN
 0x00000001

	)

1667 
	#IXGBE_RXCTRL_DMBYPS
 0x00000002

	)

1668 
	#IXGBE_RXDCTL_ENABLE
 0x02000000

	)

1669 
	#IXGBE_RXDCTL_VME
 0x40000000

	)

1671 
	#IXGBE_FCTRL_SBP
 0x00000002

	)

1672 
	#IXGBE_FCTRL_MPE
 0x00000100

	)

1673 
	#IXGBE_FCTRL_UPE
 0x00000200

	)

1674 
	#IXGBE_FCTRL_BAM
 0x00000400

	)

1675 
	#IXGBE_FCTRL_PMCF
 0x00001000

	)

1676 
	#IXGBE_FCTRL_DPF
 0x00002000

	)

1678 
	#IXGBE_FCTRL_RPFCE
 0x00004000

	)

1679 
	#IXGBE_FCTRL_RFCE
 0x00008000

	)

1680 
	#IXGBE_MFLCN_PMCF
 0x00000001

	)

1681 
	#IXGBE_MFLCN_DPF
 0x00000002

	)

1682 
	#IXGBE_MFLCN_RPFCE
 0x00000004

	)

1683 
	#IXGBE_MFLCN_RFCE
 0x00000008

	)

1686 
	#IXGBE_MRQC_RSSEN
 0x00000001

	)

1687 
	#IXGBE_MRQC_MRQE_MASK
 0xF

	)

1688 
	#IXGBE_MRQC_RT8TCEN
 0x00000002

	)

1689 
	#IXGBE_MRQC_RT4TCEN
 0x00000003

	)

1690 
	#IXGBE_MRQC_RTRSS8TCEN
 0x00000004

	)

1691 
	#IXGBE_MRQC_RTRSS4TCEN
 0x00000005

	)

1692 
	#IXGBE_MRQC_VMDQEN
 0x00000008

	)

1693 
	#IXGBE_MRQC_VMDQRSS32EN
 0x0000000A

	)

1694 
	#IXGBE_MRQC_VMDQRSS64EN
 0x0000000B

	)

1695 
	#IXGBE_MRQC_VMDQRT8TCEN
 0x0000000C

	)

1696 
	#IXGBE_MRQC_VMDQRT4TCEN
 0x0000000D

	)

1697 
	#IXGBE_MRQC_RSS_FIELD_MASK
 0xFFFF0000

	)

1698 
	#IXGBE_MRQC_RSS_FIELD_IPV4_TCP
 0x00010000

	)

1699 
	#IXGBE_MRQC_RSS_FIELD_IPV4
 0x00020000

	)

1700 
	#IXGBE_MRQC_RSS_FIELD_IPV6_EX_TCP
 0x00040000

	)

1701 
	#IXGBE_MRQC_RSS_FIELD_IPV6_EX
 0x00080000

	)

1702 
	#IXGBE_MRQC_RSS_FIELD_IPV6
 0x00100000

	)

1703 
	#IXGBE_MRQC_RSS_FIELD_IPV6_TCP
 0x00200000

	)

1704 
	#IXGBE_MRQC_RSS_FIELD_IPV4_UDP
 0x00400000

	)

1705 
	#IXGBE_MRQC_RSS_FIELD_IPV6_UDP
 0x00800000

	)

1706 
	#IXGBE_MRQC_RSS_FIELD_IPV6_EX_UDP
 0x01000000

	)

1707 
	#IXGBE_MRQC_L3L4TXSWEN
 0x00008000

	)

1710 
	#IXGBE_QDE_ENABLE
 0x00000001

	)

1711 
	#IXGBE_QDE_IDX_MASK
 0x00007F00

	)

1712 
	#IXGBE_QDE_IDX_SHIFT
 8

	)

1714 
	#IXGBE_TXD_POPTS_IXSM
 0x01

	)

1715 
	#IXGBE_TXD_POPTS_TXSM
 0x02

	)

1716 
	#IXGBE_TXD_CMD_EOP
 0x01000000

	)

1717 
	#IXGBE_TXD_CMD_IFCS
 0x02000000

	)

1718 
	#IXGBE_TXD_CMD_IC
 0x04000000

	)

1719 
	#IXGBE_TXD_CMD_RS
 0x08000000

	)

1720 
	#IXGBE_TXD_CMD_DEXT
 0x20000000

	)

1721 
	#IXGBE_TXD_CMD_VLE
 0x40000000

	)

1722 
	#IXGBE_TXD_STAT_DD
 0x00000001

	)

1724 
	#IXGBE_RXDADV_IPSEC_STATUS_SECP
 0x00020000

	)

1725 
	#IXGBE_RXDADV_IPSEC_ERROR_INVALID_PROTOCOL
 0x08000000

	)

1726 
	#IXGBE_RXDADV_IPSEC_ERROR_INVALID_LENGTH
 0x10000000

	)

1727 
	#IXGBE_RXDADV_IPSEC_ERROR_AUTH_FAILED
 0x18000000

	)

1728 
	#IXGBE_RXDADV_IPSEC_ERROR_BIT_MASK
 0x18000000

	)

1730 
	#IXGBE_MTQC_RT_ENA
 0x1

	)

1731 
	#IXGBE_MTQC_VT_ENA
 0x2

	)

1732 
	#IXGBE_MTQC_64Q_1PB
 0x0

	)

1733 
	#IXGBE_MTQC_32VF
 0x8

	)

1734 
	#IXGBE_MTQC_64VF
 0x4

	)

1735 
	#IXGBE_MTQC_8TC_8TQ
 0xC

	)

1738 
	#IXGBE_RXD_STAT_DD
 0x01

	)

1739 
	#IXGBE_RXD_STAT_EOP
 0x02

	)

1740 
	#IXGBE_RXD_STAT_FLM
 0x04

	)

1741 
	#IXGBE_RXD_STAT_VP
 0x08

	)

1742 
	#IXGBE_RXDADV_NEXTP_MASK
 0x000FFFF0

	)

1743 
	#IXGBE_RXDADV_NEXTP_SHIFT
 0x00000004

	)

1744 
	#IXGBE_RXD_STAT_UDPCS
 0x10

	)

1745 
	#IXGBE_RXD_STAT_L4CS
 0x20

	)

1746 
	#IXGBE_RXD_STAT_IPCS
 0x40

	)

1747 
	#IXGBE_RXD_STAT_PIF
 0x80

	)

1748 
	#IXGBE_RXD_STAT_CRCV
 0x100

	)

1749 
	#IXGBE_RXD_STAT_VEXT
 0x200

	)

1750 
	#IXGBE_RXD_STAT_UDPV
 0x400

	)

1751 
	#IXGBE_RXD_STAT_DYNINT
 0x800

	)

1752 
	#IXGBE_RXD_STAT_LLINT
 0x800

	)

1753 
	#IXGBE_RXD_STAT_TS
 0x10000

	)

1754 
	#IXGBE_RXD_STAT_SECP
 0x20000

	)

1755 
	#IXGBE_RXD_STAT_LB
 0x40000

	)

1756 
	#IXGBE_RXD_STAT_ACK
 0x8000

	)

1757 
	#IXGBE_RXD_ERR_CE
 0x01

	)

1758 
	#IXGBE_RXD_ERR_LE
 0x02

	)

1759 
	#IXGBE_RXD_ERR_PE
 0x08

	)

1760 
	#IXGBE_RXD_ERR_OSE
 0x10

	)

1761 
	#IXGBE_RXD_ERR_USE
 0x20

	)

1762 
	#IXGBE_RXD_ERR_TCPE
 0x40

	)

1763 
	#IXGBE_RXD_ERR_IPE
 0x80

	)

1764 
	#IXGBE_RXDADV_ERR_MASK
 0xfff00000

	)

1765 
	#IXGBE_RXDADV_ERR_SHIFT
 20

	)

1766 
	#IXGBE_RXDADV_ERR_FCEOFE
 0x80000000

	)

1767 
	#IXGBE_RXDADV_ERR_FCERR
 0x00700000

	)

1768 
	#IXGBE_RXDADV_ERR_FDIR_LEN
 0x00100000

	)

1769 
	#IXGBE_RXDADV_ERR_FDIR_DROP
 0x00200000

	)

1770 
	#IXGBE_RXDADV_ERR_FDIR_COLL
 0x00400000

	)

1771 
	#IXGBE_RXDADV_ERR_HBO
 0x00800000

	)

1772 
	#IXGBE_RXDADV_ERR_CE
 0x01000000

	)

1773 
	#IXGBE_RXDADV_ERR_LE
 0x02000000

	)

1774 
	#IXGBE_RXDADV_ERR_PE
 0x08000000

	)

1775 
	#IXGBE_RXDADV_ERR_OSE
 0x10000000

	)

1776 
	#IXGBE_RXDADV_ERR_USE
 0x20000000

	)

1777 
	#IXGBE_RXDADV_ERR_TCPE
 0x40000000

	)

1778 
	#IXGBE_RXDADV_ERR_IPE
 0x80000000

	)

1779 
	#IXGBE_RXD_VLAN_ID_MASK
 0x0FFF

	)

1780 
	#IXGBE_RXD_PRI_MASK
 0xE000

	)

1781 
	#IXGBE_RXD_PRI_SHIFT
 13

	)

1782 
	#IXGBE_RXD_CFI_MASK
 0x1000

	)

1783 
	#IXGBE_RXD_CFI_SHIFT
 12

	)

1785 
	#IXGBE_RXDADV_STAT_DD
 
IXGBE_RXD_STAT_DD


	)

1786 
	#IXGBE_RXDADV_STAT_EOP
 
IXGBE_RXD_STAT_EOP


	)

1787 
	#IXGBE_RXDADV_STAT_FLM
 
IXGBE_RXD_STAT_FLM


	)

1788 
	#IXGBE_RXDADV_STAT_VP
 
IXGBE_RXD_STAT_VP


	)

1789 
	#IXGBE_RXDADV_STAT_MASK
 0x000ffff‡

	)

1790 
	#IXGBE_RXDADV_STAT_FCEOFS
 0x00000040

	)

1791 
	#IXGBE_RXDADV_STAT_FCSTAT
 0x00000030

	)

1792 
	#IXGBE_RXDADV_STAT_FCSTAT_NOMTCH
 0x00000000

	)

1793 
	#IXGBE_RXDADV_STAT_FCSTAT_NODDP
 0x00000010

	)

1794 
	#IXGBE_RXDADV_STAT_FCSTAT_FCPRSP
 0x00000020

	)

1795 
	#IXGBE_RXDADV_STAT_FCSTAT_DDP
 0x00000030

	)

1798 
	#IXGBE_PSRTYPE_TCPHDR
 0x00000010

	)

1799 
	#IXGBE_PSRTYPE_UDPHDR
 0x00000020

	)

1800 
	#IXGBE_PSRTYPE_IPV4HDR
 0x00000100

	)

1801 
	#IXGBE_PSRTYPE_IPV6HDR
 0x00000200

	)

1802 
	#IXGBE_PSRTYPE_L2HDR
 0x00001000

	)

1805 
	#IXGBE_SRRCTL_BSIZEPKT_SHIFT
 10

	)

1806 
	#IXGBE_SRRCTL_RDMTS_SHIFT
 22

	)

1807 
	#IXGBE_SRRCTL_RDMTS_MASK
 0x01C00000

	)

1808 
	#IXGBE_SRRCTL_DROP_EN
 0x10000000

	)

1809 
	#IXGBE_SRRCTL_BSIZEPKT_MASK
 0x0000007F

	)

1810 
	#IXGBE_SRRCTL_BSIZEHDR_MASK
 0x00003F00

	)

1811 
	#IXGBE_SRRCTL_DESCTYPE_LEGACY
 0x00000000

	)

1812 
	#IXGBE_SRRCTL_DESCTYPE_ADV_ONEBUF
 0x02000000

	)

1813 
	#IXGBE_SRRCTL_DESCTYPE_HDR_SPLIT
 0x04000000

	)

1814 
	#IXGBE_SRRCTL_DESCTYPE_HDR_REPLICATION_LARGE_PKT
 0x08000000

	)

1815 
	#IXGBE_SRRCTL_DESCTYPE_HDR_SPLIT_ALWAYS
 0x0A000000

	)

1816 
	#IXGBE_SRRCTL_DESCTYPE_MASK
 0x0E000000

	)

1818 
	#IXGBE_RXDPS_HDRSTAT_HDRSP
 0x00008000

	)

1819 
	#IXGBE_RXDPS_HDRSTAT_HDRLEN_MASK
 0x000003FF

	)

1821 
	#IXGBE_RXDADV_RSSTYPE_MASK
 0x0000000F

	)

1822 
	#IXGBE_RXDADV_PKTTYPE_MASK
 0x0000FFF0

	)

1823 
	#IXGBE_RXDADV_PKTTYPE_MASK_EX
 0x0001FFF0

	)

1824 
	#IXGBE_RXDADV_HDRBUFLEN_MASK
 0x00007FE0

	)

1825 
	#IXGBE_RXDADV_RSCCNT_MASK
 0x001E0000

	)

1826 
	#IXGBE_RXDADV_RSCCNT_SHIFT
 17

	)

1827 
	#IXGBE_RXDADV_HDRBUFLEN_SHIFT
 5

	)

1828 
	#IXGBE_RXDADV_SPLITHEADER_EN
 0x00001000

	)

1829 
	#IXGBE_RXDADV_SPH
 0x8000

	)

1832 
	#IXGBE_RXDADV_RSSTYPE_NONE
 0x00000000

	)

1833 
	#IXGBE_RXDADV_RSSTYPE_IPV4_TCP
 0x00000001

	)

1834 
	#IXGBE_RXDADV_RSSTYPE_IPV4
 0x00000002

	)

1835 
	#IXGBE_RXDADV_RSSTYPE_IPV6_TCP
 0x00000003

	)

1836 
	#IXGBE_RXDADV_RSSTYPE_IPV6_EX
 0x00000004

	)

1837 
	#IXGBE_RXDADV_RSSTYPE_IPV6
 0x00000005

	)

1838 
	#IXGBE_RXDADV_RSSTYPE_IPV6_TCP_EX
 0x00000006

	)

1839 
	#IXGBE_RXDADV_RSSTYPE_IPV4_UDP
 0x00000007

	)

1840 
	#IXGBE_RXDADV_RSSTYPE_IPV6_UDP
 0x00000008

	)

1841 
	#IXGBE_RXDADV_RSSTYPE_IPV6_UDP_EX
 0x00000009

	)

1844 
	#IXGBE_RXDADV_PKTTYPE_NONE
 0x00000000

	)

1845 
	#IXGBE_RXDADV_PKTTYPE_IPV4
 0x00000010

	)

1846 
	#IXGBE_RXDADV_PKTTYPE_IPV4_EX
 0x00000020

	)

1847 
	#IXGBE_RXDADV_PKTTYPE_IPV6
 0x00000040

	)

1848 
	#IXGBE_RXDADV_PKTTYPE_IPV6_EX
 0x00000080

	)

1849 
	#IXGBE_RXDADV_PKTTYPE_TCP
 0x00000100

	)

1850 
	#IXGBE_RXDADV_PKTTYPE_UDP
 0x00000200

	)

1851 
	#IXGBE_RXDADV_PKTTYPE_SCTP
 0x00000400

	)

1852 
	#IXGBE_RXDADV_PKTTYPE_NFS
 0x00000800

	)

1853 
	#IXGBE_RXDADV_PKTTYPE_IPSEC_ESP
 0x00001000

	)

1854 
	#IXGBE_RXDADV_PKTTYPE_IPSEC_AH
 0x00002000

	)

1855 
	#IXGBE_RXDADV_PKTTYPE_LINKSEC
 0x00004000

	)

1856 
	#IXGBE_RXDADV_PKTTYPE_ETQF
 0x00008000

	)

1857 
	#IXGBE_RXDADV_PKTTYPE_ETQF_MASK
 0x00000070

	)

1858 
	#IXGBE_RXDADV_PKTTYPE_ETQF_SHIFT
 4

	)

1861 
	#IXGBE_RXDADV_LNKSEC_STATUS_SECP
 0x00020000

	)

1862 
	#IXGBE_RXDADV_LNKSEC_ERROR_NO_SA_MATCH
 0x08000000

	)

1863 
	#IXGBE_RXDADV_LNKSEC_ERROR_REPLAY_ERROR
 0x10000000

	)

1864 
	#IXGBE_RXDADV_LNKSEC_ERROR_BIT_MASK
 0x18000000

	)

1865 
	#IXGBE_RXDADV_LNKSEC_ERROR_BAD_SIG
 0x18000000

	)

1868 
	#IXGBE_RXD_ERR_FRAME_ERR_MASK
 ( \

1869 
IXGBE_RXD_ERR_CE
 | \

1870 
IXGBE_RXD_ERR_LE
 | \

1871 
IXGBE_RXD_ERR_PE
 | \

1872 
IXGBE_RXD_ERR_OSE
 | \

1873 
IXGBE_RXD_ERR_USE
)

	)

1875 
	#IXGBE_RXDADV_ERR_FRAME_ERR_MASK
 ( \

1876 
IXGBE_RXDADV_ERR_CE
 | \

1877 
IXGBE_RXDADV_ERR_LE
 | \

1878 
IXGBE_RXDADV_ERR_PE
 | \

1879 
IXGBE_RXDADV_ERR_OSE
 | \

1880 
IXGBE_RXDADV_ERR_USE
)

	)

1883 
	#IXGBE_MCSTCTRL_MFE
 0x4

	)

1886 
	#IXGBE_REQ_TX_DESCRIPTOR_MULTIPLE
 8

	)

1887 
	#IXGBE_REQ_RX_DESCRIPTOR_MULTIPLE
 8

	)

1888 
	#IXGBE_REQ_TX_BUFFER_GRANULARITY
 1024

	)

1891 
	#IXGBE_RX_DESC_SPECIAL_VLAN_MASK
 0x0FFF

	)

1892 
	#IXGBE_RX_DESC_SPECIAL_PRI_MASK
 0xE000

	)

1893 
	#IXGBE_RX_DESC_SPECIAL_PRI_SHIFT
 0x000D

	)

1894 
	#IXGBE_TX_DESC_SPECIAL_PRI_SHIFT
 
IXGBE_RX_DESC_SPECIAL_PRI_SHIFT


	)

1897 
	#IXGBE_MBVFICR_INDEX
(
vf_numbî
Ë(vf_numbî >> 4)

	)

1898 
	#IXGBE_MBVFICR
(
_i
Ë(0x00710 + (_ò* 4))

	)

1899 
	#IXGBE_VFLRE
(
_i
Ë(((_ò& 1Ë? 0x001C0 : 0x00600))

	)

1900 
	#IXGBE_VFLREC
(
_i
Ë(0x00700 + (_ò* 4))

	)

1903 #i‚de‡
__À16


1904 
	#__À16
 
u16


	)

1906 #i‚de‡
__À32


1907 
	#__À32
 
u32


	)

1909 #i‚de‡
__À64


1910 
	#__À64
 
u64


	)

1913 #i‚de‡
__be16


1915 
	#__be16
 
u16


	)

1916 
	#__be32
 
u32


	)

1917 
	#__be64
 
u64


	)

1920 
	eixgbe_fdú_pbÆloc_ty≥
 {

1921 
	mIXGBE_FDIR_PBALLOC_64K
 = 0,

1922 
	mIXGBE_FDIR_PBALLOC_128K
,

1923 
	mIXGBE_FDIR_PBALLOC_256K
,

1925 
	#IXGBE_FDIR_PBALLOC_SIZE_SHIFT
 16

	)

1928 
	#IXGBE_FDIRCTRL_PBALLOC_64K
 0x00000001

	)

1929 
	#IXGBE_FDIRCTRL_PBALLOC_128K
 0x00000002

	)

1930 
	#IXGBE_FDIRCTRL_PBALLOC_256K
 0x00000003

	)

1931 
	#IXGBE_FDIRCTRL_INIT_DONE
 0x00000008

	)

1932 
	#IXGBE_FDIRCTRL_PERFECT_MATCH
 0x00000010

	)

1933 
	#IXGBE_FDIRCTRL_REPORT_STATUS
 0x00000020

	)

1934 
	#IXGBE_FDIRCTRL_REPORT_STATUS_ALWAYS
 0x00000080

	)

1935 
	#IXGBE_FDIRCTRL_DROP_Q_SHIFT
 8

	)

1936 
	#IXGBE_FDIRCTRL_FLEX_SHIFT
 16

	)

1937 
	#IXGBE_FDIRCTRL_SEARCHLIM
 0x00800000

	)

1938 
	#IXGBE_FDIRCTRL_MAX_LENGTH_SHIFT
 24

	)

1939 
	#IXGBE_FDIRCTRL_FULL_THRESH_MASK
 0xF0000000

	)

1940 
	#IXGBE_FDIRCTRL_FULL_THRESH_SHIFT
 28

	)

1942 
	#IXGBE_FDIRTCPM_DPORTM_SHIFT
 16

	)

1943 
	#IXGBE_FDIRUDPM_DPORTM_SHIFT
 16

	)

1944 
	#IXGBE_FDIRIP6M_DIPM_SHIFT
 16

	)

1945 
	#IXGBE_FDIRM_VLANID
 0x00000001

	)

1946 
	#IXGBE_FDIRM_VLANP
 0x00000002

	)

1947 
	#IXGBE_FDIRM_POOL
 0x00000004

	)

1948 
	#IXGBE_FDIRM_L3P
 0x00000008

	)

1949 
	#IXGBE_FDIRM_L4P
 0x00000010

	)

1950 
	#IXGBE_FDIRM_FLEX
 0x00000020

	)

1951 
	#IXGBE_FDIRM_DIPv6
 0x00000040

	)

1953 
	#IXGBE_FDIRFREE_FREE_MASK
 0xFFFF

	)

1954 
	#IXGBE_FDIRFREE_FREE_SHIFT
 0

	)

1955 
	#IXGBE_FDIRFREE_COLL_MASK
 0x7FFF0000

	)

1956 
	#IXGBE_FDIRFREE_COLL_SHIFT
 16

	)

1957 
	#IXGBE_FDIRLEN_MAXLEN_MASK
 0x3F

	)

1958 
	#IXGBE_FDIRLEN_MAXLEN_SHIFT
 0

	)

1959 
	#IXGBE_FDIRLEN_MAXHASH_MASK
 0x7FFF0000

	)

1960 
	#IXGBE_FDIRLEN_MAXHASH_SHIFT
 16

	)

1961 
	#IXGBE_FDIRUSTAT_ADD_MASK
 0xFFFF

	)

1962 
	#IXGBE_FDIRUSTAT_ADD_SHIFT
 0

	)

1963 
	#IXGBE_FDIRUSTAT_REMOVE_MASK
 0xFFFF0000

	)

1964 
	#IXGBE_FDIRUSTAT_REMOVE_SHIFT
 16

	)

1965 
	#IXGBE_FDIRFSTAT_FADD_MASK
 0x00FF

	)

1966 
	#IXGBE_FDIRFSTAT_FADD_SHIFT
 0

	)

1967 
	#IXGBE_FDIRFSTAT_FREMOVE_MASK
 0xFF00

	)

1968 
	#IXGBE_FDIRFSTAT_FREMOVE_SHIFT
 8

	)

1969 
	#IXGBE_FDIRPORT_DESTINATION_SHIFT
 16

	)

1970 
	#IXGBE_FDIRVLAN_FLEX_SHIFT
 16

	)

1971 
	#IXGBE_FDIRHASH_BUCKET_VALID_SHIFT
 15

	)

1972 
	#IXGBE_FDIRHASH_SIG_SW_INDEX_SHIFT
 16

	)

1974 
	#IXGBE_FDIRCMD_CMD_MASK
 0x00000003

	)

1975 
	#IXGBE_FDIRCMD_CMD_ADD_FLOW
 0x00000001

	)

1976 
	#IXGBE_FDIRCMD_CMD_REMOVE_FLOW
 0x00000002

	)

1977 
	#IXGBE_FDIRCMD_CMD_QUERY_REM_FILT
 0x00000003

	)

1978 
	#IXGBE_FDIRCMD_CMD_QUERY_REM_HASH
 0x00000007

	)

1979 
	#IXGBE_FDIRCMD_FILTER_UPDATE
 0x00000008

	)

1980 
	#IXGBE_FDIRCMD_IPv6DMATCH
 0x00000010

	)

1981 
	#IXGBE_FDIRCMD_L4TYPE_UDP
 0x00000020

	)

1982 
	#IXGBE_FDIRCMD_L4TYPE_TCP
 0x00000040

	)

1983 
	#IXGBE_FDIRCMD_L4TYPE_SCTP
 0x00000060

	)

1984 
	#IXGBE_FDIRCMD_IPV6
 0x00000080

	)

1985 
	#IXGBE_FDIRCMD_CLEARHT
 0x00000100

	)

1986 
	#IXGBE_FDIRCMD_DROP
 0x00000200

	)

1987 
	#IXGBE_FDIRCMD_INT
 0x00000400

	)

1988 
	#IXGBE_FDIRCMD_LAST
 0x00000800

	)

1989 
	#IXGBE_FDIRCMD_COLLISION
 0x00001000

	)

1990 
	#IXGBE_FDIRCMD_QUEUE_EN
 0x00008000

	)

1991 
	#IXGBE_FDIRCMD_RX_QUEUE_SHIFT
 16

	)

1992 
	#IXGBE_FDIRCMD_VT_POOL_SHIFT
 24

	)

1993 
	#IXGBE_FDIR_INIT_DONE_POLL
 10

	)

1994 
	#IXGBE_FDIRCMD_CMD_POLL
 10

	)

1997 
	sixgbe_Àgacy_tx_desc
 {

1998 
u64
 
	mbuf„r_addr
;

2000 
__À32
 
	md©a
;

2002 
__À16
 
	mÀngth
;

2003 
u8
 
	mcso
;

2004 
u8
 
	mcmd
;

2005 } 
	mÊags
;

2006 } 
	mlowî
;

2008 
__À32
 
	md©a
;

2010 
u8
 
	m°©us
;

2011 
u8
 
	mcss
;

2012 
__À16
 
	mvœn
;

2013 } 
	mfõlds
;

2014 } 
	muµî
;

2018 
	uixgbe_adv_tx_desc
 {

2020 
__À64
 
	mbuf„r_addr
;

2021 
__À32
 
	mcmd_ty≥_Àn
;

2022 
__À32
 
	mﬁöfo_°©us
;

2023 } 
	mªad
;

2025 
__À64
 
	mrsvd
;

2026 
__À32
 
	mnxt£q_£ed
;

2027 
__À32
 
	m°©us
;

2028 } 
	mwb
;

2032 
	sixgbe_Àgacy_rx_desc
 {

2033 
__À64
 
	mbuf„r_addr
;

2034 
__À16
 
	mÀngth
;

2035 
__À16
 
	mcsum
;

2036 
u8
 
	m°©us
;

2037 
u8
 
	mîr‹s
;

2038 
__À16
 
	mvœn
;

2042 
	uixgbe_adv_rx_desc
 {

2044 
__À64
 
	mpkt_addr
;

2045 
__À64
 
	mhdr_addr
;

2046 } 
	mªad
;

2050 
__À32
 
	md©a
;

2052 
__À16
 
	mpkt_öfo
;

2053 
__À16
 
	mhdr_öfo
;

2054 } 
	mhs_rss
;

2055 } 
	mlo_dw‹d
;

2057 
__À32
 
	mrss
;

2059 
__À16
 
	mù_id
;

2060 
__À16
 
	mcsum
;

2061 } 
	mcsum_ù
;

2062 } 
	mhi_dw‹d
;

2063 } 
	mlowî
;

2065 
__À32
 
	m°©us_îr‹
;

2066 
__À16
 
	mÀngth
;

2067 
__À16
 
	mvœn
;

2068 } 
	muµî
;

2069 } 
	mwb
;

2073 
	sixgbe_adv_tx_c⁄ãxt_desc
 {

2074 
__À32
 
	mvœn_macù_Àns
;

2075 
__À32
 
	m£qnum_£ed
;

2076 
__À32
 
	mty≥_tucmd_mlhl
;

2077 
__À32
 
	mmss_l4Àn_idx
;

2081 
	#IXGBE_ADVTXD_DTALEN_MASK
 0x0000FFFF

	)

2082 
	#IXGBE_ADVTXD_MAC_LINKSEC
 0x00040000

	)

2083 
	#IXGBE_ADVTXD_IPSEC_SA_INDEX_MASK
 0x000003FF

	)

2084 
	#IXGBE_ADVTXD_IPSEC_ESP_LEN_MASK
 0x000001FF

	)

2085 
	#IXGBE_ADVTXD_DTYP_MASK
 0x00F00000

	)

2086 
	#IXGBE_ADVTXD_DTYP_CTXT
 0x00200000

	)

2087 
	#IXGBE_ADVTXD_DTYP_DATA
 0x00300000

	)

2088 
	#IXGBE_ADVTXD_DCMD_EOP
 
IXGBE_TXD_CMD_EOP


	)

2089 
	#IXGBE_ADVTXD_DCMD_IFCS
 
IXGBE_TXD_CMD_IFCS


	)

2090 
	#IXGBE_ADVTXD_DCMD_RS
 
IXGBE_TXD_CMD_RS


	)

2091 
	#IXGBE_ADVTXD_DCMD_DDTYP_ISCSI
 0x10000000

	)

2092 
	#IXGBE_ADVTXD_DCMD_DEXT
 
IXGBE_TXD_CMD_DEXT


	)

2093 
	#IXGBE_ADVTXD_DCMD_VLE
 
IXGBE_TXD_CMD_VLE


	)

2094 
	#IXGBE_ADVTXD_DCMD_TSE
 0x80000000

	)

2095 
	#IXGBE_ADVTXD_STAT_DD
 
IXGBE_TXD_STAT_DD


	)

2096 
	#IXGBE_ADVTXD_STAT_SN_CRC
 0x00000002

	)

2097 
	#IXGBE_ADVTXD_STAT_RSV
 0x0000000C

	)

2098 
	#IXGBE_ADVTXD_IDX_SHIFT
 4

	)

2099 
	#IXGBE_ADVTXD_CC
 0x00000080

	)

2100 
	#IXGBE_ADVTXD_POPTS_SHIFT
 8

	)

2101 
	#IXGBE_ADVTXD_POPTS_IXSM
 (
IXGBE_TXD_POPTS_IXSM
 << \

2102 
IXGBE_ADVTXD_POPTS_SHIFT
)

	)

2103 
	#IXGBE_ADVTXD_POPTS_TXSM
 (
IXGBE_TXD_POPTS_TXSM
 << \

2104 
IXGBE_ADVTXD_POPTS_SHIFT
)

	)

2105 
	#IXGBE_ADVTXD_POPTS_ISCO_1ST
 0x00000000

	)

2106 
	#IXGBE_ADVTXD_POPTS_ISCO_MDL
 0x00000800

	)

2107 
	#IXGBE_ADVTXD_POPTS_ISCO_LAST
 0x00001000

	)

2108 
	#IXGBE_ADVTXD_POPTS_ISCO_FULL
 0x00001800

	)

2109 
	#IXGBE_ADVTXD_POPTS_RSV
 0x00002000

	)

2110 
	#IXGBE_ADVTXD_PAYLEN_SHIFT
 14

	)

2111 
	#IXGBE_ADVTXD_MACLEN_SHIFT
 9

	)

2112 
	#IXGBE_ADVTXD_VLAN_SHIFT
 16

	)

2113 
	#IXGBE_ADVTXD_TUCMD_IPV4
 0x00000400

	)

2114 
	#IXGBE_ADVTXD_TUCMD_IPV6
 0x00000000

	)

2115 
	#IXGBE_ADVTXD_TUCMD_L4T_UDP
 0x00000000

	)

2116 
	#IXGBE_ADVTXD_TUCMD_L4T_TCP
 0x00000800

	)

2117 
	#IXGBE_ADVTXD_TUCMD_L4T_SCTP
 0x00001000

	)

2118 
	#IXGBE_ADVTXD_TUCMD_MKRREQ
 0x00002000

	)

2119 
	#IXGBE_ADVTXD_POPTS_IPSEC
 0x00000400

	)

2120 
	#IXGBE_ADVTXD_TUCMD_IPSEC_TYPE_ESP
 0x00002000

	)

2121 
	#IXGBE_ADVTXD_TUCMD_IPSEC_ENCRYPT_EN
 0x00004000

	)

2122 
	#IXGBE_ADVTXT_TUCMD_FCOE
 0x00008000

	)

2123 
	#IXGBE_ADVTXD_FCOEF_EOF_MASK
 (0x3 << 10Ë

	)

2124 
	#IXGBE_ADVTXD_FCOEF_SOF
 ((1 << 2Ë<< 10Ë

	)

2125 
	#IXGBE_ADVTXD_FCOEF_PARINC
 ((1 << 3Ë<< 10Ë

	)

2126 
	#IXGBE_ADVTXD_FCOEF_ORIE
 ((1 << 4Ë<< 10Ë

	)

2127 
	#IXGBE_ADVTXD_FCOEF_ORIS
 ((1 << 5Ë<< 10Ë

	)

2128 
	#IXGBE_ADVTXD_FCOEF_EOF_N
 (0x0 << 10Ë

	)

2129 
	#IXGBE_ADVTXD_FCOEF_EOF_T
 (0x1 << 10Ë

	)

2130 
	#IXGBE_ADVTXD_FCOEF_EOF_NI
 (0x2 << 10Ë

	)

2131 
	#IXGBE_ADVTXD_FCOEF_EOF_A
 (0x3 << 10Ë

	)

2132 
	#IXGBE_ADVTXD_L4LEN_SHIFT
 8

	)

2133 
	#IXGBE_ADVTXD_MSS_SHIFT
 16

	)

2136 
u32
 
	tixgbe_aut⁄eg_advîti£d
;

2138 
u32
 
	tixgbe_lök_•ìd
;

2139 
	#IXGBE_LINK_SPEED_UNKNOWN
 0

	)

2140 
	#IXGBE_LINK_SPEED_100_FULL
 0x0008

	)

2141 
	#IXGBE_LINK_SPEED_1GB_FULL
 0x0020

	)

2142 
	#IXGBE_LINK_SPEED_10GB_FULL
 0x0080

	)

2143 
	#IXGBE_LINK_SPEED_82598_AUTONEG
 (
IXGBE_LINK_SPEED_1GB_FULL
 | \

2144 
IXGBE_LINK_SPEED_10GB_FULL
)

	)

2145 
	#IXGBE_LINK_SPEED_82599_AUTONEG
 (
IXGBE_LINK_SPEED_100_FULL
 | \

2146 
IXGBE_LINK_SPEED_1GB_FULL
 | \

2147 
IXGBE_LINK_SPEED_10GB_FULL
)

	)

2151 
u32
 
	tixgbe_physiˇl_œyî
;

2152 
	#IXGBE_PHYSICAL_LAYER_UNKNOWN
 0

	)

2153 
	#IXGBE_PHYSICAL_LAYER_10GBASE_T
 0x0001

	)

2154 
	#IXGBE_PHYSICAL_LAYER_1000BASE_T
 0x0002

	)

2155 
	#IXGBE_PHYSICAL_LAYER_100BASE_TX
 0x0004

	)

2156 
	#IXGBE_PHYSICAL_LAYER_SFP_PLUS_CU
 0x0008

	)

2157 
	#IXGBE_PHYSICAL_LAYER_10GBASE_LR
 0x0010

	)

2158 
	#IXGBE_PHYSICAL_LAYER_10GBASE_LRM
 0x0020

	)

2159 
	#IXGBE_PHYSICAL_LAYER_10GBASE_SR
 0x0040

	)

2160 
	#IXGBE_PHYSICAL_LAYER_10GBASE_KX4
 0x0080

	)

2161 
	#IXGBE_PHYSICAL_LAYER_10GBASE_CX4
 0x0100

	)

2162 
	#IXGBE_PHYSICAL_LAYER_1000BASE_KX
 0x0200

	)

2163 
	#IXGBE_PHYSICAL_LAYER_1000BASE_BX
 0x0400

	)

2164 
	#IXGBE_PHYSICAL_LAYER_10GBASE_KR
 0x0800

	)

2165 
	#IXGBE_PHYSICAL_LAYER_10GBASE_XAUI
 0x1000

	)

2168 
	#IXGBE_ATR_BUCKET_HASH_KEY
 0xE214AD3D

	)

2169 
	#IXGBE_ATR_SIGNATURE_HASH_KEY
 0x14364D17

	)

2172 
	#IXGBE_ATR_VLAN_OFFSET
 0

	)

2173 
	#IXGBE_ATR_SRC_IPV6_OFFSET
 2

	)

2174 
	#IXGBE_ATR_SRC_IPV4_OFFSET
 14

	)

2175 
	#IXGBE_ATR_DST_IPV6_OFFSET
 18

	)

2176 
	#IXGBE_ATR_DST_IPV4_OFFSET
 30

	)

2177 
	#IXGBE_ATR_SRC_PORT_OFFSET
 34

	)

2178 
	#IXGBE_ATR_DST_PORT_OFFSET
 36

	)

2179 
	#IXGBE_ATR_FLEX_BYTE_OFFSET
 38

	)

2180 
	#IXGBE_ATR_VM_POOL_OFFSET
 40

	)

2181 
	#IXGBE_ATR_L4TYPE_OFFSET
 41

	)

2183 
	#IXGBE_ATR_L4TYPE_MASK
 0x3

	)

2184 
	#IXGBE_ATR_L4TYPE_IPV6_MASK
 0x4

	)

2185 
	#IXGBE_ATR_L4TYPE_UDP
 0x1

	)

2186 
	#IXGBE_ATR_L4TYPE_TCP
 0x2

	)

2187 
	#IXGBE_ATR_L4TYPE_SCTP
 0x3

	)

2188 
	#IXGBE_ATR_HASH_MASK
 0x7fff

	)

2191 
	sixgbe_©r_öput
 {

2203 
u8
 
	mbyã_°ªam
[42];

2206 
	eixgbe_ì¥om_ty≥
 {

2207 
	mixgbe_ì¥om_unöôülized
 = 0,

2208 
	mixgbe_ì¥om_•i
,

2209 
	mixgbe_ì¥om_n⁄e


2212 
	eixgbe_mac_ty≥
 {

2213 
	mixgbe_mac_unknown
 = 0,

2214 
	mixgbe_mac_82598EB
,

2215 
	mixgbe_mac_82599EB
,

2216 
	mixgbe_num_macs


2219 
	eixgbe_phy_ty≥
 {

2220 
	mixgbe_phy_unknown
 = 0,

2221 
	mixgbe_phy_n⁄e
,

2222 
	mixgbe_phy_ä
,

2223 
	mixgbe_phy_aq
,

2224 
	mixgbe_phy_cu_unknown
,

2225 
	mixgbe_phy_qt
,

2226 
	mixgbe_phy_xaui
,

2227 
	mixgbe_phy_∆
,

2228 
	mixgbe_phy_tw_tyco
,

2229 
	mixgbe_phy_tw_unknown
,

2230 
	mixgbe_phy_sÂ_avago
,

2231 
	mixgbe_phy_sÂ_·l
,

2232 
	mixgbe_phy_sÂ_unknown
,

2233 
	mixgbe_phy_sÂ_öãl
,

2234 
	mixgbe_phy_sÂ_unsuµ‹ãd
,

2235 
	mixgbe_phy_gíîic


2251 
	eixgbe_sÂ_ty≥
 {

2252 
	mixgbe_sÂ_ty≥_da_cu
 = 0,

2253 
	mixgbe_sÂ_ty≥_§
 = 1,

2254 
	mixgbe_sÂ_ty≥_Ã
 = 2,

2255 
	mixgbe_sÂ_ty≥_da_cu_c‹e0
 = 3,

2256 
	mixgbe_sÂ_ty≥_da_cu_c‹e1
 = 4,

2257 
	mixgbe_sÂ_ty≥_§Ã_c‹e0
 = 5,

2258 
	mixgbe_sÂ_ty≥_§Ã_c‹e1
 = 6,

2259 
	mixgbe_sÂ_ty≥_nŸ_¥e£¡
 = 0xFFFE,

2260 
	mixgbe_sÂ_ty≥_unknown
 = 0xFFFF

2263 
	eixgbe_medü_ty≥
 {

2264 
	mixgbe_medü_ty≥_unknown
 = 0,

2265 
	mixgbe_medü_ty≥_fibî
,

2266 
	mixgbe_medü_ty≥_c›≥r
,

2267 
	mixgbe_medü_ty≥_back∂™e
,

2268 
	mixgbe_medü_ty≥_vútuÆ


2272 
	eixgbe_fc_mode
 {

2273 
	mixgbe_fc_n⁄e
 = 0,

2274 
	mixgbe_fc_rx_∑u£
,

2275 
	mixgbe_fc_tx_∑u£
,

2276 
	mixgbe_fc_fuŒ
,

2277 #ifde‡
CONFIG_DCB


2278 
	mixgbe_fc_pfc
,

2280 
	mixgbe_fc_deÁu…


2284 
	eixgbe_bus_ty≥
 {

2285 
	mixgbe_bus_ty≥_unknown
 = 0,

2286 
	mixgbe_bus_ty≥_pci
,

2287 
	mixgbe_bus_ty≥_pcix
,

2288 
	mixgbe_bus_ty≥_pci_ex¥ess
,

2289 
	mixgbe_bus_ty≥_ª£rved


2293 
	eixgbe_bus_•ìd
 {

2294 
	mixgbe_bus_•ìd_unknown
 = 0,

2295 
	mixgbe_bus_•ìd_33
,

2296 
	mixgbe_bus_•ìd_66
,

2297 
	mixgbe_bus_•ìd_100
,

2298 
	mixgbe_bus_•ìd_120
,

2299 
	mixgbe_bus_•ìd_133
,

2300 
	mixgbe_bus_•ìd_2500
,

2301 
	mixgbe_bus_•ìd_5000
,

2302 
	mixgbe_bus_•ìd_ª£rved


2306 
	eixgbe_bus_width
 {

2307 
	mixgbe_bus_width_unknown
 = 0,

2308 
	mixgbe_bus_width_pcõ_x1
,

2309 
	mixgbe_bus_width_pcõ_x2
,

2310 
	mixgbe_bus_width_pcõ_x4
 = 4,

2311 
	mixgbe_bus_width_pcõ_x8
 = 8,

2312 
	mixgbe_bus_width_32
,

2313 
	mixgbe_bus_width_64
,

2314 
	mixgbe_bus_width_ª£rved


2317 
	sixgbe_addr_fûãr_öfo
 {

2318 
u32
 
	mnum_mc_addrs
;

2319 
u32
 
	mør_u£d_cou¡
;

2320 
u32
 
	mmè_ö_u£
;

2321 
u32
 
	movîÊow_¥omisc
;

2322 
boﬁ
 
	mu£r_£t_¥omisc
;

2326 
	sixgbe_bus_öfo
 {

2327 
ixgbe_bus_•ìd
 
	m•ìd
;

2328 
ixgbe_bus_width
 
	mwidth
;

2329 
ixgbe_bus_ty≥
 
	mty≥
;

2331 
u16
 
	mfunc
;

2332 
u16
 
	mœn_id
;

2336 
	sixgbe_fc_öfo
 {

2337 
u32
 
	mhigh_w©î
;

2338 
u32
 
	mlow_w©î
;

2339 
u16
 
	m∑u£_time
;

2340 
boﬁ
 
	m£nd_x⁄
;

2341 
boﬁ
 
	m°ri˘_õì
;

2342 
boﬁ
 
	mdißbÀ_fc_aut⁄eg
;

2343 
boﬁ
 
	mfc_was_aut⁄egged
;

2344 
ixgbe_fc_mode
 
	mcuºít_mode
;

2345 
ixgbe_fc_mode
 
	mªque°ed_mode
;

2349 
	sixgbe_hw_°©s
 {

2350 
u64
 
	m¸˚ºs
;

2351 
u64
 
	mûÀºc
;

2352 
u64
 
	mîrbc
;

2353 
u64
 
	mm•dc
;

2354 
u64
 
	mmp˘ŸÆ
;

2355 
u64
 
	mmpc
[8];

2356 
u64
 
	mmlfc
;

2357 
u64
 
	mmrfc
;

2358 
u64
 
	mæec
;

2359 
u64
 
	mlx⁄txc
;

2360 
u64
 
	mlx⁄rxc
;

2361 
u64
 
	mlxof·xc
;

2362 
u64
 
	mlxof‰xc
;

2363 
u64
 
	mpx⁄txc
[8];

2364 
u64
 
	mpx⁄rxc
[8];

2365 
u64
 
	mpxof·xc
[8];

2366 
u64
 
	mpxof‰xc
[8];

2367 
u64
 
	m¥c64
;

2368 
u64
 
	m¥c127
;

2369 
u64
 
	m¥c255
;

2370 
u64
 
	m¥c511
;

2371 
u64
 
	m¥c1023
;

2372 
u64
 
	m¥c1522
;

2373 
u64
 
	mg¥c
;

2374 
u64
 
	mb¥c
;

2375 
u64
 
	mm¥c
;

2376 
u64
 
	mg±c
;

2377 
u64
 
	mg‹c
;

2378 
u64
 
	mgŸc
;

2379 
u64
 
	m∫bc
[8];

2380 
u64
 
	mruc
;

2381 
u64
 
	mrfc
;

2382 
u64
 
	mroc
;

2383 
u64
 
	mrjc
;

2384 
u64
 
	mmng¥c
;

2385 
u64
 
	mmngpdc
;

2386 
u64
 
	mmng±c
;

2387 
u64
 
	mt‹
;

2388 
u64
 
	mçr
;

2389 
u64
 
	mçt
;

2390 
u64
 
	m±c64
;

2391 
u64
 
	m±c127
;

2392 
u64
 
	m±c255
;

2393 
u64
 
	m±c511
;

2394 
u64
 
	m±c1023
;

2395 
u64
 
	m±c1522
;

2396 
u64
 
	mm±c
;

2397 
u64
 
	mb±c
;

2398 
u64
 
	mxec
;

2399 
u64
 
	mrqsmr
[16];

2400 
u64
 
	mtqsmr
[8];

2401 
u64
 
	mq¥c
[16];

2402 
u64
 
	mq±c
[16];

2403 
u64
 
	mqbrc
[16];

2404 
u64
 
	mqbtc
[16];

2405 
u64
 
	mq¥dc
[16];

2406 
u64
 
	mpx⁄2offc
[8];

2407 
u64
 
	mfdúu°©_add
;

2408 
u64
 
	mfdúu°©_ªmove
;

2409 
u64
 
	mfdúf°©_Ádd
;

2410 
u64
 
	mfdúf°©_‰emove
;

2411 
u64
 
	mfdúm©ch
;

2412 
u64
 
	mfdúmiss
;

2413 
u64
 
	mfc¸c
;

2414 
u64
 
	mf˛a°
;

2415 
u64
 
	mfc€Ωdc
;

2416 
u64
 
	mfc€¥c
;

2417 
u64
 
	mfc€±c
;

2418 
u64
 
	mfc€dwrc
;

2419 
u64
 
	mfc€dwtc
;

2423 
	gixgbe_hw
;

2426 
	gu8
* (*
	tixgbe_mc_addr_ôr
Ë(
	tixgbe_hw
 *
	thw
, 
	tu8
 **
	tmc_addr_±r
,

2427 
	tu32
 *
	tvmdq
);

2430 
	sixgbe_ì¥om_›î©i⁄s
 {

2431 
s32
 (*
öô_∑øms
)(
	mixgbe_hw
 *);

2432 
s32
 (*
ªad
)(
	mixgbe_hw
 *, 
	mu16
, u16 *);

2433 
s32
 (*
wrôe
)(
	mixgbe_hw
 *, 
	mu16
, u16);

2434 
s32
 (*
vÆid©e_checksum
)(
	mixgbe_hw
 *, 
	mu16
 *);

2435 
s32
 (*
upd©e_checksum
)(
	mixgbe_hw
 *);

2438 
	sixgbe_mac_›î©i⁄s
 {

2439 
s32
 (*
öô_hw
)(
	mixgbe_hw
 *);

2440 
s32
 (*
ª£t_hw
)(
	mixgbe_hw
 *);

2441 
s32
 (*
°¨t_hw
)(
	mixgbe_hw
 *);

2442 
s32
 (*
˛ór_hw_˙ås
)(
	mixgbe_hw
 *);

2443 
ixgbe_medü_ty≥
 (*
gë_medü_ty≥
)(
	mixgbe_hw
 *);

2444 
u32
 (*
gë_suµ‹ãd_physiˇl_œyî
)(
	mixgbe_hw
 *);

2445 
s32
 (*
gë_mac_addr
)(
	mixgbe_hw
 *, 
	mu8
 *);

2446 
s32
 (*
gë_ßn_mac_addr
)(
	mixgbe_hw
 *, 
	mu8
 *);

2447 
s32
 (*
£t_ßn_mac_addr
)(
	mixgbe_hw
 *, 
	mu8
 *);

2448 
s32
 (*
gë_devi˚_ˇps
)(
	mixgbe_hw
 *, 
	mu16
 *);

2449 
s32
 (*
°›_ad≠ãr
)(
	mixgbe_hw
 *);

2450 
s32
 (*
gë_bus_öfo
)(
	mixgbe_hw
 *);

2451 (*
	m£t_œn_id
)(
	mixgbe_hw
 *);

2452 
s32
 (*
ªad_™Æog_ªg8
)(
	mixgbe_hw
*, 
	mu32
, 
	mu8
*);

2453 
s32
 (*
wrôe_™Æog_ªg8
)(
	mixgbe_hw
*, 
	mu32
, 
	mu8
);

2454 
s32
 (*
£tup_sÂ
)(
	mixgbe_hw
 *);

2455 
s32
 (*
íabÀ_rx_dma
)(
	mixgbe_hw
 *, 
	mu32
);

2456 
s32
 (*
acquúe_swfw_sync
)(
	mixgbe_hw
 *, 
	mu16
);

2457 (*
	mªÀa£_swfw_sync
)(
	mixgbe_hw
 *, 
	mu16
);

2460 
s32
 (*
£tup_lök
)(
	mixgbe_hw
 *);

2461 
s32
 (*
£tup_lök_•ìd
)(
	mixgbe_hw
 *, 
	mixgbe_lök_•ìd
, 
	mboﬁ
,

2462 
	mboﬁ
);

2463 
s32
 (*
check_lök
)(
	mixgbe_hw
 *, 
	mixgbe_lök_•ìd
 *, 
	mboﬁ
 *, bool);

2464 
s32
 (*
gë_lök_ˇ∑bûôõs
)(
	mixgbe_hw
 *, 
	mixgbe_lök_•ìd
 *,

2465 
	mboﬁ
 *);

2468 
s32
 (*
Àd_⁄
)(
	mixgbe_hw
 *, 
	mu32
);

2469 
s32
 (*
Àd_off
)(
	mixgbe_hw
 *, 
	mu32
);

2470 
s32
 (*
blök_Àd_°¨t
)(
	mixgbe_hw
 *, 
	mu32
);

2471 
s32
 (*
blök_Àd_°›
)(
	mixgbe_hw
 *, 
	mu32
);

2474 
s32
 (*
£t_ør
)(
	mixgbe_hw
 *, 
	mu32
, 
	mu8
 *, u32, u32);

2475 
s32
 (*
˛ór_ør
)(
	mixgbe_hw
 *, 
	mu32
);

2476 
s32
 (*
ö£π_mac_addr
)(
	mixgbe_hw
 *, 
	mu8
 *, 
	mu32
);

2477 
s32
 (*
£t_vmdq
)(
	mixgbe_hw
 *, 
	mu32
, u32);

2478 
s32
 (*
˛ór_vmdq
)(
	mixgbe_hw
 *, 
	mu32
, u32);

2479 
s32
 (*
öô_rx_addrs
)(
	mixgbe_hw
 *);

2480 
s32
 (*
upd©e_uc_addr_li°
)(
	mixgbe_hw
 *, 
	mu8
 *, 
	mu32
,

2481 
	mixgbe_mc_addr_ôr
);

2482 
s32
 (*
upd©e_mc_addr_li°
)(
	mixgbe_hw
 *, 
	mu8
 *, 
	mu32
,

2483 
	mixgbe_mc_addr_ôr
);

2484 
s32
 (*
íabÀ_mc
)(
	mixgbe_hw
 *);

2485 
s32
 (*
dißbÀ_mc
)(
	mixgbe_hw
 *);

2486 
s32
 (*
˛ór_v·a
)(
	mixgbe_hw
 *);

2487 
s32
 (*
£t_v·a
)(
	mixgbe_hw
 *, 
	mu32
, u32, 
	mboﬁ
);

2488 
s32
 (*
öô_uè_èbÀs
)(
	mixgbe_hw
 *);

2491 
s32
 (*
fc_íabÀ
)(
	mixgbe_hw
 *, 
	ms32
);

2494 
	sixgbe_phy_›î©i⁄s
 {

2495 
s32
 (*
idítify
)(
	mixgbe_hw
 *);

2496 
s32
 (*
idítify_sÂ
)(
	mixgbe_hw
 *);

2497 
s32
 (*
öô
)(
	mixgbe_hw
 *);

2498 
s32
 (*
ª£t
)(
	mixgbe_hw
 *);

2499 
s32
 (*
ªad_ªg
)(
	mixgbe_hw
 *, 
	mu32
, u32, 
	mu16
 *);

2500 
s32
 (*
wrôe_ªg
)(
	mixgbe_hw
 *, 
	mu32
, u32, 
	mu16
);

2501 
s32
 (*
£tup_lök
)(
	mixgbe_hw
 *);

2502 
s32
 (*
£tup_lök_•ìd
)(
	mixgbe_hw
 *, 
	mixgbe_lök_•ìd
, 
	mboﬁ
,

2503 
	mboﬁ
);

2504 
s32
 (*
check_lök
)(
	mixgbe_hw
 *, 
	mixgbe_lök_•ìd
 *, 
	mboﬁ
 *);

2505 
s32
 (*
gë_fúmw¨e_vîsi⁄
)(
	mixgbe_hw
 *, 
	mu16
 *);

2506 
s32
 (*
ªad_i2c_byã
)(
	mixgbe_hw
 *, 
	mu8
, u8, u8 *);

2507 
s32
 (*
wrôe_i2c_byã
)(
	mixgbe_hw
 *, 
	mu8
, u8, u8);

2508 
s32
 (*
ªad_i2c_ì¥om
)(
	mixgbe_hw
 *, 
	mu8
 , u8 *);

2509 
s32
 (*
wrôe_i2c_ì¥om
)(
	mixgbe_hw
 *, 
	mu8
, u8);

2510 (*
	mi2c_bus_˛ór
)(
	mixgbe_hw
 *);

2513 
	sixgbe_ì¥om_öfo
 {

2514 
ixgbe_ì¥om_›î©i⁄s
 
	m›s
;

2515 
ixgbe_ì¥om_ty≥
 
	mty≥
;

2516 
u32
 
	m£m≠h‹e_dñay
;

2517 
u16
 
	mw‹d_size
;

2518 
u16
 
	maddªss_bôs
;

2521 
	sixgbe_mac_öfo
 {

2522 
ixgbe_mac_›î©i⁄s
 
	m›s
;

2523 
ixgbe_mac_ty≥
 
	mty≥
;

2524 
u8
 
	maddr
[
IXGBE_ETH_LENGTH_OF_ADDRESS
];

2525 
u8
 
	m≥rm_addr
[
IXGBE_ETH_LENGTH_OF_ADDRESS
];

2526 
u8
 
	mßn_addr
[
IXGBE_ETH_LENGTH_OF_ADDRESS
];

2527 
s32
 
	mmc_fûãr_ty≥
;

2528 
u32
 
	mmc·_size
;

2529 
u32
 
	mv·_size
;

2530 
u32
 
	mnum_ør_íåõs
;

2531 
u32
 
	mør_highw©î
;

2532 
u32
 
	mmax_tx_queues
;

2533 
u32
 
	mmax_rx_queues
;

2534 
u32
 
	mmax_msix_ve˘‹s
;

2535 
boﬁ
 
	mmsix_ve˘‹s_‰om_pcõ
;

2536 
u32
 
	m‹ig_autoc
;

2537 
u32
 
	m‹ig_autoc2
;

2538 
boﬁ
 
	m‹ig_lök_£âögs_°‹ed
;

2539 
boﬁ
 
	maut⁄eg
;

2540 
boﬁ
 
	maut⁄eg_suc˚eded
;

2541 
boﬁ
 
	mautŸry_ª°¨t
;

2544 
	sixgbe_phy_öfo
 {

2545 
ixgbe_phy_›î©i⁄s
 
	m›s
;

2546 
ixgbe_phy_ty≥
 
	mty≥
;

2547 
u32
 
	maddr
;

2548 
u32
 
	mid
;

2549 
ixgbe_sÂ_ty≥
 
	msÂ_ty≥
;

2550 
boﬁ
 
	msÂ_£tup_√eded
;

2551 
u32
 
	mªvisi⁄
;

2552 
ixgbe_medü_ty≥
 
	mmedü_ty≥
;

2553 
boﬁ
 
	mª£t_dißbÀ
;

2554 
ixgbe_aut⁄eg_advîti£d
 
	maut⁄eg_advîti£d
;

2555 
boﬁ
 
	maut⁄eg_waô_to_com∂ëe
;

2556 
boﬁ
 
	mmu…i•ìd_fibî
;

2559 
	sixgbe_hw
 {

2560 
u8
 
__iomem
 *
	mhw_addr
;

2561 *
	mback
;

2562 
ixgbe_mac_öfo
 
	mmac
;

2563 
ixgbe_addr_fûãr_öfo
 
	maddr_˘æ
;

2564 
ixgbe_fc_öfo
 
	mfc
;

2565 
ixgbe_phy_öfo
 
	mphy
;

2566 
ixgbe_ì¥om_öfo
 
	mì¥om
;

2567 
ixgbe_bus_öfo
 
	mbus
;

2568 
u16
 
	mdevi˚_id
;

2569 
u16
 
	mvíd‹_id
;

2570 
u16
 
	msubsy°em_devi˚_id
;

2571 
u16
 
	msubsy°em_víd‹_id
;

2572 
u8
 
	mªvisi⁄_id
;

2573 
boﬁ
 
	mad≠ãr_°›≥d
;

2576 
	#ixgbe_ˇŒ_func
(
hw
, 
func
, 
∑øms
, 
îr‹
) \

2577 (
func
 !
NULL
Ë? fun¯
∑øms
 : 
îr‹


	)

2581 
	#IXGBE_ERR_EEPROM
 -1

	)

2582 
	#IXGBE_ERR_EEPROM_CHECKSUM
 -2

	)

2583 
	#IXGBE_ERR_PHY
 -3

	)

2584 
	#IXGBE_ERR_CONFIG
 -4

	)

2585 
	#IXGBE_ERR_PARAM
 -5

	)

2586 
	#IXGBE_ERR_MAC_TYPE
 -6

	)

2587 
	#IXGBE_ERR_UNKNOWN_PHY
 -7

	)

2588 
	#IXGBE_ERR_LINK_SETUP
 -8

	)

2589 
	#IXGBE_ERR_ADAPTER_STOPPED
 -9

	)

2590 
	#IXGBE_ERR_INVALID_MAC_ADDR
 -10

	)

2591 
	#IXGBE_ERR_DEVICE_NOT_SUPPORTED
 -11

	)

2592 
	#IXGBE_ERR_MASTER_REQUESTS_PENDING
 -12

	)

2593 
	#IXGBE_ERR_INVALID_LINK_SETTINGS
 -13

	)

2594 
	#IXGBE_ERR_AUTONEG_NOT_COMPLETE
 -14

	)

2595 
	#IXGBE_ERR_RESET_FAILED
 -15

	)

2596 
	#IXGBE_ERR_SWFW_SYNC
 -16

	)

2597 
	#IXGBE_ERR_PHY_ADDR_INVALID
 -17

	)

2598 
	#IXGBE_ERR_I2C
 -18

	)

2599 
	#IXGBE_ERR_SFP_NOT_SUPPORTED
 -19

	)

2600 
	#IXGBE_ERR_SFP_NOT_PRESENT
 -20

	)

2601 
	#IXGBE_ERR_SFP_NO_INIT_SEQ_PRESENT
 -21

	)

2602 
	#IXGBE_ERR_NO_SAN_ADDR_PTR
 -22

	)

2603 
	#IXGBE_ERR_FDIR_REINIT_FAILED
 -23

	)

2604 
	#IXGBE_ERR_EEPROM_VERSION
 -24

	)

2605 
	#IXGBE_NOT_IMPLEMENTED
 0x7FFFFFFF

	)

	@kcompat.c

28 
	~"ixgbe.h
"

29 
	~"kcom∑t.h
"

32 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,21) )

33 
sk_buff
 *

34 
	$_kc_skb_∑d
(
sk_buff
 *
skb
, 
∑d
)

36 
sk_buff
 *
nskb
;

39 if(
	`skb_èûroom
(
skb
Ë>
∑d
)

41 
	`mem£t
(
skb
->
d©a
+skb->
Àn
, 0, 
∑d
);

42  
skb
;

45 
nskb
 = 
	`skb_c›y_ex∑nd
(
skb
, 
	`skb_hódroom
(skb), 
	`skb_èûroom
(skbË+ 
∑d
, 
GFP_ATOMIC
);

46 
	`k‰ì_skb
(
skb
);

47 if(
nskb
)

48 
	`mem£t
(
nskb
->
d©a
+nskb->
Àn
, 0, 
∑d
);

49  
nskb
;

50 
	}
}

54 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,13) )

59 #i‡
deföed
(
CONFIG_HIGHMEM
)

61 #i‚de‡
PCI_DRAM_OFFSET


62 
	#PCI_DRAM_OFFSET
 0

	)

65 
u64


66 
	$_kc_pci_m≠_∑ge
(
pci_dev
 *
dev
, 
∑ge
 *∑ge, 
off£t
,

67 
size_t
 
size
, 
dúe˘i⁄
)

69  (((
u64
Ë(
∑ge
 - 
mem_m≠
Ë<< 
PAGE_SHIFT
Ë+ 
off£t
 +

70 
PCI_DRAM_OFFSET
);

71 
	}
}

75 
u64


76 
	$_kc_pci_m≠_∑ge
(
pci_dev
 *
dev
, 
∑ge
 *∑ge, 
off£t
,

77 
size_t
 
size
, 
dúe˘i⁄
)

79  
	`pci_m≠_sögÀ
(
dev
, (*)
	`∑ge_addªss
(
∑ge
Ë+ 
off£t
, 
size
,

80 
dúe˘i⁄
);

81 
	}
}

86 
	$_kc_pci_unm≠_∑ge
(
pci_dev
 *
dev
, 
u64
 
dma_addr
, 
size_t
 
size
,

87 
dúe˘i⁄
)

89  
	`pci_unm≠_sögÀ
(
dev
, 
dma_addr
, 
size
, 
dúe˘i⁄
);

90 
	}
}

95 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,3) )

101 
	$_kc_pci_£t_dma_mask
(
pci_dev
 *
dev
, 
dma_addr_t
 
mask
)

103 i‡(!
	`pci_dma_suµ‹ãd
(
dev
, 
mask
))

104  -
EIO
;

105 
dev
->
dma_mask
 = 
mask
;

107 
	}
}

110 
	$_kc_pci_ªque°_ªgi⁄s
(
pci_dev
 *
dev
, *
ªs_«me
)

112 
i
;

114 
i
 = 0; i < 6; i++) {

115 i‡(
	`pci_ªsour˚_Àn
(
dev
, 
i
) == 0)

118 i‡(
	`pci_ªsour˚_Êags
(
dev
, 
i
Ë& 
IORESOURCE_IO
) {

119 i‡(!
	`ªque°_ªgi⁄
(
	`pci_ªsour˚_°¨t
(
dev
, 
i
), 
	`pci_ªsour˚_Àn
(dev, i), 
ªs_«me
)) {

120 
	`pci_ªÀa£_ªgi⁄s
(
dev
);

121  -
EBUSY
;

123 } i‡(
	`pci_ªsour˚_Êags
(
dev
, 
i
Ë& 
IORESOURCE_MEM
) {

124 i‡(!
	`ªque°_mem_ªgi⁄
(
	`pci_ªsour˚_°¨t
(
dev
, 
i
), 
	`pci_ªsour˚_Àn
(dev, i), 
ªs_«me
)) {

125 
	`pci_ªÀa£_ªgi⁄s
(
dev
);

126  -
EBUSY
;

131 
	}
}

134 
	$_kc_pci_ªÀa£_ªgi⁄s
(
pci_dev
 *
dev
)

136 
i
;

138 
i
 = 0; i < 6; i++) {

139 i‡(
	`pci_ªsour˚_Àn
(
dev
, 
i
) == 0)

142 i‡(
	`pci_ªsour˚_Êags
(
dev
, 
i
Ë& 
IORESOURCE_IO
)

143 
	`ªÀa£_ªgi⁄
(
	`pci_ªsour˚_°¨t
(
dev
, 
i
), 
	`pci_ªsour˚_Àn
(dev, i));

145 i‡(
	`pci_ªsour˚_Êags
(
dev
, 
i
Ë& 
IORESOURCE_MEM
)

146 
	`ªÀa£_mem_ªgi⁄
(
	`pci_ªsour˚_°¨t
(
dev
, 
i
), 
	`pci_ªsour˚_Àn
(dev, i));

148 
	}
}

153 
√t_devi˚
 *

154 
	$_kc_Æloc_ëhîdev
(
sizeof_¥iv
)

156 
√t_devi˚
 *
dev
;

157 
Æloc_size
;

159 
Æloc_size
 = (*
dev
Ë+ 
sizeof_¥iv
 + 
IFNAMSIZ
 + 31;

160 
dev
 = 
	`kmÆloc
(
Æloc_size
, 
GFP_KERNEL
);

161 i‡(!
dev
)

162  
NULL
;

163 
	`mem£t
(
dev
, 0, 
Æloc_size
);

165 i‡(
sizeof_¥iv
)

166 
dev
->
¥iv
 = (*) ((()(dev + 1) + 31) & ~31);

167 
dev
->
«me
[0] = '\0';

168 
	`ëhî_£tup
(
dev
);

170  
dev
;

171 
	}
}

174 
	$_kc_is_vÆid_ëhî_addr
(
u8
 *
addr
)

176 c⁄° 
zaddr
[6] = { 0, };

178  !(
addr
[0] & 1Ë&& 
	`memcmp
◊ddr, 
zaddr
, 6);

179 
	}
}

184 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,6) )

187 
	$_kc_pci_£t_powî_°©e
(
pci_dev
 *
dev
, 
°©e
)

190 
	}
}

193 
	$_kc_pci_íabÀ_wake
(
pci_dev
 *
pdev
, 
u32
 
°©e
, 
íabÀ
)

196 
	}
}

201 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0) )

202 
	$_kc_skb_fûl_∑ge_desc
(
sk_buff
 *
skb
, 
i
, 
∑ge
 *page,

203 
off
, 
size
)

205 
skb_‰ag_t
 *
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[
i
];

206 
‰ag
->
∑ge
 =Öage;

207 
‰ag
->
∑ge_off£t
 = 
off
;

208 
‰ag
->
size
 = size;

209 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
 = 
i
 + 1;

210 
	}
}

226 
	$föd_√xt_bô
(c⁄° *
addr
, 
size
,

227 
off£t
)

229 c⁄° *
p
 = 
addr
 + 
	`BITOP_WORD
(
off£t
);

230 
ªsu…
 = 
off£t
 & ~(
BITS_PER_LONG
-1);

231 
tmp
;

233 i‡(
off£t
 >
size
)

234  
size
;

235 
size
 -
ªsu…
;

236 
off£t
 %
BITS_PER_LONG
;

237 i‡(
off£t
) {

238 
tmp
 = *(
p
++);

239 
tmp
 &(~0UL << 
off£t
);

240 i‡(
size
 < 
BITS_PER_LONG
)

241 
found_fú°
;

242 i‡(
tmp
)

243 
found_middÀ
;

244 
size
 -
BITS_PER_LONG
;

245 
ªsu…
 +
BITS_PER_LONG
;

247 
size
 & ~(
BITS_PER_LONG
-1)) {

248 i‡((
tmp
 = *(
p
++)))

249 
found_middÀ
;

250 
ªsu…
 +
BITS_PER_LONG
;

251 
size
 -
BITS_PER_LONG
;

253 i‡(!
size
)

254  
ªsu…
;

255 
tmp
 = *
p
;

257 
found_fú°
:

258 
tmp
 &(~0UL >> (
BITS_PER_LONG
 - 
size
));

259 i‡(
tmp
 == 0UL)

260  
ªsu…
 + 
size
;

261 
found_middÀ
:

262  
ªsu…
 + 
	`ffs
(
tmp
);

263 
	}
}

268 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14) )

269 *
	$_kc_kzÆloc
(
size_t
 
size
, 
Êags
)

271 *
ªt
 = 
	`kmÆloc
(
size
, 
Êags
);

272 i‡(
ªt
)

273 
	`mem£t
(
ªt
, 0, 
size
);

274  
ªt
;

275 
	}
}

279 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18) )

280 
sk_buff
 *
	$_kc_√tdev_Æloc_skb
(
√t_devi˚
 *
dev
,

281 
Àngth
)

284 
sk_buff
 *
skb
;

285 
skb
 = 
	`Æloc_skb
(
Àngth
 + 16, 
GFP_ATOMIC
);

286 i‡(
	`likñy
(
skb
 !
NULL
)) {

287 
	`skb_ª£rve
(
skb
, 16);

288 
skb
->
dev
 = dev;

290  
skb
;

291 
	}
}

295 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19) )

296 
	$_kc_pci_ßve_°©e
(
pci_dev
 *
pdev
)

298 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

299 
ad≠ãr_°ru˘
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

300 
size
 = 
PCI_CONFIG_SPACE_LEN
, 
i
;

301 
u16
 
pcõ_ˇp_off£t
 = 
	`pci_föd_ˇ∑bûôy
(
pdev
, 
PCI_CAP_ID_EXP
);

302 
u16
 
pcõ_lök_°©us
;

304 i‡(
pcõ_ˇp_off£t
) {

305 i‡(!
	`pci_ªad_c⁄fig_w‹d
(
pdev
,

306 
pcõ_ˇp_off£t
 + 
PCIE_LINK_STATUS
,

307 &
pcõ_lök_°©us
))

308 
size
 = 
PCIE_CONFIG_SPACE_LEN
;

310 
	`pci_c⁄fig_•a˚_ich8œn
();

311 #ifde‡
HAVE_PCI_ERS


312 i‡(
ad≠ãr
->
c⁄fig_•a˚
 =
NULL
)

314 
	`WARN_ON
(
ad≠ãr
->
c⁄fig_•a˚
 !
NULL
);

316 
ad≠ãr
->
c⁄fig_•a˚
 = 
	`kmÆloc
(
size
, 
GFP_KERNEL
);

317 i‡(!
ad≠ãr
->
c⁄fig_•a˚
) {

318 
	`¥ötk
(
KERN_ERR
 "Out of memory inÖci_save_state\n");

319  -
ENOMEM
;

321 
i
 = 0; i < (
size
 / 4); i++)

322 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 
i
 * 4, &
ad≠ãr
->
c⁄fig_•a˚
[i]);

324 
	}
}

326 
	$_kc_pci_ª°‹e_°©e
(
pci_dev
 * 
pdev
)

328 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

329 
ad≠ãr_°ru˘
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

330 
size
 = 
PCI_CONFIG_SPACE_LEN
, 
i
;

331 
u16
 
pcõ_ˇp_off£t
;

332 
u16
 
pcõ_lök_°©us
;

334 i‡(
ad≠ãr
->
c⁄fig_•a˚
 !
NULL
) {

335 
pcõ_ˇp_off£t
 = 
	`pci_föd_ˇ∑bûôy
(
pdev
, 
PCI_CAP_ID_EXP
);

336 i‡(
pcõ_ˇp_off£t
 &&

337 !
	`pci_ªad_c⁄fig_w‹d
(
pdev
,

338 
pcõ_ˇp_off£t
 + 
PCIE_LINK_STATUS
,

339 &
pcõ_lök_°©us
))

340 
size
 = 
PCIE_CONFIG_SPACE_LEN
;

342 
	`pci_c⁄fig_•a˚_ich8œn
();

343 
i
 = 0; i < (
size
 / 4); i++)

344 
	`pci_wrôe_c⁄fig_dw‹d
(
pdev
, 
i
 * 4, 
ad≠ãr
->
c⁄fig_•a˚
[i]);

345 #i‚de‡
HAVE_PCI_ERS


346 
	`k‰ì
(
ad≠ãr
->
c⁄fig_•a˚
);

347 
ad≠ãr
->
c⁄fig_•a˚
 = 
NULL
;

350 
	}
}

352 #ifde‡
HAVE_PCI_ERS


353 
	$_kc_‰ì_√tdev
(
√t_devi˚
 *
√tdev
)

355 
ad≠ãr_°ru˘
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

357 i‡(
ad≠ãr
->
c⁄fig_•a˚
 !
NULL
)

358 
	`k‰ì
(
ad≠ãr
->
c⁄fig_•a˚
);

359 #ifde‡
CONFIG_SYSFS


360 i‡(
√tdev
->
ªg_°©e
 =
NETREG_UNINITIALIZED
) {

361 
	`k‰ì
((*)
√tdev
 -Çëdev->
∑dded
);

363 
	`BUG_ON
(
√tdev
->
ªg_°©e
 !
NETREG_UNREGISTERED
);

364 
√tdev
->
ªg_°©e
 = 
NETREG_RELEASED
;

365 
	`˛ass_devi˚_put
(&
√tdev
->
˛ass_dev
);

368 
	`k‰ì
((*)
√tdev
 -Çëdev->
∑dded
);

370 
	}
}

375 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23) )

377 
	$ixgbe_dcb_√éök_ªgi°î
()

380 
	}
}

382 
	$ixgbe_dcb_√éök_uƒegi°î
()

385 
	}
}

389 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24) )

390 #ifde‡
NAPI


391 
√t_devi˚
 *
	$«pi_to_pﬁl_dev
(
«pi_°ru˘
 *
«pi
)

393 
ad≠ãr_q_ve˘‹
 *
q_ve˘‹
 = 
	`c⁄èöî_of
(
«pi
,

394 
ad≠ãr_q_ve˘‹
,

395 
«pi
);

396  &
q_ve˘‹
->
pﬁl_dev
;

397 
	}
}

399 
	$__kc_ad≠ãr_˛ón
(
√t_devi˚
 *
√tdev
, *
budgë
)

401 
w‹k_d⁄e
;

402 
w‹k_to_do
 = 
	`mö
(*
budgë
, 
√tdev
->
quŸa
);

404 
«pi_°ru˘
 *
«pi
 = 
√tdev
->
¥iv
;

405 
w‹k_d⁄e
 = 
«pi
->
	`pﬁl
“≠i, 
w‹k_to_do
);

406 *
budgë
 -
w‹k_d⁄e
;

407 
√tdev
->
quŸa
 -
w‹k_d⁄e
;

408  (
w‹k_d⁄e
 >
w‹k_to_do
) ? 1 : 0;

409 
	}
}

414 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,27) )

415 #ifde‡
HAVE_TX_MQ


416 
	$_kc_√tif_tx_°›_Æl_queues
(
√t_devi˚
 *
√tdev
)

418 
ad≠ãr_°ru˘
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

419 
i
;

421 
	`√tif_°›_queue
(
√tdev
);

422 i‡(
	`√tif_is_mu…iqueue
(
√tdev
))

423 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

424 
	`√tif_°›_subqueue
(
√tdev
, 
i
);

425 
	}
}

426 
	$_kc_√tif_tx_wake_Æl_queues
(
√t_devi˚
 *
√tdev
)

428 
ad≠ãr_°ru˘
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

429 
i
;

431 
	`√tif_wake_queue
(
√tdev
);

432 i‡(
	`√tif_is_mu…iqueue
(
√tdev
))

433 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

434 
	`√tif_wake_subqueue
(
√tdev
, 
i
);

435 
	}
}

436 
	$_kc_√tif_tx_°¨t_Æl_queues
(
√t_devi˚
 *
√tdev
)

438 
ad≠ãr_°ru˘
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

439 
i
;

441 
	`√tif_°¨t_queue
(
√tdev
);

442 i‡(
	`√tif_is_mu…iqueue
(
√tdev
))

443 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

444 
	`√tif_°¨t_subqueue
(
√tdev
, 
i
);

445 
	}
}

450 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,28) )

453 
	$_kc_pci_¥ï¨e_to_¶ìp
(
pci_dev
 *
dev
)

455 
pci_powî_t
 
èrgë_°©e
;

456 
îr‹
;

458 
èrgë_°©e
 = 
	`pci_choo£_°©e
(
dev
, 
PMSG_SUSPEND
);

460 
	`pci_íabÀ_wake
(
dev
, 
èrgë_°©e
, 
åue
);

462 
îr‹
 = 
	`pci_£t_powî_°©e
(
dev
, 
èrgë_°©e
);

464 i‡(
îr‹
)

465 
	`pci_íabÀ_wake
(
dev
, 
èrgë_°©e
, 
Ál£
);

467  
îr‹
;

468 
	}
}

471 
	$_kc_pci_wake_‰om_d3
(
pci_dev
 *
dev
, 
boﬁ
 
íabÀ
)

473 
îr
;

475 
îr
 = 
	`pci_íabÀ_wake
(
dev
, 
PCI_D3cﬁd
, 
íabÀ
);

476 i‡(
îr
)

477 
out
;

479 
îr
 = 
	`pci_íabÀ_wake
(
dev
, 
PCI_D3hŸ
, 
íabÀ
);

481 
out
:

482  
îr
;

483 
	}
}

487 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,29) )

488 
	$_kc_pci_dißbÀ_lök_°©e
(
pci_dev
 *
pdev
, 
°©e
)

490 
pci_dev
 *
∑ª¡
 = 
pdev
->
bus
->
£lf
;

491 
u16
 
lök_°©e
;

492 
pos
;

494 i‡(!
∑ª¡
)

497 
pos
 = 
	`pci_föd_ˇ∑bûôy
(
∑ª¡
, 
PCI_CAP_ID_EXP
);

498 i‡(
pos
) {

499 
	`pci_ªad_c⁄fig_w‹d
(
∑ª¡
, 
pos
 + 
PCI_EXP_LNKCTL
, &
lök_°©e
);

500 
lök_°©e
 &~
°©e
;

501 
	`pci_wrôe_c⁄fig_w‹d
(
∑ª¡
, 
pos
 + 
PCI_EXP_LNKCTL
, 
lök_°©e
);

503 
	}
}

507 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,30) )

508 #ifde‡
HAVE_NETDEV_SELECT_QUEUE


509 
	~<√t/ù.h
>

510 
u32
 
	g_kc_sim∂e_tx_hash∫d
;

511 
u32
 
	g_kc_sim∂e_tx_hash∫d_öôülized
;

513 
u16
 
	$_kc_skb_tx_hash
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

515 
u32
 
addr1
, 
addr2
, 
p‹ts
;

516 
u32
 
hash
, 
ihl
;

517 
u8
 
ù_¥Ÿo
 = 0;

519 i‡(
	`u∆ikñy
(!
_kc_sim∂e_tx_hash∫d_öôülized
)) {

520 
	`gë_øndom_byãs
(&
_kc_sim∂e_tx_hash∫d
, 4);

521 
_kc_sim∂e_tx_hash∫d_öôülized
 = 1;

524 
skb
->
¥Ÿocﬁ
) {

525 
	`ht⁄s
(
ETH_P_IP
):

526 i‡(!(
	`ù_hdr
(
skb
)->
‰ag_off
 & 
	`ht⁄s
(
IP_MF
 | 
IP_OFFSET
)))

527 
ù_¥Ÿo
 = 
	`ù_hdr
(
skb
)->
¥Ÿocﬁ
;

528 
addr1
 = 
	`ù_hdr
(
skb
)->
ßddr
;

529 
addr2
 = 
	`ù_hdr
(
skb
)->
daddr
;

530 
ihl
 = 
	`ù_hdr
(
skb
)->ihl;

532 
	`ht⁄s
(
ETH_P_IPV6
):

533 
ù_¥Ÿo
 = 
	`ùv6_hdr
(
skb
)->
√xthdr
;

534 
addr1
 = 
	`ùv6_hdr
(
skb
)->
ßddr
.
s6_addr32
[3];

535 
addr2
 = 
	`ùv6_hdr
(
skb
)->
daddr
.
s6_addr32
[3];

536 
ihl
 = (40 >> 2);

543 
ù_¥Ÿo
) {

544 
IPPROTO_TCP
:

545 
IPPROTO_UDP
:

546 
IPPROTO_DCCP
:

547 
IPPROTO_ESP
:

548 
IPPROTO_AH
:

549 
IPPROTO_SCTP
:

550 
IPPROTO_UDPLITE
:

551 
p‹ts
 = *((
u32
 *Ë(
	`skb_√tw‹k_hódî
(
skb
Ë+ (
ihl
 * 4)));

555 
p‹ts
 = 0;

559 
hash
 = 
	`jhash_3w‹ds
(
addr1
, 
addr2
, 
p‹ts
, 
_kc_sim∂e_tx_hash∫d
);

561  (
u16
Ë(((
u64
Ë
hash
 * 
dev
->
ªÆ_num_tx_queues
) >> 32);

562 
	}
}

567 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36) )

568 
	$_kc_ëhtoﬁ_›_£t_Êags
(
√t_devi˚
 *
dev
, 
u32
 
d©a
, u32 
suµ‹ãd
)

570 
„©uªs
 = 
dev
->features;

572 i‡(
d©a
 & ~
suµ‹ãd
)

573  -
EINVAL
;

575 #ifde‡
NETIF_F_LRO


576 
„©uªs
 &~
NETIF_F_LRO
;

577 i‡(
d©a
 & 
ETH_FLAG_LRO
)

578 
„©uªs
 |
NETIF_F_LRO
;

580 #ifde‡
NETIF_F_NTUPLE


581 
„©uªs
 &~
NETIF_F_NTUPLE
;

582 i‡(
d©a
 & 
ETH_FLAG_NTUPLE
)

583 
„©uªs
 |
NETIF_F_NTUPLE
;

585 #ifde‡
NETIF_F_RXHASH


586 
„©uªs
 &~
NETIF_F_RXHASH
;

587 i‡(
d©a
 & 
ETH_FLAG_RXHASH
)

588 
„©uªs
 |
NETIF_F_RXHASH
;

591 
dev
->
„©uªs
 = features;

594 
	}
}

	@kcompat.h

28 #i‚de‡
_KCOMPAT_H_


29 
	#_KCOMPAT_H_


	)

31 
	~<löux/vîsi⁄.h
>

32 
	~<löux/öô.h
>

33 
	~<löux/ty≥s.h
>

34 
	~<löux/î∫o.h
>

35 
	~<löux/moduÀ.h
>

36 
	~<löux/pci.h
>

37 
	~<löux/√tdevi˚.h
>

38 
	~<löux/ëhîdevi˚.h
>

39 
	~<löux/skbuff.h
>

40 
	~<löux/i›‹t.h
>

41 
	~<löux/¶ab.h
>

42 
	~<löux/li°.h
>

43 
	~<löux/dñay.h
>

44 
	~<löux/sched.h
>

45 
	~<löux/ö.h
>

46 
	~<löux/ù.h
>

47 
	~<löux/udp.h
>

48 
	~<löux/mii.h
>

49 
	~<asm/io.h
>

53 #unde‡
CONFIG_IXGBE_NAPI


54 
	#CONFIG_IXGBE_NAPI


	)

55 
	#NAPI


	)

56 #ifde‡
CONFIG_IXGBE_NAPI


57 #unde‡
NAPI


58 
	#NAPI


	)

60 #ifde‡
IXGBE_NAPI


61 #unde‡
NAPI


62 
	#NAPI


	)

64 #ifde‡
IXGBE_NO_NAPI


65 #unde‡
NAPI


68 
	#ad≠ãr_°ru˘
 
ixgbe_ad≠ãr


	)

69 
	#ad≠ãr_q_ve˘‹
 
ixgbe_q_ve˘‹


	)

72 #ifde‡
NAPI


73 #i‚de‡
CONFIG_IXGBE_NAPI


74 
	#CONFIG_IXGBE_NAPI


	)

77 #unde‡
CONFIG_IXGBE_NAPI


81 #ifde‡
DISABLE_PCI_MSI


82 #unde‡
CONFIG_PCI_MSI


84 #i‚de‡
CONFIG_PCI_MSI


85 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,8) )

86 
	smsix_íåy
 {

87 
u16
 
	mve˘‹
;

88 
u16
 
	míåy
;

91 
	#pci_íabÀ_msi
(
a
Ë-
ENOTSUPP


	)

92 
	#pci_dißbÀ_msi
(
a
Ëdÿ{} 0)

	)

93 
	#pci_íabÀ_msix
(
a
, 
b
, 
c
Ë-
ENOTSUPP


	)

94 
	#pci_dißbÀ_msix
(
a
Ëdÿ{} 0)

	)

95 
	#msi_ªmove_pci_úq_ve˘‹s
(
a
Ëdÿ{} 0)

	)

97 #ifde‡
DISABLE_PM


98 #unde‡
CONFIG_PM


101 #ifde‡
DISABLE_NET_POLL_CONTROLLER


102 #unde‡
CONFIG_NET_POLL_CONTROLLER


105 #i‚de‡
PMSG_SUSPEND


106 
	#PMSG_SUSPEND
 3

	)

110 #unde‡
TRUE


111 #unde‡
FALSE


112 
	#TRUE
 
åue


	)

113 
	#FALSE
 
Ál£


	)

114 #ifde‡
GCC_VERSION


115 #i‡–
GCC_VERSION
 < 3000 )

116 
	#_Boﬁ
 

	)

119 
	#_Boﬁ
 

	)

121 #i‚de‡
boﬁ


122 
	#boﬁ
 
_Boﬁ


	)

123 
	#åue
 1

	)

124 
	#Ál£
 0

	)

128 #i‚de‡
moduÀ_∑øm


129 
	#moduÀ_∑øm
(
v
,
t
,
p
Ë
	`MODULE_PARM
(v, "i");

	)

132 #i‚de‡
DMA_64BIT_MASK


133 
	#DMA_64BIT_MASK
 0xffffffffffffffffULL

	)

136 #i‚de‡
DMA_32BIT_MASK


137 
	#DMA_32BIT_MASK
 0x00000000ffffffffULL

	)

140 #i‚de‡
PCI_CAP_ID_EXP


141 
	#PCI_CAP_ID_EXP
 0x10

	)

144 #i‚de‡
PCIE_LINK_STATE_L0S


145 
	#PCIE_LINK_STATE_L0S
 1

	)

148 #i‚de‡
mmiowb


149 #ifde‡
CONFIG_IA64


150 
	#mmiowb
(Ë
asm
 vﬁ©ûê("mf.a" ::: "mem‹y")

	)

152 
	#mmiowb
()

	)

156 #i‚de‡
SET_NETDEV_DEV


157 
	#SET_NETDEV_DEV
(
√t
, 
pdev
)

	)

160 #i‚de‡
HAVE_FREE_NETDEV


161 
	#‰ì_√tdev
(
x
Ë
	`k‰ì
(x)

	)

164 #ifde‡
HAVE_POLL_CONTROLLER


165 
	#CONFIG_NET_POLL_CONTROLLER


	)

168 #i‚de‡
NETDEV_TX_OK


169 
	#NETDEV_TX_OK
 0

	)

172 #i‚de‡
NETDEV_TX_BUSY


173 
	#NETDEV_TX_BUSY
 1

	)

176 #i‚de‡
NETDEV_TX_LOCKED


177 
	#NETDEV_TX_LOCKED
 -1

	)

180 
	#VMDQ_P
(
p
Ë’)

	)

182 #i‚de‡
SKB_DATAREF_SHIFT


185 
	#skb_hódî_˛⁄ed
(
x
Ë0

	)

188 #i‚de‡
NETIF_F_GSO


189 
	#gso_size
 
tso_size


	)

190 
	#gso_£gs
 
tso_£gs


	)

193 #i‚de‡
NETIF_F_GRO


194 
	#vœn_gro_ª˚ive
(
_«pi
, 
_vlgΩ
, 
_vœn
, 
_skb
) \

195 
	`vœn_hwac˚l_ª˚ive_skb
(
_skb
, 
_vlgΩ
, 
_vœn
)

	)

196 
	#«pi_gro_ª˚ive
(
_«pi
, 
_skb
Ë
	`√tif_ª˚ive_skb
(_skb)

	)

199 #i‚de‡
NETIF_F_SCTP_CSUM


200 
	#NETIF_F_SCTP_CSUM
 0

	)

203 #i‚de‡
CHECKSUM_PARTIAL


204 
	#CHECKSUM_PARTIAL
 
CHECKSUM_HW


	)

205 
	#CHECKSUM_COMPLETE
 
CHECKSUM_HW


	)

208 #i‚de‡
__ªad_mo°ly


209 
	#__ªad_mo°ly


	)

212 #i‚de‡
HAVE_NETIF_MSG


213 
	#HAVE_NETIF_MSG
 1

	)

215 
	mNETIF_MSG_DRV
 = 0x0001,

216 
	mNETIF_MSG_PROBE
 = 0x0002,

217 
	mNETIF_MSG_LINK
 = 0x0004,

218 
	mNETIF_MSG_TIMER
 = 0x0008,

219 
	mNETIF_MSG_IFDOWN
 = 0x0010,

220 
	mNETIF_MSG_IFUP
 = 0x0020,

221 
	mNETIF_MSG_RX_ERR
 = 0x0040,

222 
	mNETIF_MSG_TX_ERR
 = 0x0080,

223 
	mNETIF_MSG_TX_QUEUED
 = 0x0100,

224 
	mNETIF_MSG_INTR
 = 0x0200,

225 
	mNETIF_MSG_TX_DONE
 = 0x0400,

226 
	mNETIF_MSG_RX_STATUS
 = 0x0800,

227 
	mNETIF_MSG_PKTDATA
 = 0x1000,

228 
	mNETIF_MSG_HW
 = 0x2000,

229 
	mNETIF_MSG_WOL
 = 0x4000,

233 
	#NETIF_MSG_HW
 0x2000

	)

234 
	#NETIF_MSG_WOL
 0x4000

	)

237 #i‚de‡
MII_RESV1


238 
	#MII_RESV1
 0x17

	)

241 #i‚de‡
u∆ikñy


242 
	#u∆ikñy
(
_x
Ë
	)
_x

243 
	#likñy
(
_x
Ë
	)
_x

246 #i‚de‡
WARN_ON


247 
	#WARN_ON
(
x
)

	)

250 #i‚de‡
PCI_DEVICE


251 
	#PCI_DEVICE
(
víd
,
dev
) \

252 .
víd‹
 = (
víd
), .
devi˚
 = (
dev
), \

253 .
subvíd‹
 = 
PCI_ANY_ID
, .
subdevi˚
 = 
	)
PCI_ANY_ID

256 #i‚de‡
num_⁄löe_˝us


257 
	#num_⁄löe_˝us
(Ë
smp_num_˝us


	)

260 #i‚de‡
_LINUX_RANDOM_H


261 
	~<löux/øndom.h
>

264 #i‚de‡
DECLARE_BITMAP


265 #i‚de‡
BITS_TO_LONGS


266 
	#BITS_TO_LONGS
(
bôs
Ë(((bôs)+
BITS_PER_LONG
-1)/BITS_PER_LONG)

	)

268 
	#DECLARE_BITMAP
(
«me
,
bôs
Ë«me[
	`BITS_TO_LONGS
(bôs)]

	)

271 #i‚de‡
VLAN_HLEN


272 
	#VLAN_HLEN
 4

	)

275 #i‚de‡
VLAN_ETH_HLEN


276 
	#VLAN_ETH_HLEN
 18

	)

279 #i‚de‡
VLAN_ETH_FRAME_LEN


280 
	#VLAN_ETH_FRAME_LEN
 1518

	)

283 #i‡!
deföed
(
IXGBE_DCA
Ë&& !deföed(
IGB_DCA
)

284 
	#dˇ_gë_èg
(
b
Ë0

	)

285 
	#dˇ_add_ªque°î
(
a
Ë-1

	)

286 
	#dˇ_ªmove_ªque°î
(
b
Ëdÿ{ } 0)

	)

287 
	#DCA_PROVIDER_ADD
 0x0001

	)

288 
	#DCA_PROVIDER_REMOVE
 0x0002

	)

291 #i‚de‡
DCA_GET_TAG_TWO_ARGS


292 
	#dˇ3_gë_èg
(
a
,
b
Ë
	`dˇ_gë_èg
(b)

	)

299 #i‚de‡
ETH_GSTRING_LEN


300 
	#ETH_GSTRING_LEN
 32

	)

303 #i‚de‡
ETHTOOL_GSTATS


304 
	#ETHTOOL_GSTATS
 0x1d

	)

305 #unde‡
ëhtoﬁ_drvöfo


306 
	#ëhtoﬁ_drvöfo
 
k_ëhtoﬁ_drvöfo


	)

307 
	sk_ëhtoﬁ_drvöfo
 {

308 
u32
 
	mcmd
;

309 
	mdrivî
[32];

310 
	mvîsi⁄
[32];

311 
	mfw_vîsi⁄
[32];

312 
	mbus_öfo
[32];

313 
	mª£rved1
[32];

314 
	mª£rved2
[16];

315 
u32
 
	mn_°©s
;

316 
u32
 
	mã°öfo_Àn
;

317 
u32
 
	mìdump_Àn
;

318 
u32
 
	mªgdump_Àn
;

321 
	sëhtoﬁ_°©s
 {

322 
u32
 
	mcmd
;

323 
u32
 
	mn_°©s
;

324 
u64
 
	md©a
[0];

328 #i‚de‡
ETHTOOL_PHYS_ID


329 
	#ETHTOOL_PHYS_ID
 0x1c

	)

332 #i‚de‡
ETHTOOL_GSTRINGS


333 
	#ETHTOOL_GSTRINGS
 0x1b

	)

334 
	eëhtoﬁ_°rög£t
 {

335 
	mETH_SS_TEST
 = 0,

336 
	mETH_SS_STATS
,

338 
	sëhtoﬁ_g°rögs
 {

339 
u32
 
	mcmd
;

340 
u32
 
	m°rög_£t
;

341 
u32
 
	mÀn
;

342 
u8
 
	md©a
[0];

346 #i‚de‡
ETHTOOL_TEST


347 
	#ETHTOOL_TEST
 0x1a

	)

348 
	eëhtoﬁ_ã°_Êags
 {

349 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

350 
	mETH_TEST_FL_FAILED
 = (1 << 1),

352 
	sëhtoﬁ_ã°
 {

353 
u32
 
	mcmd
;

354 
u32
 
	mÊags
;

355 
u32
 
	mª£rved
;

356 
u32
 
	mÀn
;

357 
u64
 
	md©a
[0];

361 #i‚de‡
ETHTOOL_GEEPROM


362 
	#ETHTOOL_GEEPROM
 0xb

	)

363 #unde‡
ETHTOOL_GREGS


364 
	sëhtoﬁ_ì¥om
 {

365 
u32
 
	mcmd
;

366 
u32
 
	mmagic
;

367 
u32
 
	moff£t
;

368 
u32
 
	mÀn
;

369 
u8
 
	md©a
[0];

372 
	sëhtoﬁ_vÆue
 {

373 
u32
 
	mcmd
;

374 
u32
 
	md©a
;

378 #i‚de‡
ETHTOOL_GLINK


379 
	#ETHTOOL_GLINK
 0xa

	)

382 #i‚de‡
ETHTOOL_GREGS


383 
	#ETHTOOL_GREGS
 0x00000004

	)

384 
	#ëhtoﬁ_ªgs
 
_kc_ëhtoﬁ_ªgs


	)

386 
	s_kc_ëhtoﬁ_ªgs
 {

387 
u32
 
	mcmd
;

388 
u32
 
	mvîsi⁄
;

389 
u32
 
	mÀn
;

390 
u8
 
	md©a
[0];

394 #i‚de‡
ETHTOOL_GMSGLVL


395 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

397 #i‚de‡
ETHTOOL_SMSGLVL


398 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

400 #i‚de‡
ETHTOOL_NWAY_RST


401 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

403 #i‚de‡
ETHTOOL_GLINK


404 
	#ETHTOOL_GLINK
 0x0000000®

	)

406 #i‚de‡
ETHTOOL_GEEPROM


407 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

409 #i‚de‡
ETHTOOL_SEEPROM


410 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

412 #i‚de‡
ETHTOOL_GCOALESCE


413 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

415 
	#ëhtoﬁ_cﬂÀs˚
 
_kc_ëhtoﬁ_cﬂÀs˚


	)

416 
	s_kc_ëhtoﬁ_cﬂÀs˚
 {

417 
u32
 
	mcmd
;

423 
u32
 
	mrx_cﬂÀs˚_u£cs
;

431 
u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

438 
u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

439 
u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

445 
u32
 
	mtx_cﬂÀs˚_u£cs
;

453 
u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

460 
u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

461 
u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

468 
u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

477 
u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

478 
u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

484 
u32
 
	mpkt_øã_low
;

485 
u32
 
	mrx_cﬂÀs˚_u£cs_low
;

486 
u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

487 
u32
 
	mtx_cﬂÀs˚_u£cs_low
;

488 
u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

499 
u32
 
	mpkt_øã_high
;

500 
u32
 
	mrx_cﬂÀs˚_u£cs_high
;

501 
u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

502 
u32
 
	mtx_cﬂÀs˚_u£cs_high
;

503 
u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

508 
u32
 
	møã_ßm∂e_öãrvÆ
;

512 #i‚de‡
ETHTOOL_SCOALESCE


513 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

515 #i‚de‡
ETHTOOL_GRINGPARAM


516 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

518 
	#ëhtoﬁ_rög∑øm
 
_kc_ëhtoﬁ_rög∑øm


	)

519 
	s_kc_ëhtoﬁ_rög∑øm
 {

520 
u32
 
	mcmd
;

526 
u32
 
	mrx_max_≥ndög
;

527 
u32
 
	mrx_möi_max_≥ndög
;

528 
u32
 
	mrx_jumbo_max_≥ndög
;

529 
u32
 
	mtx_max_≥ndög
;

534 
u32
 
	mrx_≥ndög
;

535 
u32
 
	mrx_möi_≥ndög
;

536 
u32
 
	mrx_jumbo_≥ndög
;

537 
u32
 
	mtx_≥ndög
;

541 #i‚de‡
ETHTOOL_SRINGPARAM


542 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

544 #i‚de‡
ETHTOOL_GPAUSEPARAM


545 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

547 
	#ëhtoﬁ_∑u£∑øm
 
_kc_ëhtoﬁ_∑u£∑øm


	)

548 
	s_kc_ëhtoﬁ_∑u£∑øm
 {

549 
u32
 
	mcmd
;

561 
u32
 
	maut⁄eg
;

562 
u32
 
	mrx_∑u£
;

563 
u32
 
	mtx_∑u£
;

567 #i‚de‡
ETHTOOL_SPAUSEPARAM


568 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

570 #i‚de‡
ETHTOOL_GRXCSUM


571 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

573 #i‚de‡
ETHTOOL_SRXCSUM


574 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

576 #i‚de‡
ETHTOOL_GTXCSUM


577 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

579 #i‚de‡
ETHTOOL_STXCSUM


580 
	#ETHTOOL_STXCSUM
 0x00000017

	)

582 #i‚de‡
ETHTOOL_GSG


583 
	#ETHTOOL_GSG
 0x00000018

	)

586 #i‚de‡
ETHTOOL_SSG


587 
	#ETHTOOL_SSG
 0x00000019

	)

590 #i‚de‡
ETHTOOL_TEST


591 
	#ETHTOOL_TEST
 0x0000001®

	)

593 #i‚de‡
ETHTOOL_GSTRINGS


594 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

596 #i‚de‡
ETHTOOL_PHYS_ID


597 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

599 #i‚de‡
ETHTOOL_GSTATS


600 
	#ETHTOOL_GSTATS
 0x0000001d

	)

602 #i‚de‡
ETHTOOL_GTSO


603 
	#ETHTOOL_GTSO
 0x0000001ê

	)

605 #i‚de‡
ETHTOOL_STSO


606 
	#ETHTOOL_STSO
 0x0000001‡

	)

609 #i‚de‡
ETHTOOL_BUSINFO_LEN


610 
	#ETHTOOL_BUSINFO_LEN
 32

	)

615 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,3) )

620 #i‚de‡
pci_£t_dma_mask


621 
	#pci_£t_dma_mask
 
_kc_pci_£t_dma_mask


	)

622 
_kc_pci_£t_dma_mask
(
pci_dev
 *
dev
, 
dma_addr_t
 
mask
);

625 #i‚de‡
pci_ªque°_ªgi⁄s


626 
	#pci_ªque°_ªgi⁄s
 
_kc_pci_ªque°_ªgi⁄s


	)

627 
_kc_pci_ªque°_ªgi⁄s
(
pci_dev
 *
pdev
, *
ªs_«me
);

630 #i‚de‡
pci_ªÀa£_ªgi⁄s


631 
	#pci_ªÀa£_ªgi⁄s
 
_kc_pci_ªÀa£_ªgi⁄s


	)

632 
_kc_pci_ªÀa£_ªgi⁄s
(
pci_dev
 *
pdev
);

638 #i‚de‡
Æloc_ëhîdev


639 
	#Æloc_ëhîdev
 
_kc_Æloc_ëhîdev


	)

640 
√t_devi˚
 * 
_kc_Æloc_ëhîdev
(
sizeof_¥iv
);

643 #i‚de‡
is_vÆid_ëhî_addr


644 
	#is_vÆid_ëhî_addr
 
_kc_is_vÆid_ëhî_addr


	)

645 
_kc_is_vÆid_ëhî_addr
(
u8
 *
addr
);

651 #i‚de‡
INIT_TQUEUE


652 
	#INIT_TQUEUE
(
_tq
, 
_routöe
, 
_d©a
) \

654 
	`INIT_LIST_HEAD
(&(
_tq
)->
li°
); \

655 (
_tq
)->
sync
 = 0; \

656 (
_tq
)->
routöe
 = 
_routöe
; \

657 (
_tq
)->
d©a
 = 
_d©a
; \

658 } 0)

	)

664 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,5) )

666 
	#MII_BMCR
 0x00

	)

667 
	#MII_BMSR
 0x01

	)

668 
	#MII_PHYSID1
 0x02

	)

669 
	#MII_PHYSID2
 0x03

	)

670 
	#MII_ADVERTISE
 0x04

	)

671 
	#MII_LPA
 0x05

	)

672 
	#MII_EXPANSION
 0x06

	)

674 
	#BMCR_FULLDPLX
 0x0100

	)

675 
	#BMCR_ANENABLE
 0x1000

	)

677 
	#BMSR_ERCAP
 0x0001

	)

678 
	#BMSR_ANEGCAPABLE
 0x0008

	)

679 
	#BMSR_10HALF
 0x0800

	)

680 
	#BMSR_10FULL
 0x1000

	)

681 
	#BMSR_100HALF
 0x2000

	)

682 
	#BMSR_100FULL
 0x4000

	)

684 
	#ADVERTISE_CSMA
 0x0001

	)

685 
	#ADVERTISE_10HALF
 0x0020

	)

686 
	#ADVERTISE_10FULL
 0x0040

	)

687 
	#ADVERTISE_100HALF
 0x0080

	)

688 
	#ADVERTISE_100FULL
 0x0100

	)

689 
	#ADVERTISE_ALL
 (
ADVERTISE_10HALF
 | 
ADVERTISE_10FULL
 | \

690 
ADVERTISE_100HALF
 | 
ADVERTISE_100FULL
)

	)

692 
	#EXPANSION_ENABLENPAGE
 0x0004

	)

697 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,6) )

699 #i‚de‡
pci_£t_powî_°©e


700 
	#pci_£t_powî_°©e
 
_kc_pci_£t_powî_°©e


	)

701 
_kc_pci_£t_powî_°©e
(
pci_dev
 *
dev
, 
°©e
);

704 #i‚de‡
pci_íabÀ_wake


705 
	#pci_íabÀ_wake
 
_kc_pci_íabÀ_wake


	)

706 
_kc_pci_íabÀ_wake
(
pci_dev
 *
pdev
, 
u32
 
°©e
, 
íabÀ
);

709 #i‚de‡
pci_dißbÀ_devi˚


710 
	#pci_dißbÀ_devi˚
 
_kc_pci_dißbÀ_devi˚


	)

711 
_kc_pci_dißbÀ_devi˚
(
pci_dev
 *
pdev
);

715 #unde‡
CONFIG_PM


719 #i‚de‡
HAVE_PCI_SET_MWI


720 
	#pci_£t_mwi
(
X
Ë
	`pci_wrôe_c⁄fig_w‹d
(X, \

721 
PCI_COMMAND
, 
ad≠ãr
->
hw
.
bus
.
pci_cmd_w‹d
 | \

722 
PCI_COMMAND_INVALIDATE
);

	)

723 
	#pci_˛ór_mwi
(
X
Ë
	`pci_wrôe_c⁄fig_w‹d
(X, \

724 
PCI_COMMAND
, 
ad≠ãr
->
hw
.
bus
.
pci_cmd_w‹d
 & \

725 ~
PCI_COMMAND_INVALIDATE
);

	)

730 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,10) )

735 #i‚de‡
MODULE_LICENSE


736 
	#MODULE_LICENSE
(
X
)

	)

742 #unde‡
mö


743 
	#mö
(
x
,
y
) ({ \

744 c⁄° 
	`ty≥of
(
x
Ë
_x
 = (x); \

745 c⁄° 
	`ty≥of
(
y
Ë
_y
 = (y); \

746 (Ë(&
_x
 =&
_y
); \

747 
_x
 < 
_y
 ? _x : _y; })

	)

749 #unde‡
max


750 
	#max
(
x
,
y
) ({ \

751 c⁄° 
	`ty≥of
(
x
Ë
_x
 = (x); \

752 c⁄° 
	`ty≥of
(
y
Ë
_y
 = (y); \

753 (Ë(&
_x
 =&
_y
); \

754 
_x
 > 
_y
 ? _x : _y; })

	)

756 
	#mö_t
(
ty≥
,
x
,
y
) ({ \

757 
ty≥
 
_x
 = (
x
); \

758 
ty≥
 
_y
 = (
y
); \

759 
_x
 < 
_y
 ? _x : _y; })

	)

761 
	#max_t
(
ty≥
,
x
,
y
) ({ \

762 
ty≥
 
_x
 = (
x
); \

763 
ty≥
 
_y
 = (
y
); \

764 
_x
 > 
_y
 ? _x : _y; })

	)

766 #i‚de‡
li°_f‹_óch_ß„


767 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

768 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

769 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

777 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,13) )

782 #i‚de‡
vút_to_∑ge


783 
	#vút_to_∑ge
(
v
Ë(
mem_m≠
 + (
	`vút_to_phys
(vË>> 
PAGE_SHIFT
))

	)

786 #i‚de‡
pci_m≠_∑ge


787 
	#pci_m≠_∑ge
 
_kc_pci_m≠_∑ge


	)

788 
u64
 
_kc_pci_m≠_∑ge
(
pci_dev
 *
dev
, 
∑ge
 *∑ge, 
off£t
, 
size_t
 
size
, 
dúe˘i⁄
);

791 #i‚de‡
pci_unm≠_∑ge


792 
	#pci_unm≠_∑ge
 
_kc_pci_unm≠_∑ge


	)

793 
_kc_pci_unm≠_∑ge
(
pci_dev
 *
dev
, 
u64
 
dma_addr
, 
size_t
 
size
, 
dúe˘i⁄
);

798 #unde‡
DMA_32BIT_MASK


799 
	#DMA_32BIT_MASK
 0xffffffff

	)

800 #unde‡
DMA_64BIT_MASK


801 
	#DMA_64BIT_MASK
 0xffffffff

	)

806 #i‚de‡
˝u_ªœx


807 
	#˝u_ªœx
(Ë
	`ªp_n›
()

	)

810 
	svœn_ëhhdr
 {

811 
	mh_de°
[
ETH_ALEN
];

812 
	mh_sour˚
[
ETH_ALEN
];

813 
	mh_vœn_¥Ÿo
;

814 
	mh_vœn_TCI
;

815 
	mh_vœn_íˇpsuœãd_¥Ÿo
;

821 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,17) )

823 #i‚de‡
__devexô_p


824 
	#__devexô_p
(
x
Ë&(x)

	)

831 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,20) )

834 #ifde‡
NAPI


835 #unde‡
NAPI


836 #unde‡
CONFIG_IXGBE_NAPI


843 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,21) )

844 
	#skb_∑d
(
x
,
y
Ë
	`_kc_skb_∑d
(x, y)

	)

845 
sk_buff
 * 
_kc_skb_∑d
(sk_buf‡*
skb
, 
∑d
);

850 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,22) )

851 
	#pci_«me
(
x
Ë((x)->
¶Ÿ_«me
)

	)

857 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,22) )

858 #i‚de‡
IXGBE_NO_LRO


860 
	#IXGBE_NO_LRO


	)

867 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,23) )

869 #ifde‡
NAPI


870 #i‚de‡
√tif_pﬁl_dißbÀ


871 
	#√tif_pﬁl_dißbÀ
(
x
Ë
	`_kc_√tif_pﬁl_dißbÀ
(x)

	)

872 
ölöe
 
	$_kc_√tif_pﬁl_dißbÀ
(
√t_devi˚
 *
√tdev
)

874 
	`ã°_™d_£t_bô
(
__LINK_STATE_RX_SCHED
, &
√tdev
->
°©e
)) {

876 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

877 
	`scheduÀ_timeout
(1);

879 
	}
}

882 #i‚de‡
√tif_pﬁl_íabÀ


883 
	#√tif_pﬁl_íabÀ
(
x
Ë
	`_kc_√tif_pﬁl_íabÀ
(x)

	)

884 
ölöe
 
	$_kc_√tif_pﬁl_íabÀ
(
√t_devi˚
 *
√tdev
)

886 
	`˛ór_bô
(
__LINK_STATE_RX_SCHED
, &
√tdev
->
°©e
);

887 
	}
}

890 #i‚de‡
√tif_tx_dißbÀ


891 
	#√tif_tx_dißbÀ
(
x
Ë
	`_kc_√tif_tx_dißbÀ
(x)

	)

892 
ölöe
 
	$_kc_√tif_tx_dißbÀ
(
√t_devi˚
 *
dev
)

894 
	`•ö_lock_bh
(&
dev
->
xmô_lock
);

895 
	`√tif_°›_queue
(
dev
);

896 
	`•ö_u∆ock_bh
(&
dev
->
xmô_lock
);

897 
	}
}

903 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,25) || \

904 –
	gLINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0) && \

905 
	gLINUX_VERSION_CODE
 < 
	$KERNEL_VERSION
(2,6,4) ) )

906 
	#ETHTOOL_OPS_COMPAT


	)

911 #i‡–
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,5,71) )

912 
	#sk_¥Ÿocﬁ
 
¥Ÿocﬁ


	)

913 
	#pci_gë_devi˚
 
pci_föd_devi˚


	)

918 #i‡–
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,4,27) || \

919 –
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,0) && \

920 
LINUX_VERSION_CODE
 < 
	$KERNEL_VERSION
(2,6,5) ) )

922 #i‚de‡
√tif_msg_öô


923 
	#√tif_msg_öô
 
_kc_√tif_msg_öô


	)

924 
ölöe
 
u32
 
	$_kc_√tif_msg_öô
(
debug_vÆue
, 
deÁu…_msg_íabÀ_bôs
)

927 i‡(
debug_vÆue
 < 0 || debug_vÆuê>((
u32
) * 8))

928  
deÁu…_msg_íabÀ_bôs
;

929 i‡(
debug_vÆue
 == 0)

932  (1 << 
debug_vÆue
) -1;

933 
	}
}

938 #i‡(–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,27) ) || \

939 (–
	gLINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0) ) && \

940 –
	gLINUX_VERSION_CODE
 < 
	$KERNEL_VERSION
(2,6,3) )))

941 
	#√tdev_¥iv
(
x
Ëx->
¥iv


	)

946 #i‡–
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,5,0) )

947 #unde‡
pci_ªgi°î_drivî


948 
	#pci_ªgi°î_drivî
 
pci_moduÀ_öô


	)

950 
	#dev_îr
(
__unu£d_dev
, 
f‹m©
, 
¨g
...) \

951 
	`¥ötk
(
KERN_ERR
 "%s: " 
f‹m©
, 
	`pci_«me
(
ad≠ãr
->
pdev
Ë, ## 
¨g
)

	)

952 
	#dev_w¨n
(
__unu£d_dev
, 
f‹m©
, 
¨g
...) \

953 
	`¥ötk
(
KERN_WARNING
 "%s: " 
f‹m©
, 
	`pci_«me
(
pdev
Ë, ## 
¨g
)

	)

956 
	shli°_hód
 {

957 
hli°_node
 *
fú°
;

960 
	shli°_node
 {

961 
hli°_node
 *
√xt
, **
µªv
;

964 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

966 
hli°_node
 *
√xt
 = 
n
->next;

967 
hli°_node
 **
µªv
 = 
n
->pprev;

968 *
µªv
 = 
√xt
;

969 i‡(
√xt
)

970 
√xt
->
µªv
 =Öprev;

971 
	}
}

973 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

975 
	`__hli°_dñ
(
n
);

976 
n
->
√xt
 = 
NULL
;

977 
n
->
µªv
 = 
NULL
;

978 
	}
}

980 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

982 
hli°_node
 *
fú°
 = 
h
->first;

983 
n
->
√xt
 = 
fú°
;

984 i‡(
fú°
)

985 
fú°
->
µªv
 = &
n
->
√xt
;

986 
h
->
fú°
 = 
n
;

987 
n
->
µªv
 = &
h
->
fú°
;

988 
	}
}

990 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

992  !
h
->
fú°
;

993 
	}
}

994 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

995 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

996 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

997 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

999 
h
->
√xt
 = 
NULL
;

1000 
h
->
µªv
 = 
NULL
;

1001 
	}
}

1002 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,ty≥,membî)

	)

1004 
	#hli°_f‹_óch_íåy
(
ços
, 
pos
, 
hód
, 
membî
) \

1005 
pos
 = (
hód
)->
fú°
; \

1006 
pos
 && ({ 
	`¥e„tch
’os->
√xt
); 1;}) && \

1007 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

1008 
pos
 =Öos->
√xt
)

	)

1010 
	#hli°_f‹_óch_íåy_ß„
(
ços
, 
pos
, 
n
, 
hód
, 
membî
) \

1011 
pos
 = (
hód
)->
fú°
; \

1012 
pos
 && ({ 
n
 =Öos->
√xt
; 1; }) && \

1013 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

1014 
pos
 = 
n
)

	)

1017 
	#dma_Æloc_cohîít
(
dv
, 
sz
, 
dma
, 
gÂ
) \

1018 
	`pci_Æloc_c⁄si°ít
(
pdev
, (
sz
), (
dma
))

	)

1019 
	#dma_‰ì_cohîít
(
dv
, 
sz
, 
addr
, 
dma_addr
) \

1020 
	`pci_‰ì_c⁄si°ít
(
pdev
, (
sz
), (
addr
), (
dma_addr
))

	)

1022 #i‚de‡
might_¶ìp


1023 
	#might_¶ìp
()

	)

1030 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,5,28) )

1032 
ölöe
 
	$_kc_synchr⁄ize_úq
()

1034 
	`synchr⁄ize_úq
();

1035 
	}
}

1036 #unde‡
synchr⁄ize_úq


1037 
	#synchr⁄ize_úq
(
X
Ë
	`_kc_synchr⁄ize_úq
()

	)

1039 
	~<löux/tqueue.h
>

1040 
	#w‹k_°ru˘
 
tq_°ru˘


	)

1041 #unde‡
INIT_WORK


1042 
	#INIT_WORK
(
a
,
b
Ë
	`INIT_TQUEUE
◊,((*)(*))b,a)

	)

1043 #unde‡
c⁄èöî_of


1044 
	#c⁄èöî_of
 
li°_íåy


	)

1045 
	#scheduÀ_w‹k
 
scheduÀ_èsk


	)

1046 
	#Êush_scheduÀd_w‹k
 
Êush_scheduÀd_èsks


	)

1047 
	#ˇn˚l_w‹k_sync
(
x
Ë
	`Êush_scheduÀd_w‹k
()

	)

1053 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0) )

1054 
	#MODULE_INFO
(
vîsi⁄
, 
_vîsi⁄
)

	)

1055 #i‚de‡
CONFIG_E1000_DISABLE_PACKET_SPLIT


1056 
	#CONFIG_E1000_DISABLE_PACKET_SPLIT
 1

	)

1058 
	#CONFIG_IGB_DISABLE_PACKET_SPLIT
 1

	)

1060 
	#pci_£t_c⁄si°ít_dma_mask
(
dev
,
mask
Ë1

	)

1062 #unde‡
dev_put


1063 
	#dev_put
(
dev
Ë
	`__dev_put
(dev)

	)

1065 #i‚de‡
skb_fûl_∑ge_desc


1066 
	#skb_fûl_∑ge_desc
 
_kc_skb_fûl_∑ge_desc


	)

1067 
_kc_skb_fûl_∑ge_desc
(
sk_buff
 *
skb
, 
i
, 
∑ge
 *∑ge, 
off
, 
size
);

1070 #unde‡
ALIGN


1071 
	#ALIGN
(
x
,
a
Ë(((x)+◊)-1)&~(◊)-1))

	)

1073 #i‚de‡
∑ge_cou¡


1074 
	#∑ge_cou¡
(
p
Ë
	`©omic_ªad
(&’)->
cou¡
)

	)

1080 
	~<löux/bô›s.h
>

1081 
	#BITOP_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

1082 #unde‡
föd_√xt_bô


1083 
	#föd_√xt_bô
 
_kc_föd_√xt_bô


	)

1084 
_kc_föd_√xt_bô
(c⁄° *
addr
,

1085 
size
,

1086 
off£t
);

1087 
	#föd_fú°_bô
(
addr
, 
size
Ë
	`föd_√xt_bô
(◊ddr), (size), 0)

	)

1093 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,4) )

1094 
	#MODULE_VERSION
(
_vîsi⁄
Ë
	`MODULE_INFO
(
vîsi⁄
, _vîsi⁄)

	)

1099 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,5) )

1100 
	#pci_dma_sync_sögÀ_f‹_˝u
 
pci_dma_sync_sögÀ


	)

1101 
	#pci_dma_sync_sögÀ_f‹_devi˚
 
pci_dma_sync_sögÀ_f‹_˝u


	)

1105 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,6) )

1107 #unde‡
bôm≠_zîo


1108 
	#bôm≠_zîo
 
_kc_bôm≠_zîo


	)

1109 
ölöe
 
	$_kc_bôm≠_zîo
(*
d°
, 
nbôs
)

1111 i‡(
nbôs
 <
BITS_PER_LONG
)

1112 *
d°
 = 0UL;

1114 
Àn
 = 
	`BITS_TO_LONGS
(
nbôs
) * ();

1115 
	`mem£t
(
d°
, 0, 
Àn
);

1117 
	}
}

1118 
	#øndom_ëhî_addr
 
_kc_øndom_ëhî_addr


	)

1119 
ölöe
 
	$_kc_øndom_ëhî_addr
(
u8
 *
addr
)

1121 
	`gë_øndom_byãs
(
addr
, 
ETH_ALEN
);

1122 
addr
[0] &= 0xfe;

1123 
addr
[0] |= 0x02;

1124 
	}
}

1128 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,7) )

1129 #unde‡
if_mii


1130 
	#if_mii
 
_kc_if_mii


	)

1131 
ölöe
 
mii_io˘l_d©a
 *
	$_kc_if_mii
(
i‰eq
 *
rq
)

1133  (
mii_io˘l_d©a
 *Ë&
rq
->
i‰_i‰u
;

1134 
	}
}

1138 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,8) )

1139 #i‚de‡
PCI_EXP_DEVCTL


1140 
	#PCI_EXP_DEVCTL
 8

	)

1142 #i‚de‡
PCI_EXP_DEVCTL_CERE


1143 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

1145 
	#m¶ìp
(
x
Ëdÿ{ 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
); \

1146 
	`scheduÀ_timeout
((
x
 * 
HZ
)/1000 + 2); \

1147 } 0)

	)

1152 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,9))

1153 
	~<√t/dsfõld.h
>

1154 
	#__iomem


	)

1156 #i‚de‡
kˇŒoc


1157 
	#kˇŒoc
(
n
, 
size
, 
Êags
Ë
	`_kc_kzÆloc
((“Ë* (size)), fœgs)

	)

1158 *
_kc_kzÆloc
(
size_t
 
size
, 
Êags
);

1160 
	#MSEC_PER_SEC
 1000L

	)

1161 
ölöe
 
	$_kc_jiffõs_to_m£cs
(c⁄° 
j
)

1163 #i‡
HZ
 <
MSEC_PER_SEC
 && !(MSEC_PER_SEC % HZ)

1164  (
MSEC_PER_SEC
 / 
HZ
Ë* 
j
;

1165 #ñi‡
HZ
 > 
MSEC_PER_SEC
 && !(HZ % MSEC_PER_SEC)

1166  (
j
 + (
HZ
 / 
MSEC_PER_SEC
) - 1)/(HZ / MSEC_PER_SEC);

1168  (
j
 * 
MSEC_PER_SEC
Ë/ 
HZ
;

1170 
	}
}

1171 
ölöe
 
	$_kc_m£cs_to_jiffõs
(c⁄° 
m
)

1173 i‡(
m
 > 
	`_kc_jiffõs_to_m£cs
(
MAX_JIFFY_OFFSET
))

1174  
MAX_JIFFY_OFFSET
;

1175 #i‡
HZ
 <
MSEC_PER_SEC
 && !(MSEC_PER_SEC % HZ)

1176  (
m
 + (
MSEC_PER_SEC
 / 
HZ
) - 1) / (MSEC_PER_SEC / HZ);

1177 #ñi‡
HZ
 > 
MSEC_PER_SEC
 && !(HZ % MSEC_PER_SEC)

1178  
m
 * (
HZ
 / 
MSEC_PER_SEC
);

1180  (
m
 * 
HZ
 + 
MSEC_PER_SEC
 - 1) / MSEC_PER_SEC;

1182 
	}
}

1184 
	#m¶ìp_öãºu±ibÀ
 
_kc_m¶ìp_öãºu±ibÀ


	)

1185 
ölöe
 
	$_kc_m¶ìp_öãºu±ibÀ
(
m£cs
)

1187 
timeout
 = 
	`_kc_m£cs_to_jiffõs
(
m£cs
) + 1;

1189 
timeout
 && !
	`sig«l_≥ndög
(
cuºít
)) {

1190 
	`__£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

1191 
timeout
 = 
	`scheduÀ_timeout
(timeout);

1193  
	`_kc_jiffõs_to_m£cs
(
timeout
);

1194 
	}
}

1197 
	#BMCR_SPEED1000
 0x0040

	)

1199 #i‚de‡
__À16


1200 
	#__À16
 
u16


	)

1202 #i‚de‡
__À32


1203 
	#__À32
 
u32


	)

1205 #i‚de‡
__À64


1206 
	#__À64
 
u64


	)

1208 #i‚de‡
__be16


1209 
	#__be16
 
u16


	)

1212 #ifde‡
pci_dma_m≠pög_îr‹


1213 #unde‡
pci_dma_m≠pög_îr‹


1215 
	#pci_dma_m≠pög_îr‹
 
_kc_pci_dma_m≠pög_îr‹


	)

1216 
ölöe
 
	$_kc_pci_dma_m≠pög_îr‹
(
pci_dev
 *
pdev
,

1217 
dma_addr_t
 
dma_addr
)

1219  
dma_addr
 == 0;

1220 
	}
}

1224 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,10) )

1225 #ifde‡
moduÀ_∑øm_¨øy_«med


1226 #unde‡
moduÀ_∑øm_¨øy_«med


1227 
	#moduÀ_∑øm_¨øy_«med
(
«me
, 
¨øy
, 
ty≥
, 
nump
, 
≥rm
) \

1228 
k∑øm_¨øy
 
__∑øm_¨r_
##
«me
 \

1229 { 
	`ARRAY_SIZE
(
¨øy
), 
nump
, 
∑øm_£t_
##
ty≥
, 
∑øm_gë_
##type, \

1230 (
¨øy
[0]),árray }; \

1231 
	`moduÀ_∑øm_ˇŒ
(
«me
, 
∑øm_¨øy_£t
, 
∑øm_¨øy_gë
, \

1232 &
__∑øm_¨r_
##
«me
, 
≥rm
)

	)

1237 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11) )

1238 
	#PCI_D0
 0

	)

1239 
	#PCI_D1
 1

	)

1240 
	#PCI_D2
 2

	)

1241 
	#PCI_D3hŸ
 3

	)

1242 
	#PCI_D3cﬁd
 4

	)

1243 
	tpci_powî_t
;

1244 
	#pci_choo£_°©e
(
pdev
,
°©e
Ë
	)
state

1245 
	#PMSG_SUSPEND
 3

	)

1246 
	#PCI_EXP_LNKCTL
 16

	)

1248 #unde‡
NETIF_F_LLTX


1250 #i‚de‡
ARCH_HAS_PREFETCH


1251 
	#¥e„tch
(
X
)

	)

1254 #i‚de‡
NET_IP_ALIGN


1255 
	#NET_IP_ALIGN
 2

	)

1258 
	#KC_USEC_PER_SEC
 1000000L

	)

1259 
	#u£cs_to_jiffõs
 
_kc_u£cs_to_jiffõs


	)

1260 
ölöe
 
	$_kc_jiffõs_to_u£cs
(c⁄° 
j
)

1262 #i‡
HZ
 <
KC_USEC_PER_SEC
 && !(KC_USEC_PER_SEC % HZ)

1263  (
KC_USEC_PER_SEC
 / 
HZ
Ë* 
j
;

1264 #ñi‡
HZ
 > 
KC_USEC_PER_SEC
 && !(HZ % KC_USEC_PER_SEC)

1265  (
j
 + (
HZ
 / 
KC_USEC_PER_SEC
) - 1)/(HZ / KC_USEC_PER_SEC);

1267  (
j
 * 
KC_USEC_PER_SEC
Ë/ 
HZ
;

1269 
	}
}

1270 
ölöe
 
	$_kc_u£cs_to_jiffõs
(c⁄° 
m
)

1272 i‡(
m
 > 
	`_kc_jiffõs_to_u£cs
(
MAX_JIFFY_OFFSET
))

1273  
MAX_JIFFY_OFFSET
;

1274 #i‡
HZ
 <
KC_USEC_PER_SEC
 && !(KC_USEC_PER_SEC % HZ)

1275  (
m
 + (
KC_USEC_PER_SEC
 / 
HZ
) - 1) / (KC_USEC_PER_SEC / HZ);

1276 #ñi‡
HZ
 > 
KC_USEC_PER_SEC
 && !(HZ % KC_USEC_PER_SEC)

1277  
m
 * (
HZ
 / 
KC_USEC_PER_SEC
);

1279  (
m
 * 
HZ
 + 
KC_USEC_PER_SEC
 - 1) / KC_USEC_PER_SEC;

1281 
	}
}

1285 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,12) )

1286 
	~<löux/ªboŸ.h
>

1287 
	#USE_REBOOT_NOTIFIER


	)

1290 
	#MII_CTRL1000
 0x09

	)

1291 
	#MII_STAT1000
 0x0®

	)

1293 
	#ADVERTISE_PAUSE_CAP
 0x0400

	)

1294 
	#ADVERTISE_PAUSE_ASYM
 0x0800

	)

1296 
	#ADVERTISE_1000FULL
 0x0200

	)

1300 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14) )

1301 
	#pm_mesßge_t
 
u32


	)

1302 #i‚de‡
kzÆloc


1303 
	#kzÆloc
 
_kc_kzÆloc


	)

1304 *
_kc_kzÆloc
(
size_t
 
size
, 
Êags
);

1308 
	#MII_ESTATUS
 0x0‡

	)

1310 
	#BMSR_ESTATEN
 0x0100

	)

1312 
	#ESTATUS_1000_TFULL
 0x2000

	)

1313 
	#ESTATUS_1000_THALF
 0x1000

	)

1317 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,15) )

1318 #i‚de‡
devi˚_ˇn_wakeup


1319 
	#devi˚_ˇn_wakeup
(
dev
Ë(1)

	)

1321 #i‚de‡
devi˚_£t_wakeup_íabÀ


1322 
	#devi˚_£t_wakeup_íabÀ
(
dev
, 
vÆ
Ëdo{}0)

	)

1324 #i‚de‡
devi˚_öô_wakeup


1325 
	#devi˚_öô_wakeup
(
dev
,
vÆ
Ëdÿ{} 0)

	)

1330 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,16) )

1331 #unde‡
DEFINE_MUTEX


1332 
	#DEFINE_MUTEX
(
x
Ë
	`DECLARE_MUTEX
(x)

	)

1333 
	#muãx_lock
(
x
Ë
	`down_öãºu±ibÀ
(x)

	)

1334 
	#muãx_u∆ock
(
x
Ë
	`up
(x)

	)

1336 #unde‡
HAVE_PCI_ERS


1338 #unde‡
HAVE_PCI_ERS


1339 
	#HAVE_PCI_ERS


	)

1343 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18) )

1345 #i‚de‡
IRQ_HANDLED


1346 
	#úqªtu∫_t
 

	)

1347 
	#IRQ_HANDLED


	)

1348 
	#IRQ_NONE


	)

1351 #i‚de‡
IRQF_PROBE_SHARED


1352 #ifde‡
SA_PROBEIRQ


1353 
	#IRQF_PROBE_SHARED
 
SA_PROBEIRQ


	)

1355 
	#IRQF_PROBE_SHARED
 0

	)

1359 #i‚de‡
IRQF_SHARED


1360 
	#IRQF_SHARED
 
SA_SHIRQ


	)

1363 #i‚de‡
ARRAY_SIZE


1364 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

1367 #i‚de‡
√tdev_Æloc_skb


1368 
	#√tdev_Æloc_skb
 
_kc_√tdev_Æloc_skb


	)

1369 
sk_buff
 *
_kc_√tdev_Æloc_skb
(
√t_devi˚
 *
dev
,

1370 
Àngth
);

1373 #i‚de‡
skb_is_gso


1374 #ifde‡
NETIF_F_TSO


1375 
	#skb_is_gso
 
_kc_skb_is_gso


	)

1376 
ölöe
 
	$_kc_skb_is_gso
(c⁄° 
sk_buff
 *
skb
)

1378  
	`skb_shöfo
(
skb
)->
gso_size
;

1379 
	}
}

1381 
	#skb_is_gso
(
a
Ë0

	)

1388 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19) )

1390 #i‚de‡
DIV_ROUND_UP


1391 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

1393 #i‡–
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,5,0) )

1394 #i‚de‡
RHEL_RELEASE_CODE


1395 
	#RHEL_RELEASE_CODE
 0

	)

1397 #i‚de‡
RHEL_RELEASE_VERSION


1398 
	#RHEL_RELEASE_VERSION
(
a
,
b
Ë0

	)

1400 #i‚de‡
AX_RELEASE_CODE


1401 
	#AX_RELEASE_CODE
 0

	)

1403 #i‚de‡
AX_RELEASE_VERSION


1404 
	#AX_RELEASE_VERSION
(
a
,
b
Ë0

	)

1406 #i‡(!(–
RHEL_RELEASE_CODE
 > 
RHEL_RELEASE_VERSION
(4,4ËË&& ( RHEL_RELEASE_CODE < RHEL_RELEASE_VERSION(5,0ËË|| ( RHEL_RELEASE_CODE > RHEL_RELEASE_VERSION(5,0ËË|| (
AX_RELEASE_CODE
 > 
AX_RELEASE_VERSION
(3,0))))

1407 
	$úqªtu∫_t
 (*
	túq_h™dÀr_t
)(, *, 
	t±_ªgs
 *);

1409 #i‡(
RHEL_RELEASE_CODE
 < 
	`RHEL_RELEASE_VERSION
(6,0))

1410 #unde‡
CONFIG_INET_LRO


1411 #unde‡
CONFIG_INET_LRO_MODULE


1412 #unde‡
CONFIG_FCOE


1413 #unde‡
CONFIG_FCOE_MODULE


1415 
	$úqªtu∫_t
 (*
	t√w_h™dÀr_t
)(, *);

1416 
ölöe
 
úqªtu∫_t
 
	$_kc_ªque°_úq
(
úq
, 
√w_h™dÀr_t
 
h™dÀr
, 
Êags
, c⁄° *
dev«me
, *
dev_id
)

1418 (*
	túq_h™dÀr_t
)(, *, 
	t±_ªgs
 *);

1419 (*
	t√w_h™dÀr_t
)(, *);

1420 
ölöe
 
	$_kc_ªque°_úq
(
úq
, 
√w_h™dÀr_t
 
h™dÀr
, 
Êags
, c⁄° *
dev«me
, *
dev_id
)

1423 
úq_h™dÀr_t
 
√w_h™dÀr
 = (úq_h™dÀr_tË
h™dÀr
;

1424  
	`ªque°_úq
(
úq
, 
√w_h™dÀr
, 
Êags
, 
dev«me
, 
dev_id
);

1425 
	}
}

1427 #unde‡
ªque°_úq


1428 
	#ªque°_úq
(
úq
, 
h™dÀr
, 
Êags
, 
dev«me
, 
dev_id
Ë
	`_kc_ªque°_úq
((úq), (h™dÀr), (Êags), (dev«me), (dev_id))

	)

1430 
	#úq_h™dÀr_t
 
√w_h™dÀr_t


	)

1432 
	#PCIE_CONFIG_SPACE_LEN
 256

	)

1433 
	#PCI_CONFIG_SPACE_LEN
 64

	)

1434 
	#PCIE_LINK_STATUS
 0x12

	)

1435 
	#pci_c⁄fig_•a˚_ich8œn
(Ëdÿ{} 0)

	)

1436 #unde‡
pci_ßve_°©e


1437 
_kc_pci_ßve_°©e
(
pci_dev
 *);

1438 
	#pci_ßve_°©e
(
pdev
Ë
	`_kc_pci_ßve_°©e
’dev)

	)

1439 #unde‡
pci_ª°‹e_°©e


1440 
_kc_pci_ª°‹e_°©e
(
pci_dev
 *);

1441 
	#pci_ª°‹e_°©e
(
pdev
Ë
	`_kc_pci_ª°‹e_°©e
’dev)

	)

1442 #ifde‡
HAVE_PCI_ERS


1443 #unde‡
‰ì_√tdev


1444 
_kc_‰ì_√tdev
(
√t_devi˚
 *);

1445 
	#‰ì_√tdev
(
√tdev
Ë
	`_kc_‰ì_√tdev
“ëdev)

	)

1447 
ölöe
 
	$pci_íabÀ_pcõ_îr‹_ªp‹tög
(
pci_dev
 *
dev
)

1450 
	}
}

1451 
	#pci_dißbÀ_pcõ_îr‹_ªp‹tög
(
dev
Ëdÿ{} 0)

	)

1452 
	#pci_˛ónup_´r_unc‹ª˘_îr‹_°©us
(
dev
Ëdÿ{} 0)

	)

1454 
	~<löux/´r.h
>

1458 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,20) )

1459 #i‡–
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,5,28) )

1460 #unde‡
INIT_WORK


1461 
	#INIT_WORK
(
_w‹k
, 
_func
) \

1463 
	`INIT_LIST_HEAD
(&(
_w‹k
)->
íåy
); \

1464 (
_w‹k
)->
≥ndög
 = 0; \

1465 (
_w‹k
)->
func
 = ((*)(*))
_func
; \

1466 (
_w‹k
)->
d©a
 = _work; \

1467 
	`öô_timî
(&(
_w‹k
)->
timî
); \

1468 } 0)

	)

1471 #i‚de‡
PCI_VDEVICE


1472 
	#PCI_VDEVICE
(
ví
, 
dev
) \

1473 
PCI_VENDOR_ID_
##
ví
, (
dev
), \

1474 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0

	)

1477 #i‚de‡
round_jiffõs


1478 
	#round_jiffõs
(
x
Ë
	)
x

1481 
	#csum_off£t
 
csum


	)

1486 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,21) )

1487 
	#to_√t_dev
(
˛ass
Ë
	`c⁄èöî_of
(˛ass, 
√t_devi˚
, 
˛ass_dev
)

	)

1488 
	#NETDEV_CLASS_DEV


	)

1489 
	#vœn_group_gë_devi˚
(
vg
, 
id
Ë(vg->
vœn_devi˚s
[id])

	)

1490 
	#vœn_group_£t_devi˚
(
vg
, 
id
, 
dev
Ëi‡(vgËvg->
vœn_devi˚s
[id] = dev;

	)

1491 
	#pci_ch™√l_ofÊöe
(
pdev
Ë’dev->
îr‹_°©e
 && \

1492 
pdev
->
îr‹_°©e
 !
pci_ch™√l_io_n‹mÆ
)

	)

1493 
	#pci_ªque°_£À˘ed_ªgi⁄s
(
pdev
, 
b¨s
, 
«me
) \

1494 
	`pci_ªque°_ªgi⁄s
(
pdev
, 
«me
)

	)

1495 
	#pci_ªÀa£_£À˘ed_ªgi⁄s
(
pdev
, 
b¨s
Ë
	`pci_ªÀa£_ªgi⁄s
’dev);

	)

1499 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22) )

1500 
	#t˝_hdr
(
skb
Ë(skb->
h
.
th
)

	)

1501 
	#t˝_hdæí
(
skb
Ë(skb->
h
.
th
->
doff
 << 2)

	)

1502 
	#skb_å™•‹t_off£t
(
skb
Ë(skb->
h
.
øw
 - skb->
d©a
)

	)

1503 
	#skb_å™•‹t_hódî
(
skb
Ë(skb->
h
.
øw
)

	)

1504 
	#ùv6_hdr
(
skb
Ë(skb->
nh
.
ùv6h
)

	)

1505 
	#ù_hdr
(
skb
Ë(skb->
nh
.
ùh
)

	)

1506 
	#skb_√tw‹k_off£t
(
skb
Ë(skb->
nh
.
øw
 - skb->
d©a
)

	)

1507 
	#skb_√tw‹k_hódî
(
skb
Ë(skb->
nh
.
øw
)

	)

1508 
	#skb_èû_poöãr
(
skb
Ëskb->
èû


	)

1509 
	#skb_c›y_to_löór_d©a_off£t
(
skb
, 
off£t
, 
‰om
, 
Àn
) \

1510 
	`mem˝y
(
skb
->
d©a
 + 
off£t
, 
‰om
, 
Àn
)

	)

1511 
	#skb_√tw‹k_hódî_Àn
(
skb
Ë(skb->
h
.
øw
 - skb->
nh
.øw)

	)

1512 
	#pci_ªgi°î_drivî
 
pci_moduÀ_öô


	)

1513 
	#skb_mac_hódî
(
skb
Ëskb->
mac
.
øw


	)

1515 #ifde‡
NETIF_F_MULTI_QUEUE


1516 #i‚de‡
Æloc_ëhîdev_mq


1517 
	#Æloc_ëhîdev_mq
(
_a
, 
_b
Ë
	`Æloc_ëhîdev
(_a)

	)

1521 #i‚de‡
ETH_FCS_LEN


1522 
	#ETH_FCS_LEN
 4

	)

1524 
	#ˇn˚l_w‹k_sync
(
x
Ë
	`Êush_scheduÀd_w‹k
()

	)

1525 #i‚de‡
udp_hdr


1526 
	#udp_hdr
 
_udp_hdr


	)

1527 
ölöe
 
udphdr
 *
	$_udp_hdr
(c⁄° 
sk_buff
 *
skb
)

1529  (
udphdr
 *)
	`skb_å™•‹t_hódî
(
skb
);

1530 
	}
}

1533 
	#ETH_TYPE_TRANS_SETS_DEV


	)

1537 #i‡–
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,22) )

1538 #unde‡
ETHTOOL_GPERMADDR


1542 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23) )

1543 
	#√tif_subqueue_°›≥d
(
_a
, 
_b
Ë0

	)

1547 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24) )

1549 #i‚de‡
NETIF_F_GRO


1551 
	s«pi_°ru˘
 {

1553 (*
	mpﬁl
)(
	m«pi_°ru˘
 *, );

1554 
√t_devi˚
 *
	mdev
;

1555 
	mweight
;

1559 #ifde‡
NAPI


1560 
__kc_ad≠ãr_˛ón
(
√t_devi˚
 *, *);

1561 
√t_devi˚
 *
«pi_to_pﬁl_dev
(
«pi_°ru˘
 *
«pi
);

1562 
	#«pi_íabÀ
(
«pi
) do { \

1563 
«pi_°ru˘
 *
_«pi
 = (
«pi
); \

1565 i‡(!
_«pi
->
dev
->
if_p‹t
) { \

1566 
	`√tif_pﬁl_íabÀ
(
_«pi
->
dev
); \

1568 ++
_«pi
->
dev
->
if_p‹t
; \

1569 
	`√tif_pﬁl_íabÀ
(
	`«pi_to_pﬁl_dev
(
_«pi
)); \

1570 } 0)

	)

1571 
	#«pi_dißbÀ
(
«pi
) do { \

1572 
«pi_°ru˘
 *
_«pi
 = (
«pi
); \

1573 
	`√tif_pﬁl_dißbÀ
(
	`«pi_to_pﬁl_dev
(
_«pi
)); \

1574 --
_«pi
->
dev
->
if_p‹t
; \

1575 i‡(!
_«pi
->
dev
->
if_p‹t
) \

1576 
	`√tif_pﬁl_dißbÀ
(
_«pi
->
dev
); \

1577 } 0)

	)

1578 
	#√tif_«pi_add
(
_√tdev
, 
_«pi
, 
_pﬁl
, 
_weight
) \

1580 
«pi_°ru˘
 *
__«pi
 = (
_«pi
); \

1581 
√t_devi˚
 *
pﬁl_dev
 = 
	`«pi_to_pﬁl_dev
(
__«pi
); \

1582 
pﬁl_dev
->
pﬁl
 = &(
__kc_ad≠ãr_˛ón
); \

1583 
pﬁl_dev
->
¥iv
 = (
_«pi
); \

1584 
pﬁl_dev
->
weight
 = (
_weight
); \

1585 
	`£t_bô
(
__LINK_STATE_RX_SCHED
, &
pﬁl_dev
->
°©e
); \

1586 
	`£t_bô
(
__LINK_STATE_START
, &
pﬁl_dev
->
°©e
);\

1587 
	`dev_hﬁd
(
pﬁl_dev
); \

1588 
_√tdev
->
pﬁl
 = &(
__kc_ad≠ãr_˛ón
); \

1589 
_√tdev
->
weight
 = (
_weight
); \

1590 
__«pi
->
pﬁl
 = &(
_pﬁl
); \

1591 
__«pi
->
weight
 = (
_weight
); \

1592 
__«pi
->
dev
 = (
_√tdev
); \

1593 
	`£t_bô
(
__LINK_STATE_RX_SCHED
, &(
_√tdev
)->
°©e
); \

1594 } 0)

	)

1595 
	#√tif_«pi_dñ
(
_«pi
) \

1597 
√t_devi˚
 *
pﬁl_dev
 = 
	`«pi_to_pﬁl_dev
(
_«pi
); \

1598 
	`WARN_ON
(!
	`ã°_bô
(
__LINK_STATE_RX_SCHED
, &
pﬁl_dev
->
°©e
)); \

1599 
	`dev_put
(
pﬁl_dev
); \

1600 
	`mem£t
(
pﬁl_dev
, 0, (
√t_devi˚
));\

1601 } 0)

	)

1602 
	#«pi_scheduÀ_¥ï
(
_«pi
) \

1603 (
	`√tif_ru¬ög
((
_«pi
)->
dev
Ë&& 
	`√tif_rx_scheduÀ_¥ï
(
	`«pi_to_pﬁl_dev
(_«pi)))

	)

1604 
	#«pi_scheduÀ
(
_«pi
Ë
	`√tif_rx_scheduÀ
(
	`«pi_to_pﬁl_dev
(_«pi))

	)

1605 
	#__«pi_scheduÀ
(
_«pi
Ë
	`__√tif_rx_scheduÀ
(
	`«pi_to_pﬁl_dev
(_«pi))

	)

1606 
	#«pi_com∂ëe
(
_«pi
Ë
	`√tif_rx_com∂ëe
(
	`«pi_to_pﬁl_dev
(_«pi))

	)

1608 
	#√tif_«pi_add
(
_√tdev
, 
_«pi
, 
_pﬁl
, 
_weight
) \

1610 
«pi_°ru˘
 *
__«pi
 = 
_«pi
; \

1611 
_√tdev
->
pﬁl
 = &(
_pﬁl
); \

1612 
_√tdev
->
weight
 = (
_weight
); \

1613 
__«pi
->
pﬁl
 = &(
_pﬁl
); \

1614 
__«pi
->
weight
 = (
_weight
); \

1615 
__«pi
->
dev
 = (
_√tdev
); \

1616 } 0)

	)

1617 
	#√tif_«pi_dñ
(
_a
Ëdÿ{} 0)

	)

1620 #unde‡
dev_gë_by_«me


1621 
	#dev_gë_by_«me
(
_a
, 
_b
Ë
	`dev_gë_by_«me
(_b)

	)

1622 
	#__√tif_subqueue_°›≥d
(
_a
, 
_b
Ë
	`√tif_subqueue_°›≥d
(_a, _b)

	)

1623 
	#DMA_BIT_MASK
(
n
Ë((“Ë=64Ë? ~0ULL : ((1ULL<<“))-1))

	)

1625 
	#HAVE_ETHTOOL_GET_SSET_COUNT


	)

1626 
	#HAVE_NETDEV_NAPI_LIST


	)

1630 #i‡–
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,24) )

1631 
	~<löux/pm_qos_∑øms.h
>

1635 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25) )

1636 
	#PM_QOS_CPU_DMA_LATENCY
 1

	)

1638 #i‡–
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,18) )

1639 
	~<löux/œãncy.h
>

1640 
	#PM_QOS_DEFAULT_VALUE
 
INFINITE_LATENCY


	)

1641 
	#pm_qos_add_ªquúemít
(
pm_qos_˛ass
, 
«me
, 
vÆue
) \

1642 
	`£t_ac˚±abÀ_œãncy
(
«me
, 
vÆue
)

	)

1643 
	#pm_qos_ªmove_ªquúemít
(
pm_qos_˛ass
, 
«me
) \

1644 
	`ªmove_ac˚±abÀ_œãncy
(
«me
)

	)

1645 
	#pm_qos_upd©e_ªquúemít
(
pm_qos_˛ass
, 
«me
, 
vÆue
) \

1646 
	`modify_ac˚±abÀ_œãncy
(
«me
, 
vÆue
)

	)

1648 
	#PM_QOS_DEFAULT_VALUE
 -1

	)

1649 
	#pm_qos_add_ªquúemít
(
pm_qos_˛ass
, 
«me
, 
vÆue
)

	)

1650 
	#pm_qos_ªmove_ªquúemít
(
pm_qos_˛ass
, 
«me
)

	)

1651 
	#pm_qos_upd©e_ªquúemít
(
pm_qos_˛ass
, 
«me
, 
vÆue
) { \

1652 i‡(
vÆue
 !
PM_QOS_DEFAULT_VALUE
) { \

1653 
	`¥ötk
(
KERN_WARNING
 "%s: unableÅo set PM QoSÑequirement\n", \

1654 
	`pci_«me
(
ad≠ãr
->
pdev
)); \

1656 }

	)

1659 
	#pci_íabÀ_devi˚_mem
(
pdev
Ë
	`pci_íabÀ_devi˚
’dev)

	)

1664 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,26) )

1665 #ifde‡
NETIF_F_TSO


1666 #ifde‡
NETIF_F_TSO6


1667 
	#√tif_£t_gso_max_size
(
_√tdev
, 
size
) \

1669 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) { \

1670 
_√tdev
->
„©uªs
 &~
NETIF_F_TSO
; \

1671 
_√tdev
->
„©uªs
 &~
NETIF_F_TSO6
; \

1673 
_√tdev
->
„©uªs
 |
NETIF_F_TSO
; \

1674 
_√tdev
->
„©uªs
 |
NETIF_F_TSO6
; \

1676 } 0)

	)

1678 
	#√tif_£t_gso_max_size
(
_√tdev
, 
size
) \

1680 i‡(
ad≠ãr
->
Êags
 & 
IXGBE_FLAG_DCB_ENABLED
) \

1681 
_√tdev
->
„©uªs
 &~
NETIF_F_TSO
; \

1683 
_√tdev
->
„©uªs
 |
NETIF_F_TSO
; \

1684 } 0)

	)

1687 
	#√tif_£t_gso_max_size
(
_√tdev
, 
size
Ëdÿ{} 0)

	)

1690 
	~<löux/pci-a•m.h
>

1691 
	#HAVE_NETDEV_VLAN_FEATURES


	)

1694 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,27) )

1695 #i‡–
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,15) )

1696 #i‡(((
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)Ë&& 
deföed
(
CONFIG_PM
)Ë|| ((LINUX_VERSION_CODE < KERNEL_VERSION(2,6,26)Ë&& deföed(
CONFIG_PM_SLEEP
)))

1697 #unde‡
devi˚_£t_wakeup_íabÀ


1698 
	#devi˚_£t_wakeup_íabÀ
(
dev
, 
vÆ
) \

1700 
u16
 
pmc
 = 0; \

1701 
pm
 = 
	`pci_föd_ˇ∑bûôy
(
ad≠ãr
->
pdev
, 
PCI_CAP_ID_PM
); \

1702 i‡(
pm
) { \

1703 
	`pci_ªad_c⁄fig_w‹d
(
ad≠ãr
->
pdev
, 
pm
 + 
PCI_PM_PMC
, \

1704 &
pmc
); \

1706 (
dev
)->
powî
.
ˇn_wakeup
 = !!(
pmc
 >> 11); \

1707 (
dev
)->
powî
.
should_wakeup
 = (
vÆ
 && (
pmc
 >> 11)); \

1708 } 0)

	)

1711 #i‚de‡
√tif_«pi_dñ


1712 
	#√tif_«pi_dñ
(
_a
Ëdÿ{} 0)

	)

1713 #ifde‡
NAPI


1714 #ifde‡
CONFIG_NETPOLL


1715 #unde‡
√tif_«pi_dñ


1716 
	#√tif_«pi_dñ
(
_a
Ë
	`li°_dñ
(&(_a)->
dev_li°
);

	)

1720 #i‚de‡
pci_dma_m≠pög_îr‹


1721 
	#pci_dma_m≠pög_îr‹
(
pdev
, 
dma_addr
Ë
	`pci_dma_m≠pög_îr‹
(dma_addr)

	)

1724 #ifde‡
CONFIG_NETDEVICES_MULTIQUEUE


1725 
	#HAVE_TX_MQ


	)

1728 #ifde‡
HAVE_TX_MQ


1729 
_kc_√tif_tx_°›_Æl_queues
(
√t_devi˚
 *);

1730 
_kc_√tif_tx_wake_Æl_queues
(
√t_devi˚
 *);

1731 
_kc_√tif_tx_°¨t_Æl_queues
(
√t_devi˚
 *);

1732 
	#√tif_tx_°›_Æl_queues
(
a
Ë
	`_kc_√tif_tx_°›_Æl_queues
◊)

	)

1733 
	#√tif_tx_wake_Æl_queues
(
a
Ë
	`_kc_√tif_tx_wake_Æl_queues
◊)

	)

1734 
	#√tif_tx_°¨t_Æl_queues
(
a
Ë
	`_kc_√tif_tx_°¨t_Æl_queues
◊)

	)

1735 #unde‡
√tif_°›_subqueue


1736 
	#√tif_°›_subqueue
(
_ndev
,
_qi
) do { \

1737 i‡(
	`√tif_is_mu…iqueue
((
_ndev
))) \

1738 
	`√tif_°›_subqueue
((
_ndev
), (
_qi
)); \

1740 
	`√tif_°›_queue
((
_ndev
)); \

1741 } 0)

	)

1742 #unde‡
√tif_°¨t_subqueue


1743 
	#√tif_°¨t_subqueue
(
_ndev
,
_qi
) do { \

1744 i‡(
	`√tif_is_mu…iqueue
((
_ndev
))) \

1745 
	`√tif_°¨t_subqueue
((
_ndev
), (
_qi
)); \

1747 
	`√tif_°¨t_queue
((
_ndev
)); \

1748 } 0)

	)

1750 
	#√tif_tx_°›_Æl_queues
(
a
Ë
	`√tif_°›_queue
◊)

	)

1751 
	#√tif_tx_wake_Æl_queues
(
a
Ë
	`√tif_wake_queue
◊)

	)

1752 #i‡–
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,12) )

1753 
	#√tif_tx_°¨t_Æl_queues
(
a
Ë
	`√tif_°¨t_queue
◊)

	)

1755 
	#√tif_tx_°¨t_Æl_queues
(
a
Ëdÿ{} 0)

	)

1757 
	#√tif_°›_subqueue
(
_ndev
,
_qi
Ë
	`√tif_°›_queue
((_ndev))

	)

1758 
	#√tif_°¨t_subqueue
(
_ndev
,
_qi
Ë
	`√tif_°¨t_queue
((_ndev))

	)

1760 #i‚de‡
NETIF_F_MULTI_QUEUE


1761 
	#NETIF_F_MULTI_QUEUE
 0

	)

1762 
	#√tif_is_mu…iqueue
(
a
Ë0

	)

1763 
	#√tif_wake_subqueue
(
a
, 
b
)

	)

1766 
	#HAVE_TX_MQ


	)

1767 
	#HAVE_NETDEV_SELECT_QUEUE


	)

1771 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,28) )

1772 
	#pci_i‹em≠_b¨
(
pdev
, 
b¨
Ë
	`i‹em≠
(
	`pci_ªsour˚_°¨t
(pdev, bar), \

1773 
	`pci_ªsour˚_Àn
(
pdev
, 
b¨
))

	)

1774 
	#pci_wake_‰om_d3
 
_kc_pci_wake_‰om_d3


	)

1775 
	#pci_¥ï¨e_to_¶ìp
 
_kc_pci_¥ï¨e_to_¶ìp


	)

1776 
_kc_pci_wake_‰om_d3
(
pci_dev
 *
dev
, 
boﬁ
 
íabÀ
);

1777 
_kc_pci_¥ï¨e_to_¶ìp
(
pci_dev
 *
dev
);

1781 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,29) )

1782 
	#pci_ªque°_£À˘ed_ªgi⁄s_ex˛usive
(
pdev
, 
b¨s
, 
«me
) \

1783 
	`pci_ªque°_£À˘ed_ªgi⁄s
(
pdev
, 
b¨s
, 
«me
)

	)

1784 
_kc_pci_dißbÀ_lök_°©e
(
pci_dev
 *
dev
, 
°©e
);

1785 
	#pci_dißbÀ_lök_°©e
(
p
, 
s
Ë
	`_kc_pci_dißbÀ_lök_°©e
’, s)

	)

1787 #ifde‡
CONFIG_DCB


1788 
	#HAVE_PFC_MODE_ENABLE


	)

1793 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,30) )

1794 #unde‡
CONFIG_FCOE


1795 #unde‡
CONFIG_FCOE_MODULE


1796 
u16
 
_kc_skb_tx_hash
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
);

1797 
	#skb_tx_hash
(
n
, 
s
Ë
	`_kc_skb_tx_hash
“, s)

	)

1798 
	#skb_ªc‹d_rx_queue
(
a
, 
b
Ëdÿ{} 0)

	)

1800 
	#HAVE_ASPM_QUIRKS


	)

1804 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,31) )

1805 
	#ETH_P_1588
 0x88F7

	)

1807 #i‚de‡
HAVE_NETDEV_STORAGE_ADDRESS


1808 
	#HAVE_NETDEV_STORAGE_ADDRESS


	)

1810 #i‚de‡
HAVE_NETDEV_HW_ADDR


1811 
	#HAVE_NETDEV_HW_ADDR


	)

1816 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,34) )

1817 #i‚de‡
ETH_FLAG_NTUPLE


1818 
	#ETH_FLAG_NTUPLE
 (1 << 27)

	)

1821 #i‚de‡
√tdev_mc_cou¡


1822 
	#√tdev_mc_cou¡
(
dev
Ë((dev)->
mc_cou¡
)

	)

1824 #i‚de‡
√tdev_mc_em±y


1825 
	#√tdev_mc_em±y
(
dev
Ë(
	`√tdev_mc_cou¡
(devË=0)

	)

1827 #i‚de‡
√tdev_f‹_óch_mc_addr


1828 
	#√tdev_f‹_óch_mc_addr
(
m˛i°
, 
dev
) \

1829 
m˛i°
 = 
dev
->
mc_li°
; m˛i°; m˛i° = m˛i°->
√xt
)

	)

1831 #i‚de‡
√tdev_uc_cou¡


1832 
	#√tdev_uc_cou¡
(
dev
Ë((dev)->
uc
.
cou¡
)

	)

1834 #i‚de‡
√tdev_uc_em±y


1835 
	#√tdev_uc_em±y
(
dev
Ë(
	`√tdev_uc_cou¡
(devË=0)

	)

1837 #i‚de‡
√tdev_f‹_óch_uc_addr


1838 
	#√tdev_f‹_óch_uc_addr
(
ha
, 
dev
) \

1839 
	`li°_f‹_óch_íåy
(
ha
, &
dev
->
uc
.
li°
,Üi°)

	)

1841 #i‚de‡
dma_£t_cohîít_mask


1842 
	#dma_£t_cohîít_mask
(
dev
,
mask
) \

1843 
	`pci_£t_c⁄si°ít_dma_mask
(
	`to_pci_dev
(
dev
),(
mask
))

	)

1845 #i‚de‡
pci_dev_run_wake


1846 
	#pci_dev_run_wake
(
pdev
Ë(0)

	)

1850 #i‚de‡
√tdev_«me


1851 
ölöe
 c⁄° *
	$_kc_√tdev_«me
(c⁄° 
√t_devi˚
 *
dev
)

1853 i‡(
dev
->
ªg_°©e
 !
NETREG_REGISTERED
)

1855  
dev
->
«me
;

1856 
	}
}

1857 
	#√tdev_«me
(
√tdev
Ë
	`_kc_√tdev_«me
“ëdev)

	)

1860 #unde‡
√tdev_¥ötk


1861 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0) )

1862 
	#√tdev_¥ötk
(
Àvñ
, 
√tdev
, 
f‹m©
, 
¨gs
...) \

1864 
ad≠ãr_°ru˘
 *
kc_ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);\

1865 
pci_dev
 *
pdev
 = 
kc_ad≠ãr
->pdev; \

1866 
	`¥ötk
("%†%s: " 
f‹m©
, 
Àvñ
, 
	`pci_«me
(
pdev
), \

1867 ##
¨gs
); \

1868 } 0)

	)

1869 #ñi‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,21) )

1870 
	#√tdev_¥ötk
(
Àvñ
, 
√tdev
, 
f‹m©
, 
¨gs
...) \

1872 
ad≠ãr_°ru˘
 *
kc_ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);\

1873 
pci_dev
 *
pdev
 = 
kc_ad≠ãr
->pdev; \

1874 
devi˚
 *
dev
 = 
	`pci_dev_to_dev
(
pdev
); \

1875 
	`dev_¥ötk
(
Àvñ
, 
dev
, "%s: " 
f‹m©
, \

1876 
	`√tdev_«me
(
√tdev
), ##
¨gs
); \

1877 } 0)

	)

1879 
	#√tdev_¥ötk
(
Àvñ
, 
√tdev
, 
f‹m©
, 
¨gs
...) \

1880 
	`dev_¥ötk
(
Àvñ
, (
√tdev
)->
dev
.
∑ª¡
, \

1881 "%s: " 
f‹m©
, \

1882 
	`√tdev_«me
(
√tdev
), ##
¨gs
)

	)

1884 #unde‡
√tdev_emîg


1885 
	#√tdev_emîg
(
dev
, 
f‹m©
, 
¨gs
...) \

1886 
	`√tdev_¥ötk
(
KERN_EMERG
, 
dev
, 
f‹m©
, ##
¨gs
)

	)

1887 #unde‡
√tdev_Æît


1888 
	#√tdev_Æît
(
dev
, 
f‹m©
, 
¨gs
...) \

1889 
	`√tdev_¥ötk
(
KERN_ALERT
, 
dev
, 
f‹m©
, ##
¨gs
)

	)

1890 #unde‡
√tdev_¸ô


1891 
	#√tdev_¸ô
(
dev
, 
f‹m©
, 
¨gs
...) \

1892 
	`√tdev_¥ötk
(
KERN_CRIT
, 
dev
, 
f‹m©
, ##
¨gs
)

	)

1893 #unde‡
√tdev_îr


1894 
	#√tdev_îr
(
dev
, 
f‹m©
, 
¨gs
...) \

1895 
	`√tdev_¥ötk
(
KERN_ERR
, 
dev
, 
f‹m©
, ##
¨gs
)

	)

1896 #unde‡
√tdev_w¨n


1897 
	#√tdev_w¨n
(
dev
, 
f‹m©
, 
¨gs
...) \

1898 
	`√tdev_¥ötk
(
KERN_WARNING
, 
dev
, 
f‹m©
, ##
¨gs
)

	)

1899 #unde‡
√tdev_nŸi˚


1900 
	#√tdev_nŸi˚
(
dev
, 
f‹m©
, 
¨gs
...) \

1901 
	`√tdev_¥ötk
(
KERN_NOTICE
, 
dev
, 
f‹m©
, ##
¨gs
)

	)

1902 #unde‡
√tdev_öfo


1903 
	#√tdev_öfo
(
dev
, 
f‹m©
, 
¨gs
...) \

1904 
	`√tdev_¥ötk
(
KERN_INFO
, 
dev
, 
f‹m©
, ##
¨gs
)

	)

1905 #unde‡
√tdev_dbg


1906 #i‡
deföed
(
DEBUG
)

1907 
	#√tdev_dbg
(
__dev
, 
f‹m©
, 
¨gs
...) \

1908 
	`√tdev_¥ötk
(
KERN_DEBUG
, 
__dev
, 
f‹m©
, ##
¨gs
)

	)

1909 #ñi‡
deföed
(
CONFIG_DYNAMIC_DEBUG
)

1910 
	#√tdev_dbg
(
__dev
, 
f‹m©
, 
¨gs
...) \

1912 
	`dy«mic_dev_dbg
((
__dev
)->
dev
.
∑ª¡
, "%s: " 
f‹m©
, \

1913 
	`√tdev_«me
(
__dev
), ##
¨gs
); \

1914 } 0)

	)

1916 
	#√tdev_dbg
(
__dev
, 
f‹m©
, 
¨gs
...) \

1919 
	`√tdev_¥ötk
(
KERN_DEBUG
, 
__dev
, 
f‹m©
, ##
¨gs
); \

1921 })

	)

1924 #i‡!
deföed
(
CONFIG_PM_OPS
Ë&& deföed(
CONFIG_PM_SLEEP
)

1925 
	#CONFIG_PM_OPS


	)

1927 #ifde‡
SET_SYSTEM_SLEEP_PM_OPS


1928 
	#HAVE_SYSTEM_SLEEP_PM_OPS


	)

1931 
	#HAVE_SYSTEM_SLEEP_PM_OPS


	)

1932 #i‚de‡
HAVE_SET_RX_MODE


1933 
	#HAVE_SET_RX_MODE


	)

1935 
	#HAVE_IPLINK_VF_CONFIG


	)

1938 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36) )

1939 
_kc_ëhtoﬁ_›_£t_Êags
(
√t_devi˚
 *, 
u32
, u32);

1940 
	#ëhtoﬁ_›_£t_Êags
 
_kc_ëhtoﬁ_›_£t_Êags


	)

1942 
	#HAVE_PM_QOS_REQUEST_ACTIVE


	)

1943 
	#HAVE_8021P_SUPPORT


	)

1947 #i‡–
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,37) )

1948 #i‚de‡
VLAN_N_VID


1949 
	#VLAN_N_VID
 
VLAN_GROUP_ARRAY_LEN


	)

1952 
ölöe
 
	$_kc_skb_checksum_n⁄e_as£π
(
sk_buff
 *
skb
)

1954 
	`WARN_ON
(
skb
->
ù_summed
 !
CHECKSUM_NONE
);

1955 
	}
}

1956 
	#skb_checksum_n⁄e_as£π
(
skb
Ë
	`_kc_skb_checksum_n⁄e_as£π
(skb)

	)

	@kcompat_ethtool.c

49 
	~<löux/moduÀ.h
>

50 
	~<löux/ty≥s.h
>

51 
	~<löux/î∫o.h
>

52 
	~<löux/mii.h
>

53 
	~<löux/ëhtoﬁ.h
>

54 
	~<löux/√tdevi˚.h
>

55 
	~<asm/uac˚ss.h
>

57 
	~"kcom∑t.h
"

59 #unde‡
SUPPORTED_10000ba£T_FuŒ


60 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

61 #unde‡
ADVERTISED_10000ba£T_FuŒ


62 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

63 #unde‡
SPEED_10000


64 
	#SPEED_10000
 10000

	)

66 #unde‡
ëhtoﬁ_›s


67 
	#ëhtoﬁ_›s
 
_kc_ëhtoﬁ_›s


	)

69 
	s_kc_ëhtoﬁ_›s
 {

70 (*
	mgë_£âögs
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_cmd
 *);

71 (*
	m£t_£âögs
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_cmd
 *);

72 (*
	mgë_drvöfo
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_drvöfo
 *);

73 (*
	mgë_ªgs_Àn
)(
	m√t_devi˚
 *);

74 (*
	mgë_ªgs
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_ªgs
 *, *);

75 (*
	mgë_wﬁ
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_wﬁöfo
 *);

76 (*
	m£t_wﬁ
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_wﬁöfo
 *);

77 
u32
 (*
gë_msgÀvñ
)(
	m√t_devi˚
 *);

78 (*
	m£t_msgÀvñ
)(
	m√t_devi˚
 *, 
	mu32
);

79 (*
	mnway_ª£t
)(
	m√t_devi˚
 *);

80 
u32
 (*
gë_lök
)(
	m√t_devi˚
 *);

81 (*
	mgë_ì¥om_Àn
)(
	m√t_devi˚
 *);

82 (*
	mgë_ì¥om
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_ì¥om
 *, 
	mu8
 *);

83 (*
	m£t_ì¥om
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_ì¥om
 *, 
	mu8
 *);

84 (*
	mgë_cﬂÀs˚
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_cﬂÀs˚
 *);

85 (*
	m£t_cﬂÀs˚
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_cﬂÀs˚
 *);

86 (*
	mgë_rög∑øm
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_rög∑øm
 *);

87 (*
	m£t_rög∑øm
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_rög∑øm
 *);

88 (*
	mgë_∑u£∑øm
)(
	m√t_devi˚
 *,

89 
	mëhtoﬁ_∑u£∑øm
*);

90 (*
	m£t_∑u£∑øm
)(
	m√t_devi˚
 *,

91 
	mëhtoﬁ_∑u£∑øm
*);

92 
u32
 (*
gë_rx_csum
)(
	m√t_devi˚
 *);

93 (*
	m£t_rx_csum
)(
	m√t_devi˚
 *, 
	mu32
);

94 
u32
 (*
gë_tx_csum
)(
	m√t_devi˚
 *);

95 (*
	m£t_tx_csum
)(
	m√t_devi˚
 *, 
	mu32
);

96 
u32
 (*
gë_sg
)(
	m√t_devi˚
 *);

97 (*
	m£t_sg
)(
	m√t_devi˚
 *, 
	mu32
);

98 
u32
 (*
gë_tso
)(
	m√t_devi˚
 *);

99 (*
	m£t_tso
)(
	m√t_devi˚
 *, 
	mu32
);

100 (*
	m£lf_ã°_cou¡
)(
	m√t_devi˚
 *);

101 (*
	m£lf_ã°
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_ã°
 *, 
	mu64
 *);

102 (*
	mgë_°rögs
)(
	m√t_devi˚
 *, 
u32
 
	m°rög£t
, 
	mu8
 *);

103 (*
	mphys_id
)(
	m√t_devi˚
 *, 
	mu32
);

104 (*
	mgë_°©s_cou¡
)(
	m√t_devi˚
 *);

105 (*
	mgë_ëhtoﬁ_°©s
)(
	m√t_devi˚
 *, 
	mëhtoﬁ_°©s
 *,

106 
	mu64
 *);

107 } *
	gëhtoﬁ_›s
 = 
NULL
;

109 #unde‡
SET_ETHTOOL_OPS


110 
	#SET_ETHTOOL_OPS
(
√tdev
, 
›s
Ë(
ëhtoﬁ_›s
 = (›s))

	)

118 #unde‡
ëhtoﬁ_›_gë_lök


119 
	#ëhtoﬁ_›_gë_lök
 
_kc_ëhtoﬁ_›_gë_lök


	)

120 
u32
 
	$_kc_ëhtoﬁ_›_gë_lök
(
√t_devi˚
 *
dev
)

122  
	`√tif_ˇºõr_ok
(
dev
) ? 1 : 0;

123 
	}
}

125 #unde‡
ëhtoﬁ_›_gë_tx_csum


126 
	#ëhtoﬁ_›_gë_tx_csum
 
_kc_ëhtoﬁ_›_gë_tx_csum


	)

127 
u32
 
	$_kc_ëhtoﬁ_›_gë_tx_csum
(
√t_devi˚
 *
dev
)

129 #ifde‡
NETIF_F_IP_CSUM


130  (
dev
->
„©uªs
 & 
NETIF_F_IP_CSUM
) != 0;

134 
	}
}

136 #unde‡
ëhtoﬁ_›_£t_tx_csum


137 
	#ëhtoﬁ_›_£t_tx_csum
 
_kc_ëhtoﬁ_›_£t_tx_csum


	)

138 
	$_kc_ëhtoﬁ_›_£t_tx_csum
(
√t_devi˚
 *
dev
, 
u32
 
d©a
)

140 #ifde‡
NETIF_F_IP_CSUM


141 i‡(
d©a
)

142 #ifde‡
NETIF_F_IPV6_CSUM


143 
dev
->
„©uªs
 |(
NETIF_F_IP_CSUM
 | 
NETIF_F_IPV6_CSUM
);

145 
dev
->
„©uªs
 &~(
NETIF_F_IP_CSUM
 | 
NETIF_F_IPV6_CSUM
);

147 
dev
->
„©uªs
 |
NETIF_F_IP_CSUM
;

149 
dev
->
„©uªs
 &~
NETIF_F_IP_CSUM
;

154 
	}
}

156 #unde‡
ëhtoﬁ_›_gë_sg


157 
	#ëhtoﬁ_›_gë_sg
 
_kc_ëhtoﬁ_›_gë_sg


	)

158 
u32
 
	$_kc_ëhtoﬁ_›_gë_sg
(
√t_devi˚
 *
dev
)

160 #ifde‡
NETIF_F_SG


161  (
dev
->
„©uªs
 & 
NETIF_F_SG
) != 0;

165 
	}
}

167 #unde‡
ëhtoﬁ_›_£t_sg


168 
	#ëhtoﬁ_›_£t_sg
 
_kc_ëhtoﬁ_›_£t_sg


	)

169 
	$_kc_ëhtoﬁ_›_£t_sg
(
√t_devi˚
 *
dev
, 
u32
 
d©a
)

171 #ifde‡
NETIF_F_SG


172 i‡(
d©a
)

173 
dev
->
„©uªs
 |
NETIF_F_SG
;

175 
dev
->
„©uªs
 &~
NETIF_F_SG
;

179 
	}
}

181 #unde‡
ëhtoﬁ_›_gë_tso


182 
	#ëhtoﬁ_›_gë_tso
 
_kc_ëhtoﬁ_›_gë_tso


	)

183 
u32
 
	$_kc_ëhtoﬁ_›_gë_tso
(
√t_devi˚
 *
dev
)

185 #ifde‡
NETIF_F_TSO


186  (
dev
->
„©uªs
 & 
NETIF_F_TSO
) != 0;

190 
	}
}

192 #unde‡
ëhtoﬁ_›_£t_tso


193 
	#ëhtoﬁ_›_£t_tso
 
_kc_ëhtoﬁ_›_£t_tso


	)

194 
	$_kc_ëhtoﬁ_›_£t_tso
(
√t_devi˚
 *
dev
, 
u32
 
d©a
)

196 #ifde‡
NETIF_F_TSO


197 i‡(
d©a
)

198 
dev
->
„©uªs
 |
NETIF_F_TSO
;

200 
dev
->
„©uªs
 &~
NETIF_F_TSO
;

204 
	}
}

208 
	$ëhtoﬁ_gë_£âögs
(
√t_devi˚
 *
dev
, *
u£øddr
)

210 
ëhtoﬁ_cmd
 
cmd
 = { 
ETHTOOL_GSET
 };

211 
îr
;

213 i‡(!
ëhtoﬁ_›s
->
gë_£âögs
)

214  -
EOPNOTSUPP
;

216 
îr
 = 
ëhtoﬁ_›s
->
	`gë_£âögs
(
dev
, &
cmd
);

217 i‡(
îr
 < 0)

218  
îr
;

220 i‡(
	`c›y_to_u£r
(
u£øddr
, &
cmd
, (cmd)))

221  -
EFAULT
;

223 
	}
}

225 
	$ëhtoﬁ_£t_£âögs
(
√t_devi˚
 *
dev
, *
u£øddr
)

227 
ëhtoﬁ_cmd
 
cmd
;

229 i‡(!
ëhtoﬁ_›s
->
£t_£âögs
)

230  -
EOPNOTSUPP
;

232 i‡(
	`c›y_‰om_u£r
(&
cmd
, 
u£øddr
, (cmd)))

233  -
EFAULT
;

235  
ëhtoﬁ_›s
->
	`£t_£âögs
(
dev
, &
cmd
);

236 
	}
}

238 
	$ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
dev
, *
u£øddr
)

240 
ëhtoﬁ_drvöfo
 
öfo
;

241 
ëhtoﬁ_›s
 *
›s
 =Éthtool_ops;

243 i‡(!
›s
->
gë_drvöfo
)

244  -
EOPNOTSUPP
;

246 
	`mem£t
(&
öfo
, 0, (info));

247 
öfo
.
cmd
 = 
ETHTOOL_GDRVINFO
;

248 
›s
->
	`gë_drvöfo
(
dev
, &
öfo
);

250 i‡(
›s
->
£lf_ã°_cou¡
)

251 
öfo
.
ã°öfo_Àn
 = 
›s
->
	`£lf_ã°_cou¡
(
dev
);

252 i‡(
›s
->
gë_°©s_cou¡
)

253 
öfo
.
n_°©s
 = 
›s
->
	`gë_°©s_cou¡
(
dev
);

254 i‡(
›s
->
gë_ªgs_Àn
)

255 
öfo
.
ªgdump_Àn
 = 
›s
->
	`gë_ªgs_Àn
(
dev
);

256 i‡(
›s
->
gë_ì¥om_Àn
)

257 
öfo
.
ìdump_Àn
 = 
›s
->
	`gë_ì¥om_Àn
(
dev
);

259 i‡(
	`c›y_to_u£r
(
u£øddr
, &
öfo
, (info)))

260  -
EFAULT
;

262 
	}
}

264 
	$ëhtoﬁ_gë_ªgs
(
√t_devi˚
 *
dev
, *
u£øddr
)

266 
ëhtoﬁ_ªgs
 
ªgs
;

267 
ëhtoﬁ_›s
 *
›s
 =Éthtool_ops;

268 *
ªgbuf
;

269 
ªgÀn
, 
ªt
;

271 i‡(!
›s
->
gë_ªgs
 || !›s->
gë_ªgs_Àn
)

272  -
EOPNOTSUPP
;

274 i‡(
	`c›y_‰om_u£r
(&
ªgs
, 
u£øddr
, (regs)))

275  -
EFAULT
;

277 
ªgÀn
 = 
›s
->
	`gë_ªgs_Àn
(
dev
);

278 i‡(
ªgs
.
Àn
 > 
ªgÀn
)

279 
ªgs
.
Àn
 = 
ªgÀn
;

281 
ªgbuf
 = 
	`kmÆloc
(
ªgÀn
, 
GFP_USER
);

282 i‡(!
ªgbuf
)

283  -
ENOMEM
;

285 
›s
->
	`gë_ªgs
(
dev
, &
ªgs
, 
ªgbuf
);

287 
ªt
 = -
EFAULT
;

288 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ªgs
, (regs)))

289 
out
;

290 
u£øddr
 +
	`off£tof
(
ëhtoﬁ_ªgs
, 
d©a
);

291 i‡(
	`c›y_to_u£r
(
u£øddr
, 
ªgbuf
, 
ªgÀn
))

292 
out
;

293 
ªt
 = 0;

295 
out
:

296 
	`k‰ì
(
ªgbuf
);

297  
ªt
;

298 
	}
}

300 
	$ëhtoﬁ_gë_wﬁ
(
√t_devi˚
 *
dev
, *
u£øddr
)

302 
ëhtoﬁ_wﬁöfo
 
wﬁ
 = { 
ETHTOOL_GWOL
 };

304 i‡(!
ëhtoﬁ_›s
->
gë_wﬁ
)

305  -
EOPNOTSUPP
;

307 
ëhtoﬁ_›s
->
	`gë_wﬁ
(
dev
, &
wﬁ
);

309 i‡(
	`c›y_to_u£r
(
u£øddr
, &
wﬁ
, (wol)))

310  -
EFAULT
;

312 
	}
}

314 
	$ëhtoﬁ_£t_wﬁ
(
√t_devi˚
 *
dev
, *
u£øddr
)

316 
ëhtoﬁ_wﬁöfo
 
wﬁ
;

318 i‡(!
ëhtoﬁ_›s
->
£t_wﬁ
)

319  -
EOPNOTSUPP
;

321 i‡(
	`c›y_‰om_u£r
(&
wﬁ
, 
u£øddr
, (wol)))

322  -
EFAULT
;

324  
ëhtoﬁ_›s
->
	`£t_wﬁ
(
dev
, &
wﬁ
);

325 
	}
}

327 
	$ëhtoﬁ_gë_msgÀvñ
(
√t_devi˚
 *
dev
, *
u£øddr
)

329 
ëhtoﬁ_vÆue
 
ed©a
 = { 
ETHTOOL_GMSGLVL
 };

331 i‡(!
ëhtoﬁ_›s
->
gë_msgÀvñ
)

332  -
EOPNOTSUPP
;

334 
ed©a
.
d©a
 = 
ëhtoﬁ_›s
->
	`gë_msgÀvñ
(
dev
);

336 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ed©a
, (edata)))

337  -
EFAULT
;

339 
	}
}

341 
	$ëhtoﬁ_£t_msgÀvñ
(
√t_devi˚
 *
dev
, *
u£øddr
)

343 
ëhtoﬁ_vÆue
 
ed©a
;

345 i‡(!
ëhtoﬁ_›s
->
£t_msgÀvñ
)

346  -
EOPNOTSUPP
;

348 i‡(
	`c›y_‰om_u£r
(&
ed©a
, 
u£øddr
, (edata)))

349  -
EFAULT
;

351 
ëhtoﬁ_›s
->
	`£t_msgÀvñ
(
dev
, 
ed©a
.
d©a
);

353 
	}
}

355 
	$ëhtoﬁ_nway_ª£t
(
√t_devi˚
 *
dev
)

357 i‡(!
ëhtoﬁ_›s
->
nway_ª£t
)

358  -
EOPNOTSUPP
;

360  
ëhtoﬁ_›s
->
	`nway_ª£t
(
dev
);

361 
	}
}

363 
	$ëhtoﬁ_gë_lök
(
√t_devi˚
 *
dev
, *
u£øddr
)

365 
ëhtoﬁ_vÆue
 
ed©a
 = { 
ETHTOOL_GLINK
 };

367 i‡(!
ëhtoﬁ_›s
->
gë_lök
)

368  -
EOPNOTSUPP
;

370 
ed©a
.
d©a
 = 
ëhtoﬁ_›s
->
	`gë_lök
(
dev
);

372 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ed©a
, (edata)))

373  -
EFAULT
;

375 
	}
}

377 
	$ëhtoﬁ_gë_ì¥om
(
√t_devi˚
 *
dev
, *
u£øddr
)

379 
ëhtoﬁ_ì¥om
 
ì¥om
;

380 
ëhtoﬁ_›s
 *
›s
 =Éthtool_ops;

381 
u8
 *
d©a
;

382 
ªt
;

384 i‡(!
›s
->
gë_ì¥om
 || !›s->
gë_ì¥om_Àn
)

385  -
EOPNOTSUPP
;

387 i‡(
	`c›y_‰om_u£r
(&
ì¥om
, 
u£øddr
, (eeprom)))

388  -
EFAULT
;

391 i‡(
ì¥om
.
off£t
 +Éïrom.
Àn
 <=Éeprom.offset)

392  -
EINVAL
;

395 i‡(
ì¥om
.
off£t
 +Éïrom.
Àn
 > 
›s
->
	`gë_ì¥om_Àn
(
dev
))

396  -
EINVAL
;

398 
d©a
 = 
	`kmÆloc
(
ì¥om
.
Àn
, 
GFP_USER
);

399 i‡(!
d©a
)

400  -
ENOMEM
;

402 
ªt
 = -
EFAULT
;

403 i‡(
	`c›y_‰om_u£r
(
d©a
, 
u£øddr
 + (
ì¥om
),Éïrom.
Àn
))

404 
out
;

406 
ªt
 = 
›s
->
	`gë_ì¥om
(
dev
, &
ì¥om
, 
d©a
);

407 i‡(
ªt
)

408 
out
;

410 
ªt
 = -
EFAULT
;

411 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ì¥om
, (eeprom)))

412 
out
;

413 i‡(
	`c›y_to_u£r
(
u£øddr
 + (
ì¥om
), 
d©a
,Éïrom.
Àn
))

414 
out
;

415 
ªt
 = 0;

417 
out
:

418 
	`k‰ì
(
d©a
);

419  
ªt
;

420 
	}
}

422 
	$ëhtoﬁ_£t_ì¥om
(
√t_devi˚
 *
dev
, *
u£øddr
)

424 
ëhtoﬁ_ì¥om
 
ì¥om
;

425 
ëhtoﬁ_›s
 *
›s
 =Éthtool_ops;

426 
u8
 *
d©a
;

427 
ªt
;

429 i‡(!
›s
->
£t_ì¥om
 || !›s->
gë_ì¥om_Àn
)

430  -
EOPNOTSUPP
;

432 i‡(
	`c›y_‰om_u£r
(&
ì¥om
, 
u£øddr
, (eeprom)))

433  -
EFAULT
;

436 i‡(
ì¥om
.
off£t
 +Éïrom.
Àn
 <=Éeprom.offset)

437  -
EINVAL
;

440 i‡(
ì¥om
.
off£t
 +Éïrom.
Àn
 > 
›s
->
	`gë_ì¥om_Àn
(
dev
))

441  -
EINVAL
;

443 
d©a
 = 
	`kmÆloc
(
ì¥om
.
Àn
, 
GFP_USER
);

444 i‡(!
d©a
)

445  -
ENOMEM
;

447 
ªt
 = -
EFAULT
;

448 i‡(
	`c›y_‰om_u£r
(
d©a
, 
u£øddr
 + (
ì¥om
),Éïrom.
Àn
))

449 
out
;

451 
ªt
 = 
›s
->
	`£t_ì¥om
(
dev
, &
ì¥om
, 
d©a
);

452 i‡(
ªt
)

453 
out
;

455 i‡(
	`c›y_to_u£r
(
u£øddr
 + (
ì¥om
), 
d©a
,Éïrom.
Àn
))

456 
ªt
 = -
EFAULT
;

458 
out
:

459 
	`k‰ì
(
d©a
);

460  
ªt
;

461 
	}
}

463 
	$ëhtoﬁ_gë_cﬂÀs˚
(
√t_devi˚
 *
dev
, *
u£øddr
)

465 
ëhtoﬁ_cﬂÀs˚
 
cﬂÀs˚
 = { 
ETHTOOL_GCOALESCE
 };

467 i‡(!
ëhtoﬁ_›s
->
gë_cﬂÀs˚
)

468  -
EOPNOTSUPP
;

470 
ëhtoﬁ_›s
->
	`gë_cﬂÀs˚
(
dev
, &
cﬂÀs˚
);

472 i‡(
	`c›y_to_u£r
(
u£øddr
, &
cﬂÀs˚
, (coalesce)))

473  -
EFAULT
;

475 
	}
}

477 
	$ëhtoﬁ_£t_cﬂÀs˚
(
√t_devi˚
 *
dev
, *
u£øddr
)

479 
ëhtoﬁ_cﬂÀs˚
 
cﬂÀs˚
;

481 i‡(!
ëhtoﬁ_›s
->
gë_cﬂÀs˚
)

482  -
EOPNOTSUPP
;

484 i‡(
	`c›y_‰om_u£r
(&
cﬂÀs˚
, 
u£øddr
, (coalesce)))

485  -
EFAULT
;

487  
ëhtoﬁ_›s
->
	`£t_cﬂÀs˚
(
dev
, &
cﬂÀs˚
);

488 
	}
}

490 
	$ëhtoﬁ_gë_rög∑øm
(
√t_devi˚
 *
dev
, *
u£øddr
)

492 
ëhtoﬁ_rög∑øm
 
rög∑øm
 = { 
ETHTOOL_GRINGPARAM
 };

494 i‡(!
ëhtoﬁ_›s
->
gë_rög∑øm
)

495  -
EOPNOTSUPP
;

497 
ëhtoﬁ_›s
->
	`gë_rög∑øm
(
dev
, &
rög∑øm
);

499 i‡(
	`c›y_to_u£r
(
u£øddr
, &
rög∑øm
, (ringparam)))

500  -
EFAULT
;

502 
	}
}

504 
	$ëhtoﬁ_£t_rög∑øm
(
√t_devi˚
 *
dev
, *
u£øddr
)

506 
ëhtoﬁ_rög∑øm
 
rög∑øm
;

508 i‡(!
ëhtoﬁ_›s
->
gë_rög∑øm
)

509  -
EOPNOTSUPP
;

511 i‡(
	`c›y_‰om_u£r
(&
rög∑øm
, 
u£øddr
, (ringparam)))

512  -
EFAULT
;

514  
ëhtoﬁ_›s
->
	`£t_rög∑øm
(
dev
, &
rög∑øm
);

515 
	}
}

517 
	$ëhtoﬁ_gë_∑u£∑øm
(
√t_devi˚
 *
dev
, *
u£øddr
)

519 
ëhtoﬁ_∑u£∑øm
 
∑u£∑øm
 = { 
ETHTOOL_GPAUSEPARAM
 };

521 i‡(!
ëhtoﬁ_›s
->
gë_∑u£∑øm
)

522  -
EOPNOTSUPP
;

524 
ëhtoﬁ_›s
->
	`gë_∑u£∑øm
(
dev
, &
∑u£∑øm
);

526 i‡(
	`c›y_to_u£r
(
u£øddr
, &
∑u£∑øm
, (pauseparam)))

527  -
EFAULT
;

529 
	}
}

531 
	$ëhtoﬁ_£t_∑u£∑øm
(
√t_devi˚
 *
dev
, *
u£øddr
)

533 
ëhtoﬁ_∑u£∑øm
 
∑u£∑øm
;

535 i‡(!
ëhtoﬁ_›s
->
gë_∑u£∑øm
)

536  -
EOPNOTSUPP
;

538 i‡(
	`c›y_‰om_u£r
(&
∑u£∑øm
, 
u£øddr
, (pauseparam)))

539  -
EFAULT
;

541  
ëhtoﬁ_›s
->
	`£t_∑u£∑øm
(
dev
, &
∑u£∑øm
);

542 
	}
}

544 
	$ëhtoﬁ_gë_rx_csum
(
√t_devi˚
 *
dev
, *
u£øddr
)

546 
ëhtoﬁ_vÆue
 
ed©a
 = { 
ETHTOOL_GRXCSUM
 };

548 i‡(!
ëhtoﬁ_›s
->
gë_rx_csum
)

549  -
EOPNOTSUPP
;

551 
ed©a
.
d©a
 = 
ëhtoﬁ_›s
->
	`gë_rx_csum
(
dev
);

553 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ed©a
, (edata)))

554  -
EFAULT
;

556 
	}
}

558 
	$ëhtoﬁ_£t_rx_csum
(
√t_devi˚
 *
dev
, *
u£øddr
)

560 
ëhtoﬁ_vÆue
 
ed©a
;

562 i‡(!
ëhtoﬁ_›s
->
£t_rx_csum
)

563  -
EOPNOTSUPP
;

565 i‡(
	`c›y_‰om_u£r
(&
ed©a
, 
u£øddr
, (edata)))

566  -
EFAULT
;

568 
ëhtoﬁ_›s
->
	`£t_rx_csum
(
dev
, 
ed©a
.
d©a
);

570 
	}
}

572 
	$ëhtoﬁ_gë_tx_csum
(
√t_devi˚
 *
dev
, *
u£øddr
)

574 
ëhtoﬁ_vÆue
 
ed©a
 = { 
ETHTOOL_GTXCSUM
 };

576 i‡(!
ëhtoﬁ_›s
->
gë_tx_csum
)

577  -
EOPNOTSUPP
;

579 
ed©a
.
d©a
 = 
ëhtoﬁ_›s
->
	`gë_tx_csum
(
dev
);

581 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ed©a
, (edata)))

582  -
EFAULT
;

584 
	}
}

586 
	$ëhtoﬁ_£t_tx_csum
(
√t_devi˚
 *
dev
, *
u£øddr
)

588 
ëhtoﬁ_vÆue
 
ed©a
;

590 i‡(!
ëhtoﬁ_›s
->
£t_tx_csum
)

591  -
EOPNOTSUPP
;

593 i‡(
	`c›y_‰om_u£r
(&
ed©a
, 
u£øddr
, (edata)))

594  -
EFAULT
;

596  
ëhtoﬁ_›s
->
	`£t_tx_csum
(
dev
, 
ed©a
.
d©a
);

597 
	}
}

599 
	$ëhtoﬁ_gë_sg
(
√t_devi˚
 *
dev
, *
u£øddr
)

601 
ëhtoﬁ_vÆue
 
ed©a
 = { 
ETHTOOL_GSG
 };

603 i‡(!
ëhtoﬁ_›s
->
gë_sg
)

604  -
EOPNOTSUPP
;

606 
ed©a
.
d©a
 = 
ëhtoﬁ_›s
->
	`gë_sg
(
dev
);

608 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ed©a
, (edata)))

609  -
EFAULT
;

611 
	}
}

613 
	$ëhtoﬁ_£t_sg
(
√t_devi˚
 *
dev
, *
u£øddr
)

615 
ëhtoﬁ_vÆue
 
ed©a
;

617 i‡(!
ëhtoﬁ_›s
->
£t_sg
)

618  -
EOPNOTSUPP
;

620 i‡(
	`c›y_‰om_u£r
(&
ed©a
, 
u£øddr
, (edata)))

621  -
EFAULT
;

623  
ëhtoﬁ_›s
->
	`£t_sg
(
dev
, 
ed©a
.
d©a
);

624 
	}
}

626 
	$ëhtoﬁ_gë_tso
(
√t_devi˚
 *
dev
, *
u£øddr
)

628 
ëhtoﬁ_vÆue
 
ed©a
 = { 
ETHTOOL_GTSO
 };

630 i‡(!
ëhtoﬁ_›s
->
gë_tso
)

631  -
EOPNOTSUPP
;

633 
ed©a
.
d©a
 = 
ëhtoﬁ_›s
->
	`gë_tso
(
dev
);

635 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ed©a
, (edata)))

636  -
EFAULT
;

638 
	}
}

640 
	$ëhtoﬁ_£t_tso
(
√t_devi˚
 *
dev
, *
u£øddr
)

642 
ëhtoﬁ_vÆue
 
ed©a
;

644 i‡(!
ëhtoﬁ_›s
->
£t_tso
)

645  -
EOPNOTSUPP
;

647 i‡(
	`c›y_‰om_u£r
(&
ed©a
, 
u£øddr
, (edata)))

648  -
EFAULT
;

650  
ëhtoﬁ_›s
->
	`£t_tso
(
dev
, 
ed©a
.
d©a
);

651 
	}
}

653 
	$ëhtoﬁ_£lf_ã°
(
√t_devi˚
 *
dev
, *
u£øddr
)

655 
ëhtoﬁ_ã°
 
ã°
;

656 
ëhtoﬁ_›s
 *
›s
 =Éthtool_ops;

657 
u64
 *
d©a
;

658 
ªt
;

660 i‡(!
›s
->
£lf_ã°
 || !›s->
£lf_ã°_cou¡
)

661  -
EOPNOTSUPP
;

663 i‡(
	`c›y_‰om_u£r
(&
ã°
, 
u£øddr
, (test)))

664  -
EFAULT
;

666 
ã°
.
Àn
 = 
›s
->
	`£lf_ã°_cou¡
(
dev
);

667 
d©a
 = 
	`kmÆloc
(
ã°
.
Àn
 * (
u64
), 
GFP_USER
);

668 i‡(!
d©a
)

669  -
ENOMEM
;

671 
›s
->
	`£lf_ã°
(
dev
, &
ã°
, 
d©a
);

673 
ªt
 = -
EFAULT
;

674 i‡(
	`c›y_to_u£r
(
u£øddr
, &
ã°
, (test)))

675 
out
;

676 
u£øddr
 +(
ã°
);

677 i‡(
	`c›y_to_u£r
(
u£øddr
, 
d©a
, 
ã°
.
Àn
 * (
u64
)))

678 
out
;

679 
ªt
 = 0;

681 
out
:

682 
	`k‰ì
(
d©a
);

683  
ªt
;

684 
	}
}

686 
	$ëhtoﬁ_gë_°rögs
(
√t_devi˚
 *
dev
, *
u£øddr
)

688 
ëhtoﬁ_g°rögs
 
g°rögs
;

689 
ëhtoﬁ_›s
 *
›s
 =Éthtool_ops;

690 
u8
 *
d©a
;

691 
ªt
;

693 i‡(!
›s
->
gë_°rögs
)

694  -
EOPNOTSUPP
;

696 i‡(
	`c›y_‰om_u£r
(&
g°rögs
, 
u£øddr
, (gstrings)))

697  -
EFAULT
;

699 
g°rögs
.
°rög_£t
) {

700 
ETH_SS_TEST
:

701 i‡(!
›s
->
£lf_ã°_cou¡
)

702  -
EOPNOTSUPP
;

703 
g°rögs
.
Àn
 = 
›s
->
	`£lf_ã°_cou¡
(
dev
);

705 
ETH_SS_STATS
:

706 i‡(!
›s
->
gë_°©s_cou¡
)

707  -
EOPNOTSUPP
;

708 
g°rögs
.
Àn
 = 
›s
->
	`gë_°©s_cou¡
(
dev
);

711  -
EINVAL
;

714 
d©a
 = 
	`kmÆloc
(
g°rögs
.
Àn
 * 
ETH_GSTRING_LEN
, 
GFP_USER
);

715 i‡(!
d©a
)

716  -
ENOMEM
;

718 
›s
->
	`gë_°rögs
(
dev
, 
g°rögs
.
°rög_£t
, 
d©a
);

720 
ªt
 = -
EFAULT
;

721 i‡(
	`c›y_to_u£r
(
u£øddr
, &
g°rögs
, (gstrings)))

722 
out
;

723 
u£øddr
 +(
g°rögs
);

724 i‡(
	`c›y_to_u£r
(
u£øddr
, 
d©a
, 
g°rögs
.
Àn
 * 
ETH_GSTRING_LEN
))

725 
out
;

726 
ªt
 = 0;

728 
out
:

729 
	`k‰ì
(
d©a
);

730  
ªt
;

731 
	}
}

733 
	$ëhtoﬁ_phys_id
(
√t_devi˚
 *
dev
, *
u£øddr
)

735 
ëhtoﬁ_vÆue
 
id
;

737 i‡(!
ëhtoﬁ_›s
->
phys_id
)

738  -
EOPNOTSUPP
;

740 i‡(
	`c›y_‰om_u£r
(&
id
, 
u£øddr
, (id)))

741  -
EFAULT
;

743  
ëhtoﬁ_›s
->
	`phys_id
(
dev
, 
id
.
d©a
);

744 
	}
}

746 
	$ëhtoﬁ_gë_°©s
(
√t_devi˚
 *
dev
, *
u£øddr
)

748 
ëhtoﬁ_°©s
 
°©s
;

749 
ëhtoﬁ_›s
 *
›s
 =Éthtool_ops;

750 
u64
 *
d©a
;

751 
ªt
;

753 i‡(!
›s
->
gë_ëhtoﬁ_°©s
 || !›s->
gë_°©s_cou¡
)

754  -
EOPNOTSUPP
;

756 i‡(
	`c›y_‰om_u£r
(&
°©s
, 
u£øddr
, (stats)))

757  -
EFAULT
;

759 
°©s
.
n_°©s
 = 
›s
->
	`gë_°©s_cou¡
(
dev
);

760 
d©a
 = 
	`kmÆloc
(
°©s
.
n_°©s
 * (
u64
), 
GFP_USER
);

761 i‡(!
d©a
)

762  -
ENOMEM
;

764 
›s
->
	`gë_ëhtoﬁ_°©s
(
dev
, &
°©s
, 
d©a
);

766 
ªt
 = -
EFAULT
;

767 i‡(
	`c›y_to_u£r
(
u£øddr
, &
°©s
, (stats)))

768 
out
;

769 
u£øddr
 +(
°©s
);

770 i‡(
	`c›y_to_u£r
(
u£øddr
, 
d©a
, 
°©s
.
n_°©s
 * (
u64
)))

771 
out
;

772 
ªt
 = 0;

774 
out
:

775 
	`k‰ì
(
d©a
);

776  
ªt
;

777 
	}
}

781 
	#ETHTOOL_OPS_COMPAT


	)

782 
	$ëhtoﬁ_io˘l
(
i‰eq
 *
i‰
)

784 
√t_devi˚
 *
dev
 = 
	`__dev_gë_by_«me
(
i‰
->
i‰_«me
);

785 *
u£øddr
 = (*Ë
i‰
->
i‰_d©a
;

786 
u32
 
ëhcmd
;

792 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

793  -
EPERM
;

795 i‡(!
dev
 || !
	`√tif_devi˚_¥e£¡
(dev))

796  -
ENODEV
;

798 i‡(
	`c›y_‰om_u£r
(&
ëhcmd
, 
u£øddr
,  (ethcmd)))

799  -
EFAULT
;

801 
ëhcmd
) {

802 
ETHTOOL_GSET
:

803  
	`ëhtoﬁ_gë_£âögs
(
dev
, 
u£øddr
);

804 
ETHTOOL_SSET
:

805  
	`ëhtoﬁ_£t_£âögs
(
dev
, 
u£øddr
);

806 
ETHTOOL_GDRVINFO
:

807  
	`ëhtoﬁ_gë_drvöfo
(
dev
, 
u£øddr
);

808 
ETHTOOL_GREGS
:

809  
	`ëhtoﬁ_gë_ªgs
(
dev
, 
u£øddr
);

810 
ETHTOOL_GWOL
:

811  
	`ëhtoﬁ_gë_wﬁ
(
dev
, 
u£øddr
);

812 
ETHTOOL_SWOL
:

813  
	`ëhtoﬁ_£t_wﬁ
(
dev
, 
u£øddr
);

814 
ETHTOOL_GMSGLVL
:

815  
	`ëhtoﬁ_gë_msgÀvñ
(
dev
, 
u£øddr
);

816 
ETHTOOL_SMSGLVL
:

817  
	`ëhtoﬁ_£t_msgÀvñ
(
dev
, 
u£øddr
);

818 
ETHTOOL_NWAY_RST
:

819  
	`ëhtoﬁ_nway_ª£t
(
dev
);

820 
ETHTOOL_GLINK
:

821  
	`ëhtoﬁ_gë_lök
(
dev
, 
u£øddr
);

822 
ETHTOOL_GEEPROM
:

823  
	`ëhtoﬁ_gë_ì¥om
(
dev
, 
u£øddr
);

824 
ETHTOOL_SEEPROM
:

825  
	`ëhtoﬁ_£t_ì¥om
(
dev
, 
u£øddr
);

826 
ETHTOOL_GCOALESCE
:

827  
	`ëhtoﬁ_gë_cﬂÀs˚
(
dev
, 
u£øddr
);

828 
ETHTOOL_SCOALESCE
:

829  
	`ëhtoﬁ_£t_cﬂÀs˚
(
dev
, 
u£øddr
);

830 
ETHTOOL_GRINGPARAM
:

831  
	`ëhtoﬁ_gë_rög∑øm
(
dev
, 
u£øddr
);

832 
ETHTOOL_SRINGPARAM
:

833  
	`ëhtoﬁ_£t_rög∑øm
(
dev
, 
u£øddr
);

834 
ETHTOOL_GPAUSEPARAM
:

835  
	`ëhtoﬁ_gë_∑u£∑øm
(
dev
, 
u£øddr
);

836 
ETHTOOL_SPAUSEPARAM
:

837  
	`ëhtoﬁ_£t_∑u£∑øm
(
dev
, 
u£øddr
);

838 
ETHTOOL_GRXCSUM
:

839  
	`ëhtoﬁ_gë_rx_csum
(
dev
, 
u£øddr
);

840 
ETHTOOL_SRXCSUM
:

841  
	`ëhtoﬁ_£t_rx_csum
(
dev
, 
u£øddr
);

842 
ETHTOOL_GTXCSUM
:

843  
	`ëhtoﬁ_gë_tx_csum
(
dev
, 
u£øddr
);

844 
ETHTOOL_STXCSUM
:

845  
	`ëhtoﬁ_£t_tx_csum
(
dev
, 
u£øddr
);

846 
ETHTOOL_GSG
:

847  
	`ëhtoﬁ_gë_sg
(
dev
, 
u£øddr
);

848 
ETHTOOL_SSG
:

849  
	`ëhtoﬁ_£t_sg
(
dev
, 
u£øddr
);

850 
ETHTOOL_GTSO
:

851  
	`ëhtoﬁ_gë_tso
(
dev
, 
u£øddr
);

852 
ETHTOOL_STSO
:

853  
	`ëhtoﬁ_£t_tso
(
dev
, 
u£øddr
);

854 
ETHTOOL_TEST
:

855  
	`ëhtoﬁ_£lf_ã°
(
dev
, 
u£øddr
);

856 
ETHTOOL_GSTRINGS
:

857  
	`ëhtoﬁ_gë_°rögs
(
dev
, 
u£øddr
);

858 
ETHTOOL_PHYS_ID
:

859  
	`ëhtoﬁ_phys_id
(
dev
, 
u£øddr
);

860 
ETHTOOL_GSTATS
:

861  
	`ëhtoﬁ_gë_°©s
(
dev
, 
u£øddr
);

863  -
EOPNOTSUPP
;

866  -
EOPNOTSUPP
;

867 
	}
}

869 
	#mii_if_öfo
 
_kc_mii_if_öfo


	)

870 
	s_kc_mii_if_öfo
 {

871 
	mphy_id
;

872 
	madvîtisög
;

873 
	mphy_id_mask
;

874 
	mªg_num_mask
;

876 
	mfuŒ_du∂ex
 : 1;

877 
	mf‹˚_medü
 : 1;

879 
√t_devi˚
 *
	mdev
;

880 (*
	mmdio_ªad
Ë(
√t_devi˚
 *
	mdev
, 
	mphy_id
, 
	mloˇti⁄
);

881 (*
	mmdio_wrôe
Ë(
√t_devi˚
 *
	mdev
, 
	mphy_id
, 
	mloˇti⁄
, 
	mvÆ
);

884 
	gëhtoﬁ_cmd
;

885 
	gmii_io˘l_d©a
;

887 #unde‡
mii_lök_ok


888 
	#mii_lök_ok
 
_kc_mii_lök_ok


	)

889 #unde‡
mii_nway_ª°¨t


890 
	#mii_nway_ª°¨t
 
_kc_mii_nway_ª°¨t


	)

891 #unde‡
mii_ëhtoﬁ_g£t


892 
	#mii_ëhtoﬁ_g£t
 
_kc_mii_ëhtoﬁ_g£t


	)

893 #unde‡
mii_ëhtoﬁ_s£t


894 
	#mii_ëhtoﬁ_s£t
 
_kc_mii_ëhtoﬁ_s£t


	)

895 #unde‡
mii_check_lök


896 
	#mii_check_lök
 
_kc_mii_check_lök


	)

897 #unde‡
gíîic_mii_io˘l


898 
	#gíîic_mii_io˘l
 
_kc_gíîic_mii_io˘l


	)

899 
_kc_mii_lök_ok
 (
mii_if_öfo
 *
mii
);

900 
_kc_mii_nway_ª°¨t
 (
mii_if_öfo
 *
mii
);

901 
_kc_mii_ëhtoﬁ_g£t
(
mii_if_öfo
 *
mii
,

902 
ëhtoﬁ_cmd
 *
ecmd
);

903 
_kc_mii_ëhtoﬁ_s£t
(
mii_if_öfo
 *
mii
,

904 
ëhtoﬁ_cmd
 *
ecmd
);

905 
_kc_mii_check_lök
 (
mii_if_öfo
 *
mii
);

906 
_kc_gíîic_mii_io˘l
(
mii_if_öfo
 *
mii_if
,

907 
mii_io˘l_d©a
 *
mii_d©a
, 
cmd
,

908 *
du∂ex_ch™ged
);

911 
	s_kc_pci_dev_ext
 {

912 
pci_dev
 *
	mdev
;

913 *
	mpci_drvd©a
;

914 
pci_drivî
 *
	mdrivî
;

917 
	s_kc_√t_dev_ext
 {

918 
√t_devi˚
 *
	mdev
;

919 
	mˇºõr
;

926 
	$_kc_mii_ëhtoﬁ_g£t
(
mii_if_öfo
 *
mii
, 
ëhtoﬁ_cmd
 *
ecmd
)

928 
√t_devi˚
 *
dev
 = 
mii
->dev;

929 
u32
 
advît
, 
bm¸
, 
Õa
, 
√go
;

931 
ecmd
->
suµ‹ãd
 =

932 (
SUPPORTED_10ba£T_HÆf
 | 
SUPPORTED_10ba£T_FuŒ
 |

933 
SUPPORTED_100ba£T_HÆf
 | 
SUPPORTED_100ba£T_FuŒ
 |

934 
SUPPORTED_Aut⁄eg
 | 
SUPPORTED_TP
 | 
SUPPORTED_MII
);

937 
ecmd
->
p‹t
 = 
PORT_MII
;

940 
ecmd
->
å™s˚ivî
 = 
XCVR_INTERNAL
;

943 
ecmd
->
phy_addªss
 = 
mii
->
phy_id
;

945 
ecmd
->
advîtisög
 = 
ADVERTISED_TP
 | 
ADVERTISED_MII
;

946 
advît
 = 
mii
->
	`mdio_ªad
(
dev
, mii->
phy_id
, 
MII_ADVERTISE
);

947 i‡(
advît
 & 
ADVERTISE_10HALF
)

948 
ecmd
->
advîtisög
 |
ADVERTISED_10ba£T_HÆf
;

949 i‡(
advît
 & 
ADVERTISE_10FULL
)

950 
ecmd
->
advîtisög
 |
ADVERTISED_10ba£T_FuŒ
;

951 i‡(
advît
 & 
ADVERTISE_100HALF
)

952 
ecmd
->
advîtisög
 |
ADVERTISED_100ba£T_HÆf
;

953 i‡(
advît
 & 
ADVERTISE_100FULL
)

954 
ecmd
->
advîtisög
 |
ADVERTISED_100ba£T_FuŒ
;

956 
bm¸
 = 
mii
->
	`mdio_ªad
(
dev
, mii->
phy_id
, 
MII_BMCR
);

957 
Õa
 = 
mii
->
	`mdio_ªad
(
dev
, mii->
phy_id
, 
MII_LPA
);

958 i‡(
bm¸
 & 
BMCR_ANENABLE
) {

959 
ecmd
->
advîtisög
 |
ADVERTISED_Aut⁄eg
;

960 
ecmd
->
aut⁄eg
 = 
AUTONEG_ENABLE
;

962 
√go
 = 
	`mii_nway_ªsu…
(
advît
 & 
Õa
);

963 i‡(
√go
 =
LPA_100FULL
 ||Çegÿ=
LPA_100HALF
)

964 
ecmd
->
•ìd
 = 
SPEED_100
;

966 
ecmd
->
•ìd
 = 
SPEED_10
;

967 i‡(
√go
 =
LPA_100FULL
 ||Çegÿ=
LPA_10FULL
) {

968 
ecmd
->
du∂ex
 = 
DUPLEX_FULL
;

969 
mii
->
fuŒ_du∂ex
 = 1;

971 
ecmd
->
du∂ex
 = 
DUPLEX_HALF
;

972 
mii
->
fuŒ_du∂ex
 = 0;

975 
ecmd
->
aut⁄eg
 = 
AUTONEG_DISABLE
;

977 
ecmd
->
•ìd
 = (
bm¸
 & 
BMCR_SPEED100
Ë? 
SPEED_100
 : 
SPEED_10
;

978 
ecmd
->
du∂ex
 = (
bm¸
 & 
BMCR_FULLDPLX
Ë? 
DUPLEX_FULL
 : 
DUPLEX_HALF
;

984 
	}
}

986 
	$_kc_mii_ëhtoﬁ_s£t
(
mii_if_öfo
 *
mii
, 
ëhtoﬁ_cmd
 *
ecmd
)

988 
√t_devi˚
 *
dev
 = 
mii
->dev;

990 i‡(
ecmd
->
•ìd
 !
SPEED_10
 &&Écmd->•ìd !
SPEED_100
)

991  -
EINVAL
;

992 i‡(
ecmd
->
du∂ex
 !
DUPLEX_HALF
 &&Écmd->du∂ex !
DUPLEX_FULL
)

993  -
EINVAL
;

994 i‡(
ecmd
->
p‹t
 !
PORT_MII
)

995  -
EINVAL
;

996 i‡(
ecmd
->
å™s˚ivî
 !
XCVR_INTERNAL
)

997  -
EINVAL
;

998 i‡(
ecmd
->
phy_addªss
 !
mii
->
phy_id
)

999  -
EINVAL
;

1000 i‡(
ecmd
->
aut⁄eg
 !
AUTONEG_DISABLE
 &&Écmd->aut⁄eg !
AUTONEG_ENABLE
)

1001  -
EINVAL
;

1005 i‡(
ecmd
->
aut⁄eg
 =
AUTONEG_ENABLE
) {

1006 
u32
 
bm¸
, 
advît
, 
tmp
;

1008 i‡((
ecmd
->
advîtisög
 & (
ADVERTISED_10ba£T_HÆf
 |

1009 
ADVERTISED_10ba£T_FuŒ
 |

1010 
ADVERTISED_100ba£T_HÆf
 |

1011 
ADVERTISED_100ba£T_FuŒ
)) == 0)

1012  -
EINVAL
;

1015 
advît
 = 
mii
->
	`mdio_ªad
(
dev
, mii->
phy_id
, 
MII_ADVERTISE
);

1016 
tmp
 = 
advît
 & ~(
ADVERTISE_ALL
 | 
ADVERTISE_100BASE4
);

1017 i‡(
ADVERTISED_10ba£T_HÆf
)

1018 
tmp
 |
ADVERTISE_10HALF
;

1019 i‡(
ADVERTISED_10ba£T_FuŒ
)

1020 
tmp
 |
ADVERTISE_10FULL
;

1021 i‡(
ADVERTISED_100ba£T_HÆf
)

1022 
tmp
 |
ADVERTISE_100HALF
;

1023 i‡(
ADVERTISED_100ba£T_FuŒ
)

1024 
tmp
 |
ADVERTISE_100FULL
;

1025 i‡(
advît
 !
tmp
) {

1026 
mii
->
	`mdio_wrôe
(
dev
, mii->
phy_id
, 
MII_ADVERTISE
, 
tmp
);

1027 
mii
->
advîtisög
 = 
tmp
;

1031 
bm¸
 = 
mii
->
	`mdio_ªad
(
dev
, mii->
phy_id
, 
MII_BMCR
);

1032 
bm¸
 |(
BMCR_ANENABLE
 | 
BMCR_ANRESTART
);

1033 
mii
->
	`mdio_wrôe
(
dev
, mii->
phy_id
, 
MII_BMCR
, 
bm¸
);

1035 
mii
->
f‹˚_medü
 = 0;

1037 
u32
 
bm¸
, 
tmp
;

1040 
bm¸
 = 
mii
->
	`mdio_ªad
(
dev
, mii->
phy_id
, 
MII_BMCR
);

1041 
tmp
 = 
bm¸
 & ~(
BMCR_ANENABLE
 | 
BMCR_SPEED100
 | 
BMCR_FULLDPLX
);

1042 i‡(
ecmd
->
•ìd
 =
SPEED_100
)

1043 
tmp
 |
BMCR_SPEED100
;

1044 i‡(
ecmd
->
du∂ex
 =
DUPLEX_FULL
) {

1045 
tmp
 |
BMCR_FULLDPLX
;

1046 
mii
->
fuŒ_du∂ex
 = 1;

1048 
mii
->
fuŒ_du∂ex
 = 0;

1049 i‡(
bm¸
 !
tmp
)

1050 
mii
->
	`mdio_wrôe
(
dev
, mii->
phy_id
, 
MII_BMCR
, 
tmp
);

1052 
mii
->
f‹˚_medü
 = 1;

1055 
	}
}

1057 
	$_kc_mii_lök_ok
 (
mii_if_öfo
 *
mii
)

1060 
mii
->
	`mdio_ªad
(mii->
dev
, mii->
phy_id
, 
MII_BMSR
);

1061 i‡(
mii
->
	`mdio_ªad
(mii->
dev
, mii->
phy_id
, 
MII_BMSR
Ë& 
BMSR_LSTATUS
)

1064 
	}
}

1066 
	$_kc_mii_nway_ª°¨t
 (
mii_if_öfo
 *
mii
)

1068 
bm¸
;

1069 
r
 = -
EINVAL
;

1072 
bm¸
 = 
mii
->
	`mdio_ªad
(mii->
dev
, mii->
phy_id
, 
MII_BMCR
);

1074 i‡(
bm¸
 & 
BMCR_ANENABLE
) {

1075 
bm¸
 |
BMCR_ANRESTART
;

1076 
mii
->
	`mdio_wrôe
(mii->
dev
, mii->
phy_id
, 
MII_BMCR
, 
bm¸
);

1077 
r
 = 0;

1080  
r
;

1081 
	}
}

1083 
	$_kc_mii_check_lök
 (
mii_if_öfo
 *
mii
)

1085 
cur_lök
 = 
	`mii_lök_ok
(
mii
);

1086 
¥ev_lök
 = 
	`√tif_ˇºõr_ok
(
mii
->
dev
);

1088 i‡(
cur_lök
 && !
¥ev_lök
)

1089 
	`√tif_ˇºõr_⁄
(
mii
->
dev
);

1090 i‡(
¥ev_lök
 && !
cur_lök
)

1091 
	`√tif_ˇºõr_off
(
mii
->
dev
);

1092 
	}
}

1094 
	$_kc_gíîic_mii_io˘l
(
mii_if_öfo
 *
mii_if
,

1095 
mii_io˘l_d©a
 *
mii_d©a
, 
cmd
,

1096 *
du∂ex_chg_out
)

1098 
rc
 = 0;

1099 
du∂ex_ch™ged
 = 0;

1101 i‡(
du∂ex_chg_out
)

1102 *
du∂ex_chg_out
 = 0;

1104 
mii_d©a
->
phy_id
 &
mii_if
->
phy_id_mask
;

1105 
mii_d©a
->
ªg_num
 &
mii_if
->
ªg_num_mask
;

1107 
cmd
) {

1108 
SIOCDEVPRIVATE
:

1109 
SIOCGMIIPHY
:

1110 
mii_d©a
->
phy_id
 = 
mii_if
->phy_id;

1113 
SIOCDEVPRIVATE
 + 1:

1114 
SIOCGMIIREG
:

1115 
mii_d©a
->
vÆ_out
 =

1116 
mii_if
->
	`mdio_ªad
(mii_if->
dev
, 
mii_d©a
->
phy_id
,

1117 
mii_d©a
->
ªg_num
);

1120 
SIOCDEVPRIVATE
 + 2:

1121 
SIOCSMIIREG
: {

1122 
u16
 
vÆ
 = 
mii_d©a
->
vÆ_ö
;

1124 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1125  -
EPERM
;

1127 i‡(
mii_d©a
->
phy_id
 =
mii_if
->phy_id) {

1128 
mii_d©a
->
ªg_num
) {

1129 
MII_BMCR
: {

1130 
√w_du∂ex
 = 0;

1131 i‡(
vÆ
 & (
BMCR_RESET
|
BMCR_ANENABLE
))

1132 
mii_if
->
f‹˚_medü
 = 0;

1134 
mii_if
->
f‹˚_medü
 = 1;

1135 i‡(
mii_if
->
f‹˚_medü
 &&

1136 (
vÆ
 & 
BMCR_FULLDPLX
))

1137 
√w_du∂ex
 = 1;

1138 i‡(
mii_if
->
fuŒ_du∂ex
 !
√w_du∂ex
) {

1139 
du∂ex_ch™ged
 = 1;

1140 
mii_if
->
fuŒ_du∂ex
 = 
√w_du∂ex
;

1144 
MII_ADVERTISE
:

1145 
mii_if
->
advîtisög
 = 
vÆ
;

1153 
mii_if
->
	`mdio_wrôe
(mii_if->
dev
, 
mii_d©a
->
phy_id
,

1154 
mii_d©a
->
ªg_num
, 
vÆ
);

1159 
rc
 = -
EOPNOTSUPP
;

1163 i‡((
rc
 =0Ë&& (
du∂ex_chg_out
Ë&& (
du∂ex_ch™ged
))

1164 *
du∂ex_chg_out
 = 1;

1166  
rc
;

1167 
	}
}

	@../include/ps.h

1 #i‚de‡
_PS_H_


2 
	#_PS_H_


	)

4 
	#MAX_DEVICES
 16

	)

5 
	#MAX_RINGS
 64

	)

7 #ifde‡
__KERNEL__


9 
	#PS_MAJOR
 1010

	)

10 
	#PS_NAME
 "∑ckë_shadî"

	)

12 
	#MAX_BUFS
 16

	)

14 
____ˇchñöe_Æig√d
 
	gps_c⁄ãxt
 {

15 
£m≠h‹e
 
	g£m
;

17 
waô_queue_hód_t
 
	gwq
;

19 
	gnum_©èched
;

20 
ixgbe_rög
 *
	grx_rögs
[
MAX_RINGS
];

21 
	g√xt_rög
;

23 
ps_pkt_öfo
 *
	göfo
;

26 
	gnum_bufs
;

27 
	gbuf_ªf˙t
[
MAX_BUFS
];

28 *
	gkbufs
[
MAX_BUFS
];

29 
__u£r
 *
	gubufs
[
MAX_BUFS
];

34 
	~<°rög.h
>

35 
	~<°döt.h
>

36 
	~<löux/ty≥s.h
>

38 
	#__u£r


	)

39 
	#IFNAMSIZ
 16

	)

40 
	#ETH_ALEN
 6

	)

42 
	#ALIGN
(
x
,
a
Ë
	`__ALIGN_MASK
(x,(
	`ty≥of
(x))◊)-1)

	)

43 
	#__ALIGN_MASK
(
x
,
mask
Ë(((x)+(mask))&~(mask))

	)

45 
ölöe
 
__sum16
 
	$ù_Á°_csum
(c⁄° *
ùh
, 
ihl
)

47 
sum
;

49 
	`asm
(" movl (%1), %0\n"

69 : "Ù" (
sum
), "Ù" (
ùh
), "Ù" (
ihl
)

70 : "1" (
ùh
), "2" (
ihl
)

72  (
__sum16
)
sum
;

73 
	}
}

77 
	sps_devi˚
 {

78 
	m«me
[
IFNAMSIZ
];

79 
	mdev_addr
[
ETH_ALEN
];

80 
uöt32_t
 
	mù_addr
;

83 
	mifödex
;

85 
	mnum_rx_queues
;

86 
	mnum_tx_queues
;

89 
	sps_queue
 {

90 
	mifödex
;

91 
	mqidx
;

94 
	#MAX_PACKET_SIZE
 2048

	)

95 
	#MAX_CHUNK_SIZE
 4096

	)

97 
	#PS_CHECKSUM_RX_UNKNOWN
 0

	)

98 
	#PS_CHECKSUM_RX_GOOD
 1

	)

99 
	#PS_CHECKSUM_RX_BAD
 2

	)

101 
	sps_pkt_öfo
 {

102 
uöt32_t
 
	moff£t
;

103 
uöt16_t
 
	mÀn
;

104 
uöt8_t
 
	mchecksum_rx
;

107 
	sps_chunk
 {

109 
	m˙t
;

110 
	mªcv_blockög
;

116 
ps_queue
 
	mqueue
;

118 
ps_pkt_öfo
 
__u£r
 *
	möfo
;

119 
__u£r
 *
	mbuf
;

122 
	sps_∑ckë
 {

123 
	mifödex
;

124 
	mÀn
;

125 
__u£r
 *
	mbuf
;

128 
ölöe
 
	$¥e„tcht0
(*
p
)

130 
asm
 volatile("prefetcht0 (%0)\n\t"

132 : "r" (
p
)

134 
	}
}

136 
ölöe
 
	$¥e„tch¡a
(*
p
)

138 
asm
 volatile("prefetchnta (%0)\n\t"

140 : "r" (
p
)

142 
	}
}

144 
ölöe
 
	$mem˝y_Æig√d
(*
to
, c⁄° *
‰om
, 
size_t
 
Àn
)

146 i‡(
Àn
 <= 64) {

147 
	`mem˝y
(
to
, 
‰om
, 64);

148 } i‡(
Àn
 <= 128) {

149 
	`mem˝y
(
to
, 
‰om
, 64);

150 
	`mem˝y
((
uöt8_t
 *)
to
 + 64, (uöt8_à*)
‰om
 + 64, 64);

152 
size_t
 
off£t
;

154 
off£t
 = 0; off£à< 
Àn
; offset += 64)

155 
	`mem˝y
((
uöt8_t
 *)
to
 + 
off£t
,

156 (
uöt8_t
 *)
‰om
 + 
off£t
,

159 
	}
}

161 
	#PS_IOC_LIST_DEVICES
 0

	)

162 
	#PS_IOC_ATTACH_RX_DEVICE
 1

	)

163 
	#PS_IOC_DETACH_RX_DEVICE
 2

	)

164 
	#PS_IOC_RECV_CHUNK
 3

	)

165 
	#PS_IOC_SEND_CHUNK
 4

	)

166 
	#PS_IOC_SLOWPATH_PACKET
 5

	)

168 #i‚de‡
__KERNEL__


170 
	sps_h™dÀ
 {

171 
	mfd
;

173 
uöt64_t
 
	mrx_chunks
[
MAX_DEVICES
];

174 
uöt64_t
 
	mrx_∑ckës
[
MAX_DEVICES
];

175 
uöt64_t
 
	mrx_byãs
[
MAX_DEVICES
];

177 
uöt64_t
 
	mtx_chunks
[
MAX_DEVICES
];

178 
uöt64_t
 
	mtx_∑ckës
[
MAX_DEVICES
];

179 
uöt64_t
 
	mtx_byãs
[
MAX_DEVICES
];

181 *
	m¥iv
;

184 
ps_li°_devi˚s
(
ps_devi˚
 *
devi˚s
);

185 
ps_öô_h™dÀ
(
ps_h™dÀ
 *
h™dÀ
);

186 
ps_˛o£_h™dÀ
(
ps_h™dÀ
 *
h™dÀ
);

187 
ps_©èch_rx_devi˚
(
ps_h™dÀ
 *
h™dÀ
, 
ps_queue
 *
queue
);

188 
ps_dëach_rx_devi˚
(
ps_h™dÀ
 *
h™dÀ
, 
ps_queue
 *
queue
);

189 
ps_Æloc_chunk
(
ps_h™dÀ
 *
h™dÀ
, 
ps_chunk
 *
chunk
);

190 
ps_‰ì_chunk
(
ps_chunk
 *
chunk
);

191 
ps_ªcv_chunk
(
ps_h™dÀ
 *
h™dÀ
, 
ps_chunk
 *
chunk
);

192 
ps_£nd_chunk
(
ps_h™dÀ
 *
h™dÀ
, 
ps_chunk
 *
chunk
);

193 
ps_¶ow∑th_∑ckë
(
ps_h™dÀ
 *
h™dÀ
, 
ps_∑ckë
 *
∑ckë
);

195 
dump_∑ckë
(*
buf
, 
Àn
);

196 
dump_chunk
(
ps_chunk
 *
chunk
);

198 
gë_num_˝us
();

199 
böd_˝u
(
˝u
);

200 
uöt64_t
 
rdtsc
();

	@/usr/include/linux/dcbnl.h

20 #i‚de‡
__LINUX_DCBNL_H__


21 
	#__LINUX_DCBNL_H__


	)

23 
	~<löux/ty≥s.h
>

25 
	sdcbmsg
 {

26 
__u8
 
	mdcb_Ámûy
;

27 
__u8
 
	mcmd
;

28 
__u16
 
	mdcb_∑d
;

54 
	edcb∆_comm™ds
 {

55 
	mDCB_CMD_UNDEFINED
,

57 
	mDCB_CMD_GSTATE
,

58 
	mDCB_CMD_SSTATE
,

60 
	mDCB_CMD_PGTX_GCFG
,

61 
	mDCB_CMD_PGTX_SCFG
,

62 
	mDCB_CMD_PGRX_GCFG
,

63 
	mDCB_CMD_PGRX_SCFG
,

65 
	mDCB_CMD_PFC_GCFG
,

66 
	mDCB_CMD_PFC_SCFG
,

68 
	mDCB_CMD_SET_ALL
,

70 
	mDCB_CMD_GPERM_HWADDR
,

72 
	mDCB_CMD_GCAP
,

74 
	mDCB_CMD_GNUMTCS
,

75 
	mDCB_CMD_SNUMTCS
,

77 
	mDCB_CMD_PFC_GSTATE
,

78 
	mDCB_CMD_PFC_SSTATE
,

80 
	mDCB_CMD_BCN_GCFG
,

81 
	mDCB_CMD_BCN_SCFG
,

83 
	mDCB_CMD_GAPP
,

84 
	mDCB_CMD_SAPP
,

86 
	m__DCB_CMD_ENUM_MAX
,

87 
	mDCB_CMD_MAX
 = 
__DCB_CMD_ENUM_MAX
 - 1,

106 
	edcb∆_©ås
 {

107 
	mDCB_ATTR_UNDEFINED
,

109 
	mDCB_ATTR_IFNAME
,

110 
	mDCB_ATTR_STATE
,

111 
	mDCB_ATTR_PFC_STATE
,

112 
	mDCB_ATTR_PFC_CFG
,

113 
	mDCB_ATTR_NUM_TC
,

114 
	mDCB_ATTR_PG_CFG
,

115 
	mDCB_ATTR_SET_ALL
,

116 
	mDCB_ATTR_PERM_HWADDR
,

117 
	mDCB_ATTR_CAP
,

118 
	mDCB_ATTR_NUMTCS
,

119 
	mDCB_ATTR_BCN
,

120 
	mDCB_ATTR_APP
,

122 
	m__DCB_ATTR_ENUM_MAX
,

123 
	mDCB_ATTR_MAX
 = 
__DCB_ATTR_ENUM_MAX
 - 1,

142 
	edcb∆_pfc_up_©ås
 {

143 
	mDCB_PFC_UP_ATTR_UNDEFINED
,

145 
	mDCB_PFC_UP_ATTR_0
,

146 
	mDCB_PFC_UP_ATTR_1
,

147 
	mDCB_PFC_UP_ATTR_2
,

148 
	mDCB_PFC_UP_ATTR_3
,

149 
	mDCB_PFC_UP_ATTR_4
,

150 
	mDCB_PFC_UP_ATTR_5
,

151 
	mDCB_PFC_UP_ATTR_6
,

152 
	mDCB_PFC_UP_ATTR_7
,

153 
	mDCB_PFC_UP_ATTR_ALL
,

155 
	m__DCB_PFC_UP_ATTR_ENUM_MAX
,

156 
	mDCB_PFC_UP_ATTR_MAX
 = 
__DCB_PFC_UP_ATTR_ENUM_MAX
 - 1,

185 
	edcb∆_pg_©ås
 {

186 
	mDCB_PG_ATTR_UNDEFINED
,

188 
	mDCB_PG_ATTR_TC_0
,

189 
	mDCB_PG_ATTR_TC_1
,

190 
	mDCB_PG_ATTR_TC_2
,

191 
	mDCB_PG_ATTR_TC_3
,

192 
	mDCB_PG_ATTR_TC_4
,

193 
	mDCB_PG_ATTR_TC_5
,

194 
	mDCB_PG_ATTR_TC_6
,

195 
	mDCB_PG_ATTR_TC_7
,

196 
	mDCB_PG_ATTR_TC_MAX
,

197 
	mDCB_PG_ATTR_TC_ALL
,

199 
	mDCB_PG_ATTR_BW_ID_0
,

200 
	mDCB_PG_ATTR_BW_ID_1
,

201 
	mDCB_PG_ATTR_BW_ID_2
,

202 
	mDCB_PG_ATTR_BW_ID_3
,

203 
	mDCB_PG_ATTR_BW_ID_4
,

204 
	mDCB_PG_ATTR_BW_ID_5
,

205 
	mDCB_PG_ATTR_BW_ID_6
,

206 
	mDCB_PG_ATTR_BW_ID_7
,

207 
	mDCB_PG_ATTR_BW_ID_MAX
,

208 
	mDCB_PG_ATTR_BW_ID_ALL
,

210 
	m__DCB_PG_ATTR_ENUM_MAX
,

211 
	mDCB_PG_ATTR_MAX
 = 
__DCB_PG_ATTR_ENUM_MAX
 - 1,

234 
	edcb∆_tc_©ås
 {

235 
	mDCB_TC_ATTR_PARAM_UNDEFINED
,

237 
	mDCB_TC_ATTR_PARAM_PGID
,

238 
	mDCB_TC_ATTR_PARAM_UP_MAPPING
,

239 
	mDCB_TC_ATTR_PARAM_STRICT_PRIO
,

240 
	mDCB_TC_ATTR_PARAM_BW_PCT
,

241 
	mDCB_TC_ATTR_PARAM_ALL
,

243 
	m__DCB_TC_ATTR_PARAM_ENUM_MAX
,

244 
	mDCB_TC_ATTR_PARAM_MAX
 = 
__DCB_TC_ATTR_PARAM_ENUM_MAX
 - 1,

266 
	edcb∆_ˇp_©ås
 {

267 
	mDCB_CAP_ATTR_UNDEFINED
,

268 
	mDCB_CAP_ATTR_ALL
,

269 
	mDCB_CAP_ATTR_PG
,

270 
	mDCB_CAP_ATTR_PFC
,

271 
	mDCB_CAP_ATTR_UP2TC
,

272 
	mDCB_CAP_ATTR_PG_TCS
,

273 
	mDCB_CAP_ATTR_PFC_TCS
,

274 
	mDCB_CAP_ATTR_GSP
,

275 
	mDCB_CAP_ATTR_BCN
,

277 
	m__DCB_CAP_ATTR_ENUM_MAX
,

278 
	mDCB_CAP_ATTR_MAX
 = 
__DCB_CAP_ATTR_ENUM_MAX
 - 1,

291 
	edcb∆_numtcs_©ås
 {

292 
	mDCB_NUMTCS_ATTR_UNDEFINED
,

293 
	mDCB_NUMTCS_ATTR_ALL
,

294 
	mDCB_NUMTCS_ATTR_PG
,

295 
	mDCB_NUMTCS_ATTR_PFC
,

297 
	m__DCB_NUMTCS_ATTR_ENUM_MAX
,

298 
	mDCB_NUMTCS_ATTR_MAX
 = 
__DCB_NUMTCS_ATTR_ENUM_MAX
 - 1,

301 
	edcb∆_b˙_©ås
{

302 
	mDCB_BCN_ATTR_UNDEFINED
 = 0,

304 
	mDCB_BCN_ATTR_RP_0
,

305 
	mDCB_BCN_ATTR_RP_1
,

306 
	mDCB_BCN_ATTR_RP_2
,

307 
	mDCB_BCN_ATTR_RP_3
,

308 
	mDCB_BCN_ATTR_RP_4
,

309 
	mDCB_BCN_ATTR_RP_5
,

310 
	mDCB_BCN_ATTR_RP_6
,

311 
	mDCB_BCN_ATTR_RP_7
,

312 
	mDCB_BCN_ATTR_RP_ALL
,

314 
	mDCB_BCN_ATTR_BCNA_0
,

315 
	mDCB_BCN_ATTR_BCNA_1
,

316 
	mDCB_BCN_ATTR_ALPHA
,

317 
	mDCB_BCN_ATTR_BETA
,

318 
	mDCB_BCN_ATTR_GD
,

319 
	mDCB_BCN_ATTR_GI
,

320 
	mDCB_BCN_ATTR_TMAX
,

321 
	mDCB_BCN_ATTR_TD
,

322 
	mDCB_BCN_ATTR_RMIN
,

323 
	mDCB_BCN_ATTR_W
,

324 
	mDCB_BCN_ATTR_RD
,

325 
	mDCB_BCN_ATTR_RU
,

326 
	mDCB_BCN_ATTR_WRTT
,

327 
	mDCB_BCN_ATTR_RI
,

328 
	mDCB_BCN_ATTR_C
,

329 
	mDCB_BCN_ATTR_ALL
,

331 
	m__DCB_BCN_ATTR_ENUM_MAX
,

332 
	mDCB_BCN_ATTR_MAX
 = 
__DCB_BCN_ATTR_ENUM_MAX
 - 1,

341 
	edcb_gíîÆ_©å_vÆues
 {

342 
	mDCB_ATTR_VALUE_UNDEFINED
 = 0xff

345 
	#DCB_APP_IDTYPE_ETHTYPE
 0x00

	)

346 
	#DCB_APP_IDTYPE_PORTNUM
 0x01

	)

347 
	edcb∆_≠p_©ås
 {

348 
	mDCB_APP_ATTR_UNDEFINED
,

350 
	mDCB_APP_ATTR_IDTYPE
,

351 
	mDCB_APP_ATTR_ID
,

352 
	mDCB_APP_ATTR_PRIORITY
,

354 
	m__DCB_APP_ATTR_ENUM_MAX
,

355 
	mDCB_APP_ATTR_MAX
 = 
__DCB_APP_ATTR_ENUM_MAX
 - 1,

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/ty≥s.h
>

19 
	sëhtoﬁ_cmd
 {

20 
__u32
 
	mcmd
;

21 
__u32
 
	msuµ‹ãd
;

22 
__u32
 
	madvîtisög
;

23 
__u16
 
	m•ìd
;

24 
__u8
 
	mdu∂ex
;

25 
__u8
 
	mp‹t
;

26 
__u8
 
	mphy_addªss
;

27 
__u8
 
	må™s˚ivî
;

28 
__u8
 
	maut⁄eg
;

29 
__u8
 
	mmdio_suµ‹t
;

30 
__u32
 
	mmaxtxpkt
;

31 
__u32
 
	mmaxrxpkt
;

32 
__u16
 
	m•ìd_hi
;

33 
__u8
 
	mëh_ç_mdix
;

34 
__u8
 
	mª£rved2
;

35 
__u32
 
	mÕ_advîtisög
;

36 
__u32
 
	mª£rved
[2];

39 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

40 
__u32
 
•ìd
)

43 
ï
->
•ìd
 = (
__u16
)speed;

44 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

45 
	}
}

47 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(
ëhtoﬁ_cmd
 *
ï
)

49  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

50 
	}
}

52 
	#ETHTOOL_FWVERS_LEN
 32

	)

53 
	#ETHTOOL_BUSINFO_LEN
 32

	)

55 
	sëhtoﬁ_drvöfo
 {

56 
__u32
 
	mcmd
;

57 
	mdrivî
[32];

58 
	mvîsi⁄
[32];

59 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

60 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

62 
	mª£rved1
[32];

63 
	mª£rved2
[12];

71 
__u32
 
	mn_¥iv_Êags
;

72 
__u32
 
	mn_°©s
;

73 
__u32
 
	mã°öfo_Àn
;

74 
__u32
 
	mìdump_Àn
;

75 
__u32
 
	mªgdump_Àn
;

78 
	#SOPASS_MAX
 6

	)

80 
	sëhtoﬁ_wﬁöfo
 {

81 
__u32
 
	mcmd
;

82 
__u32
 
	msuµ‹ãd
;

83 
__u32
 
	mwﬁ›ts
;

84 
__u8
 
	ms›ass
[
SOPASS_MAX
];

88 
	sëhtoﬁ_vÆue
 {

89 
__u32
 
	mcmd
;

90 
__u32
 
	md©a
;

94 
	sëhtoﬁ_ªgs
 {

95 
__u32
 
	mcmd
;

96 
__u32
 
	mvîsi⁄
;

97 
__u32
 
	mÀn
;

98 
__u8
 
	md©a
[0];

102 
	sëhtoﬁ_ì¥om
 {

103 
__u32
 
	mcmd
;

104 
__u32
 
	mmagic
;

105 
__u32
 
	moff£t
;

106 
__u32
 
	mÀn
;

107 
__u8
 
	md©a
[0];

111 
	sëhtoﬁ_cﬂÀs˚
 {

112 
__u32
 
	mcmd
;

118 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

126 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

133 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

134 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

140 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

148 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

155 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

156 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

163 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

172 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

173 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

179 
__u32
 
	mpkt_øã_low
;

180 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

181 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

182 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

183 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

194 
__u32
 
	mpkt_øã_high
;

195 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

196 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

197 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

198 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

203 
__u32
 
	møã_ßm∂e_öãrvÆ
;

207 
	sëhtoﬁ_rög∑øm
 {

208 
__u32
 
	mcmd
;

214 
__u32
 
	mrx_max_≥ndög
;

215 
__u32
 
	mrx_möi_max_≥ndög
;

216 
__u32
 
	mrx_jumbo_max_≥ndög
;

217 
__u32
 
	mtx_max_≥ndög
;

222 
__u32
 
	mrx_≥ndög
;

223 
__u32
 
	mrx_möi_≥ndög
;

224 
__u32
 
	mrx_jumbo_≥ndög
;

225 
__u32
 
	mtx_≥ndög
;

229 
	sëhtoﬁ_∑u£∑øm
 {

230 
__u32
 
	mcmd
;

242 
__u32
 
	maut⁄eg
;

243 
__u32
 
	mrx_∑u£
;

244 
__u32
 
	mtx_∑u£
;

247 
	#ETH_GSTRING_LEN
 32

	)

248 
	eëhtoﬁ_°rög£t
 {

249 
	mETH_SS_TEST
 = 0,

250 
	mETH_SS_STATS
,

251 
	mETH_SS_PRIV_FLAGS
,

252 
	mETH_SS_NTUPLE_FILTERS
,

256 
	sëhtoﬁ_g°rögs
 {

257 
__u32
 
	mcmd
;

258 
__u32
 
	m°rög_£t
;

259 
__u32
 
	mÀn
;

260 
__u8
 
	md©a
[0];

263 
	sëhtoﬁ_s£t_öfo
 {

264 
__u32
 
	mcmd
;

265 
__u32
 
	mª£rved
;

266 
__u64
 
	ms£t_mask
;

268 
__u32
 
	md©a
[0];

274 
	eëhtoﬁ_ã°_Êags
 {

275 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

276 
	mETH_TEST_FL_FAILED
 = (1 << 1),

280 
	sëhtoﬁ_ã°
 {

281 
__u32
 
	mcmd
;

282 
__u32
 
	mÊags
;

283 
__u32
 
	mª£rved
;

284 
__u32
 
	mÀn
;

285 
__u64
 
	md©a
[0];

289 
	sëhtoﬁ_°©s
 {

290 
__u32
 
	mcmd
;

291 
__u32
 
	mn_°©s
;

292 
__u64
 
	md©a
[0];

295 
	sëhtoﬁ_≥rm_addr
 {

296 
__u32
 
	mcmd
;

297 
__u32
 
	msize
;

298 
__u8
 
	md©a
[0];

310 
	eëhtoﬁ_Êags
 {

311 
	mETH_FLAG_LRO
 = (1 << 15),

312 
	mETH_FLAG_NTUPLE
 = (1 << 27),

313 
	mETH_FLAG_RXHASH
 = (1 << 28),

321 
	sëhtoﬁ_t˝ù4_•ec
 {

322 
__be32
 
	mù4§c
;

323 
__be32
 
	mù4d°
;

324 
__be16
 
	mp§c
;

325 
__be16
 
	mpd°
;

326 
__u8
 
	mtos
;

329 
	sëhtoﬁ_ah_e•ù4_•ec
 {

330 
__be32
 
	mù4§c
;

331 
__be32
 
	mù4d°
;

332 
__be32
 
	m•i
;

333 
__u8
 
	mtos
;

336 
	sëhtoﬁ_øwù4_•ec
 {

337 
__be32
 
	mù4§c
;

338 
__be32
 
	mù4d°
;

339 
__u8
 
	mhd©a
[64];

342 
	sëhtoﬁ_ëhî_•ec
 {

343 
__be16
 
	mëhî_ty≥
;

344 
__u8
 
	m‰ame_size
;

345 
__u8
 
	me‰ame
[16];

348 
	#ETH_RX_NFC_IP4
 1

	)

349 
	#ETH_RX_NFC_IP6
 2

	)

351 
	sëhtoﬁ_u§ù4_•ec
 {

352 
__be32
 
	mù4§c
;

353 
__be32
 
	mù4d°
;

354 
__be32
 
	ml4_4_byãs
;

355 
__u8
 
	mtos
;

356 
__u8
 
	mù_vî
;

357 
__u8
 
	m¥Ÿo
;

360 
	sëhtoﬁ_rx_Êow_•ec
 {

361 
__u32
 
	mÊow_ty≥
;

363 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

364 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

365 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

366 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

367 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

368 
ëhtoﬁ_øwù4_•ec
 
	møw_ù4_•ec
;

369 
ëhtoﬁ_ëhî_•ec
 
	mëhî_•ec
;

370 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

371 
__u8
 
	mhd©a
[64];

372 } 
	mh_u
, 
	mm_u
;

373 
__u64
 
	mrög_cookõ
;

374 
__u32
 
	mloˇti⁄
;

377 
	sëhtoﬁ_rxnfc
 {

378 
__u32
 
	mcmd
;

379 
__u32
 
	mÊow_ty≥
;

381 
__u64
 
	md©a
;

384 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

385 
__u32
 
	mruÀ_˙t
;

386 
__u32
 
	mruÀ_locs
[0];

389 
	sëhtoﬁ_rx_¡u∂e_Êow_•ec
 {

390 
__u32
 
	mÊow_ty≥
;

392 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

393 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

394 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

395 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

396 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

397 
ëhtoﬁ_øwù4_•ec
 
	møw_ù4_•ec
;

398 
ëhtoﬁ_ëhî_•ec
 
	mëhî_•ec
;

399 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

400 
__u8
 
	mhd©a
[64];

401 } 
	mh_u
, 
	mm_u
;

403 
__u16
 
	mvœn_èg
;

404 
__u16
 
	mvœn_èg_mask
;

405 
__u64
 
	md©a
;

406 
__u64
 
	md©a_mask
;

409 
__s32
 
	ma˘i⁄
;

410 
	#ETHTOOL_RXNTUPLE_ACTION_DROP
 -1

	)

413 
	sëhtoﬁ_rx_¡u∂e
 {

414 
__u32
 
	mcmd
;

415 
ëhtoﬁ_rx_¡u∂e_Êow_•ec
 
	mfs
;

418 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

419 
	eëhtoﬁ_Êash_›_ty≥
 {

420 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

424 
	sëhtoﬁ_Êash
 {

425 
__u32
 
	mcmd
;

426 
__u32
 
	mªgi⁄
;

427 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

432 
	#ETHTOOL_GSET
 0x00000001

	)

433 
	#ETHTOOL_SSET
 0x00000002

	)

434 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

435 
	#ETHTOOL_GREGS
 0x00000004

	)

436 
	#ETHTOOL_GWOL
 0x00000005

	)

437 
	#ETHTOOL_SWOL
 0x00000006

	)

438 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

439 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

440 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

441 
	#ETHTOOL_GLINK
 0x0000000®

	)

442 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

443 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

444 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

445 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

446 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

447 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

448 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

449 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

450 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

451 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

452 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

453 
	#ETHTOOL_STXCSUM
 0x00000017

	)

454 
	#ETHTOOL_GSG
 0x00000018

	)

456 
	#ETHTOOL_SSG
 0x00000019

	)

458 
	#ETHTOOL_TEST
 0x0000001®

	)

459 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

460 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

461 
	#ETHTOOL_GSTATS
 0x0000001d

	)

462 
	#ETHTOOL_GTSO
 0x0000001ê

	)

463 
	#ETHTOOL_STSO
 0x0000001‡

	)

464 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

465 
	#ETHTOOL_GUFO
 0x00000021

	)

466 
	#ETHTOOL_SUFO
 0x00000022

	)

467 
	#ETHTOOL_GGSO
 0x00000023

	)

468 
	#ETHTOOL_SGSO
 0x00000024

	)

469 
	#ETHTOOL_GFLAGS
 0x00000025

	)

470 
	#ETHTOOL_SFLAGS
 0x00000026

	)

471 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

472 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

474 
	#ETHTOOL_GRXFH
 0x00000029

	)

475 
	#ETHTOOL_SRXFH
 0x0000002®

	)

476 
	#ETHTOOL_GGRO
 0x0000002b

	)

477 
	#ETHTOOL_SGRO
 0x0000002¯

	)

478 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

479 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

480 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

481 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

482 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

483 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

484 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

485 
	#ETHTOOL_RESET
 0x00000034

	)

486 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

487 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

488 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

491 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

492 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

495 
	#SUPPORTED_10ba£T_HÆf
 (1 << 0)

	)

496 
	#SUPPORTED_10ba£T_FuŒ
 (1 << 1)

	)

497 
	#SUPPORTED_100ba£T_HÆf
 (1 << 2)

	)

498 
	#SUPPORTED_100ba£T_FuŒ
 (1 << 3)

	)

499 
	#SUPPORTED_1000ba£T_HÆf
 (1 << 4)

	)

500 
	#SUPPORTED_1000ba£T_FuŒ
 (1 << 5)

	)

501 
	#SUPPORTED_Aut⁄eg
 (1 << 6)

	)

502 
	#SUPPORTED_TP
 (1 << 7)

	)

503 
	#SUPPORTED_AUI
 (1 << 8)

	)

504 
	#SUPPORTED_MII
 (1 << 9)

	)

505 
	#SUPPORTED_FIBRE
 (1 << 10)

	)

506 
	#SUPPORTED_BNC
 (1 << 11)

	)

507 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

508 
	#SUPPORTED_Pau£
 (1 << 13)

	)

509 
	#SUPPORTED_Asym_Pau£
 (1 << 14)

	)

510 
	#SUPPORTED_2500ba£X_FuŒ
 (1 << 15)

	)

511 
	#SUPPORTED_Back∂™e
 (1 << 16)

	)

512 
	#SUPPORTED_1000ba£KX_FuŒ
 (1 << 17)

	)

513 
	#SUPPORTED_10000ba£KX4_FuŒ
 (1 << 18)

	)

514 
	#SUPPORTED_10000ba£KR_FuŒ
 (1 << 19)

	)

515 
	#SUPPORTED_10000ba£R_FEC
 (1 << 20)

	)

518 
	#ADVERTISED_10ba£T_HÆf
 (1 << 0)

	)

519 
	#ADVERTISED_10ba£T_FuŒ
 (1 << 1)

	)

520 
	#ADVERTISED_100ba£T_HÆf
 (1 << 2)

	)

521 
	#ADVERTISED_100ba£T_FuŒ
 (1 << 3)

	)

522 
	#ADVERTISED_1000ba£T_HÆf
 (1 << 4)

	)

523 
	#ADVERTISED_1000ba£T_FuŒ
 (1 << 5)

	)

524 
	#ADVERTISED_Aut⁄eg
 (1 << 6)

	)

525 
	#ADVERTISED_TP
 (1 << 7)

	)

526 
	#ADVERTISED_AUI
 (1 << 8)

	)

527 
	#ADVERTISED_MII
 (1 << 9)

	)

528 
	#ADVERTISED_FIBRE
 (1 << 10)

	)

529 
	#ADVERTISED_BNC
 (1 << 11)

	)

530 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

531 
	#ADVERTISED_Pau£
 (1 << 13)

	)

532 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

533 
	#ADVERTISED_2500ba£X_FuŒ
 (1 << 15)

	)

534 
	#ADVERTISED_Back∂™e
 (1 << 16)

	)

535 
	#ADVERTISED_1000ba£KX_FuŒ
 (1 << 17)

	)

536 
	#ADVERTISED_10000ba£KX4_FuŒ
 (1 << 18)

	)

537 
	#ADVERTISED_10000ba£KR_FuŒ
 (1 << 19)

	)

538 
	#ADVERTISED_10000ba£R_FEC
 (1 << 20)

	)

547 
	#SPEED_10
 10

	)

548 
	#SPEED_100
 100

	)

549 
	#SPEED_1000
 1000

	)

550 
	#SPEED_2500
 2500

	)

551 
	#SPEED_10000
 10000

	)

554 
	#DUPLEX_HALF
 0x00

	)

555 
	#DUPLEX_FULL
 0x01

	)

558 
	#PORT_TP
 0x00

	)

559 
	#PORT_AUI
 0x01

	)

560 
	#PORT_MII
 0x02

	)

561 
	#PORT_FIBRE
 0x03

	)

562 
	#PORT_BNC
 0x04

	)

563 
	#PORT_DA
 0x05

	)

564 
	#PORT_NONE
 0xef

	)

565 
	#PORT_OTHER
 0xff

	)

568 
	#XCVR_INTERNAL
 0x00

	)

569 
	#XCVR_EXTERNAL
 0x01

	)

570 
	#XCVR_DUMMY1
 0x02

	)

571 
	#XCVR_DUMMY2
 0x03

	)

572 
	#XCVR_DUMMY3
 0x04

	)

577 
	#AUTONEG_DISABLE
 0x00

	)

578 
	#AUTONEG_ENABLE
 0x01

	)

581 
	#ETH_TP_MDI_INVALID
 0x00

	)

582 
	#ETH_TP_MDI
 0x01

	)

583 
	#ETH_TP_MDI_X
 0x02

	)

586 
	#WAKE_PHY
 (1 << 0)

	)

587 
	#WAKE_UCAST
 (1 << 1)

	)

588 
	#WAKE_MCAST
 (1 << 2)

	)

589 
	#WAKE_BCAST
 (1 << 3)

	)

590 
	#WAKE_ARP
 (1 << 4)

	)

591 
	#WAKE_MAGIC
 (1 << 5)

	)

592 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

595 
	#TCP_V4_FLOW
 0x01

	)

596 
	#UDP_V4_FLOW
 0x02

	)

597 
	#SCTP_V4_FLOW
 0x03

	)

598 
	#AH_ESP_V4_FLOW
 0x04

	)

599 
	#TCP_V6_FLOW
 0x05

	)

600 
	#UDP_V6_FLOW
 0x06

	)

601 
	#SCTP_V6_FLOW
 0x07

	)

602 
	#AH_ESP_V6_FLOW
 0x08

	)

603 
	#AH_V4_FLOW
 0x09

	)

604 
	#ESP_V4_FLOW
 0x0a

	)

605 
	#AH_V6_FLOW
 0x0b

	)

606 
	#ESP_V6_FLOW
 0x0c

	)

607 
	#IP_USER_FLOW
 0x0d

	)

608 
	#IPV4_FLOW
 0x10

	)

609 
	#IPV6_FLOW
 0x11

	)

612 
	#RXH_L2DA
 (1 << 1)

	)

613 
	#RXH_VLAN
 (1 << 2)

	)

614 
	#RXH_L3_PROTO
 (1 << 3)

	)

615 
	#RXH_IP_SRC
 (1 << 4)

	)

616 
	#RXH_IP_DST
 (1 << 5)

	)

617 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

618 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

619 
	#RXH_DISCARD
 (1 << 31)

	)

621 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

630 
	eëhtoﬁ_ª£t_Êags
 {

636 
	mETH_RESET_MGMT
 = 1 << 0,

637 
	mETH_RESET_IRQ
 = 1 << 1,

638 
	mETH_RESET_DMA
 = 1 << 2,

639 
	mETH_RESET_FILTER
 = 1 << 3,

640 
	mETH_RESET_OFFLOAD
 = 1 << 4,

641 
	mETH_RESET_MAC
 = 1 << 5,

642 
	mETH_RESET_PHY
 = 1 << 6,

643 
	mETH_RESET_RAM
 = 1 << 7,

646 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

648 
	mETH_RESET_ALL
 = 0xffffffff,

651 
	#ETH_RESET_SHARED_SHIFT
 16

	)

	@/usr/include/linux/genetlink.h

1 #i‚de‡
__LINUX_GENERIC_NETLINK_H


2 
	#__LINUX_GENERIC_NETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	#GENL_NAMSIZ
 16

	)

9 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

10 
	#GENL_MAX_ID
 1023

	)

12 
	sgílmsghdr
 {

13 
__u8
 
	mcmd
;

14 
__u8
 
	mvîsi⁄
;

15 
__u16
 
	mª£rved
;

18 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

20 
	#GENL_ADMIN_PERM
 0x01

	)

21 
	#GENL_CMD_CAP_DO
 0x02

	)

22 
	#GENL_CMD_CAP_DUMP
 0x04

	)

23 
	#GENL_CMD_CAP_HASPOL
 0x08

	)

28 
	#GENL_ID_GENERATE
 0

	)

29 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

36 
	mCTRL_CMD_UNSPEC
,

37 
	mCTRL_CMD_NEWFAMILY
,

38 
	mCTRL_CMD_DELFAMILY
,

39 
	mCTRL_CMD_GETFAMILY
,

40 
	mCTRL_CMD_NEWOPS
,

41 
	mCTRL_CMD_DELOPS
,

42 
	mCTRL_CMD_GETOPS
,

43 
	mCTRL_CMD_NEWMCAST_GRP
,

44 
	mCTRL_CMD_DELMCAST_GRP
,

45 
	mCTRL_CMD_GETMCAST_GRP
,

46 
	m__CTRL_CMD_MAX
,

49 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

52 
	mCTRL_ATTR_UNSPEC
,

53 
	mCTRL_ATTR_FAMILY_ID
,

54 
	mCTRL_ATTR_FAMILY_NAME
,

55 
	mCTRL_ATTR_VERSION
,

56 
	mCTRL_ATTR_HDRSIZE
,

57 
	mCTRL_ATTR_MAXATTR
,

58 
	mCTRL_ATTR_OPS
,

59 
	mCTRL_ATTR_MCAST_GROUPS
,

60 
	m__CTRL_ATTR_MAX
,

63 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

66 
	mCTRL_ATTR_OP_UNSPEC
,

67 
	mCTRL_ATTR_OP_ID
,

68 
	mCTRL_ATTR_OP_FLAGS
,

69 
	m__CTRL_ATTR_OP_MAX
,

72 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

75 
	mCTRL_ATTR_MCAST_GRP_UNSPEC
,

76 
	mCTRL_ATTR_MCAST_GRP_NAME
,

77 
	mCTRL_ATTR_MCAST_GRP_ID
,

78 
	m__CTRL_ATTR_MCAST_GRP_MAX
,

81 
	#CTRL_ATTR_MCAST_GRP_MAX
 (
__CTRL_ATTR_MCAST_GRP_MAX
 - 1)

	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_ATMFATE
 0x8884

	)

78 
	#ETH_P_PAE
 0x888E

	)

79 
	#ETH_P_AOE
 0x88A2

	)

80 
	#ETH_P_TIPC
 0x88CA

	)

81 
	#ETH_P_1588
 0x88F7

	)

82 
	#ETH_P_FCOE
 0x8906

	)

83 
	#ETH_P_FIP
 0x8914

	)

84 
	#ETH_P_EDSA
 0xDADA

	)

90 
	#ETH_P_802_3
 0x0001

	)

91 
	#ETH_P_AX25
 0x0002

	)

92 
	#ETH_P_ALL
 0x0003

	)

93 
	#ETH_P_802_2
 0x0004

	)

94 
	#ETH_P_SNAP
 0x0005

	)

95 
	#ETH_P_DDCMP
 0x0006

	)

96 
	#ETH_P_WAN_PPP
 0x0007

	)

97 
	#ETH_P_PPP_MP
 0x0008

	)

98 
	#ETH_P_LOCALTALK
 0x0009

	)

99 
	#ETH_P_CAN
 0x000C

	)

100 
	#ETH_P_PPPTALK
 0x0010

	)

101 
	#ETH_P_TR_802_2
 0x0011

	)

102 
	#ETH_P_MOBITEX
 0x0015

	)

103 
	#ETH_P_CONTROL
 0x0016

	)

104 
	#ETH_P_IRDA
 0x0017

	)

105 
	#ETH_P_ECONET
 0x0018

	)

106 
	#ETH_P_HDLC
 0x0019

	)

107 
	#ETH_P_ARCNET
 0x001A

	)

108 
	#ETH_P_DSA
 0x001B

	)

109 
	#ETH_P_TRAILER
 0x001C

	)

110 
	#ETH_P_PHONET
 0x00F5

	)

111 
	#ETH_P_IEEE802154
 0x00F6

	)

112 
	#ETH_P_CAIF
 0x00F7

	)

118 
	sëhhdr
 {

119 
	mh_de°
[
ETH_ALEN
];

120 
	mh_sour˚
[
ETH_ALEN
];

121 
__be16
 
	mh_¥Ÿo
;

122 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

20 
	evœn_io˘l_cmds
 {

21 
	mADD_VLAN_CMD
,

22 
	mDEL_VLAN_CMD
,

23 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

24 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

27 
	mSET_VLAN_NAME_TYPE_CMD
,

28 
	mSET_VLAN_FLAG_CMD
,

29 
	mGET_VLAN_REALDEV_NAME_CMD
,

30 
	mGET_VLAN_VID_CMD


33 
	evœn_Êags
 {

34 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

35 
	mVLAN_FLAG_GVRP
 = 0x2,

36 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

39 
	evœn_«me_ty≥s
 {

40 
	mVLAN_NAME_TYPE_PLUS_VID
,

41 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

42 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

43 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

44 
	mVLAN_NAME_TYPE_HIGHEST


47 
	svœn_io˘l_¨gs
 {

48 
	mcmd
;

49 
	mdevi˚1
[24];

52 
	mdevi˚2
[24];

53 
	mVID
;

54 
	mskb_¥i‹ôy
;

55 
	m«me_ty≥
;

56 
	mböd_ty≥
;

57 
	mÊag
;

58 } 
	mu
;

60 
	mvœn_qos
;

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/sockë.h
>

26 
	mIPPROTO_IP
 = 0,

27 
	mIPPROTO_ICMP
 = 1,

28 
	mIPPROTO_IGMP
 = 2,

29 
	mIPPROTO_IPIP
 = 4,

30 
	mIPPROTO_TCP
 = 6,

31 
	mIPPROTO_EGP
 = 8,

32 
	mIPPROTO_PUP
 = 12,

33 
	mIPPROTO_UDP
 = 17,

34 
	mIPPROTO_IDP
 = 22,

35 
	mIPPROTO_DCCP
 = 33,

36 
	mIPPROTO_RSVP
 = 46,

37 
	mIPPROTO_GRE
 = 47,

39 
	mIPPROTO_IPV6
 = 41,

41 
	mIPPROTO_ESP
 = 50,

42 
	mIPPROTO_AH
 = 51,

43 
	mIPPROTO_BEETPH
 = 94,

44 
	mIPPROTO_PIM
 = 103,

46 
	mIPPROTO_COMP
 = 108,

47 
	mIPPROTO_SCTP
 = 132,

48 
	mIPPROTO_UDPLITE
 = 136,

50 
	mIPPROTO_RAW
 = 255,

51 
	mIPPROTO_MAX


56 
	sö_addr
 {

57 
__be32
 
	ms_addr
;

60 
	#IP_TOS
 1

	)

61 
	#IP_TTL
 2

	)

62 
	#IP_HDRINCL
 3

	)

63 
	#IP_OPTIONS
 4

	)

64 
	#IP_ROUTER_ALERT
 5

	)

65 
	#IP_RECVOPTS
 6

	)

66 
	#IP_RETOPTS
 7

	)

67 
	#IP_PKTINFO
 8

	)

68 
	#IP_PKTOPTIONS
 9

	)

69 
	#IP_MTU_DISCOVER
 10

	)

70 
	#IP_RECVERR
 11

	)

71 
	#IP_RECVTTL
 12

	)

72 
	#IP_RECVTOS
 13

	)

73 
	#IP_MTU
 14

	)

74 
	#IP_FREEBIND
 15

	)

75 
	#IP_IPSEC_POLICY
 16

	)

76 
	#IP_XFRM_POLICY
 17

	)

77 
	#IP_PASSSEC
 18

	)

78 
	#IP_TRANSPARENT
 19

	)

81 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

84 
	#IP_ORIGDSTADDR
 20

	)

85 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

87 
	#IP_MINTTL
 21

	)

90 
	#IP_PMTUDISC_DONT
 0

	)

91 
	#IP_PMTUDISC_WANT
 1

	)

92 
	#IP_PMTUDISC_DO
 2

	)

93 
	#IP_PMTUDISC_PROBE
 3

	)

95 
	#IP_MULTICAST_IF
 32

	)

96 
	#IP_MULTICAST_TTL
 33

	)

97 
	#IP_MULTICAST_LOOP
 34

	)

98 
	#IP_ADD_MEMBERSHIP
 35

	)

99 
	#IP_DROP_MEMBERSHIP
 36

	)

100 
	#IP_UNBLOCK_SOURCE
 37

	)

101 
	#IP_BLOCK_SOURCE
 38

	)

102 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

103 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

104 
	#IP_MSFILTER
 41

	)

105 
	#MCAST_JOIN_GROUP
 42

	)

106 
	#MCAST_BLOCK_SOURCE
 43

	)

107 
	#MCAST_UNBLOCK_SOURCE
 44

	)

108 
	#MCAST_LEAVE_GROUP
 45

	)

109 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

110 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

111 
	#MCAST_MSFILTER
 48

	)

112 
	#IP_MULTICAST_ALL
 49

	)

114 
	#MCAST_EXCLUDE
 0

	)

115 
	#MCAST_INCLUDE
 1

	)

118 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

119 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

123 
	sù_mªq
 {

124 
ö_addr
 
	mimr_mu…üddr
;

125 
ö_addr
 
	mimr_öãrÁ˚
;

128 
	sù_mªqn
 {

129 
ö_addr
 
	mimr_mu…üddr
;

130 
ö_addr
 
	mimr_addªss
;

131 
	mimr_ifödex
;

134 
	sù_mªq_sour˚
 {

135 
__be32
 
	mimr_mu…üddr
;

136 
__be32
 
	mimr_öãrÁ˚
;

137 
__be32
 
	mimr_sour˚addr
;

140 
	sù_msfûãr
 {

141 
__be32
 
	mimsf_mu…üddr
;

142 
__be32
 
	mimsf_öãrÁ˚
;

143 
__u32
 
	mimsf_fmode
;

144 
__u32
 
	mimsf_num§c
;

145 
__be32
 
	mimsf_¶i°
[1];

148 
	#IP_MSFILTER_SIZE
(
num§c
) \

149 ((
ù_msfûãr
Ë- (
__u32
) \

150 + (
num§c
Ë* (
__u32
))

	)

152 
	sgroup_ªq
 {

153 
__u32
 
	mgr_öãrÁ˚
;

154 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

157 
	sgroup_sour˚_ªq
 {

158 
__u32
 
	mg§_öãrÁ˚
;

159 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

160 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

163 
	sgroup_fûãr
 {

164 
__u32
 
	mgf_öãrÁ˚
;

165 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

166 
__u32
 
	mgf_fmode
;

167 
__u32
 
	mgf_num§c
;

168 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

171 
	#GROUP_FILTER_SIZE
(
num§c
) \

172 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

173 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

175 
	sö_pktöfo
 {

176 
	mùi_ifödex
;

177 
ö_addr
 
	mùi_•ec_d°
;

178 
ö_addr
 
	mùi_addr
;

182 
	#__SOCK_SIZE__
 16

	)

183 
	ssockaddr_ö
 {

184 
ß_Ámûy_t
 
	msö_Ámûy
;

185 
__be16
 
	msö_p‹t
;

186 
ö_addr
 
	msö_addr
;

189 
	m__∑d
[
__SOCK_SIZE__
 - () -

190 (Ë- (
ö_addr
)];

192 
	#sö_zîo
 
__∑d


	)

200 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

201 
	#IN_CLASSA_NET
 0xff000000

	)

202 
	#IN_CLASSA_NSHIFT
 24

	)

203 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

204 
	#IN_CLASSA_MAX
 128

	)

206 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

207 
	#IN_CLASSB_NET
 0xffff0000

	)

208 
	#IN_CLASSB_NSHIFT
 16

	)

209 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

210 
	#IN_CLASSB_MAX
 65536

	)

212 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

213 
	#IN_CLASSC_NET
 0xffffff00

	)

214 
	#IN_CLASSC_NSHIFT
 8

	)

215 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

217 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

218 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

219 
	#IN_MULTICAST_NET
 0xF0000000

	)

221 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

222 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

225 
	#INADDR_ANY
 ((Ë0x00000000)

	)

228 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

231 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

234 
	#IN_LOOPBACKNET
 127

	)

237 
	#INADDR_LOOPBACK
 0x7f000001

	)

238 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

241 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

242 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

243 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

244 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

248 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

	@/usr/include/linux/ipv6.h

1 #i‚de‡
_IPV6_H


2 
	#_IPV6_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/ö6.h
>

6 
	~<asm/byã‹dî.h
>

10 
	#IPV6_MIN_MTU
 1280

	)

19 
	sö6_pktöfo
 {

20 
ö6_addr
 
	mùi6_addr
;

21 
	mùi6_ifödex
;

24 
	sù6_mtuöfo
 {

25 
sockaddr_ö6
 
	mù6m_addr
;

26 
__u32
 
	mù6m_mtu
;

29 
	sö6_i‰eq
 {

30 
ö6_addr
 
	mi‰6_addr
;

31 
__u32
 
	mi‰6_¥efixÀn
;

32 
	mi‰6_ifödex
;

35 
	#IPV6_SRCRT_STRICT
 0x01

	)

36 
	#IPV6_SRCRT_TYPE_0
 0

	)

37 
	#IPV6_SRCRT_TYPE_2
 2

	)

42 
	sùv6_π_hdr
 {

43 
__u8
 
	m√xthdr
;

44 
__u8
 
	mhdæí
;

45 
__u8
 
	mty≥
;

46 
__u8
 
	m£gmíts_À·
;

55 
	sùv6_›t_hdr
 {

56 
__u8
 
	m√xthdr
;

57 
__u8
 
	mhdæí
;

61 } 
__©åibuã__
 ((
∑cked
));

63 
	#ùv6_de°›t_hdr
 
ùv6_›t_hdr


	)

64 
	#ùv6_h››t_hdr
 
ùv6_›t_hdr


	)

71 
	sπ0_hdr
 {

72 
ùv6_π_hdr
 
	mπ_hdr
;

73 
__u32
 
	mª£rved
;

74 
ö6_addr
 
	maddr
[0];

76 
	#π0_ty≥
 
π_hdr
.
ty≥


	)

83 
	sπ2_hdr
 {

84 
ùv6_π_hdr
 
	mπ_hdr
;

85 
__u32
 
	mª£rved
;

86 
ö6_addr
 
	maddr
;

88 
	#π2_ty≥
 
π_hdr
.
ty≥


	)

95 
	sùv6_de°›t_hao
 {

96 
__u8
 
	mty≥
;

97 
__u8
 
	mÀngth
;

98 
ö6_addr
 
	maddr
;

99 } 
__©åibuã__
 ((
__∑cked__
));

108 
	sùv6hdr
 {

109 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

110 
__u8
 
	m¥i‹ôy
:4,

111 
	mvîsi⁄
:4;

112 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

113 
__u8
 
	mvîsi⁄
:4,

114 
	m¥i‹ôy
:4;

118 
__u8
 
	mÊow_lbl
[3];

120 
__be16
 
	m∑ylﬂd_Àn
;

121 
__u8
 
	m√xthdr
;

122 
__u8
 
	mh›_limô
;

124 
ö6_addr
 
	mßddr
;

125 
ö6_addr
 
	mdaddr
;

131 
	mDEVCONF_FORWARDING
 = 0,

132 
	mDEVCONF_HOPLIMIT
,

133 
	mDEVCONF_MTU6
,

134 
	mDEVCONF_ACCEPT_RA
,

135 
	mDEVCONF_ACCEPT_REDIRECTS
,

136 
	mDEVCONF_AUTOCONF
,

137 
	mDEVCONF_DAD_TRANSMITS
,

138 
	mDEVCONF_RTR_SOLICITS
,

139 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

140 
	mDEVCONF_RTR_SOLICIT_DELAY
,

141 
	mDEVCONF_USE_TEMPADDR
,

142 
	mDEVCONF_TEMP_VALID_LFT
,

143 
	mDEVCONF_TEMP_PREFERED_LFT
,

144 
	mDEVCONF_REGEN_MAX_RETRY
,

145 
	mDEVCONF_MAX_DESYNC_FACTOR
,

146 
	mDEVCONF_MAX_ADDRESSES
,

147 
	mDEVCONF_FORCE_MLD_VERSION
,

148 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

149 
	mDEVCONF_ACCEPT_RA_PINFO
,

150 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

151 
	mDEVCONF_RTR_PROBE_INTERVAL
,

152 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

153 
	mDEVCONF_PROXY_NDP
,

154 
	mDEVCONF_OPTIMISTIC_DAD
,

155 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

156 
	mDEVCONF_MC_FORWARDING
,

157 
	mDEVCONF_DISABLE_IPV6
,

158 
	mDEVCONF_ACCEPT_DAD
,

159 
	mDEVCONF_FORCE_TLLAO
,

160 
	mDEVCONF_MAX


	@/usr/include/linux/mii.h

8 #i‚de‡
__LINUX_MII_H__


9 
	#__LINUX_MII_H__


	)

11 
	~<löux/ty≥s.h
>

15 
	#MII_BMCR
 0x00

	)

16 
	#MII_BMSR
 0x01

	)

17 
	#MII_PHYSID1
 0x02

	)

18 
	#MII_PHYSID2
 0x03

	)

19 
	#MII_ADVERTISE
 0x04

	)

20 
	#MII_LPA
 0x05

	)

21 
	#MII_EXPANSION
 0x06

	)

22 
	#MII_CTRL1000
 0x09

	)

23 
	#MII_STAT1000
 0x0®

	)

24 
	#MII_ESTATUS
 0x0‡

	)

25 
	#MII_DCOUNTER
 0x12

	)

26 
	#MII_FCSCOUNTER
 0x13

	)

27 
	#MII_NWAYTEST
 0x14

	)

28 
	#MII_RERRCOUNTER
 0x15

	)

29 
	#MII_SREVISION
 0x16

	)

30 
	#MII_RESV1
 0x17

	)

31 
	#MII_LBRERROR
 0x18

	)

32 
	#MII_PHYADDR
 0x19

	)

33 
	#MII_RESV2
 0x1®

	)

34 
	#MII_TPISTATUS
 0x1b

	)

35 
	#MII_NCONFIG
 0x1¯

	)

38 
	#BMCR_RESV
 0x003‡

	)

39 
	#BMCR_SPEED1000
 0x0040

	)

40 
	#BMCR_CTST
 0x0080

	)

41 
	#BMCR_FULLDPLX
 0x0100

	)

42 
	#BMCR_ANRESTART
 0x0200

	)

43 
	#BMCR_ISOLATE
 0x0400

	)

44 
	#BMCR_PDOWN
 0x0800

	)

45 
	#BMCR_ANENABLE
 0x1000

	)

46 
	#BMCR_SPEED100
 0x2000

	)

47 
	#BMCR_LOOPBACK
 0x4000

	)

48 
	#BMCR_RESET
 0x8000

	)

51 
	#BMSR_ERCAP
 0x0001

	)

52 
	#BMSR_JCD
 0x0002

	)

53 
	#BMSR_LSTATUS
 0x0004

	)

54 
	#BMSR_ANEGCAPABLE
 0x0008

	)

55 
	#BMSR_RFAULT
 0x0010

	)

56 
	#BMSR_ANEGCOMPLETE
 0x0020

	)

57 
	#BMSR_RESV
 0x00c0

	)

58 
	#BMSR_ESTATEN
 0x0100

	)

59 
	#BMSR_100HALF2
 0x0200

	)

60 
	#BMSR_100FULL2
 0x0400

	)

61 
	#BMSR_10HALF
 0x0800

	)

62 
	#BMSR_10FULL
 0x1000

	)

63 
	#BMSR_100HALF
 0x2000

	)

64 
	#BMSR_100FULL
 0x4000

	)

65 
	#BMSR_100BASE4
 0x8000

	)

68 
	#ADVERTISE_SLCT
 0x001‡

	)

69 
	#ADVERTISE_CSMA
 0x0001

	)

70 
	#ADVERTISE_10HALF
 0x0020

	)

71 
	#ADVERTISE_1000XFULL
 0x0020

	)

72 
	#ADVERTISE_10FULL
 0x0040

	)

73 
	#ADVERTISE_1000XHALF
 0x0040

	)

74 
	#ADVERTISE_100HALF
 0x0080

	)

75 
	#ADVERTISE_1000XPAUSE
 0x0080

	)

76 
	#ADVERTISE_100FULL
 0x0100

	)

77 
	#ADVERTISE_1000XPSE_ASYM
 0x0100

	)

78 
	#ADVERTISE_100BASE4
 0x0200

	)

79 
	#ADVERTISE_PAUSE_CAP
 0x0400

	)

80 
	#ADVERTISE_PAUSE_ASYM
 0x0800

	)

81 
	#ADVERTISE_RESV
 0x1000

	)

82 
	#ADVERTISE_RFAULT
 0x2000

	)

83 
	#ADVERTISE_LPACK
 0x4000

	)

84 
	#ADVERTISE_NPAGE
 0x8000

	)

86 
	#ADVERTISE_FULL
 (
ADVERTISE_100FULL
 | 
ADVERTISE_10FULL
 | \

87 
ADVERTISE_CSMA
)

	)

88 
	#ADVERTISE_ALL
 (
ADVERTISE_10HALF
 | 
ADVERTISE_10FULL
 | \

89 
ADVERTISE_100HALF
 | 
ADVERTISE_100FULL
)

	)

92 
	#LPA_SLCT
 0x001‡

	)

93 
	#LPA_10HALF
 0x0020

	)

94 
	#LPA_1000XFULL
 0x0020

	)

95 
	#LPA_10FULL
 0x0040

	)

96 
	#LPA_1000XHALF
 0x0040

	)

97 
	#LPA_100HALF
 0x0080

	)

98 
	#LPA_1000XPAUSE
 0x0080

	)

99 
	#LPA_100FULL
 0x0100

	)

100 
	#LPA_1000XPAUSE_ASYM
 0x0100

	)

101 
	#LPA_100BASE4
 0x0200

	)

102 
	#LPA_PAUSE_CAP
 0x0400

	)

103 
	#LPA_PAUSE_ASYM
 0x0800

	)

104 
	#LPA_RESV
 0x1000

	)

105 
	#LPA_RFAULT
 0x2000

	)

106 
	#LPA_LPACK
 0x4000

	)

107 
	#LPA_NPAGE
 0x8000

	)

109 
	#LPA_DUPLEX
 (
LPA_10FULL
 | 
LPA_100FULL
)

	)

110 
	#LPA_100
 (
LPA_100FULL
 | 
LPA_100HALF
 | 
LPA_100BASE4
)

	)

113 
	#EXPANSION_NWAY
 0x0001

	)

114 
	#EXPANSION_LCWP
 0x0002

	)

115 
	#EXPANSION_ENABLENPAGE
 0x0004

	)

116 
	#EXPANSION_NPCAPABLE
 0x0008

	)

117 
	#EXPANSION_MFAULTS
 0x0010

	)

118 
	#EXPANSION_RESV
 0xf„0

	)

120 
	#ESTATUS_1000_TFULL
 0x2000

	)

121 
	#ESTATUS_1000_THALF
 0x1000

	)

124 
	#NWAYTEST_RESV1
 0x00f‡

	)

125 
	#NWAYTEST_LOOPBACK
 0x0100

	)

126 
	#NWAYTEST_RESV2
 0x„00

	)

129 
	#ADVERTISE_1000FULL
 0x0200

	)

130 
	#ADVERTISE_1000HALF
 0x0100

	)

133 
	#LPA_1000LOCALRXOK
 0x2000

	)

134 
	#LPA_1000REMRXOK
 0x1000

	)

135 
	#LPA_1000FULL
 0x0800

	)

136 
	#LPA_1000HALF
 0x0400

	)

139 
	#FLOW_CTRL_TX
 0x01

	)

140 
	#FLOW_CTRL_RX
 0x02

	)

143 
	smii_io˘l_d©a
 {

144 
__u16
 
	mphy_id
;

145 
__u16
 
	mªg_num
;

146 
__u16
 
	mvÆ_ö
;

147 
__u16
 
	mvÆ_out
;

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

42 
	s√t_devi˚_°©s
 {

43 
	mrx_∑ckës
;

44 
	mtx_∑ckës
;

45 
	mrx_byãs
;

46 
	mtx_byãs
;

47 
	mrx_îr‹s
;

48 
	mtx_îr‹s
;

49 
	mrx_dr›≥d
;

50 
	mtx_dr›≥d
;

51 
	mmu…iˇ°
;

52 
	mcﬁlisi⁄s
;

55 
	mrx_Àngth_îr‹s
;

56 
	mrx_ovî_îr‹s
;

57 
	mrx_¸c_îr‹s
;

58 
	mrx_‰ame_îr‹s
;

59 
	mrx_fifo_îr‹s
;

60 
	mrx_mis£d_îr‹s
;

63 
	mtx_ab‹ãd_îr‹s
;

64 
	mtx_ˇºõr_îr‹s
;

65 
	mtx_fifo_îr‹s
;

66 
	mtx_hóπbót_îr‹s
;

67 
	mtx_wödow_îr‹s
;

70 
	mrx_com¥es£d
;

71 
	mtx_com¥es£d
;

77 
	mIF_PORT_UNKNOWN
 = 0,

78 
	mIF_PORT_10BASE2
,

79 
	mIF_PORT_10BASET
,

80 
	mIF_PORT_AUI
,

81 
	mIF_PORT_100BASET
,

82 
	mIF_PORT_100BASETX
,

83 
	mIF_PORT_100BASEFX


	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#MAX_LINKS
 32

	)

30 
	g√t
;

32 
	ssockaddr_∆
 {

33 
ß_Ámûy_t
 
	m∆_Ámûy
;

34 
	m∆_∑d
;

35 
__u32
 
	m∆_pid
;

36 
__u32
 
	m∆_groups
;

39 
	s∆msghdr
 {

40 
__u32
 
	m∆msg_Àn
;

41 
__u16
 
	m∆msg_ty≥
;

42 
__u16
 
	m∆msg_Êags
;

43 
__u32
 
	m∆msg_£q
;

44 
__u32
 
	m∆msg_pid
;

49 
	#NLM_F_REQUEST
 1

	)

50 
	#NLM_F_MULTI
 2

	)

51 
	#NLM_F_ACK
 4

	)

52 
	#NLM_F_ECHO
 8

	)

55 
	#NLM_F_ROOT
 0x100

	)

56 
	#NLM_F_MATCH
 0x200

	)

57 
	#NLM_F_ATOMIC
 0x400

	)

58 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

61 
	#NLM_F_REPLACE
 0x100

	)

62 
	#NLM_F_EXCL
 0x200

	)

63 
	#NLM_F_CREATE
 0x400

	)

64 
	#NLM_F_APPEND
 0x800

	)

75 
	#NLMSG_ALIGNTO
 4

	)

76 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

77 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

78 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

79 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

80 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

81 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

82 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

83 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

84 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

85 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

86 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

88 
	#NLMSG_NOOP
 0x1

	)

89 
	#NLMSG_ERROR
 0x2

	)

90 
	#NLMSG_DONE
 0x3

	)

91 
	#NLMSG_OVERRUN
 0x4

	)

93 
	#NLMSG_MIN_TYPE
 0x10

	)

95 
	s∆msgîr
 {

96 
	mîr‹
;

97 
∆msghdr
 
	mmsg
;

100 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

101 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

102 
	#NETLINK_PKTINFO
 3

	)

103 
	#NETLINK_BROADCAST_ERROR
 4

	)

104 
	#NETLINK_NO_ENOBUFS
 5

	)

106 
	s∆_pktöfo
 {

107 
__u32
 
	mgroup
;

110 
	#NET_MAJOR
 36

	)

113 
	mNETLINK_UNCONNECTED
 = 0,

114 
	mNETLINK_CONNECTED
,

126 
	s∆©å
 {

127 
__u16
 
	m∆a_Àn
;

128 
__u16
 
	m∆a_ty≥
;

141 
	#NLA_F_NESTED
 (1 << 15)

	)

142 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

143 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

145 
	#NLA_ALIGNTO
 4

	)

146 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

147 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/pkt_sched.h

1 #i‚de‡
__LINUX_PKT_SCHED_H


2 
	#__LINUX_PKT_SCHED_H


	)

4 
	~<löux/ty≥s.h
>

19 
	#TC_PRIO_BESTEFFORT
 0

	)

20 
	#TC_PRIO_FILLER
 1

	)

21 
	#TC_PRIO_BULK
 2

	)

22 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

23 
	#TC_PRIO_INTERACTIVE
 6

	)

24 
	#TC_PRIO_CONTROL
 7

	)

26 
	#TC_PRIO_MAX
 15

	)

32 
	stc_°©s
 {

33 
__u64
 
	mbyãs
;

34 
__u32
 
	m∑ckës
;

35 
__u32
 
	mdr›s
;

36 
__u32
 
	movîlimôs
;

38 
__u32
 
	mbps
;

39 
__u32
 
	mµs
;

40 
__u32
 
	mqÀn
;

41 
__u32
 
	mbacklog
;

44 
	stc_e°im©‹
 {

45 sig√d 
	möãrvÆ
;

46 
	mewma_log
;

66 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

67 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

68 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

69 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

70 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

72 
	#TC_H_UNSPEC
 (0U)

	)

73 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

74 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

76 
	stc_øã•ec
 {

77 
	m˚Œ_log
;

78 
	m__ª£rved
;

79 
	movîhód
;

80 
	m˚Œ_Æign
;

81 
	mmpu
;

82 
__u32
 
	møã
;

85 
	#TC_RTAB_SIZE
 1024

	)

87 
	stc_size•ec
 {

88 
	m˚Œ_log
;

89 
	msize_log
;

90 
	m˚Œ_Æign
;

91 
	movîhód
;

92 
	mlökœyî
;

93 
	mmpu
;

94 
	mmtu
;

95 
	mtsize
;

99 
	mTCA_STAB_UNSPEC
,

100 
	mTCA_STAB_BASE
,

101 
	mTCA_STAB_DATA
,

102 
	m__TCA_STAB_MAX


105 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

109 
	stc_fifo_q›t
 {

110 
__u32
 
	mlimô
;

115 
	#TCQ_PRIO_BANDS
 16

	)

116 
	#TCQ_MIN_PRIO_BANDS
 2

	)

118 
	stc_¥io_q›t
 {

119 
	mb™ds
;

120 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

125 
	stc_mu…iq_q›t
 {

126 
__u16
 
	mb™ds
;

127 
__u16
 
	mmax_b™ds
;

132 
	stc_tbf_q›t
 {

133 
tc_øã•ec
 
	møã
;

134 
tc_øã•ec
 
	m≥akøã
;

135 
__u32
 
	mlimô
;

136 
__u32
 
	mbuf„r
;

137 
__u32
 
	mmtu
;

141 
	mTCA_TBF_UNSPEC
,

142 
	mTCA_TBF_PARMS
,

143 
	mTCA_TBF_RTAB
,

144 
	mTCA_TBF_PTAB
,

145 
	m__TCA_TBF_MAX
,

148 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

157 
	stc_sfq_q›t
 {

158 
	mqu™tum
;

159 
	m≥πurb_≥riod
;

160 
__u32
 
	mlimô
;

161 
	mdivis‹
;

162 
	mÊows
;

165 
	stc_sfq_x°©s
 {

166 
__s32
 
	mÆlŸ
;

181 
	mTCA_RED_UNSPEC
,

182 
	mTCA_RED_PARMS
,

183 
	mTCA_RED_STAB
,

184 
	m__TCA_RED_MAX
,

187 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

189 
	stc_ªd_q›t
 {

190 
__u32
 
	mlimô
;

191 
__u32
 
	mqth_mö
;

192 
__u32
 
	mqth_max
;

193 
	mWlog
;

194 
	mPlog
;

195 
	mS˚Œ_log
;

196 
	mÊags
;

197 
	#TC_RED_ECN
 1

	)

198 
	#TC_RED_HARDDROP
 2

	)

201 
	stc_ªd_x°©s
 {

202 
__u32
 
	móæy
;

203 
__u32
 
	mpdr›
;

204 
__u32
 
	mŸhî
;

205 
__u32
 
	mm¨ked
;

210 
	#MAX_DPs
 16

	)

213 
	mTCA_GRED_UNSPEC
,

214 
	mTCA_GRED_PARMS
,

215 
	mTCA_GRED_STAB
,

216 
	mTCA_GRED_DPS
,

217 
	m__TCA_GRED_MAX
,

220 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

222 
	stc_gªd_q›t
 {

223 
__u32
 
	mlimô
;

224 
__u32
 
	mqth_mö
;

225 
__u32
 
	mqth_max
;

226 
__u32
 
	mDP
;

227 
__u32
 
	mbacklog
;

228 
__u32
 
	mqave
;

229 
__u32
 
	mf‹˚d
;

230 
__u32
 
	móæy
;

231 
__u32
 
	mŸhî
;

232 
__u32
 
	mpdr›
;

233 
__u8
 
	mWlog
;

234 
__u8
 
	mPlog
;

235 
__u8
 
	mS˚Œ_log
;

236 
__u8
 
	m¥io
;

237 
__u32
 
	m∑ckës
;

238 
__u32
 
	mbyãsö
;

242 
	stc_gªd_s›t
 {

243 
__u32
 
	mDPs
;

244 
__u32
 
	mdef_DP
;

245 
__u8
 
	mgrio
;

246 
__u8
 
	mÊags
;

247 
__u16
 
	m∑d1
;

251 
	#TC_HTB_NUMPRIO
 8

	)

252 
	#TC_HTB_MAXDEPTH
 8

	)

253 
	#TC_HTB_PROTOVER
 3

	)

255 
	stc_htb_›t
 {

256 
tc_øã•ec
 
	møã
;

257 
tc_øã•ec
 
	m˚û
;

258 
__u32
 
	mbuf„r
;

259 
__u32
 
	mcbuf„r
;

260 
__u32
 
	mqu™tum
;

261 
__u32
 
	mÀvñ
;

262 
__u32
 
	m¥io
;

264 
	stc_htb_glob
 {

265 
__u32
 
	mvîsi⁄
;

266 
__u32
 
	møã2qu™tum
;

267 
__u32
 
	mdef˛s
;

268 
__u32
 
	mdebug
;

271 
__u32
 
	mdúe˘_pkts
;

274 
	mTCA_HTB_UNSPEC
,

275 
	mTCA_HTB_PARMS
,

276 
	mTCA_HTB_INIT
,

277 
	mTCA_HTB_CTAB
,

278 
	mTCA_HTB_RTAB
,

279 
	m__TCA_HTB_MAX
,

282 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

284 
	stc_htb_x°©s
 {

285 
__u32
 
	mÀnds
;

286 
__u32
 
	mb‹rows
;

287 
__u32
 
	mgü¡s
;

288 
__u32
 
	mtokís
;

289 
__u32
 
	m˘okís
;

294 
	stc_hfsc_q›t
 {

295 
__u16
 
	mdef˛s
;

298 
	stc_£rvi˚_curve
 {

299 
__u32
 
	mm1
;

300 
__u32
 
	md
;

301 
__u32
 
	mm2
;

304 
	stc_hfsc_°©s
 {

305 
__u64
 
	mw‹k
;

306 
__u64
 
	mπw‹k
;

307 
__u32
 
	m≥riod
;

308 
__u32
 
	mÀvñ
;

312 
	mTCA_HFSC_UNSPEC
,

313 
	mTCA_HFSC_RSC
,

314 
	mTCA_HFSC_FSC
,

315 
	mTCA_HFSC_USC
,

316 
	m__TCA_HFSC_MAX
,

319 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

324 
	#TC_CBQ_MAXPRIO
 8

	)

325 
	#TC_CBQ_MAXLEVEL
 8

	)

326 
	#TC_CBQ_DEF_EWMA
 5

	)

328 
	stc_cbq_lss›t
 {

329 
	mch™ge
;

330 
	mÊags
;

331 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

332 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

333 
	mewma_log
;

334 
	mÀvñ
;

335 
	#TCF_CBQ_LSS_FLAGS
 1

	)

336 
	#TCF_CBQ_LSS_EWMA
 2

	)

337 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

338 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

339 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

340 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

341 
__u32
 
	mmaxidÀ
;

342 
__u32
 
	mmöidÀ
;

343 
__u32
 
	mof·ime
;

344 
__u32
 
	mavpkt
;

347 
	stc_cbq_wº›t
 {

348 
	mÊags
;

349 
	m¥i‹ôy
;

350 
	m˝ri‹ôy
;

351 
	m__ª£rved
;

352 
__u32
 
	mÆlŸ
;

353 
__u32
 
	mweight
;

356 
	stc_cbq_ovl
 {

357 
	m°øãgy
;

358 
	#TC_CBQ_OVL_CLASSIC
 0

	)

359 
	#TC_CBQ_OVL_DELAY
 1

	)

360 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

361 
	#TC_CBQ_OVL_DROP
 3

	)

362 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

363 
	m¥i‹ôy2
;

364 
__u16
 
	m∑d
;

365 
__u32
 
	m≥«…y
;

368 
	stc_cbq_pﬁi˚
 {

369 
	mpﬁi˚
;

370 
	m__ªs1
;

371 
	m__ªs2
;

374 
	stc_cbq_f›t
 {

375 
__u32
 
	m•lô
;

376 
__u32
 
	mdefm≠
;

377 
__u32
 
	mdefch™ge
;

380 
	stc_cbq_x°©s
 {

381 
__u32
 
	mb‹rows
;

382 
__u32
 
	movîa˘i⁄s
;

383 
__s32
 
	mavgidÀ
;

384 
__s32
 
	mundîtime
;

388 
	mTCA_CBQ_UNSPEC
,

389 
	mTCA_CBQ_LSSOPT
,

390 
	mTCA_CBQ_WRROPT
,

391 
	mTCA_CBQ_FOPT
,

392 
	mTCA_CBQ_OVL_STRATEGY
,

393 
	mTCA_CBQ_RATE
,

394 
	mTCA_CBQ_RTAB
,

395 
	mTCA_CBQ_POLICE
,

396 
	m__TCA_CBQ_MAX
,

399 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

404 
	mTCA_DSMARK_UNSPEC
,

405 
	mTCA_DSMARK_INDICES
,

406 
	mTCA_DSMARK_DEFAULT_INDEX
,

407 
	mTCA_DSMARK_SET_TC_INDEX
,

408 
	mTCA_DSMARK_MASK
,

409 
	mTCA_DSMARK_VALUE
,

410 
	m__TCA_DSMARK_MAX
,

413 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

418 
	mTCA_ATM_UNSPEC
,

419 
	mTCA_ATM_FD
,

420 
	mTCA_ATM_PTR
,

421 
	mTCA_ATM_HDR
,

422 
	mTCA_ATM_EXCESS
,

423 
	mTCA_ATM_ADDR
,

424 
	mTCA_ATM_STATE
,

425 
	m__TCA_ATM_MAX
,

428 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

433 
	mTCA_NETEM_UNSPEC
,

434 
	mTCA_NETEM_CORR
,

435 
	mTCA_NETEM_DELAY_DIST
,

436 
	mTCA_NETEM_REORDER
,

437 
	mTCA_NETEM_CORRUPT
,

438 
	m__TCA_NETEM_MAX
,

441 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

443 
	stc_√ãm_q›t
 {

444 
__u32
 
	mœãncy
;

445 
__u32
 
	mlimô
;

446 
__u32
 
	mloss
;

447 
__u32
 
	mg≠
;

448 
__u32
 
	mdu∂iˇã
;

449 
__u32
 
	mjôãr
;

452 
	stc_√ãm_c‹r
 {

453 
__u32
 
	mdñay_c‹r
;

454 
__u32
 
	mloss_c‹r
;

455 
__u32
 
	mdup_c‹r
;

458 
	stc_√ãm_ª‹dî
 {

459 
__u32
 
	m¥obabûôy
;

460 
__u32
 
	mc‹ªœti⁄
;

463 
	stc_√ãm_c‹ru±
 {

464 
__u32
 
	m¥obabûôy
;

465 
__u32
 
	mc‹ªœti⁄
;

468 
	#NETEM_DIST_SCALE
 8192

	)

473 
	mTCA_DRR_UNSPEC
,

474 
	mTCA_DRR_QUANTUM
,

475 
	m__TCA_DRR_MAX


478 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

480 
	stc_dº_°©s
 {

481 
__u32
 
	mdeficô
;

	@/usr/include/linux/random.h

7 #i‚de‡
_LINUX_RANDOM_H


8 
	#_LINUX_RANDOM_H


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/io˘l.h
>

12 
	~<löux/úqƒ.h
>

17 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

20 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

23 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

29 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

32 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

35 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

37 
	sønd_poﬁ_öfo
 {

38 
	míå›y_cou¡
;

39 
	mbuf_size
;

40 
__u32
 
	mbuf
[0];

43 
	s∫d_°©e
 {

44 
__u32
 
	ms1
, 
	ms2
, 
	ms3
;

	@/usr/include/linux/reboot.h

1 #i‚de‡
_LINUX_REBOOT_H


2 
	#_LINUX_REBOOT_H


	)

8 
	#LINUX_REBOOT_MAGIC1
 0x„e1dód

	)

9 
	#LINUX_REBOOT_MAGIC2
 672274793

	)

10 
	#LINUX_REBOOT_MAGIC2A
 85072278

	)

11 
	#LINUX_REBOOT_MAGIC2B
 369367448

	)

12 
	#LINUX_REBOOT_MAGIC2C
 537993216

	)

28 
	#LINUX_REBOOT_CMD_RESTART
 0x01234567

	)

29 
	#LINUX_REBOOT_CMD_HALT
 0xCDEF0123

	)

30 
	#LINUX_REBOOT_CMD_CAD_ON
 0x89ABCDEF

	)

31 
	#LINUX_REBOOT_CMD_CAD_OFF
 0x00000000

	)

32 
	#LINUX_REBOOT_CMD_POWER_OFF
 0x4321FEDC

	)

33 
	#LINUX_REBOOT_CMD_RESTART2
 0xA1B2C3D4

	)

34 
	#LINUX_REBOOT_CMD_SW_SUSPEND
 0xD000FCE2

	)

35 
	#LINUX_REBOOT_CMD_KEXEC
 0x45584543

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_STOPPED
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

42 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

22 
	~<löux/sockë.h
>

24 
	st˝hdr
 {

25 
__be16
 
	msour˚
;

26 
__be16
 
	mde°
;

27 
__be32
 
	m£q
;

28 
__be32
 
	mack_£q
;

29 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

30 
__u16
 
	mªs1
:4,

31 
	mdoff
:4,

32 
	mfö
:1,

33 
	msyn
:1,

34 
	mr°
:1,

35 
	mpsh
:1,

36 
	mack
:1,

37 
	murg
:1,

38 
	me˚
:1,

39 
	mcwr
:1;

40 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

41 
__u16
 
	mdoff
:4,

42 
	mªs1
:4,

43 
	mcwr
:1,

44 
	me˚
:1,

45 
	murg
:1,

46 
	mack
:1,

47 
	mpsh
:1,

48 
	mr°
:1,

49 
	msyn
:1,

50 
	mfö
:1;

54 
__be16
 
	mwödow
;

55 
__sum16
 
	mcheck
;

56 
__be16
 
	murg_±r
;

64 
	ut˝_w‹d_hdr
 {

65 
t˝hdr
 
	mhdr
;

66 
__be32
 
	mw‹ds
[5];

69 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

72 
	mTCP_FLAG_CWR
 = 
__˝u_to_be32
(0x00800000),

73 
	mTCP_FLAG_ECE
 = 
__˝u_to_be32
(0x00400000),

74 
	mTCP_FLAG_URG
 = 
__˝u_to_be32
(0x00200000),

75 
	mTCP_FLAG_ACK
 = 
__˝u_to_be32
(0x00100000),

76 
	mTCP_FLAG_PSH
 = 
__˝u_to_be32
(0x00080000),

77 
	mTCP_FLAG_RST
 = 
__˝u_to_be32
(0x00040000),

78 
	mTCP_FLAG_SYN
 = 
__˝u_to_be32
(0x00020000),

79 
	mTCP_FLAG_FIN
 = 
__˝u_to_be32
(0x00010000),

80 
	mTCP_RESERVED_BITS
 = 
__˝u_to_be32
(0x0F000000),

81 
	mTCP_DATA_OFFSET
 = 
__˝u_to_be32
(0xF0000000)

87 
	#TCP_MSS_DEFAULT
 536U

	)

88 
	#TCP_MSS_DESIRED
 1220U

	)

91 
	#TCP_NODELAY
 1

	)

92 
	#TCP_MAXSEG
 2

	)

93 
	#TCP_CORK
 3

	)

94 
	#TCP_KEEPIDLE
 4

	)

95 
	#TCP_KEEPINTVL
 5

	)

96 
	#TCP_KEEPCNT
 6

	)

97 
	#TCP_SYNCNT
 7

	)

98 
	#TCP_LINGER2
 8

	)

99 
	#TCP_DEFER_ACCEPT
 9

	)

100 
	#TCP_WINDOW_CLAMP
 10

	)

101 
	#TCP_INFO
 11

	)

102 
	#TCP_QUICKACK
 12

	)

103 
	#TCP_CONGESTION
 13

	)

104 
	#TCP_MD5SIG
 14

	)

105 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

106 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

107 
	#TCP_THIN_DUPACK
 17

	)

110 
	#TCPI_OPT_TIMESTAMPS
 1

	)

111 
	#TCPI_OPT_SACK
 2

	)

112 
	#TCPI_OPT_WSCALE
 4

	)

113 
	#TCPI_OPT_ECN
 8

	)

115 
	et˝_ˇ_°©e
 {

116 
	mTCP_CA_O≥n
 = 0,

117 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

118 
	mTCP_CA_Dis‹dî
 = 1,

119 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

120 
	mTCP_CA_CWR
 = 2,

121 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

122 
	mTCP_CA_Recovîy
 = 3,

123 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

124 
	mTCP_CA_Loss
 = 4

125 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

128 
	st˝_öfo
 {

129 
__u8
 
	mt˝i_°©e
;

130 
__u8
 
	mt˝i_ˇ_°©e
;

131 
__u8
 
	mt˝i_ªå™smôs
;

132 
__u8
 
	mt˝i_¥obes
;

133 
__u8
 
	mt˝i_backoff
;

134 
__u8
 
	mt˝i_›ti⁄s
;

135 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

137 
__u32
 
	mt˝i_πo
;

138 
__u32
 
	mt˝i_©o
;

139 
__u32
 
	mt˝i_¢d_mss
;

140 
__u32
 
	mt˝i_rcv_mss
;

142 
__u32
 
	mt˝i_u«cked
;

143 
__u32
 
	mt˝i_ßcked
;

144 
__u32
 
	mt˝i_lo°
;

145 
__u32
 
	mt˝i_ªå™s
;

146 
__u32
 
	mt˝i_Áckës
;

149 
__u32
 
	mt˝i_œ°_d©a_£¡
;

150 
__u32
 
	mt˝i_œ°_ack_£¡
;

151 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

152 
__u32
 
	mt˝i_œ°_ack_ªcv
;

155 
__u32
 
	mt˝i_pmtu
;

156 
__u32
 
	mt˝i_rcv_s°hªsh
;

157 
__u32
 
	mt˝i_πt
;

158 
__u32
 
	mt˝i_πtv¨
;

159 
__u32
 
	mt˝i_¢d_s°hªsh
;

160 
__u32
 
	mt˝i_¢d_cwnd
;

161 
__u32
 
	mt˝i_advmss
;

162 
__u32
 
	mt˝i_ª‹dîög
;

164 
__u32
 
	mt˝i_rcv_πt
;

165 
__u32
 
	mt˝i_rcv_•a˚
;

167 
__u32
 
	mt˝i_tŸÆ_ªå™s
;

171 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

173 
	st˝_md5sig
 {

174 
__kî√l_sockaddr_°‹age
 
	mt˝m_addr
;

175 
__u16
 
	m__t˝m_∑d1
;

176 
__u16
 
	mt˝m_keyÀn
;

177 
__u32
 
	m__t˝m_∑d2
;

178 
__u8
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

182 
	#TCP_COOKIE_MIN
 8

	)

183 
	#TCP_COOKIE_MAX
 16

	)

184 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

187 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

188 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

192 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

193 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

196 
	st˝_cookõ_å™ß˘i⁄s
 {

197 
__u16
 
	mt˝˘_Êags
;

198 
__u8
 
	m__t˝˘_∑d1
;

199 
__u8
 
	mt˝˘_cookõ_desúed
;

200 
__u16
 
	mt˝˘_s_d©a_desúed
;

201 
__u16
 
	mt˝˘_u£d
;

202 
__u8
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/linux/udp.h

17 #i‚de‡
_LINUX_UDP_H


18 
	#_LINUX_UDP_H


	)

20 
	~<löux/ty≥s.h
>

22 
	sudphdr
 {

23 
__be16
 
	msour˚
;

24 
__be16
 
	mde°
;

25 
__be16
 
	mÀn
;

26 
__sum16
 
	mcheck
;

30 
	#UDP_CORK
 1

	)

31 
	#UDP_ENCAP
 100

	)

34 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

35 
	#UDP_ENCAP_ESPINUDP
 2

	)

36 
	#UDP_ENCAP_L2TPINUDP
 3

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132643

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_DONT_BRIDGE
 0x800

	)

74 
	#IFF_IN_NETPOLL
 0x1000

	)

75 
	#IFF_DISABLE_NETPOLL
 0x2000

	)

77 
	#IF_GET_IFACE
 0x0001

	)

78 
	#IF_GET_PROTO
 0x0002

	)

81 
	#IF_IFACE_V35
 0x1000

	)

82 
	#IF_IFACE_V24
 0x1001

	)

83 
	#IF_IFACE_X21
 0x1002

	)

84 
	#IF_IFACE_T1
 0x1003

	)

85 
	#IF_IFACE_E1
 0x1004

	)

86 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

87 
	#IF_IFACE_X21D
 0x1006

	)

90 
	#IF_PROTO_HDLC
 0x2000

	)

91 
	#IF_PROTO_PPP
 0x2001

	)

92 
	#IF_PROTO_CISCO
 0x2002

	)

93 
	#IF_PROTO_FR
 0x2003

	)

94 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

95 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

96 
	#IF_PROTO_X25
 0x2006

	)

97 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

98 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

99 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

100 
	#IF_PROTO_FR_PVC
 0x200A

	)

101 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

102 
	#IF_PROTO_RAW
 0x200C

	)

106 
	mIF_OPER_UNKNOWN
,

107 
	mIF_OPER_NOTPRESENT
,

108 
	mIF_OPER_DOWN
,

109 
	mIF_OPER_LOWERLAYERDOWN
,

110 
	mIF_OPER_TESTING
,

111 
	mIF_OPER_DORMANT
,

112 
	mIF_OPER_UP
,

117 
	mIF_LINK_MODE_DEFAULT
,

118 
	mIF_LINK_MODE_DORMANT
,

131 
	sifm≠
 {

132 
	mmem_°¨t
;

133 
	mmem_íd
;

134 
	mba£_addr
;

135 
	múq
;

136 
	mdma
;

137 
	mp‹t
;

141 
	sif_£âögs
 {

142 
	mty≥
;

143 
	msize
;

146 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

147 
cisco_¥Ÿo
 *
	mcisco
;

148 
‰_¥Ÿo
 *
	m‰
;

149 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

150 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

153 
sync_£rül_£âögs
 *
	msync
;

154 
ã1_£âögs
 *
	mã1
;

155 } 
	mifs_ifsu
;

165 
	si‰eq
 {

166 
	#IFHWADDRLEN
 6

	)

169 
	mi‰n_«me
[
IFNAMSIZ
];

170 } 
	mi‰_i‰n
;

173 
sockaddr
 
	mi‰u_addr
;

174 
sockaddr
 
	mi‰u_d°addr
;

175 
sockaddr
 
	mi‰u_brﬂdaddr
;

176 
sockaddr
 
	mi‰u_√tmask
;

177 
sockaddr
 
	mi‰u_hwaddr
;

178 
	mi‰u_Êags
;

179 
	mi‰u_ivÆue
;

180 
	mi‰u_mtu
;

181 
ifm≠
 
	mi‰u_m≠
;

182 
	mi‰u_¶ave
[
IFNAMSIZ
];

183 
	mi‰u_√w«me
[
IFNAMSIZ
];

184 * 
	mi‰u_d©a
;

185 
if_£âögs
 
	mi‰u_£âögs
;

186 } 
	mi‰_i‰u
;

189 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

190 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

191 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

192 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

193 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

194 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

195 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

196 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

197 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

198 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

199 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

200 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

201 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

202 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

203 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

204 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

205 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

214 
	sifc⁄f
 {

215 
	mifc_Àn
;

217 *
	mifcu_buf
;

218 
i‰eq
 *
	mifcu_ªq
;

219 } 
	mifc_ifcu
;

221 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

222 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

40 
	sπ∆_lök_°©s64
 {

41 
__u64
 
	mrx_∑ckës
;

42 
__u64
 
	mtx_∑ckës
;

43 
__u64
 
	mrx_byãs
;

44 
__u64
 
	mtx_byãs
;

45 
__u64
 
	mrx_îr‹s
;

46 
__u64
 
	mtx_îr‹s
;

47 
__u64
 
	mrx_dr›≥d
;

48 
__u64
 
	mtx_dr›≥d
;

49 
__u64
 
	mmu…iˇ°
;

50 
__u64
 
	mcﬁlisi⁄s
;

53 
__u64
 
	mrx_Àngth_îr‹s
;

54 
__u64
 
	mrx_ovî_îr‹s
;

55 
__u64
 
	mrx_¸c_îr‹s
;

56 
__u64
 
	mrx_‰ame_îr‹s
;

57 
__u64
 
	mrx_fifo_îr‹s
;

58 
__u64
 
	mrx_mis£d_îr‹s
;

61 
__u64
 
	mtx_ab‹ãd_îr‹s
;

62 
__u64
 
	mtx_ˇºõr_îr‹s
;

63 
__u64
 
	mtx_fifo_îr‹s
;

64 
__u64
 
	mtx_hóπbót_îr‹s
;

65 
__u64
 
	mtx_wödow_îr‹s
;

68 
__u64
 
	mrx_com¥es£d
;

69 
__u64
 
	mtx_com¥es£d
;

73 
	sπ∆_lök_ifm≠
 {

74 
__u64
 
	mmem_°¨t
;

75 
__u64
 
	mmem_íd
;

76 
__u64
 
	mba£_addr
;

77 
__u16
 
	múq
;

78 
__u8
 
	mdma
;

79 
__u8
 
	mp‹t
;

83 
	mIFLA_UNSPEC
,

84 
	mIFLA_ADDRESS
,

85 
	mIFLA_BROADCAST
,

86 
	mIFLA_IFNAME
,

87 
	mIFLA_MTU
,

88 
	mIFLA_LINK
,

89 
	mIFLA_QDISC
,

90 
	mIFLA_STATS
,

91 
	mIFLA_COST
,

92 
	#IFLA_COST
 
IFLA_COST


	)

93 
	mIFLA_PRIORITY
,

94 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

95 
	mIFLA_MASTER
,

96 
	#IFLA_MASTER
 
IFLA_MASTER


	)

97 
	mIFLA_WIRELESS
,

98 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

99 
	mIFLA_PROTINFO
,

100 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

101 
	mIFLA_TXQLEN
,

102 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

103 
	mIFLA_MAP
,

104 
	#IFLA_MAP
 
IFLA_MAP


	)

105 
	mIFLA_WEIGHT
,

106 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

107 
	mIFLA_OPERSTATE
,

108 
	mIFLA_LINKMODE
,

109 
	mIFLA_LINKINFO
,

110 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

111 
	mIFLA_NET_NS_PID
,

112 
	mIFLA_IFALIAS
,

113 
	mIFLA_NUM_VF
,

114 
	mIFLA_VFINFO_LIST
,

115 
	mIFLA_STATS64
,

116 
	mIFLA_VF_PORTS
,

117 
	mIFLA_PORT_SELF
,

118 
	m__IFLA_MAX


122 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

125 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

126 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

159 
	mIFLA_INET6_UNSPEC
,

160 
	mIFLA_INET6_FLAGS
,

161 
	mIFLA_INET6_CONF
,

162 
	mIFLA_INET6_STATS
,

163 
	mIFLA_INET6_MCAST
,

164 
	mIFLA_INET6_CACHEINFO
,

165 
	mIFLA_INET6_ICMP6STATS
,

166 
	m__IFLA_INET6_MAX


169 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

171 
	siÊa_ˇcheöfo
 {

172 
__u32
 
	mmax_ªasm_Àn
;

173 
__u32
 
	mt°amp
;

174 
__u32
 
	mªachabÀ_time
;

175 
__u32
 
	mªå™s_time
;

179 
	mIFLA_INFO_UNSPEC
,

180 
	mIFLA_INFO_KIND
,

181 
	mIFLA_INFO_DATA
,

182 
	mIFLA_INFO_XSTATS
,

183 
	m__IFLA_INFO_MAX
,

186 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

191 
	mIFLA_VLAN_UNSPEC
,

192 
	mIFLA_VLAN_ID
,

193 
	mIFLA_VLAN_FLAGS
,

194 
	mIFLA_VLAN_EGRESS_QOS
,

195 
	mIFLA_VLAN_INGRESS_QOS
,

196 
	m__IFLA_VLAN_MAX
,

199 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

201 
	siÊa_vœn_Êags
 {

202 
__u32
 
	mÊags
;

203 
__u32
 
	mmask
;

207 
	mIFLA_VLAN_QOS_UNSPEC
,

208 
	mIFLA_VLAN_QOS_MAPPING
,

209 
	m__IFLA_VLAN_QOS_MAX


212 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

214 
	siÊa_vœn_qos_m≠pög
 {

215 
__u32
 
	m‰om
;

216 
__u32
 
	mto
;

221 
	mIFLA_MACVLAN_UNSPEC
,

222 
	mIFLA_MACVLAN_MODE
,

223 
	m__IFLA_MACVLAN_MAX
,

226 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

228 
	emacvœn_mode
 {

229 
	mMACVLAN_MODE_PRIVATE
 = 1,

230 
	mMACVLAN_MODE_VEPA
 = 2,

231 
	mMACVLAN_MODE_BRIDGE
 = 4,

237 
	mIFLA_VF_INFO_UNSPEC
,

238 
	mIFLA_VF_INFO
,

239 
	m__IFLA_VF_INFO_MAX
,

242 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

245 
	mIFLA_VF_UNSPEC
,

246 
	mIFLA_VF_MAC
,

247 
	mIFLA_VF_VLAN
,

248 
	mIFLA_VF_TX_RATE
,

249 
	m__IFLA_VF_MAX
,

252 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

254 
	siÊa_vf_mac
 {

255 
__u32
 
	mvf
;

256 
__u8
 
	mmac
[32];

259 
	siÊa_vf_vœn
 {

260 
__u32
 
	mvf
;

261 
__u32
 
	mvœn
;

262 
__u32
 
	mqos
;

265 
	siÊa_vf_tx_øã
 {

266 
__u32
 
	mvf
;

267 
__u32
 
	møã
;

270 
	siÊa_vf_öfo
 {

271 
__u32
 
	mvf
;

272 
__u8
 
	mmac
[32];

273 
__u32
 
	mvœn
;

274 
__u32
 
	mqos
;

275 
__u32
 
	mtx_øã
;

294 
	mIFLA_VF_PORT_UNSPEC
,

295 
	mIFLA_VF_PORT
,

296 
	m__IFLA_VF_PORT_MAX
,

299 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

302 
	mIFLA_PORT_UNSPEC
,

303 
	mIFLA_PORT_VF
,

304 
	mIFLA_PORT_PROFILE
,

305 
	mIFLA_PORT_VSI_TYPE
,

306 
	mIFLA_PORT_INSTANCE_UUID
,

307 
	mIFLA_PORT_HOST_UUID
,

308 
	mIFLA_PORT_REQUEST
,

309 
	mIFLA_PORT_RESPONSE
,

310 
	m__IFLA_PORT_MAX
,

313 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

315 
	#PORT_PROFILE_MAX
 40

	)

316 
	#PORT_UUID_MAX
 16

	)

317 
	#PORT_SELF_VF
 -1

	)

320 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

321 
	mPORT_REQUEST_PREASSOCIATE_RR
,

322 
	mPORT_REQUEST_ASSOCIATE
,

323 
	mPORT_REQUEST_DISASSOCIATE
,

327 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

328 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

329 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

330 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

331 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

332 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

333 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

335 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

336 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

337 
	mPORT_PROFILE_RESPONSE_INVALID
,

338 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

339 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

340 
	mPORT_PROFILE_RESPONSE_ERROR
,

343 
	siÊa_p‹t_vsi
 {

344 
__u8
 
	mvsi_mgr_id
;

345 
__u8
 
	mvsi_ty≥_id
[3];

346 
__u8
 
	mvsi_ty≥_vîsi⁄
;

347 
__u8
 
	m∑d
[3];

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

42 
	#PACKET_AUXDATA
 8

	)

43 
	#PACKET_ORIGDEV
 9

	)

44 
	#PACKET_VERSION
 10

	)

45 
	#PACKET_HDRLEN
 11

	)

46 
	#PACKET_RESERVE
 12

	)

47 
	#PACKET_TX_RING
 13

	)

48 
	#PACKET_LOSS
 14

	)

49 
	#PACKET_VNET_HDR
 15

	)

50 
	#PACKET_TX_TIMESTAMP
 16

	)

52 
	sçackë_°©s
 {

53 
	mç_∑ckës
;

54 
	mç_dr›s
;

57 
	sçackë_auxd©a
 {

58 
__u32
 
	mç_°©us
;

59 
__u32
 
	mç_Àn
;

60 
__u32
 
	mç_¢≠Àn
;

61 
__u16
 
	mç_mac
;

62 
__u16
 
	mç_√t
;

63 
__u16
 
	mç_vœn_tci
;

67 
	#TP_STATUS_KERNEL
 0x0

	)

68 
	#TP_STATUS_USER
 0x1

	)

69 
	#TP_STATUS_COPY
 0x2

	)

70 
	#TP_STATUS_LOSING
 0x4

	)

71 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

74 
	#TP_STATUS_AVAILABLE
 0x0

	)

75 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

76 
	#TP_STATUS_SENDING
 0x2

	)

77 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

79 
	sçackë_hdr
 {

80 
	mç_°©us
;

81 
	mç_Àn
;

82 
	mç_¢≠Àn
;

83 
	mç_mac
;

84 
	mç_√t
;

85 
	mç_£c
;

86 
	mç_u£c
;

89 
	#TPACKET_ALIGNMENT
 16

	)

90 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

91 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

93 
	sçackë2_hdr
 {

94 
__u32
 
	mç_°©us
;

95 
__u32
 
	mç_Àn
;

96 
__u32
 
	mç_¢≠Àn
;

97 
__u16
 
	mç_mac
;

98 
__u16
 
	mç_√t
;

99 
__u32
 
	mç_£c
;

100 
__u32
 
	mç_n£c
;

101 
__u16
 
	mç_vœn_tci
;

104 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

106 
	eçackë_vîsi⁄s
 {

107 
	mTPACKET_V1
,

108 
	mTPACKET_V2
,

124 
	sçackë_ªq
 {

125 
	mç_block_size
;

126 
	mç_block_ƒ
;

127 
	mç_‰ame_size
;

128 
	mç_‰ame_ƒ
;

131 
	s∑ckë_mªq
 {

132 
	mmr_ifödex
;

133 
	mmr_ty≥
;

134 
	mmr_Æí
;

135 
	mmr_addªss
[8];

138 
	#PACKET_MR_MULTICAST
 0

	)

139 
	#PACKET_MR_PROMISC
 1

	)

140 
	#PACKET_MR_ALLMULTI
 2

	)

141 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

30 
	sö6_addr
 {

32 
__u8
 
	mu6_addr8
[16];

33 
__be16
 
	mu6_addr16
[8];

34 
__be32
 
	mu6_addr32
[4];

35 } 
	mö6_u
;

36 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

37 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

38 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

46 
	ssockaddr_ö6
 {

47 
	msö6_Ámûy
;

48 
__be16
 
	msö6_p‹t
;

49 
__be32
 
	msö6_Êowöfo
;

50 
ö6_addr
 
	msö6_addr
;

51 
__u32
 
	msö6_sc›e_id
;

54 
	sùv6_mªq
 {

56 
ö6_addr
 
	mùv6mr_mu…üddr
;

59 
	mùv6mr_ifödex
;

62 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

64 
	sö6_Êowœbñ_ªq
 {

65 
ö6_addr
 
	mÊr_d°
;

66 
__be32
 
	mÊr_œbñ
;

67 
__u8
 
	mÊr_a˘i⁄
;

68 
__u8
 
	mÊr_sh¨e
;

69 
__u16
 
	mÊr_Êags
;

70 
__u16
 
	mÊr_expúes
;

71 
__u16
 
	mÊr_lögî
;

72 
__u32
 
	m__Êr_∑d
;

76 
	#IPV6_FL_A_GET
 0

	)

77 
	#IPV6_FL_A_PUT
 1

	)

78 
	#IPV6_FL_A_RENEW
 2

	)

80 
	#IPV6_FL_F_CREATE
 1

	)

81 
	#IPV6_FL_F_EXCL
 2

	)

83 
	#IPV6_FL_S_NONE
 0

	)

84 
	#IPV6_FL_S_EXCL
 1

	)

85 
	#IPV6_FL_S_PROCESS
 2

	)

86 
	#IPV6_FL_S_USER
 3

	)

87 
	#IPV6_FL_S_ANY
 255

	)

98 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

99 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

102 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

103 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

104 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

105 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

106 
	#IPV6_PRIORITY_BULK
 0x0400

	)

107 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

108 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

109 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

110 
	#IPV6_PRIORITY_8
 0x0800

	)

111 
	#IPV6_PRIORITY_9
 0x0900

	)

112 
	#IPV6_PRIORITY_10
 0x0a00

	)

113 
	#IPV6_PRIORITY_11
 0x0b00

	)

114 
	#IPV6_PRIORITY_12
 0x0c00

	)

115 
	#IPV6_PRIORITY_13
 0x0d00

	)

116 
	#IPV6_PRIORITY_14
 0x0e00

	)

117 
	#IPV6_PRIORITY_15
 0x0f00

	)

122 
	#IPPROTO_HOPOPTS
 0

	)

123 
	#IPPROTO_ROUTING
 43

	)

124 
	#IPPROTO_FRAGMENT
 44

	)

125 
	#IPPROTO_ICMPV6
 58

	)

126 
	#IPPROTO_NONE
 59

	)

127 
	#IPPROTO_DSTOPTS
 60

	)

128 
	#IPPROTO_MH
 135

	)

133 
	#IPV6_TLV_PAD0
 0

	)

134 
	#IPV6_TLV_PADN
 1

	)

135 
	#IPV6_TLV_ROUTERALERT
 5

	)

136 
	#IPV6_TLV_JUMBO
 194

	)

137 
	#IPV6_TLV_HAO
 201

	)

143 
	#IPV6_ADDRFORM
 1

	)

144 
	#IPV6_2292PKTINFO
 2

	)

145 
	#IPV6_2292HOPOPTS
 3

	)

146 
	#IPV6_2292DSTOPTS
 4

	)

147 
	#IPV6_2292RTHDR
 5

	)

148 
	#IPV6_2292PKTOPTIONS
 6

	)

149 
	#IPV6_CHECKSUM
 7

	)

150 
	#IPV6_2292HOPLIMIT
 8

	)

151 
	#IPV6_NEXTHOP
 9

	)

152 
	#IPV6_AUTHHDR
 10

	)

153 
	#IPV6_FLOWINFO
 11

	)

155 
	#IPV6_UNICAST_HOPS
 16

	)

156 
	#IPV6_MULTICAST_IF
 17

	)

157 
	#IPV6_MULTICAST_HOPS
 18

	)

158 
	#IPV6_MULTICAST_LOOP
 19

	)

159 
	#IPV6_ADD_MEMBERSHIP
 20

	)

160 
	#IPV6_DROP_MEMBERSHIP
 21

	)

161 
	#IPV6_ROUTER_ALERT
 22

	)

162 
	#IPV6_MTU_DISCOVER
 23

	)

163 
	#IPV6_MTU
 24

	)

164 
	#IPV6_RECVERR
 25

	)

165 
	#IPV6_V6ONLY
 26

	)

166 
	#IPV6_JOIN_ANYCAST
 27

	)

167 
	#IPV6_LEAVE_ANYCAST
 28

	)

170 
	#IPV6_PMTUDISC_DONT
 0

	)

171 
	#IPV6_PMTUDISC_WANT
 1

	)

172 
	#IPV6_PMTUDISC_DO
 2

	)

173 
	#IPV6_PMTUDISC_PROBE
 3

	)

176 
	#IPV6_FLOWLABEL_MGR
 32

	)

177 
	#IPV6_FLOWINFO_SEND
 33

	)

179 
	#IPV6_IPSEC_POLICY
 34

	)

180 
	#IPV6_XFRM_POLICY
 35

	)

201 
	#IPV6_RECVPKTINFO
 49

	)

202 
	#IPV6_PKTINFO
 50

	)

203 
	#IPV6_RECVHOPLIMIT
 51

	)

204 
	#IPV6_HOPLIMIT
 52

	)

205 
	#IPV6_RECVHOPOPTS
 53

	)

206 
	#IPV6_HOPOPTS
 54

	)

207 
	#IPV6_RTHDRDSTOPTS
 55

	)

208 
	#IPV6_RECVRTHDR
 56

	)

209 
	#IPV6_RTHDR
 57

	)

210 
	#IPV6_RECVDSTOPTS
 58

	)

211 
	#IPV6_DSTOPTS
 59

	)

212 
	#IPV6_RECVPATHMTU
 60

	)

213 
	#IPV6_PATHMTU
 61

	)

214 
	#IPV6_DONTFRAG
 62

	)

216 
	#IPV6_USE_MIN_MTU
 63

	)

232 
	#IPV6_RECVTCLASS
 66

	)

233 
	#IPV6_TCLASS
 67

	)

246 
	#IPV6_ADDR_PREFERENCES
 72

	)

248 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

249 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

250 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

251 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

252 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

253 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

254 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

257 
	#IPV6_MINHOPCOUNT
 73

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/irqnr.h

1 #i‚de‡
_LINUX_IRQNR_H


2 
	#_LINUX_IRQNR_H


	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_VENDOR_ID
 0x00

	)

30 
	#PCI_DEVICE_ID
 0x02

	)

31 
	#PCI_COMMAND
 0x04

	)

32 
	#PCI_COMMAND_IO
 0x1

	)

33 
	#PCI_COMMAND_MEMORY
 0x2

	)

34 
	#PCI_COMMAND_MASTER
 0x4

	)

35 
	#PCI_COMMAND_SPECIAL
 0x8

	)

36 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

37 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

38 
	#PCI_COMMAND_PARITY
 0x40

	)

39 
	#PCI_COMMAND_WAIT
 0x80

	)

40 
	#PCI_COMMAND_SERR
 0x100

	)

41 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

42 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

44 
	#PCI_STATUS
 0x06

	)

45 
	#PCI_STATUS_INTERRUPT
 0x08

	)

46 
	#PCI_STATUS_CAP_LIST
 0x10

	)

47 
	#PCI_STATUS_66MHZ
 0x20

	)

48 
	#PCI_STATUS_UDF
 0x40

	)

49 
	#PCI_STATUS_FAST_BACK
 0x80

	)

50 
	#PCI_STATUS_PARITY
 0x100

	)

51 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

52 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

53 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

54 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

55 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

56 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

57 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

58 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

59 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

61 
	#PCI_CLASS_REVISION
 0x08

	)

62 
	#PCI_REVISION_ID
 0x08

	)

63 
	#PCI_CLASS_PROG
 0x09

	)

64 
	#PCI_CLASS_DEVICE
 0x0®

	)

66 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

67 
	#PCI_LATENCY_TIMER
 0x0d

	)

68 
	#PCI_HEADER_TYPE
 0x0ê

	)

69 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

70 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

71 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

73 
	#PCI_BIST
 0x0‡

	)

74 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

75 
	#PCI_BIST_START
 0x40

	)

76 
	#PCI_BIST_CAPABLE
 0x80

	)

84 
	#PCI_BASE_ADDRESS_0
 0x10

	)

85 
	#PCI_BASE_ADDRESS_1
 0x14

	)

86 
	#PCI_BASE_ADDRESS_2
 0x18

	)

87 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

88 
	#PCI_BASE_ADDRESS_4
 0x20

	)

89 
	#PCI_BASE_ADDRESS_5
 0x24

	)

90 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

91 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

93 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

97 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

98 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

99 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

103 
	#PCI_CARDBUS_CIS
 0x28

	)

104 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

105 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

106 
	#PCI_ROM_ADDRESS
 0x30

	)

107 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

108 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

110 
	#PCI_CAPABILITY_LIST
 0x34

	)

113 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

114 
	#PCI_INTERRUPT_PIN
 0x3d

	)

115 
	#PCI_MIN_GNT
 0x3ê

	)

116 
	#PCI_MAX_LAT
 0x3‡

	)

119 
	#PCI_PRIMARY_BUS
 0x18

	)

120 
	#PCI_SECONDARY_BUS
 0x19

	)

121 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

122 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

123 
	#PCI_IO_BASE
 0x1¯

	)

124 
	#PCI_IO_LIMIT
 0x1d

	)

125 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

126 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

127 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

128 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

129 
	#PCI_SEC_STATUS
 0x1ê

	)

130 
	#PCI_MEMORY_BASE
 0x20

	)

131 
	#PCI_MEMORY_LIMIT
 0x22

	)

132 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

133 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

134 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

135 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

136 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

137 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

138 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

139 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

140 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

141 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

142 
	#PCI_IO_BASE_UPPER16
 0x30

	)

143 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

146 
	#PCI_ROM_ADDRESS1
 0x38

	)

148 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

149 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

150 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

151 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

152 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

153 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

154 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

155 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

158 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

160 
	#PCI_CB_SEC_STATUS
 0x16

	)

161 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

162 
	#PCI_CB_CARD_BUS
 0x19

	)

163 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

164 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

165 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

166 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

167 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

168 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

169 
	#PCI_CB_IO_BASE_0
 0x2c

	)

170 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

171 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

172 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

173 
	#PCI_CB_IO_BASE_1
 0x34

	)

174 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

175 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

176 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

177 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

179 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

180 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

181 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

182 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

183 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

184 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

185 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

186 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

187 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

188 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

189 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

190 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

191 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

192 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

197 
	#PCI_CAP_LIST_ID
 0

	)

198 
	#PCI_CAP_ID_PM
 0x01

	)

199 
	#PCI_CAP_ID_AGP
 0x02

	)

200 
	#PCI_CAP_ID_VPD
 0x03

	)

201 
	#PCI_CAP_ID_SLOTID
 0x04

	)

202 
	#PCI_CAP_ID_MSI
 0x05

	)

203 
	#PCI_CAP_ID_CHSWP
 0x06

	)

204 
	#PCI_CAP_ID_PCIX
 0x07

	)

205 
	#PCI_CAP_ID_HT
 0x08

	)

206 
	#PCI_CAP_ID_VNDR
 0x09

	)

207 
	#PCI_CAP_ID_DBG
 0x0A

	)

208 
	#PCI_CAP_ID_CCRC
 0x0B

	)

209 
	#PCI_CAP_ID_SHPC
 0x0C

	)

210 
	#PCI_CAP_ID_SSVID
 0x0D

	)

211 
	#PCI_CAP_ID_AGP3
 0x0E

	)

212 
	#PCI_CAP_ID_EXP
 0x10

	)

213 
	#PCI_CAP_ID_MSIX
 0x11

	)

214 
	#PCI_CAP_ID_AF
 0x13

	)

215 
	#PCI_CAP_LIST_NEXT
 1

	)

216 
	#PCI_CAP_FLAGS
 2

	)

217 
	#PCI_CAP_SIZEOF
 4

	)

221 
	#PCI_PM_PMC
 2

	)

222 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

223 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

224 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

225 
	#PCI_PM_CAP_DSI
 0x0020

	)

226 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

227 
	#PCI_PM_CAP_D1
 0x0200

	)

228 
	#PCI_PM_CAP_D2
 0x0400

	)

229 
	#PCI_PM_CAP_PME
 0x0800

	)

230 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

231 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

232 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

233 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

234 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

235 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

236 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

237 
	#PCI_PM_CTRL
 4

	)

238 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

239 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

240 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

241 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

242 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

243 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

244 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

245 
	#PCI_PM_PPB_B2_B3
 0x40

	)

246 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

247 
	#PCI_PM_DATA_REGISTER
 7

	)

248 
	#PCI_PM_SIZEOF
 8

	)

252 
	#PCI_AGP_VERSION
 2

	)

253 
	#PCI_AGP_RFU
 3

	)

254 
	#PCI_AGP_STATUS
 4

	)

255 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

256 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

257 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

258 
	#PCI_AGP_STATUS_FW
 0x0010

	)

259 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

260 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

261 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

262 
	#PCI_AGP_COMMAND
 8

	)

263 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

264 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

265 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

266 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

267 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

268 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

269 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

270 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

271 
	#PCI_AGP_SIZEOF
 12

	)

275 
	#PCI_VPD_ADDR
 2

	)

276 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

277 
	#PCI_VPD_ADDR_F
 0x8000

	)

278 
	#PCI_VPD_DATA
 4

	)

282 
	#PCI_SID_ESR
 2

	)

283 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

284 
	#PCI_SID_ESR_FIC
 0x20

	)

285 
	#PCI_SID_CHASSIS_NR
 3

	)

289 
	#PCI_MSI_FLAGS
 2

	)

290 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

291 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

292 
	#PCI_MSI_FLAGS_QMASK
 0x0ê

	)

293 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

294 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

295 
	#PCI_MSI_RFU
 3

	)

296 
	#PCI_MSI_ADDRESS_LO
 4

	)

297 
	#PCI_MSI_ADDRESS_HI
 8

	)

298 
	#PCI_MSI_DATA_32
 8

	)

299 
	#PCI_MSI_MASK_32
 12

	)

300 
	#PCI_MSI_DATA_64
 12

	)

301 
	#PCI_MSI_MASK_64
 16

	)

304 
	#PCI_MSIX_FLAGS
 2

	)

305 
	#PCI_MSIX_FLAGS_QSIZE
 0x7FF

	)

306 
	#PCI_MSIX_FLAGS_ENABLE
 (1 << 15)

	)

307 
	#PCI_MSIX_FLAGS_MASKALL
 (1 << 14)

	)

308 
	#PCI_MSIX_FLAGS_BIRMASK
 (7 << 0)

	)

312 
	#PCI_CHSWP_CSR
 2

	)

313 
	#PCI_CHSWP_DHA
 0x01

	)

314 
	#PCI_CHSWP_EIM
 0x02

	)

315 
	#PCI_CHSWP_PIE
 0x04

	)

316 
	#PCI_CHSWP_LOO
 0x08

	)

317 
	#PCI_CHSWP_PI
 0x30

	)

318 
	#PCI_CHSWP_EXT
 0x40

	)

319 
	#PCI_CHSWP_INS
 0x80

	)

323 
	#PCI_AF_LENGTH
 2

	)

324 
	#PCI_AF_CAP
 3

	)

325 
	#PCI_AF_CAP_TP
 0x01

	)

326 
	#PCI_AF_CAP_FLR
 0x02

	)

327 
	#PCI_AF_CTRL
 4

	)

328 
	#PCI_AF_CTRL_FLR
 0x01

	)

329 
	#PCI_AF_STATUS
 5

	)

330 
	#PCI_AF_STATUS_TP
 0x01

	)

334 
	#PCI_X_CMD
 2

	)

335 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

336 
	#PCI_X_CMD_ERO
 0x0002

	)

337 
	#PCI_X_CMD_READ_512
 0x0000

	)

338 
	#PCI_X_CMD_READ_1K
 0x0004

	)

339 
	#PCI_X_CMD_READ_2K
 0x0008

	)

340 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

341 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

343 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

344 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

345 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

346 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

347 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

348 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

349 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

350 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

351 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

352 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

353 
	#PCI_X_STATUS
 4

	)

354 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

355 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

356 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

357 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

358 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

359 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

360 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

361 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

362 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

363 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

364 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

365 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

366 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

370 
	#PCI_SSVID_VENDOR_ID
 4

	)

371 
	#PCI_SSVID_DEVICE_ID
 6

	)

375 
	#PCI_EXP_FLAGS
 2

	)

376 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

377 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

378 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

379 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

380 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

381 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

382 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

383 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

384 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

385 
	#PCI_EXP_TYPE_RC_EC
 0x10

	)

386 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

387 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

388 
	#PCI_EXP_DEVCAP
 4

	)

389 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

390 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

391 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

392 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

393 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

394 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

395 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

396 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

397 
	#PCI_EXP_DEVCAP_RBER
 0x8000

	)

398 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

399 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

400 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

401 
	#PCI_EXP_DEVCTL
 8

	)

402 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

403 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

404 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

405 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

406 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

407 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

408 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

409 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

410 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

411 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

412 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

413 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

414 
	#PCI_EXP_DEVSTA
 10

	)

415 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

416 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

417 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

418 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

419 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

420 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

421 
	#PCI_EXP_LNKCAP
 12

	)

422 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

423 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

424 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

425 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

426 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

427 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

428 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

429 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

430 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

431 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

432 
	#PCI_EXP_LNKCTL
 16

	)

433 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

434 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

435 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

436 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

437 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

438 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

439 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x100

	)

440 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

441 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

442 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

443 
	#PCI_EXP_LNKSTA
 18

	)

444 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

445 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x01

	)

446 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x02

	)

447 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

448 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

449 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

450 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

451 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

452 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

453 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

454 
	#PCI_EXP_SLTCAP
 20

	)

455 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

456 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

457 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

458 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

459 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

460 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

461 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

462 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

463 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

464 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

465 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

466 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

467 
	#PCI_EXP_SLTCTL
 24

	)

468 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

469 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

470 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

471 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

472 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

473 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

474 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

475 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

476 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

477 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

478 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

479 
	#PCI_EXP_SLTSTA
 26

	)

480 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

481 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

482 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

483 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

484 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

485 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

486 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

487 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

488 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

489 
	#PCI_EXP_RTCTL
 28

	)

490 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

491 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

492 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

493 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

494 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

495 
	#PCI_EXP_RTCAP
 30

	)

496 
	#PCI_EXP_RTSTA
 32

	)

497 
	#PCI_EXP_DEVCAP2
 36

	)

498 
	#PCI_EXP_DEVCAP2_ARI
 0x20

	)

499 
	#PCI_EXP_DEVCTL2
 40

	)

500 
	#PCI_EXP_DEVCTL2_ARI
 0x20

	)

501 
	#PCI_EXP_LNKCTL2
 48

	)

502 
	#PCI_EXP_SLTCTL2
 56

	)

505 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

506 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

507 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

509 
	#PCI_EXT_CAP_ID_ERR
 1

	)

510 
	#PCI_EXT_CAP_ID_VC
 2

	)

511 
	#PCI_EXT_CAP_ID_DSN
 3

	)

512 
	#PCI_EXT_CAP_ID_PWR
 4

	)

513 
	#PCI_EXT_CAP_ID_VNDR
 11

	)

514 
	#PCI_EXT_CAP_ID_ACS
 13

	)

515 
	#PCI_EXT_CAP_ID_ARI
 14

	)

516 
	#PCI_EXT_CAP_ID_ATS
 15

	)

517 
	#PCI_EXT_CAP_ID_SRIOV
 16

	)

520 
	#PCI_ERR_UNCOR_STATUS
 4

	)

521 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

522 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

523 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

524 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

525 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

526 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

527 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

528 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

529 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

530 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

531 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

532 
	#PCI_ERR_UNCOR_MASK
 8

	)

534 
	#PCI_ERR_UNCOR_SEVER
 12

	)

536 
	#PCI_ERR_COR_STATUS
 16

	)

537 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

538 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

539 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

540 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

541 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

542 
	#PCI_ERR_COR_MASK
 20

	)

544 
	#PCI_ERR_CAP
 24

	)

545 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

546 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

547 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

548 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

549 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

550 
	#PCI_ERR_HEADER_LOG
 28

	)

551 
	#PCI_ERR_ROOT_COMMAND
 44

	)

553 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

555 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

557 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

558 
	#PCI_ERR_ROOT_STATUS
 48

	)

559 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

561 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

563 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

565 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

566 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

567 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

568 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

569 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

572 
	#PCI_VC_PORT_REG1
 4

	)

573 
	#PCI_VC_PORT_REG2
 8

	)

574 
	#PCI_VC_PORT_CTRL
 12

	)

575 
	#PCI_VC_PORT_STATUS
 14

	)

576 
	#PCI_VC_RES_CAP
 16

	)

577 
	#PCI_VC_RES_CTRL
 20

	)

578 
	#PCI_VC_RES_STATUS
 26

	)

581 
	#PCI_PWR_DSR
 4

	)

582 
	#PCI_PWR_DATA
 8

	)

583 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

584 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

585 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

586 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

587 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

588 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

589 
	#PCI_PWR_CAP
 12

	)

590 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

600 
	#HT_3BIT_CAP_MASK
 0xE0

	)

601 
	#HT_CAPTYPE_SLAVE
 0x00

	)

602 
	#HT_CAPTYPE_HOST
 0x20

	)

604 
	#HT_5BIT_CAP_MASK
 0xF8

	)

605 
	#HT_CAPTYPE_IRQ
 0x80

	)

606 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

607 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

608 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

609 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

610 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

611 
	#HT_MSI_FLAGS
 0x02

	)

612 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

613 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

614 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

615 
	#HT_MSI_ADDR_LO
 0x04

	)

616 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

617 
	#HT_MSI_ADDR_HI
 0x08

	)

618 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

619 
	#HT_CAPTYPE_VCSET
 0xB8

	)

620 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

621 
	#HT_CAPTYPE_GEN3
 0xD0

	)

622 
	#HT_CAPTYPE_PM
 0xE0

	)

625 
	#PCI_ARI_CAP
 0x04

	)

626 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

627 
	#PCI_ARI_CAP_ACS
 0x0002

	)

628 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

629 
	#PCI_ARI_CTRL
 0x06

	)

630 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

631 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

632 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

635 
	#PCI_ATS_CAP
 0x04

	)

636 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

637 
	#PCI_ATS_MAX_QDEP
 32

	)

638 
	#PCI_ATS_CTRL
 0x06

	)

639 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

640 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

641 
	#PCI_ATS_MIN_STU
 12

	)

644 
	#PCI_SRIOV_CAP
 0x04

	)

645 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

646 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

647 
	#PCI_SRIOV_CTRL
 0x08

	)

648 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

649 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

650 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

651 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

652 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

653 
	#PCI_SRIOV_STATUS
 0x0®

	)

654 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

655 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

656 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

657 
	#PCI_SRIOV_NUM_VF
 0x10

	)

658 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

659 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

660 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

661 
	#PCI_SRIOV_VF_DID
 0x1®

	)

662 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

663 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

664 
	#PCI_SRIOV_BAR
 0x24

	)

665 
	#PCI_SRIOV_NUM_BARS
 6

	)

666 
	#PCI_SRIOV_VFM
 0x3¯

	)

667 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

668 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

669 
	#PCI_SRIOV_VFM_UA
 0x0

	)

670 
	#PCI_SRIOV_VFM_MI
 0x1

	)

671 
	#PCI_SRIOV_VFM_MO
 0x2

	)

672 
	#PCI_SRIOV_VFM_AV
 0x3

	)

675 
	#PCI_ACS_CAP
 0x04

	)

676 
	#PCI_ACS_SV
 0x01

	)

677 
	#PCI_ACS_TB
 0x02

	)

678 
	#PCI_ACS_RR
 0x04

	)

679 
	#PCI_ACS_CR
 0x08

	)

680 
	#PCI_ACS_UF
 0x10

	)

681 
	#PCI_ACS_EC
 0x20

	)

682 
	#PCI_ACS_DT
 0x40

	)

683 
	#PCI_ACS_CTRL
 0x06

	)

684 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__¨ch_swab16


49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #ifde‡
__¨ch_swab32


58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #ifde‡
__¨ch_swab64


67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 
	#__swab16
(
x
) \

100 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

101 
	`___c⁄°™t_swab16
(
x
) : \

102 
	`__fswab16
(
x
))

	)

108 
	#__swab32
(
x
) \

109 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

110 
	`___c⁄°™t_swab32
(
x
) : \

111 
	`__fswab32
(
x
))

	)

117 
	#__swab64
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

119 
	`___c⁄°™t_swab64
(
x
) : \

120 
	`__fswab64
(
x
))

	)

128 
	#__swahw32
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

130 
	`___c⁄°™t_swahw32
(
x
) : \

131 
	`__fswahw32
(
x
))

	)

139 
	#__swahb32
(
x
) \

140 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

141 
	`___c⁄°™t_swahb32
(
x
) : \

142 
	`__fswahb32
(
x
))

	)

148 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

150 #ifde‡
__¨ch_swab16p


151  
	`__¨ch_swab16p
(
p
);

153  
	`__swab16
(*
p
);

155 
	}
}

161 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

163 #ifde‡
__¨ch_swab32p


164  
	`__¨ch_swab32p
(
p
);

166  
	`__swab32
(*
p
);

168 
	}
}

174 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

176 #ifde‡
__¨ch_swab64p


177  
	`__¨ch_swab64p
(
p
);

179  
	`__swab64
(*
p
);

181 
	}
}

189 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

191 #ifde‡
__¨ch_swahw32p


192  
	`__¨ch_swahw32p
(
p
);

194  
	`__swahw32
(*
p
);

196 
	}
}

204 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

206 #ifde‡
__¨ch_swahb32p


207  
	`__¨ch_swahb32p
(
p
);

209  
	`__swahb32
(*
p
);

211 
	}
}

217 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

219 #ifde‡
__¨ch_swab16s


220 
	`__¨ch_swab16s
(
p
);

222 *
p
 = 
	`__swab16p
(p);

224 
	}
}

229 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

231 #ifde‡
__¨ch_swab32s


232 
	`__¨ch_swab32s
(
p
);

234 *
p
 = 
	`__swab32p
(p);

236 
	}
}

242 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

244 #ifde‡
__¨ch_swab64s


245 
	`__¨ch_swab64s
(
p
);

247 *
p
 = 
	`__swab64p
(p);

249 
	}
}

257 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

259 #ifde‡
__¨ch_swahw32s


260 
	`__¨ch_swahw32s
(
p
);

262 *
p
 = 
	`__swahw32p
(p);

264 
	}
}

272 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

274 #ifde‡
__¨ch_swahb32s


275 
	`__¨ch_swahb32s
(
p
);

277 *
p
 = 
	`__swahb32p
(p);

279 
	}
}

	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 #ifde‡
__i386__


10 #ifde‡
CONFIG_X86_BSWAP


11 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

13 
	`__asm__
("xchgb %b0,%h0\n\t"

16 : "=q" (
vÆ
)

17 : "0" (
vÆ
));

21 
	`__asm__
("bswapl %0"

22 : "Ù" (
vÆ
)

23 : "0" (
vÆ
));

25  
vÆ
;

26 
	}
}

27 
	#__¨ch_swab32
 
__¨ch_swab32


	)

29 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

31 #ifde‡
__i386__


34 
__u32
 
a
;

35 
__u32
 
b
;

36 } 
s
;

37 
__u64
 
u
;

38 } 
v
;

39 
v
.
u
 = 
vÆ
;

40 #ifde‡
CONFIG_X86_BSWAP


41 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

42 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

43 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

45 
v
.
s
.
a
 = 
	`__¨ch_swab32
(v.s.a);

46 
v
.
s
.
b
 = 
	`__¨ch_swab32
(v.s.b);

47 
	`__asm__
("xchgl %0,%1"

48 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

49 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

51  
v
.
u
;

53 
	`__asm__
("bswapq %0"

54 : "Ù" (
vÆ
)

55 : "0" (
vÆ
));

56  
vÆ
;

58 
	}
}

59 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_ÁnŸify_öô


	)

15 
	#__°ub_ÁnŸify_m¨k


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gây


	)

20 
	#__°ub_lchmod


	)

21 
	#__°ub_¥limô


	)

22 
	#__°ub_¥limô64


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_ÁnŸify_öô


	)

13 
	#__°ub_ÁnŸify_m¨k


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_¥limô


	)

21 
	#__°ub_¥limô64


	)

22 
	#__°ub_putmsg


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@
1
.
1
/usr/include
108
2626
ixgbe.h
ixgbe_82598.c
ixgbe_82599.c
ixgbe_api.c
ixgbe_api.h
ixgbe_common.c
ixgbe_common.h
ixgbe_dcb.c
ixgbe_dcb.h
ixgbe_dcb_82598.c
ixgbe_dcb_82598.h
ixgbe_dcb_82599.c
ixgbe_dcb_82599.h
ixgbe_dcb_nl.c
ixgbe_ethtool.c
ixgbe_fcoe.c
ixgbe_fcoe.h
ixgbe_main.c
ixgbe_osdep.h
ixgbe_param.c
ixgbe_phy.c
ixgbe_phy.h
ixgbe_sysfs.c
ixgbe_type.h
kcompat.c
kcompat.h
kcompat_ethtool.c
../include/ps.h
/usr/include/linux/dcbnl.h
/usr/include/linux/errno.h
/usr/include/linux/ethtool.h
/usr/include/linux/genetlink.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_vlan.h
/usr/include/linux/in.h
/usr/include/linux/ip.h
/usr/include/linux/ipv6.h
/usr/include/linux/mii.h
/usr/include/linux/netdevice.h
/usr/include/linux/netlink.h
/usr/include/linux/pci.h
/usr/include/linux/pkt_sched.h
/usr/include/linux/random.h
/usr/include/linux/reboot.h
/usr/include/linux/sched.h
/usr/include/linux/string.h
/usr/include/linux/tcp.h
/usr/include/linux/types.h
/usr/include/linux/udp.h
/usr/include/linux/version.h
/usr/include/asm/byteorder.h
/usr/include/asm/errno.h
/usr/include/asm/types.h
/usr/include/linux/if.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/in6.h
/usr/include/linux/ioctl.h
/usr/include/linux/irqnr.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/stdint.h
/usr/include/string.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/stddef.h
/usr/include/xlocale.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/linux/swab.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/swab.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/typesizes.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/sys/types.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
